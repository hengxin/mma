(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    881713,      17767]
NotebookOptionsPosition[    755420,      15749]
NotebookOutlinePosition[    815221,      16857]
CellTagsIndexPosition[    814510,      16836]
WindowTitle->Working With Data
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar", "FirstSlide",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"ae861ed8-5fa1-4088-84fd-2651cc7b368a"],

Cell[BoxData[
 StyleBox[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
/w/qQILY
     "], {{0, 100}, {450, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{268.015625, Automatic},
   ImageSizeRaw->{450, 100},
   PlotRange->{{0, 450}, {0, 100}}], "Title"]], "Title",
 CellChangeTimes->{3.785141470231607*^9, 
  3.785141924332955*^9},ExpressionUUID->"059f49ae-49fc-4f44-80e6-\
ab700841b96e"],

Cell[TextData[StyleBox["Wolfram Language Basics",
 FontTracking->-0.75]], "Title",
 CellChangeTimes->{{3.720193284509671*^9, 3.720193288595942*^9}, {
   3.726941915180914*^9, 3.726941915962871*^9}, 3.72805557420755*^9, {
   3.730591596400971*^9, 3.7305915992067432`*^9}, {3.785144430726679*^9, 
   3.7851444313967543`*^9}, {3.812802882143258*^9, 3.812802882905703*^9}, {
   3.814892360443033*^9, 3.814892372895254*^9}, 
   3.821008205679282*^9},ExpressionUUID->"1243965a-40ce-482a-9c91-\
36878f955d76"],

Cell["working with data", "Subtitle",
 CellChangeTimes->{{3.7201933391803827`*^9, 3.720193342066636*^9}, {
   3.726941908757318*^9, 3.7269419228992167`*^9}, {3.727530497787223*^9, 
   3.72753049862645*^9}, 3.728055577046837*^9, {3.730591604782598*^9, 
   3.73059161531714*^9}, {3.814892398152801*^9, 3.814892406904223*^9}, 
   3.8148924864887667`*^9, {3.821008208649774*^9, 
   3.82100821328176*^9}},ExpressionUUID->"abd2714b-c40b-491d-9b98-\
1f3d249655e3"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
5kdC5ES3Zq8rOUFOdGGpY9wYM2vWPzo4pHx+TW2snKgxzYlOx8XSdpq9rpIT
hZET5ERjSzV+Flwo7OaJWhN1iONdY671rK+zFjkxfrPXVXICjICl9rFjsHnk
hDX8VlOOiwIfUl+Dvm1gnDjYhSGnPPqa7HObP1iKnOjW7HW1nCiu+4NsS5AT
XZrlxSx8mp3XPpY4dZ0NiRNmHsR6qPn2N2vVPiO27dd1Iie6NXtdzdr2GCfy
IBlBTvRtuNef3Nnex6GM3HOe9GkD48R9Mb+div3Z7zRjs9dVciK1b401cE1a
6vqQE+FmYxn2OXy+bX9Ys3PA8bocq0RfMA5OmHkRaw4W7Db/5fYV5OlAv1Px
ng1yYjZmrys5QU7QhmcD4sSCntdizaxhC4bYfqVTdizCZGdu4D32uCZG4eSE
7eektTc55j03Tmi/X9w7lAZ/G2v2vTB9DHKCNmQbCicQ+8S+Yg6EtWXLBMOK
m7TfV+ug7xbbb/FxgupHuXHC52+1Hf3i32z/16b3ldyYdb3JCVofNgROgA12
X71ugcz1Wvj7+8EKzI/EdqyHjraG3B/x6+J39C6MgUa7g5yYrXLhhGwzaB78
3Rf+15TZba7XfCYZotsb5ARtaDYETsRYbKybnJitUnPC8sHHBevbi3uMyYsn
jk5OLz0/OXf6+5MLZ38yeXV9ZfL6q+uTN17bfNP/Fo+xDa9hn7M/Wpr8+IVv
Tl44/lW0gXe0OXT/VFfcICdofdoQOWHaC6dcZmIVztdcVpS3TE7MTrPihIwJ
SDZYvy3ZgO0njz46eekHp0rfCp/aVe7d0j+/fLpkB46h+6ZcMQ5ygpabDZET
GKeEfiX0R2krXr/Vtd1npl8K8+12S4MvQ9+U3u4z0491g+91V67BGV1b1O3m
XMzEhPY74ky9mOSDbjfgnh9tBdk+6NvQ9kCb4zuLTzljIU1ZQU7Q+rShcsL4
dtd9ZFdzLJZi1sY1+y75XvetczGDa3si9BzGYrr9INmAviC0G+CvU6/zgTqg
Xwt18sXCyQlaDpY7Jwr/e8mxfbnYfm+o38fcimL7SU/Z+5E3PoITy4uONRDJ
iTwMjHDxAX0+qz/7Yad9Sl32TaFuaGPY+lsLjWGQE7Q+bQCcwNq0K2LbCYxj
wvv0WCa7v1l/aNvf2z6f4vEeyQg71vbYEw9dq44Bw/w83WY5JOp8SL32YFVf
Cjkxez7YeDR8cGoWhBpiGTaOIcdL1bGCnKD1aTlzAm0AvI5+bfhs5GuS/rb4
/l+l1qtdwjbsY/dHf7g8lp2DjRi2qsMRdfzdZk3cAxhva2w7zzxyByrmXKPH
7JITs+GDq48JcWzEAfpqP7z6+OdL66t9ceaH/1Ceg42717GilhOvbZITtMaW
OSdKH4/2wOJWvg30KS3Y99l5cmL/vdiOMTVYQ8Tsf2Ji5uFJ3w5e2PWn0D5R
bZAFUTeMyynzQYEZdju4YfdHjmxRJ2ebgpzojxG6j2npGwu9xh/eWD83OfPu
t5aGx30d57XN8+W5hLQtyAlan5YrJ0zs4BFhyzb2YMa0PibjCqZdIfdfErGK
JbP/hjoO+poOK0ZMzPztshzj97fzBpo8swtq/6fE/scWHT6NnOiWD9Y3Skbg
OdoQffcNrf/Vn01++mu7SsPjvo+HtoU9Vx8rQvqdXr24Rk7QGlmunHBZh2OZ
Ym0qv2wTIye6MzsWSM6TRhwCc9369tlXvn9y8tJvvGWbEy/9+q5yW9/Hhc+3
8/ZcrKjjBAxtLLQpfnT+O5PltW9eWrrw7NdOb7xwx+tvbP7HyRuv/qrPUnxv
KUorlBOLW3Mj7tMm+4BCOGHaIfsd5dxlYhr6GHvNfA29/92ucVTkRD9mx/7I
+XJ4jHnTs5oD8cof/ddtRljDtlkcG34eY6IkK2I4gTZFOXe8aFeAF69tnv/e
5dc3Hi1eu/fKpY3bpRXb7obhcYrvLUVphXLC5/djt5v+Jz1eqWpsq689cWJx
Z95ycqIns75Q9jNhnvMsfDTs0t8d2cEIa3htFnWArwcDdLvCxwkbx8d/GdMv
H1/aPF88Xi7sG8Xjo1OGbWZ7iu8tRWmRE71e28FzQvpByQj028+KEW9cPD85
+9tv2+aCjWPb53gN+8yqPpifp/MM2sfon0IbC3PN0RenDfHxy2vnJpfOnC6f
b7xyZsNnaHOk+N5SlFYAJ45gTCrGqco8r4gZy+3CZy94tpdrp2KbzRkr/Pj1
Ztu1Zs7Gtn83Y16vkdvx2G4343DJiR4ZERuvxjikn5/9UWd+eeOBv5hqP9hx
sXIb9unqeKh7HXcwr1yzAvbckw+X/VM/OPn1kifYD/+bGNpri9PjQ7qygyl+
D9RwFcCJQ2p/6/sW5HY7fxr/XdvNa/tUWeV2mX9J+n1ww7Vd+n0zT4+c6IkR
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
tyXmP5R5+sRYpTLnq3pdrnOBskKOKXkWEzcPMbTTcsgR2xUntlkh8vJZK9ck
jeRFyYeivaB/fxf2+dfCJifyEjkxPGvCCbQpcL+79I2FTn3k6h0fnPL5Qe8R
43DRn6Tzd+B1174w7Cv7oOS+lccUbEGduzp/jJsCf3NqS3TBCenHXbHl82ae
A9afAAdkvxTyPYEleK9rnWsYGOTiUIjf6dL/UWEiJ4ZnMZyw42Pt3Oym+WN9
JvuQMMc5mhP7P1xuw3/JA/QL6Tyvrn1D2YS6bfdV/cF7Ozt/G7/OqS3RFSdg
ds0h1/oSTQz9TCivLudHld/p0v9RYSInhmehnJCsACdsmyI031OQnxS5OvR6
cT6b8vPm3h5xBDmeCfFlGS8vx0OZuIdsw1h21Jlcbw917ur8sb5HDnnE++KE
tQv73uRFk9/R9vvv+IXG4w7JiXRKxQncp/isaZl9nOtqTV1hs+ZPDCdk/1Mf
bQrpy0PXm5vihOg3Qv5v5/wLzK8oXqtqj9SZzAOLmHYX537u9Pezi1/3xQlr
Nu4Mg8/Hc+e6pyYXiN13oyFfyIk8lIIT+A5V1akpK/o41z7LnRUnYLL/ycYp
2q5Jg3kF0p8jx17I++SaEzq+4JpvrePOkhOh61mjbrLMmFwhznN/bbPkbQ45
xGfJCWlljMLkE8c8assEPNbrWnRh5EQ6kRPzwQnLipCcT6GGudzS94as04B9
5NgjPV4J8/xkjqUyT6vKvYf4ghxjFXrcqbpGrp+qLZf1iFJyYtZGTqQTOZGu
3FlzAmbHP+E/1krA2P+mvrLsJwq4R0e7BTn25HhY2Qek57bJfindr4R9XTk3
UHaZq9DTRkJsQ+4v+7FiDbl3bV6U1DwgJ6hZiJxIV24KTuj+J19+wCB/+fjn
p+LOO3xzwQ3Mi65bl0LPw67iRF3eQhwLx3QxS+YlDI2luEzm+0vNg1BOpPbx
XRl8T93vkepe5ES6cptaG07ofB7PPv7ZyfmXTzfyl74xRMibgXGovlx72D6V
hwlxarEOtY8T2EfGuVFG1TFQB5k3pMnYrB2s+cGpbGPXPk60GRuSm/m++1S/
IifSldv1byWEE5YVuv/ptU3/+js+m5qT8Pu/U/bllDFmT85Yea+v+4/k2tgu
Tug1sm1/VW2b5eqtWDnq1mSuxxQXV89uczbntoSrPTGGfifre+p+j1T36ooT
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
Zb+P6/voeuwrty7WIK+15oTvmJM7d01evs1fR3KinciJ+vr2VW5TIyfSKbX/
noX5Ysh1/Uih/Uw+rtjH8lr7OOFji8+fkRPt1BUn7D2Hz86p91TtK/e7sK96
X1mXqv10zKvLfVcDzyt2LF/V7yz192ZeldqH92khsYWqeXEx8yHk79teWxcn
7PFc/kM+12VoIyfaqcv2BG02Rk6kU93n0nbeQCqTY4nk+fjOs00u1xhO+Iyc
mK3IieEZOZFOqT/7WXy3utzX1YbughP62LoMbeREO5ETwzNyIp3G+Ptokocv
1PrihDT0SaGcqjYOOdFOTTlR1w9PCzNyYlhK7dP7tC77zOR3FOOQ7HZ9Hbvg
hD0ex8X2pybfjaH2wY7FXJw4/vTn3jeLPHjzrqafV+rvTJ252hRtxl204YSe
jx16PHKiPw3hO0zb+ZvQnyM5MRs1/cz67Nvpy1Jxwr4/9njkRH8iJ4Zn5EQ6
1X02tk/W9bvKiROSW756peJEHz6JnGgncmJ4Rk6kU8znpP1vDpywfAipyyw4
Ybna9/UhJ9qJnBiekRPpFPM59c2FJuXH/N41J+q4oede2GtWxYmQcrswcqKd
yInhGTmRTrGfVVtW6D77FRXj1b/ftnOlrenxePY5/K1vf3uNbL+bfU5ODF/k
xPDMxYnJ65euKvz67mcf/+wpcqI/tf3s2nJD569wfTdCv0Mh368Lhgv2uc6T
Ix/bfXyckHln9Xv7/s2QE+1ETgzPquZPHHvioWsLVlwhJ/pR089LPg9hhW/O
WEhukLb5+vrihM/IifxFTgzP6ubZff3Ip18iJ/pR288tZB8XV2YZA581J2bh
g8iJdiInhmdVnDj+9OeuYXuiP1V9LjH3xa68rLoN0ea32SZOEcMJmCuHoLQc
xnmRE+1ETgzPfJxAn1Ph208wPtGfqj6X2P4T2V9vn3f9PWn7/fJxQq4Lk/r3
EGLkRDvNom+Q1q2dc6zdVDDiPYVfP4RYdmHL5EQ/qvpcmnDCtT3Wv7eJd/iO
b8+XnKCocQr+nZzoRzGcqFrvx8WEPvqZmpRLTlDU+IUxss8+/tlL5ET38vkh
3xqPIT4sZo50zPHt9pB66PWw7fmSExQ1XhU+foWc6F4+P4QxPXqfLuYyNC0n
dr053a6x53Jh3/T2VcfjWduq8fsh7TVygqJ2yrQl9rLfqR/1wYm2HJHmy0EY
Uv450VawZfnGwbqez4INrs8kpB7kBJVChS++pbD7MrIDhV9fKOwsxzv1J58f
0ve1feY+7cM/153frLmgr+2KY+yGFO6PqupHTlApZMYWBfnbrx/59I+L/0sd
+u9ow5wKk9Mjpj+KnFAK9aN63lkX/luPh+6SNSFlpuhnWvnodO7xpp8POUGl
UAwnCv+8z8xtqNrvkcIOtrn3r2JRwaqN2HqTEzs1z5xIYfI6hojrY1M5qSUn
ztrxSKatgW0H0X8kt6ENIF5fKR5flK+b52U/k8kXe0K9vgY+kBPdqS0nYpkh
j9sHJ2Q8ui7HYO6MgMgJKie14QSeF377Gfjuk0cffafmROHzry/+LxfPT9p8
4cX77zZtjonJDYtyHite/4TkBHI7mffjPfcX/x8kJ7pTEx+XGydkGX3GUdpY
XQ4zn8gJKifFcmLpw7+8Wvjtm2HIwWR8+U3w+Wb7dcZu/u6zT7/9uScfvrF4
fTc4Yl6/FnOu8RjHx/+i3BtQFh4b3uwGL/B+XSaOFVtvcmKnyInZWNPPh5yg
clKMvzX39bvbmOHFdW3LKdjyFDnRXKF+zjVvTq/9U/XetpzQ8+aGwgnUW44x
jhU5QeWkyPvy1oY2CfqZZnlMcmKnYnyezz9f8KwJ53qfPG4VJ6ryfwyJE037
m/T5kBNUDiIn5lNj5UQO5spvGStygspJEZw4XNgjiEkbX38A45SOPfHQXaY/
quyXwvOqnEyIV1dxwsyPOGDi48+Y+HY57w7HRX3N2Kf9Nl5OTsQrxu/pfidb
xiw4ofNtyOeyjFw40bYdUXc+5ASVQiGcwLhUw4O7zXzpR4rH77fswGt4jNef
e/Lhz9S0F1aqOGLm0N2Kepm49Tpi4cX2e8Aoc1zU+bBhyDI5Ea82vtCW4eME
uKLHq+K53d++ruMcMt+G9Lc2B5J83gUnVlR+jy4M4zy6+HzICSonRbQnlsAB
3OMb/435cBgD+5jJt3GvYciRiDLXPdvx/kNgDlhgOLHPMGEPjoU2hvkfsp4R
OaHUJyd8Y6SqfLn0f5Yt9nkfnJDlYaxe2zkXsfOt60ROUDkplhPGN2O+NcYd
LcCPm7Gtp0yuKPRJnaxpn/wY42lxfIx9cuxfcsK0LfD/nuL/g+AQ2hOGVWjD
3IS2DjkRr3nmhO+e3x6nCSOazKWrEjlB5aRQTpg508umzwjxgiXTT3RMPD4V
cn8Pnsg6YE6FWgsbc7PPmvnYCyZmgTndz5jXpo5LTsRrHjkRMla1CSu6bEfU
nQ85QaVQRHuijR02bZDSx2MOhaMeXeaHJSdq1KZ/xcaT5VhUGY9wcaIuBlDH
Cckg6UPlcevqHnrPHzqHUJ9rlyInqJzUNyfQZ2SPhXaDaZdM+W0z765PTpET
Sm3aE9I/6/tpHyfqLJQTbWLOMdcnZM2lPtoRdccnJ6gU6psTYIA6HvqlMMb1
lucXvvQOE6M+RU7MVm05If1YKCfa9Du1rW8T/+pb665vRthjkxNULuqbE4Xt
t8dCfxNiDia/U5kP0My5QHuiz3UtyAmltn5XWhUn8Jpcm8e3Tl2fnGgzp8GV
s6RpWTEiJ6ic1DcnTFsB42fvNXHoBU899pATs9OsOOGT9r99cqLve/8+RE5Q
OalPToARJo/se9C/hPGIZp7FLboeeI2cmJ2q7r1nwYnJnTtz/Nn32tyDtu3R
Zq71rO7/uxY5QeWknjlxjz6eyRt+yFUXu34ROdG/fH4VXG/il+Xc6tD8Rq52
QlV+p1jD+7uaHz1rkRNUTuqTE5iDp48HP4Q53HIb1pkw8/fYnpiRfL617vUq
TugyQlSX66+NDbUtAZETVE7qkxOFLRX+fy/WIEI7wqxVd9jMqVtCvMLkFfTm
eyIn+lEdJyBfzNlltg8pth64b+iDE13l40slcoLKST1zIhcjJ5RCOAEhjmBj
BlV+uY3/kv1PXXBi6IyAyAkqJ5ET86lQTljhvl/OrZY5YLuoT+w6qlWGunZR
p5QiJ6icRE7Mp2I5MQu1bUsMOR6hRU5QOYmcmE/lyAmMTWrKijExAiInqJyE
3BmIMY/ZxtAP0bVy5ASk51XUxSFyqHMfIicoikqtXDlhZWPbK2qNO8uHsbUf
tMgJiqJSK3dOzLvICYqiUoucyFvkBEVRqUVO5C1ygqKo1CIn8hY5QVFUapET
eYucoCgqtciJvEVOUBSVWuRE3iInKIpKLXIib5ETFEWllssH2TXkaOmNnKAo
KrVC8mLQ8jNygqKoWSm1v6ORExRF5a3U/o5GTlAUlbdS+zsaOUFRVN5K7e9o
5ARFUXmri3WoabO3rtaZpSiKoqgh6f8DuRGBHQ==
    "], {{0, 276.}, {394., 0}}, {0, 
    255},
    ColorFunction->RGBColor,
    ImageResolution->72],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{339.0550000000001, Automatic},
  ImageSizeRaw->{394., 276.},
  PlotRange->{{0, 394.}, {0, 276.}}]], "Text",
 CellChangeTimes->{{3.823102785890476*^9, 
  3.8231028258999643`*^9}},ExpressionUUID->"53d7a803-c89c-4384-ab1a-\
82f0054478e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"e4dff84c-9298-45c8-9d8c-89cd2ce2b4d3"],

Cell[CellGroupData[{

Cell["Outline", "Section",
 CellChangeTimes->{{3.8210082602748346`*^9, 
  3.821008261812911*^9}},ExpressionUUID->"6ccfc20f-0a0c-40c7-8ffd-\
d0b3b40f707d"],

Cell["Import formats", "Item",
 CellChangeTimes->{
  3.821008339812962*^9, {3.823194225488459*^9, 
   3.823194225488662*^9}},ExpressionUUID->"f862cf57-8b51-446e-acd2-\
d0460714cc85"],

Cell["Syntax and basic examples for importing data from files", "Item",
 CellChangeTimes->{
  3.821008339812962*^9, {3.823194225852749*^9, 3.823194237889679*^9}, {
   3.823194292261105*^9, 
   3.823194313624756*^9}},ExpressionUUID->"7af61e16-3c69-4e64-822a-\
f9e45b2f9de5"],

Cell["Saving and exporting data", "Item",
 CellChangeTimes->{{3.823194383457922*^9, 
  3.823194396030527*^9}},ExpressionUUID->"c72213a5-4077-481e-88c8-\
7569a9b96202"],

Cell["\<\
Getting data from a database, the built-in Wolfram Knowledgebase\[Trademark] \
and the Wolfram Data Repository\[Trademark]\
\>", "Item",
 CellChangeTimes->{
  3.8210083413484592`*^9, {3.8231028812895308`*^9, 3.823102906051599*^9}, {
   3.8231030270497847`*^9, 3.8231030456436043`*^9}, {3.823103108339161*^9, 
   3.823103108339457*^9}, {3.8231943188109703`*^9, 3.823194343032942*^9}, {
   3.823269619722662*^9, 3.823269620114093*^9}, {3.8232742819790993`*^9, 
   3.823274284330426*^9}},
 CellTags->"Overview",ExpressionUUID->"6bf698df-c9aa-435e-94c3-037a875a49b0"],

Cell["Restructuring data and extracting parts of data", "Item",
 CellChangeTimes->{
  3.8210083459206543`*^9, 3.8225641556875153`*^9, {3.8231029291143827`*^9, 
   3.823102942569488*^9}},ExpressionUUID->"89a311f9-ac4e-4171-8a9c-\
2386ad15a049"],

Cell["Dealing with messy data", "Item",
 CellChangeTimes->{
  3.8210083427499237`*^9, {3.823102900673842*^9, 3.823102909286429*^9}, {
   3.823194582365149*^9, 
   3.823194585895412*^9}},ExpressionUUID->"72dbb281-2a6f-4ea2-80fe-\
f654f3aeaafc"],

Cell["Data visualization", "Item",
 CellChangeTimes->{
  3.821008344304372*^9, {3.823102913927567*^9, 
   3.8231029176053133`*^9}},ExpressionUUID->"63398819-0fd8-49e6-95c3-\
183dbfe18fce"],

Cell["Statistical analysis of data", "Item",
 CellChangeTimes->{
  3.821008348075392*^9, {3.823193935583284*^9, 3.823193939834793*^9}, {
   3.8231940692054234`*^9, 
   3.823194073290588*^9}},ExpressionUUID->"f589fae6-5d29-47d1-9885-\
542259f1fa09"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"b1318426-6bf5-473c-aba8-4a616b453086"],

Cell[CellGroupData[{

Cell["Importing and Exporting Data", "Section",
 CellChangeTimes->{{3.8231941109480762`*^9, 3.82319411185719*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"acd2a8cb-e3d3-4dd4-811c-1893eb86b2bf"],

Cell[TextData[{
 "Importing and exporting\[LongDash]",
 StyleBox[ButtonBox["Import",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Import"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Export",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Export"],
  FontWeight->"Bold"]
}], "Item",
 CellChangeTimes->{
  3.8210083911738663`*^9, {3.8218708020650806`*^9, 3.821870812807034*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"9bb497d0-74e5-43d0-838d-224749b4bfaa"],

Cell[TextData[{
 "File formats\[LongDash]",
 StyleBox[ButtonBox["$ImportFormats",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/$ImportFormats"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["$ExportFormats",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/$ExportFormats"],
  FontWeight->"Bold"]
}], "Item",
 CellChangeTimes->{
  3.82100839668989*^9, {3.8219063158533897`*^9, 3.821906319870803*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"46088051-8b09-4ab9-8a46-3124da3cbf17"],

Cell[TextData[{
 "Data files and file paths\[LongDash] ",
 StyleBox[ButtonBox["SetDirectory",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SetDirectory"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["NotebookDirectory",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NotebookDirectory"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["FileNameJoin",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FileNameJoin"],
  FontWeight->"Bold"]
}], "Item",
 CellChangeTimes->{
  3.8210083981114893`*^9, {3.8219063258560057`*^9, 3.8219063461054583`*^9}, {
   3.822857015583425*^9, 3.822857027452221*^9}, {3.8231814287144213`*^9, 
   3.823181460219336*^9}, 3.823269664714903*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"e4e3597e-3c7d-481d-b600-c85e6ce5e6d0"],

Cell["", "EndOfSlide",ExpressionUUID->"a90296af-f584-43b1-8b0e-160c9590cde5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"f470fb73-a8a3-4d11-9358-63be99ef3334"],

Cell[CellGroupData[{

Cell["Import and Export Formats", "Section",
 CellChangeTimes->{{3.821008426061166*^9, 3.821008431421028*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"c8ea12c8-baed-4bcf-8b5b-d1e50bc5cc5d"],

Cell["\<\
The formats that can be handled by Import and Export are listed in the values \
of the global variables $ImportFormats and $ExportFormats.\
\>", "Text",
 CellChangeTimes->{{3.821906370060117*^9, 3.8219063902864523`*^9}, {
  3.822564184322804*^9, 3.822564208056367*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"3dde509a-3c4c-4561-87bc-e80a0f37ee84"],

Cell[TextData[Cell[BoxData["$ImportFormats"], \
"Input",ExpressionUUID->"3d878578-a3cf-4d5f-832d-617566d68061"]], "Text",
 CellChangeTimes->{{3.822567372626521*^9, 3.822567401225848*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"c02c286a-531a-4aa9-bbc8-2a55ef2b30d8"],

Cell[TextData[Cell[BoxData["$ExportFormats"], \
"Input",ExpressionUUID->"4f66a0af-b3f9-4b3f-abd8-48d9f693f805"]], "Text",
 CellChangeTimes->{{3.822567414163433*^9, 3.822567429909676*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"791fd674-bff3-4f90-81a0-b340b92b405f"],

Cell["There are several categories of formats:", "Text",
 CellChangeTimes->{{3.493558030978483*^9, 3.493558042495672*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"84bcb39e-ed2e-44e2-a5a6-6bbdc60c43c1"],

Cell[TextData[{
 "Data (",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["CSV",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/CSV"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["XLS",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/XLS"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["HDF",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/HDF"],
  FontWeight->"Bold"],
 ", \[Ellipsis])"
}], "Item",
 CellChangeTimes->{
  3.8210084431880302`*^9, {3.821906397677035*^9, 3.8219064183599243`*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"35d9f083-7d6d-4be3-8203-73742a0e14be"],

Cell[TextData[{
 "Graphics (",
 StyleBox[ButtonBox["GIF",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/GIF"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["JPEG",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/JPEG"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["EPS",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/EPS"],
  FontWeight->"Bold"],
 ", \[Ellipsis])"
}], "Item",
 CellChangeTimes->{
  3.821008444551815*^9, {3.8219064240123997`*^9, 3.8219064339468145`*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"f78a4bcf-3df4-4046-a275-80a6814a10cd"],

Cell[TextData[{
 "Sound/animation (",
 StyleBox[ButtonBox["AU",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/AU"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["WAV",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/WAV"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["AVI",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/AVI"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["FLV",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/FLV"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["QuickTime",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/QuickTime"],
  FontWeight->"Bold"],
 ", \[Ellipsis])"
}], "Item",
 CellChangeTimes->{
  3.821008446017187*^9, {3.8219064397379475`*^9, 3.8219064655620613`*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"f400da24-2d47-4e99-8fa2-c70bf1c17067"],

Cell[TextData[{
 "Document (",
 StyleBox[ButtonBox["PDF",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PDF"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["HTML",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/embeddingformat/HTML"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["TeX",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/TeX"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["XML",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/XML"],
  FontWeight->"Bold"],
 ", \[Ellipsis])"
}], "Item",
 CellChangeTimes->{{3.493557944375142*^9, 3.493557949774151*^9}, 
   3.821008447355237*^9, {3.821906472305398*^9, 3.8219064902088146`*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"d4882966-7136-4e04-b67e-e8386db9f92c"],

Cell[TextData[{
 "Binary (",
 StyleBox[ButtonBox["Bit",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/Bit"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Byte",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Byte"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Integer16",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/Integer16"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Real32",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/Real32"],
  FontWeight->"Bold"],
 ", \[Ellipsis])"
}], "Item",
 CellChangeTimes->{
  3.8210084490440903`*^9, {3.821906497038806*^9, 3.821906513251007*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"16aeeb4c-a8fe-4286-9d31-5984d8e048c3"],

Cell[TextData[{
 "For a full listing of all supported data formats, see the guide page ",
 StyleBox[ButtonBox["Importing and Exporting",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/ImportingAndExporting"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8219065384870944`*^9, 3.8219065458005757`*^9}, {
  3.8225674756452847`*^9, 
  3.822567515636409*^9}},ExpressionUUID->"f743a8e9-0c1d-45b8-8307-\
b3f331f9fc02"],

Cell["", "EndOfSlide",ExpressionUUID->"e573c595-f719-4a84-83ae-8a2ec5bec683"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"bd260520-7097-4b55-a346-61d88db2332b"],

Cell[CellGroupData[{

Cell["Syntax", "Section",
 CellChangeTimes->{3.821008466730904*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"e8371217-f50e-432e-89ce-eea9b1254f6c"],

Cell["\<\
With Import, you can import files from your computer or from a URl. You can \
also work with metadata (\[OpenCurlyDoubleQuote]elements\
\[CloseCurlyDoubleQuote]) from the file.\
\>", "Text",
 CellChangeTimes->{
  3.821906574935606*^9, {3.8225642693221493`*^9, 3.822564275137209*^9}, 
   3.822671924020355*^9, {3.822999629529983*^9, 
   3.822999691211041*^9}},ExpressionUUID->"fdc13726-83c4-4852-bd5c-\
cc33fe224f31"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Import", "[", "\"\<source\>\"", "]"}]], "Input",ExpressionUUID->
  "ea25b31c-dd0b-4e37-8489-33b7e40fcee7"],
 ": imports data from a source, returning a complete Wolfram Language\
\[Trademark] version of it.  "
}], "Item",
 CellChangeTimes->{{3.821011102946761*^9, 3.8210111058815017`*^9}, {
   3.82242303549914*^9, 3.822423056118927*^9}, {3.8226718990817432`*^9, 
   3.822671910994452*^9}, {3.8226719429961157`*^9, 3.822671943857727*^9}, 
   3.82327156140123*^9},ExpressionUUID->"610df7b0-cbfd-45bd-98bf-\
52cc9f4f6de2"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Import", "[", 
   RowBox[{"\"\<file\>\"", ",", "format"}], "]"}]], "Input",ExpressionUUID->
  "f2ad4f6d-066e-4c81-a51c-d1a52b963182"],
 ": imports data from a file, taking it to be in a specific format.  "
}], "Item",
 CellChangeTimes->{{3.821011102946761*^9, 3.8210111058815017`*^9}, {
  3.82242303549914*^9, 3.822423056118927*^9}, {3.822671952291729*^9, 
  3.822671996492796*^9}, {3.82327156465586*^9, 
  3.823271567487774*^9}},ExpressionUUID->"1c0199c9-86a2-4358-afa0-\
cddd7937c786"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Import", "[", 
   RowBox[{"\"\<file\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"format", ",", "elements"}], "}"}]}], "]"}]], "Input",
  ExpressionUUID->"03b529ef-fe31-40d4-be08-3caad6389cda"],
 ": imports the specified elements from a file.   "
}], "Item",
 CellChangeTimes->{{3.822423068616556*^9, 
  3.8224230766403847`*^9}},ExpressionUUID->"ba4d8231-badb-4bb2-86b3-\
facdc1d0b7d3"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Import", "[", 
   RowBox[{"\"\<http://url\>\"", ",", "\[Ellipsis]"}], "]"}]], "Input",
  ExpressionUUID->"5ab76197-766c-4ea7-ba3c-6c2dbdb689d7"],
 ": imports from any accessible URL. "
}], "Item",
 CellChangeTimes->{{3.822423082133431*^9, 
  3.822423104297649*^9}},ExpressionUUID->"cdaf0932-69c0-45c2-a4d6-\
d2b2da30e5ef"],

Cell[TextData[StyleBox["There is a similar syntax for Export.", "Text"]], \
"Text",
 CellChangeTimes->{
  3.8219065839858713`*^9, {3.822564287434537*^9, 
   3.822564290698388*^9}},ExpressionUUID->"e9d0c14b-37f6-464b-9824-\
977a4149554b"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Export", "[", 
   RowBox[{"\"\<file.ext\>\"", ",", "expr", ",", "format"}], "]"}]], "Input",
  ExpressionUUID->"e42b4135-706a-46b0-ab96-ba7084bfbf1e"],
 ": exports ",
 Cell[BoxData[
 "expr"], "Input",ExpressionUUID->"d465baee-3281-4d19-aa88-4c81fc2f654a"],
 " to ",
 Cell[BoxData[
 "file"], "Input",ExpressionUUID->"26db1cb9-b18e-4c68-99e3-ddb34464f5cd"],
 " in ",
 Cell[BoxData[
 "format"], "Input",ExpressionUUID->"c9405b4e-7af2-45d2-a034-3047ccaaad92"],
 " file format."
}], "Item",
 CellChangeTimes->{{3.8224231140652237`*^9, 3.822423125827112*^9}, {
   3.822564308915855*^9, 3.8225643357149*^9}, {3.82299973317371*^9, 
   3.822999733928965*^9}, 
   3.823271574903935*^9},ExpressionUUID->"aa42c422-1ad5-4cbb-892a-\
81558519a837"],

Cell["\<\
Most of the time you can omit the explicit format specification for Import \
and Export, as they will automatically recognize most standard file formats.\
\>", "Text",
 CellChangeTimes->{{3.8219065934459543`*^9, 3.8219065996478834`*^9}, {
   3.822423132490336*^9, 3.822423146832275*^9}, {3.822564345058*^9, 
   3.822564345344883*^9}, 
   3.8225675466056757`*^9},ExpressionUUID->"5ff7a4d8-c380-4f06-bb15-\
e33fc4b4a562"],

Cell["", "EndOfSlide",ExpressionUUID->"65f2a56f-1e31-44df-86c7-77aa48f1a7ad"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"936e3285-aacb-4fe8-bb42-57574a241ebf"],

Cell[CellGroupData[{

Cell["Working Directory and File Paths", "Section",
 CellChangeTimes->{{3.8210086159634085`*^9, 3.821008620923381*^9}, {
  3.822765224577013*^9, 3.82276522521765*^9}, {3.823026231726356*^9, 
  3.823026242344295*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"84307d41-c35f-4761-b32c-bf09362db020"],

Cell[CellGroupData[{

Cell["Setting Up a Working Directory ", "Subsection",
 CellChangeTimes->{{3.821008983261546*^9, 3.821008986603609*^9}, {
   3.822494834828087*^9, 3.822494836312352*^9}, {3.8227648585375957`*^9, 
   3.822764862834565*^9}, {3.822765237538776*^9, 3.822765241102528*^9}, 
   3.822857035192389*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"eeb578d2-091c-495f-8ebf-0f8b99cfcc2e"],

Cell["\<\
There are several approaches to consider when thinking about where to put \
your data files and how best to access them. If you have replicated the \
structure in the download folder shared with you, you should have all your \
\[OpenCurlyDoubleQuote]Wolfram Language Basics\[CloseCurlyDoubleQuote] \
notebooks in the same directory as the one in which this notebook resides.\
\>", "Text",
 CellChangeTimes->{{3.822049285467661*^9, 3.8220492857558527`*^9}, {
   3.8224945756961327`*^9, 3.8224945770351553`*^9}, {3.822494877940906*^9, 
   3.822494988871935*^9}, 3.8225677151127863`*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"fe2aee94-50c2-4df1-bd47-a3c26f5049ab"],

Cell["\<\
This is the directory where the current evaluation notebook resides:\
\>", "CodeText",
 CellChangeTimes->{{3.822049285467661*^9, 3.8220492857558527`*^9}, {
  3.8224945756961327`*^9, 3.8224945770351553`*^9}, {3.822494877940906*^9, 
  3.822494986105507*^9}, {3.822495132435965*^9, 3.822495181574586*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"e811d69b-ff13-4f55-a1ea-b653ec69e1ea"],

Cell[BoxData[
 RowBox[{"NotebookDirectory", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8224951838158827`*^9, 3.8224951877978277`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"3f38b205-6ba7-4537-ae35-d65097bec3d4"],

Cell["These are the files in the directory:", "CodeText",
 CellChangeTimes->{{3.822495202095961*^9, 
  3.8224952282512093`*^9}},ExpressionUUID->"1deb198d-a2fc-4d87-a93f-\
9dbd6bffa04f"],

Cell["\<\
You will notice there is a \
\[OpenCurlyDoubleQuote]data\[CloseCurlyDoubleQuote] folder in the directory. \
It is usually convenient to set up a data directory containing all the data \
files for your project.\
\>", "Text",
 CellChangeTimes->{{3.822054734026162*^9, 3.8220547348792453`*^9}, 
   3.822494593842318*^9, {3.822494625174471*^9, 3.8224946359733677`*^9}, {
   3.822495251695962*^9, 3.822495280686482*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"33dbd9e4-df24-44f0-8086-227ca489c6d0"],

Cell[TextData[{
 "This sets the ",
 Cell[BoxData[
 "\"\<data\>\""], "Input",ExpressionUUID->
  "b1f0c556-8ff2-470a-b10e-bb948ef1d8a6"],
 " directory as your current working directory:"
}], "CodeText",
 CellChangeTimes->{{3.8220504071213846`*^9, 3.8220504080545597`*^9}, {
   3.8220547407052355`*^9, 3.822054741117482*^9}, {3.822494655266829*^9, 
   3.8224947037314157`*^9}, 3.8225640825171843`*^9, 3.823269792346568*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"7ab4d549-fbca-4c33-a8dd-4f66134c542c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\""}], "}"}], 
    "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.82204976629216*^9, 3.8220497683218565`*^9}, {
   3.8220502967266426`*^9, 3.8220502976384153`*^9}, 3.822423478539122*^9, {
   3.822494685136497*^9, 3.822494734341572*^9}, 3.822764989846665*^9},
 CellLabel->
  "In[102]:=",ExpressionUUID->"12c671b0-59bc-4454-9508-fdc61d7eb8c0"],

Cell[TextData[{
 "Now you can list all the files in the ",
 Cell[BoxData[
 "\"\<data\>\""], "Input",ExpressionUUID->
  "2ed05de3-a251-4a07-9479-2872acf84bfe"],
 " directory:"
}], "CodeText",
 CellChangeTimes->{
  3.8210113710775394`*^9, 3.821908933955146*^9, {3.822054744733539*^9, 
   3.8220547450152445`*^9}, {3.8224234814081993`*^9, 3.822423485570313*^9}, {
   3.822494721731686*^9, 3.822494729077956*^9}, {3.822495297998414*^9, 
   3.822495309250346*^9}, 3.823269817075704*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"169a38a4-063b-4d70-bcf8-3e0fee06025c"],

Cell[BoxData[
 RowBox[{"FileNames", "[", "]"}]], "Input",
 CellChangeTimes->{{3.822494740823628*^9, 3.822494747347177*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"a6d91e0c-f8af-4981-a712-66ffb1a6fef2"],

Cell["You can list all files of a specific format:", "CodeText",
 CellChangeTimes->{{3.822494756292202*^9, 
  3.8224947633112793`*^9}},ExpressionUUID->"3bed0bc8-93c4-470f-8334-\
3901afd898cd"],

Cell[BoxData[
 RowBox[{"FileNames", "[", "\"\<*.xls*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.822494766213928*^9, 3.822494783235486*^9}},
 CellTags->"Importing and Exporting",
 CellLabel->
  "In[104]:=",ExpressionUUID->"2fe97cc9-926e-4145-82e8-24a48cc7d829"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manipulating File Paths ", "Subsection",
 CellChangeTimes->{{3.8210090372369547`*^9, 3.821009048113867*^9}, {
  3.8230262957703037`*^9, 3.823026305905912*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"1cd64b4a-069c-41a6-897c-f1f598c8fe35"],

Cell["\<\
The easiest way to get a full directory path to a particular file is to \
select from the menu: Insert \[FilledRightTriangle] File Path. In the dialog \
that pops up, browse to a file in the directory you want to use and click \
Open. A string containing the full path to that file will be pasted into your \
notebook (this string will be different on different operating systems).\
\>", "Text",
 CellChangeTimes->{
  3.8219067281501093`*^9, {3.8224234983505383`*^9, 3.822423499610721*^9}, 
   3.8224235717245083`*^9, {3.822495477019356*^9, 3.822495480699987*^9}, {
   3.822495753590481*^9, 3.822495757089843*^9}, {3.8224958203828983`*^9, 
   3.8224958278606453`*^9}, {3.822564675304516*^9, 3.822564685207469*^9}, 
   3.82256777458605*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"2bd33588-b5af-4d14-8435-56d3dd0393d7"],

Cell["\"/Path/to/directory/data/sampledata.xls\"", "Program",
 CellChangeTimes->{{3.822495883737129*^9, 3.822495936884157*^9}, 
   3.8224964495364723`*^9},
 TextAlignment->Center,ExpressionUUID->"a19626ff-33a9-4afb-bc7c-7dcb068d9a8e"],

Cell["\<\
There are a few platform-independent functions that can be used for \
manipulating names of files and directories.\
\>", "Text",
 CellChangeTimes->{{3.82190673655269*^9, 3.821906742060758*^9}, {
  3.822054755673317*^9, 3.8220547560308657`*^9}, {3.822423606296262*^9, 
  3.8224236070155582`*^9}, {3.822423664312842*^9, 3.822423671914557*^9}, {
  3.822495987543333*^9, 3.822496006184862*^9}, {3.822496252309267*^9, 
  3.822496313850759*^9}, {3.822496345620804*^9, 3.822496362708786*^9}, {
  3.822496498420197*^9, 3.822496499656229*^9}, {3.822496541777213*^9, 
  3.8224965446203337`*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"c920b91e-30a5-4dfd-91a4-de39c9820220"],

Cell[TextData[{
 "You can use ",
 StyleBox[ButtonBox["FileNameJoin",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FileNameJoin"],
  FontWeight->"Bold"],
 " to construct a file path appropriate for your OS:"
}], "CodeText",
 CellChangeTimes->{{3.822496554157054*^9, 
  3.822496583759139*^9}},ExpressionUUID->"cd417680-a5a3-4d1d-82e9-\
35a6064db567"],

Cell[BoxData[
 RowBox[{"FileNameJoin", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<path\>\"", ",", "\"\<to\>\"", ",", "\"\<data\>\"", ",", 
    "\"\<file.xls\>\""}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.822496509678317*^9, 
  3.8224965354410667`*^9}},ExpressionUUID->"8d084a14-dd9c-4e45-a3b8-\
50463a59f10a"],

Cell[TextData[{
 "You can use ",
 StyleBox[ButtonBox["FileNameDrop",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FileNameDrop"],
  FontWeight->"Bold"],
 " to drop the last element in this path, the filename:"
}], "CodeText",
 CellChangeTimes->{{3.82190673655269*^9, 3.821906742060758*^9}, {
   3.822054755673317*^9, 3.8220547560308657`*^9}, {3.822423606296262*^9, 
   3.8224236070155582`*^9}, {3.822423664312842*^9, 3.822423671914557*^9}, {
   3.822495987543333*^9, 3.822496006184862*^9}, {3.822496252309267*^9, 
   3.822496313850759*^9}, {3.822496345620804*^9, 3.822496362708786*^9}, {
   3.822496498420197*^9, 3.822496505505315*^9}, {3.8224965885190353`*^9, 
   3.822496601275795*^9}, 3.82256780767337*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"f07fa0ca-bb96-4c59-ad48-836529d4310e"],

Cell[BoxData[
 RowBox[{"FileNameDrop", "[", 
  RowBox[{"\"\<path/to/data/file.xls\>\"", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8220503834250736`*^9, 3.82205038665009*^9}, {
  3.82242364003435*^9, 3.822423654769126*^9}, {3.8224963682331543`*^9, 
  3.822496369626728*^9}},
 CellLabel->
  "In[275]:=",ExpressionUUID->"2b54114b-2375-4ed0-afd0-d82369a4a062"],

Cell[TextData[{
 "Alternatively, you can use ",
 StyleBox[ButtonBox["FileNameTake",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FileNameTake"],
  FontWeight->"Bold"],
 " with the appropriate second argument to take all the path elements except \
the filename:"
}], "CodeText",
 CellChangeTimes->{{3.82190673655269*^9, 3.821906742060758*^9}, {
   3.822054755673317*^9, 3.8220547560308657`*^9}, {3.822423606296262*^9, 
   3.8224236070155582`*^9}, {3.822423664312842*^9, 3.822423671914557*^9}, {
   3.822495987543333*^9, 3.822496006184862*^9}, {3.822496252309267*^9, 
   3.822496313850759*^9}, {3.822496345620804*^9, 3.822496362708786*^9}, {
   3.822496498420197*^9, 3.8224964988456497`*^9}, {3.8224966034578743`*^9, 
   3.8224966040315523`*^9}, 3.822564715791507*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"72522d16-ea6c-4b6b-801f-1f6070f738bd"],

Cell[BoxData[
 RowBox[{"FileNameTake", "[", 
  RowBox[{"\"\<path/to/data/file.xls\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "2"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.82249641081404*^9, 3.822496413085351*^9}, {
  3.8224964601116047`*^9, 3.822496465839796*^9}},
 CellLabel->
  "In[277]:=",ExpressionUUID->"8f8007eb-b5e0-464b-8ca5-d49bff2ef777"],

Cell["", "EndOfSlide",ExpressionUUID->"55e4ad22-e41c-457e-87ac-c9c2a4ba5b56"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"a778863e-dcd9-4d5e-b902-bb0227da19dd"],

Cell[CellGroupData[{

Cell["Import: Basic Examples", "Section",
 CellChangeTimes->{{3.821008482162607*^9, 3.8210084860295553`*^9}, {
  3.822764942717895*^9, 3.822764944100543*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"77eb7269-73b3-41e6-a835-aae2d4927ccf"],

Cell["\<\
Import a file simply by specifying its path/file name. The Wolfram Language \
will display the data in some standard (default) form:\
\>", "CodeText",
 CellChangeTimes->{{3.821011133756923*^9, 3.8210111362522526`*^9}, {
   3.8220546021266923`*^9, 3.822054604797882*^9}, 
   3.822564399565359*^9},ExpressionUUID->"25de5f51-d015-4a28-8f91-\
a8ceefaf8bf9"],

Cell[BoxData[
 RowBox[{"Import", "[", "\"\<ExampleData/population.xls\>\"", "]"}]], "Input",\

 CellLabel->"In[9]:=",ExpressionUUID->"e860ae67-7206-42e1-8e04-af48572950aa"],

Cell[BoxData[
 RowBox[{"Import", "[", "\"\<ExampleData/mri.pxr\>\"", "]"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"43c4b784-d69c-4b4c-ab61-8836f533cd94"],

Cell[BoxData[
 RowBox[{"Import", "[", "\"\<ExampleData/100d.pdb\>\"", "]"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"408e5d66-0975-4bce-ac71-a190d8054c35"],

Cell["Work with metadata associated with any file:", "CodeText",
 CellChangeTimes->{{3.822054607858981*^9, 
  3.822054608308942*^9}},ExpressionUUID->"f75c08f7-5fdf-4ddf-be56-\
ed5c1170ae37"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<ExampleData/100d.pdb\>\"", ",", "\"\<Elements\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"065e838e-cc33-4742-ba03-d8d388356353"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<ExampleData/100d.pdb\>\"", ",", "\"\<Comments\>\""}], 
  "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"a650349c-eb72-4bad-8d6c-81c5892918de"],

Cell["Import files directly from the internet:", "CodeText",
 CellChangeTimes->{{3.8220546108754086`*^9, 
  3.822054611175909*^9}},ExpressionUUID->"3adef248-15c4-4eb0-a0bb-\
2051588cd984"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  "\"\<https://eoimages.gsfc.nasa.gov/images/imagerecords/147000/147921/\
iss062e103112_front.jpg\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8220489075482583`*^9, 3.8220489186843843`*^9}, 
   3.822591849048089*^9, {3.822591976875692*^9, 3.8225919774708633`*^9}, 
   3.822592184650419*^9},
 CellLabel->"In[39]:=",ExpressionUUID->"ec2833f7-a896-4c77-87db-93594b38d949"],

Cell["\<\
Import specific elements from a webpage, for example, the \
https://earthobservatory.nasa.gov site:\
\>", "CodeText",
 CellChangeTimes->{
  3.8220490042742767`*^9, {3.822054617879752*^9, 3.822054624431916*^9}, {
   3.822567562887487*^9, 3.822567583308967*^9}, {3.822581088150869*^9, 
   3.822581096084306*^9}, {3.8225812731671543`*^9, 3.822581314401122*^9}, {
   3.822581445906584*^9, 3.822581451094183*^9}, {3.822592204488068*^9, 
   3.82259223418836*^9}, {3.822650809997487*^9, 3.822650884756983*^9}, {
   3.822663841391984*^9, 3.822663855329039*^9}, {3.822663889785368*^9, 
   3.822663958781637*^9}},ExpressionUUID->"e98b08a8-164f-4813-a686-\
798bb2d3417b"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "\"\<https://earthobservatory.nasa.gov/\>\"", ",", "\"\<Images\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.8210576874771643`*^9, 3.8210577222030334`*^9, 3.8225812566711407`*^9, {
   3.822581457046692*^9, 3.82258146221726*^9}, 3.822592242290586*^9},
 CellLabel->"In[40]:=",ExpressionUUID->"fd9962f8-830f-4db9-bfa6-466dc2036d21"],

Cell["", "EndOfSlide",ExpressionUUID->"0d33afcc-a98c-4614-bae2-db00d8f7eef8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"32ec3413-6e12-4d55-b81d-cdeb91478e93"],

Cell[CellGroupData[{

Cell["Import: Special Cases", "Section",
 CellChangeTimes->{{3.8210085510025797`*^9, 3.821008558527226*^9}, 
   3.822857047938643*^9, {3.8230002737011023`*^9, 3.823000284221429*^9}, {
   3.823026441817665*^9, 3.823026448088838*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"f9019830-8e02-4adc-a698-ed9dbad096db"],

Cell[CellGroupData[{

Cell["Getting Data from Compressed Files and Archives", "Subsection",
 CellChangeTimes->{{3.8210085510025797`*^9, 3.821008558527226*^9}, 
   3.822857047938643*^9, {3.8230002737011023`*^9, 3.823000284221429*^9}, {
   3.823026441817665*^9, 3.823026451199091*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"d4618ab7-a66f-467f-b8cd-b8c9161160fe"],

Cell[TextData[{
 "The Wolfram Language will automatically unpack compressed files such as ",
 StyleBox[ButtonBox["PCX",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/PCX"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["GZIP",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/GZIP"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["ZIP",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/ZIP"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8210085639496174`*^9, 3.821008567742323*^9}, {
   3.821906671365605*^9, 3.821906681626556*^9}, 
   3.8225645169012423`*^9},ExpressionUUID->"481eb27b-e3db-478c-af3f-\
605dd375fc94"],

Cell["Take the first 800 characters in this example FASTA file:", "CodeText",
 CellChangeTimes->{{3.822054709439159*^9, 
  3.8220547097498703`*^9}},ExpressionUUID->"18cea835-eed7-4635-8d07-\
1ea5e2227803"],

Cell[BoxData[
 RowBox[{"StringTake", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Import", "[", "\"\<ExampleData/mitochondrion.fa.gz\>\"", "]"}], 
   ",", "\[IndentingNewLine]", "800"}], "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"f1a0d715-c195-441d-aadf-6f9f009fd370"],

Cell["\<\
Parse the GenBank database key and the description string from the header \
line:\
\>", "CodeText",
 CellChangeTimes->{{3.8220547122867727`*^9, 
  3.822054712584296*^9}},ExpressionUUID->"b21522f5-a3c0-4ebd-8b98-\
58b817078e83"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<ExampleData/mitochondrion.fa.gz\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<FASTA\>\"", ",", 
     RowBox[{"{", " ", 
      RowBox[{"\"\<GenBankID\>\"", ",", " ", "\"\<Description\>\""}], "}"}]}],
     "}"}]}], "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"f3e8744a-2596-474c-adc9-3041268cb2f6"],

Cell[TextData[{
 "Various options are available for working with archives such as ",
 StyleBox[ButtonBox["TAR",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/format/TAR"],
  FontWeight->"Bold"],
 " files."
}], "Text",
 CellChangeTimes->{
  3.821908858376667*^9, {3.822054716019419*^9, 3.822054716321975*^9}, {
   3.822480825304542*^9, 
   3.8224808266780767`*^9}},ExpressionUUID->"e0b6a282-c710-4a41-a01b-\
598e8c1cf635"],

Cell["\<\
 Create test.tar as an example to demonstrate how Import can be used with \
.tar files:\
\>", "CodeText",
 CellChangeTimes->{
  3.821908858376667*^9, {3.822054716019419*^9, 3.822054716321975*^9}, 
   3.822480825304542*^9, {3.822494295068084*^9, 
   3.822494321683737*^9}},ExpressionUUID->"6b3d90db-0d72-4539-a9f7-\
e563486781fa"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<test.tar\>\"", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<photo.png\>\"", " ", "\[Rule]", "  ", 
      GraphicsBox[RasterBox[CompressedData["
1:eJxMewVYVGvYrUfPMemOKbqlu2volhakpUsQE8VEwAIEle6U7u7u7u7unpn7
bfzvvT/P53azGWCGWWu9a73fu+ms3HStrl25cqUG/Lvyz5Ur0PnxIQ5aRxdn
Z7iDCyxYx8e4433cwTruZBN7toc72sGegOMh5uQEd3SAO9zFnR7hjg9wxzu4
w23MyRF05XAVd7qPOznGnR3gzjZx2+NHnfGVGe+Di36ntSTXjpQPj1dNTJSN
j1WMTDbNLHVtzfVtL/UcLI2crk7jloZPFjs2doaPD2Zxh4u4A/Bjl6GTnbmL
7VHM3tjF7hR2dw63OX260LGzPXiyP4zb6j9a79+vr+iye26i/1JZ+yVaw1tG
yUVM0pyNR5UWKURNzUhGgSCloiE01FfOzyipTKyrjq/pKhtqKByqTGosi63P
/p6f4Z+c96uoIqu7OrevunC4Kqe3NKOjMqu7JKkxP6K8NKKy9EdpWWSVkqTy
7Vv/4d/Bw8e/Q0BBxSyNlHdmN/0o4Ris7hSm5RiqbP5VysCPT+0Ji9JjJvRj
ejlvVqVHrKqPWNS8OdSfCui+FFJ5JnLPW0LPU1jRg/nFB9eEj9HRL8JjXoXH
PQ355eQfbvM2wz/tT3BhdmhhZkh+2pfsNP+U/KC0xrS62oTq8pSakF8/nMPs
7T5bWgXZ3A+wNn5rqu97T++pquojcWVPdhUvRlU3eiUXKjknfDkXYlVPatUX
cL3n9LovmHVecGk8YlVwoRO3Q4pZIiTsEPKuLCqezBpeDODpKXkyyD2k8fbT
mxpaXO/d2h3YOx6+OOk5nM/pXSof2hk+OFjCbc3i9i/fiPU53OrYaXdWe19a
83LPxvLkydrk6erA4UzT/PLYSXT8H0MvBaMnSoaPVQ1eqNx/o2f9ycA28L5N
gKmpn6a2t7SKkyjaXlDBTkDahkfGikfW5q6cNbusNY+MLbe0LZ+kNVgCUlYC
MpZCMhbCUjb80rYC4MHy9gLyD0XlHorLPxRXtBNXsZVWt5Lw8XXt65o42MMd
nmBOMbhTDPb8And6AiCKPQO4vcAdHmIASnc3cLNday0xlXWfM1rDirujq4YL
u6ZbFqc6NyfbVia7V6cHtya61weaZ3c2safHlxjex56c445xuKMzDMA/wPzh
Bu4IfBVwYQcLYAkwf3qKOzy4ONzHQd+yd36yjTvahugAiHC0hj2BeASO2MMN
zFrfXsXX5KR3X6ui8jpzm4erekerR8ZqJsfqJ6fbl+a7thd7dpcHDtbGLzYm
sct9+4tt67sjJ/szuOM16DfureEOFnH707j9cbAw21M4QIHVoaOl9rW9Ecz2
4MVm1/HqyEnIr19GT1S0n8iruIsqWgmI6DFzytCi2Emo6Ylp4CSU1HgUVPhu
jjYVOU3l8dX1aXWtpUOVqa3FMdWFv8uzg/6kBaTlJ9SU/+mpzR2szuspTW+v
+NNVltKcH12Z/7O0LKysOrLSy+Ip3p1beMT4JJTE9LwwURMmvecCDl/RrpH3
PGIMnX7r2n1XNX0vqvmMS/Exi7I3SukRo4Ini7wXk/wjpIInm7IXm6o7i6Wz
qomzhLInq4uvbuTH378eh/58FvrTJ/iXY0Cwxctkv/jM73nQ+pKT/jkjzT8p
1z+1Jq62MrI4LzL3W0SA128H+8+WlkEPjD8a673QVX+srOQpiXblU3NkVnFj
VHNjUvNAqHgQK3oQoj1JlX2o1Z4hNJ+jdJ8xaj9GKnnA5Z1REpYIEUtaIWuU
pAONrCMC7YRQegiTNib5FvxiaWxvvWvzZPDoZOh0vXZxOqdntWF+d+piewaz
NQ0pz8bk2fLE2UjDTGNU9VzN7Mrg4eLI3urY+VTt9PbwcVVVm91rUyt/DbAe
fNAxfatl8k7XOkDfLtDI4oOe0SttLR9FRWdJWQdBOQc+CPA2vNLW/DK24JwP
gF/mIR8gBbgibS0IlryVkKytqLSdqKKdKNpWXM4e4F8K7SCrZKOoZSsb+P39
7OQWABiA3Dnm4uwUBzQZktx13Oku7ghg7xh3tIfbXMQMVoxVh+Y1/CjsjK7p
TKoZLu6e7Vxd6t+fbluf7NiYGdyf6N/pqZ+uzG7ZWMbubUGUAZwC33t8gjnB
4I5OseDK0f4FoAAoBJDa7+L2t7GAXKdn0BE8+H+qwAbmdAt7Cr5rD3ewgr3Y
vaQJoM86bqVhJed9WNyHwNr4gr7y7qGqrqHK/vGa6YnG2dnOlcW+raXePfCU
wF9yfRy31LG91r6+O3x2MnvJuD3czjxmewYHxP8QHGdw4HxrEjfXvLLatbsz
hNntOd/oO+2qHbf3sdB0l1S245EzYhNAw9gFyZnYSOgYieF0pDAEEcA/IwNx
0Md3Vdkd5QmVDemNTVldhRFVRREVOcFFKW8S/wRllKa2VOf01uYPlKW1l6a2
FSc3FcbX5YaXAf2v+lEc+TaWGcaIZKfmkKGTMWfXfyJg/1nS47eaZ7zB03gD
jwidh99VjD9Kaz/nV3zEKu/JruzBhHZDKTnRybswyXowyT2i13fk/vDIxciJ
X82bzfyxxLf3gWEe3yK8A34++Rxm/ybE8kXyq+j0r1kZn7MzPqWnBCQnfYz7
8y65JDSn5MeftLC0r4lvXya4O4Q+MP14T8tXWc1DSsWVA+3CLu/CpebEruLO
q+bOpeFJr+6F0PSm0fCiVvOkVPeCqfvA1Z8iNJ8iNbzoQIGQs0dKWsElHsCl
bcjkbEmlrMnFTMkU9Skqc3NX+vd2u7aPeg6Phk/ny8bmCge2ure3pnHrE5jN
Gez29AXQmYXBg7bkur70juXOncWBg+WJi7nW5cWO1cH2paf+Hg6BWp6hRm7B
JvZfTSw/aD/w07rvp2n5Vsf4tZruC1XNx3LKzhIKDoLyjvxSDgISdgJSNoIy
NkKydvzyNoJydkKyD0VkbERk7cTkbPgUbUTkrMTl7MQUbMXk7aQUbSUUHkqj
rRW0bWTDfgXvrJ5D4D/BAuRfHGMA6s72MKfLuNM1zOku9vwQQuny+H5HRkvD
95ze6OqB1Pah7K6pmomFnvXF3oOZ7t3Znp3Zvu3hrtXW6rGy5Lq8H7lb67jd
VSD+OGB79nexx5c8OsRiTgAFDjGHe5j9NdzxOsQyiCDbUK0BdQcUC0AWwBGI
fdvQ7wUm6nALe7yKO4dqB/Z8Cwee2HTFRMKrwNiAz81ZDV15LSPFHWPVU+N1
05P1M3M9awv9+0t9h0uDx5tTOPBHnm1a3u7YPByF3BR4mfsbF9sLAPaYvQXs
7gJ2axazM4Fb7T4YKR1d69gBLmitY29r6Cg6KkndSlzelENYFc4nQcPJTcTE
RsDIQABjIKVFEsPg+JTUd/jv0oYFhVZmdlTGVtUk15ZH1RZ8K8gLLcr4mJHq
G18QUQrYUV0wVJnZU5LYDPBfnNiQH1GdH1pU/jUvNzjvnqammC492pHrnq+A
9Wd5t19aHrHannHa7jE6Dj+1H3xB67+RVn8qBNyIrCublBOzzENGaXtmOUc6
eWdWeQ9WRwfJsKcvDZz4lZ6w6Xlxf3zjG+YZFOkZ8Nvzc7Ddq+8PnsS/jEwJ
ykgD62Nq4vvE+Hex6X5x+UEZuUEZ8WGJX5LfvEry9AyxN/c1VPDgkXFilntI
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
DmT3DhUPT3Yury5erC7jGluGf6ZHvop/ov1YXOuJDLRV5yImaycudo/36Qvv
kf7lzTVoU3hvDbe7DGWBgwOoEwX8D7QjfAZZHWgcaB8SfEjq1y57QQdQEIAm
kc4xl1OpEOZBmTg/hQgC/D+0W3d8mYU3cNgl3Oky5lvoD203RVNPdGxkyOLw
1nLfLrQjUDw8ljcwWjHelz/YmtQKYF+f2FD2o6gmvqExvbOzcLS5aKwutbs6
rrk2qbM+pbMqurE0pKTqV9lg5sBo/khP0biZmiVA+//zP3/Bf/PmTRgMxs7I
TEpFDGOEwE/DB0MIUoM3xcr4XppfQozrl1iPkCjX4B/2H+N8I1MDcpICMjJA
QPicE+OXAEgR5/bjl/d3A3M9mQeSvHp8QtIoa2ZSe9hVc9i/XGxE1Bzkd7nZ
uJAIRnpycQbKl8ykX1gJPRB4UjAaYQS9HCOzGC8ngwQbj66YigqXFf31+3RX
TFC3XYVEvdHaH40ffeJgi2Ch8ZeSfqfvYCMqo87KrsLOqoD8Tx5+HX0XT/oB
TFOTxof2qi/NVWNNFNqZW0MRISd4U4bvjq4mh64n/z0ffh1vQY1HIm4aqDT4
1WR+KlNDKnFb0gfG+Ol2smOhocnmQhrmVPLW9JrW9D+eedQExNe/jmkKShxP
bV6pnoVEtW17qW5qKL29OiBxOK52LLe7L6p8smgwLira/oOuR4il65f79m+N
jDw1RI24OdHUrFKU9GJUKDFylDgJvRQBvSw5Sp6aAc3MosHKqcXCq8/EY4ji
0qFjV6JlECOivktIxU5Cx0VOz0dOJ0TJJo8S0GaX0+MODf5wvHIOTMLpxuVU
5wXU3j/dvcCd4PZHj1aKxudzB+aLx4HhX6id3erdAeCf79kBfgCk1/LI8tKw
osJveSVBOQ1h5Z0Jzb1pXe0p7U0prfXJjbXxtS1JjQD5o2Vjw2Wjk/Uzm9NH
QNJ7+pe+x8W5Bbl7hjs9ifc0fiNl+E7e8K2C0StlYCBV3GRkTUW8XngM9i1D
KWDxYmcdt7eC27s0QscYDDQddwJVqMODi6MtaBwCmsTbh3r+0MzbPqgIUMMH
6lxdQPOo4MrfgT2IFzu4C/Aady8w+xAdLnaw2wuHH4ICtN2lTbwUg74+G2of
XxvaAxFgsnAYxK7+osHmxMbayKoawPGvuYXfcgEF6tJ62osmG7IG6uJb6+Pq
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
tAwbHxsNS7S6jYIGkP2HaBU7ZQ17FU1ntImv7sMgi8cR9vofFAD+jT8qmfor
mQWq3g/Stgg0uP9GR91TXtFcSkZdxMrGuKqyfX0Vt76MBWtzBbc2C4VigHZo
QO4QGvsBjggyQjvnUBdrGXe0fNkOOrhsfh5DeRlqCh1joGh/Dk3uQffIXNYF
zDYWGCHsMih8mIa6bmNrIzFtdnohWlF+lrD3Xwcqx4ZLB9uSmioiSkrCsst+
leR9y815l5LuF5cTXFAW3VCf1Fqd1AHyb9nPyorohsq45tKI6uLvRbXhlVWh
JVWxdRrS2tdvgCBMcPsWMEH4+Ph38IgIxehoAvg5P1ET2CAoWNipKThoKFhh
lGy0cDZaKnaYjARvmOP7n2bPfxh7h5j5hLsHRjwL/+n1LcI98KdnYJDT6yDl
B98p8X5SXHFBMykay4jT3ZSgJJamJOdhIhWVZ5fnAeaXTYeZSwNBoY24pk13
TR3+DwctnjDN7e/IfzNh/3xBXLfQlmVBEMKpCeioCEVpqLTpmTxlpL0Ybvoy
/uNF94+3vJyvnp0eL58oHMZORiEMIzeSktRiYtOguGoMu2LKfF2aixpOQmBO
TviBjlKHiUqDiUmGGgagp8fHYEp7xYzyioe1UPATvWbBf1tlKD5z/Btkxm9r
waZgR6PyEGmsJfBSXiuWh76c899KPcUi319A8wfSa7qSawoff28KSGj+kt3w
Ljnu9Sc3d7SNr5aJDd9LJQ57czENOy4lSz4xYy4RQy4RM14xKy5xS2ap+6wi
hhy8mgguFdTfdiizDAODLJJBmhrQgQ1Nw6FMAwjCJgtnloKxiVALiNLHBAed
bmBwizjcDA63fCn+O1jsAm63fnk9f2Srdm6hdm6+bna2eWG6ca4zp6syoqgo
JLcg+E9BcEb+17Sy7/kdsQ2DaW1DqZ3tSW0d6e3dWe3Def2zhSNzpeNLdUtb
46ezE3vJObkuvq4atooqttIqdkrqDmrqTuqajrKqjrLKjopaTnKGj1StPpi4
/bAx/CBl+EHOxF/Z0F/J9JOaVaCObZDh/Xe6Wt5oVRtZZWNRaWUuUzOtvJzK
pYUzEASg3bEl7No0bmsBc+lwoA1iaPJzDXu6CbVwoaG4VdzZPLRtBzW1NrGY
y7wMaH5ycgbKAZSFz6Cpob9DEWABCmAWQBbAFebXKusr8Egw0tCTMqFo3jj6
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
YnCwAtHm5pJEs0iyMhRpUDRpgA4TkmsqCGk6Ehw1yYAB2ZYNWLcHfaaIEEFE
oi4y35Y8TQ5ZIUmVhSEbNgMr7mA7Emq1R0owk9Ex07PR0ZQIUs1wo0bxlB2y
yHp1EIMD4ixUMRwUb6zJXxmDXTPkkD24n868ckXGT4BGnIE0n4tsCoe6Icls
xEVuwE1rzU+pwkqpwMakzU/jycMYgudVxVIpoikt+alDFBn9ZASD1BRDVdTj
NTTzDd0y5NTDZfm8pAX98JhUTarrRuQNV2KvTTReHqot6ryRXl8QVXL61Dmn
nHDj/sqM1uKzJWdt828nFfRnFo5nX5rIvjyZe2k0u2AgLbUlOqbSyz3T2CxQ
5mL26c8PP/1+Sjhc/UFk/ieEb9MvX7QuPWuc3W2Y26mfW6waHi1s7kmr6Uip
7kqp6UytGkyvXShpf9ww/bxtfa9t7UXPg/e922+Hn33f/PFx77ijfTQoIkRJ
T0pMCSemihdT4RPS5FW2F3eIUQ0usDp9wz+lLiSvPql9oOHhztPfX4ktN4dH
/wZS/h7BT5jq/xCInP+HcAiD/+8hMcPw1xeCM4z8LH37TFgCwU9jhywzeLlk
WzhlGNsmGhgHaSnbyUvoCAuqCAqoSIrrSCtZiRn5yNqE6bgmGLqe1fc5a3m5
omhz4wBWQa93iQ0SH54SffG3Tyff3hI+vSS2hn7fO/765OjLI8L3h4RPyz+/
rP7+vHH0euHX66Uf8Ebw6w0Bxv+rpR8Hi99frPzYHNpd6t7Z6N7ZvrOy2bL8
YHQ3JyFPQRwvIcINSyBOPAcLN5oRS8fBSRfq4NRd0Nqd0tBy+kprckVDYnl1
wuWGVFgIwSXQ1V3c03mhs/tK/52E3DvaLDflQZkQdaGlnYgAP1YcyyPLjpVl
kZVkTBclK+EHRXzgNCfCHU9vLkjvwodzVJI1VlZWYqLJE0fdUoduaILTeGDC
QqPFxaGEpTfBo01k+UIk0a1cpHf5kKX8FOacnAoYrDwrcwwf7zkMZfMp9N08
nnIHkhIVhDozAk1N2WQEtn3AphtyyBgRKAg5S4Jz2ohqYTCCIRnHgUlD6J4r
mPEEFYaAg46CjJ5GH0uxrUv1SAnaUSS/rQCyDUgrvJivOOM61cm+hyG+hIFX
oYh+Z7BzmfVZHb4nGp3Og9rRpNhVRPYKUmhRUiqgOXTY0BKMtErsVIm8ZLdY
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
dD0m+WJk8+2aD5vvCLuEk71/0RC//5+L9R/b/z4i3kZEvAvpkHivyqcnHx4P
rq82TK7UjW80zqw33V+un5u/NTt3c2q6ZvJezdhk1chY+dBoxdBI1dBQzehw
zfjg9eHBiqH+st7ekq7eS+19xR2PHn8emrpXPVBxsTczoyM+qSEktMzTo8DC
LdPUNYPYC+2aZWF3zsw00lDLR1PRSV3OVlbJTkzDRUTHS0LbTVjTXkDJHE+M
wlbn5pNn5xTlYuVhZ+Egvp/il2eXNhHRdZMxOqVoFK5qEqloGi5nEqFmHKJs
E65+Pj1u4M7oYt+jqfblyVvTi00LD/u298efP554tnBrYfLyaH9Oa292c3dR
68SNsXv1M/fqlybrFsdvjI3VzAxVTXVd7KjyjaiwVrphJnBRiypXCYpXoPT1
kIs5Y9foxPfAnnLVk3RSG7Qqo7LN+d3FBP0ExdIMbLLNnUPVxZ0lWZ1F6GMV
qVLkqbzZqNQw5EZ4IM9JwkxHxY3n0sVzVwixDnAj52VRPcbgijaAdTU9HZUg
M22GIGuvEOquKtTpDlrioRRLgKEgTVNH3A+CJjygITdwURdwMJJL8UE3DBHv
E5Awr75KBAMWwA0PpRpBMaogXhl4CSPOSkKwGoGlyPsksB0J7LgBjpm02BKq
tkdcNwXF6qBLF/nSE+yagMfaYNgR1NuD29aoRlNIgQWhgSadkaWawpANC9Dc
0UckqyCFqcCQM+J3GviciHx3CkyZEreJVC0QY0kSI4x65kj6xQT5iA9akwL9
JsCBGwhgQLgI8oEt9EKZZJGTZFEX9SgCzNsSxZKbEVOEEae5ICM7PTWehV6b
ndZahf7spWAzWW4XPMZdiTpADmSr097ycOxOvljnFX3dzLPS2L3M2PmyoeMN
a98mv9DhuMzV7OrXNWOvBtaHmxqyi2OD890SU20qg0yaPF1KovxDs/38cvwC
8wPDc4MjLoXH3og/V52cUhlb1VD6aGn7aI9w9OSYCP7P/+Lgfh8T29h+H8OF
AFvaE3h9Pfq1/+35zLOdltnl2om1BuJhzmrjwuLN6Znqsek6mOfvjl8fGa8Y
HK0YGCrvGy7r7b/c1V/WDVN9f9Vwf0VfT2lHb1HrcEnXQu3kRsv9n1+JeT7P
n32bXd6pH76T35ieWB0SUOLkkWXikWnglW7unGRqFqWv7q0qYybLry7Jo8wj
qMUrZSSgbCOi5iSk5iiiZi+qYiuqYikkaygqqCbOJYXH4LFoHjYuSU4Rfbya
o5hegJxhqIJRsKJxpKpBhKJxuJJ5iKJJsKp/rGPV9drZga35zrWphumZupnN
rq1nE3sbHauzN+7dvTzYn9vSkVbbndM8XD42Wn93omFmvHZ27Nr4EGyTy0fa
C1uvuvpeNODLNmQ7r0oZr4gIkUWFuoqfzvCo9hVfcodmPBDt+iBXmsoDz5ak
pZlp5JRt5BwgL2WJZ7cREAzHcTXhWMe46ZpFkF48QBwmc05yPhZqTTb6Xj6m
ORy0Kwf2XFFtxiBMCsnCSCHNQtkryDrNSbophpwyQeV7gvRApCoOacCF6vGA
2hxBowW4bADJ8yIwXKhoBcSLVMRBKngWD6ZdEO48IF4VChVHwOpdTwjyw0Ow
mIEd8Yuz0EY4MMJA3CwUKeYg0RARrQbOSCOGbREfz4G38eB5IBLejM7DQkUP
FMCViCHNEaZ6poB8JEG6LUfXrIx0F4bMsSQPwgBcSh8ToDdJpCXqiLMayIos
8TNebLBKP04BP0Ohjw6IHWtkhgxgZ0Qqs6E2vFF/TkMfXYnvzjZswZI7cZBT
gYPE3oDd1VaCi52alYFGBEujzUUV7KaYYMCZxoxMEcK7irMES9Lk6ytXn4qp
jThX5RZWpu9WpG15SdvimpF1lbFJf2j8zoU7r1ruztW3XbualXX5dEl22K0A
g2lrzQUz3VuhHtFZwQE5YafyQ0IKg8OKgiOKo2KuxGVcPz82Ovjz2S/iwf7j
Y8Kr4+OfRIf7X1fDf8kJMPL/fjz6sPrqSefi8o3hlaqx1ZtTK7fmlhum71dP
zN+YnL4xPn4dFjbDRHkDI/9q7+C13t6r3TDae0pau4ubu0vae0vbRq71TFUO
rt6efti19rDvwXr3+q8vx7++H//+evL9A+HNweHqxquW/sGcG7lBuU6eaUbO
50wsoox1fVWkraQ4lUVZBbnZ8Bw4SYygGru0saCyrZSmq6yhj6KFv7K1j4Kp
h4amg46MiRqfsjhGlJ9DCi+sg5e3FdfwVjQIUYRLwCBUWT9MySBEySREwzhE
SS9U0TpS71x2fMfNnumOtammhYnqofuN8xtdK5NVYxPXhkbKhgdyO9pSaluz
bveW9Y1Ujw3VzYzfuNt/bai3tKe/qK89u7HYyeG8NiZajeaUPLmvJJmLEImn
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
xXHOUozewoyhUgJnlGRSFaRuKnDOSlFsypOsyZOP2KpfjvSI85VPteZp0KIf
1aaaMkQvOyi2+VlGhRjaJJh6pXkH5kcEF0SFF4ZF5UdW15Y9nds63PpFWP1J
BP+Dv4TtQ+J0/CsC4fXJ0ePvr6d31xsnYMK/f7Fz+UrvUsXgfMXI7LWh2bK+
qasDo1eGBi/3DZZ09he1wAuGfdcF+Nnak3e7N7dp6ELLTPnAesPU47aV3fYN
GPbrt+YXb8/DgF9uXSBeZNaxvNO+stO9/nBg+/AbcSieeK3qO8Lh22O4+v6+
O/n9ibgXfH1L+P7u6OMbwur8u+qKTmenAD5eIToaWjoGaiYMMw8fTk5FTMda
ztJP3T3aMCDJPjDZ0fuMk0OMnZGfubqDlrSxpKSRjIKVvKqrHPG+7yAV/VBZ
/RApGO2GYSpm4WrmEWqmkerm4ZpW8OdoDbMYA5c4m/iMmKry6pG68cm6qeGS
nvYzl3s19efkxOctDQeDkppjSxvPVLcV3Om/1N5T0ttZ2NaSd7slr7k+uTbF
wtlajE5TiNRUlt1VVcOai89SQMJcSPKMiGAnJ9kEP5hTQt7TR5SrUXhyMEcq
6IXp6cC2Ll0etXMKPA6BVv2IlF5njlJmRWDpKDKUSPfiEbuRYCcYrIaBsQCE
ET9gZ0Y1mCL2Y4hM+8AfMWwHVDEoahgbPOS7dhQvnMC+J2rTA+ElgiJnpDQR
JymwgE5rgAQFMG8CPTeHDuzAm3DSIjVSHD0IU4FCdICfLgjTApq84JQQ6tH/
WLoKqKi6LnpfzAytKEh3d3dKd3d3D90dQ4uBiaSIKCGoKCaIiCCCiNJKiAg2
tigC87/n96911ywYZgaX7H3O3u+dcCTMG4N5bTBoCM6bQ+csoDZL6Lg+kOEi
sHDRs2LeRIAmQRq+ZwceuYOpaFKBNg3GvmQHmjorcN4O3HSHqzRAgxByTZSm
TorhrCkYCQdzyWD5IIp5ZFVBYCYDN1rg5UZTEfBqKjKRhGJyK1AWFmMlCeym
LVcFnzPB9wzwOQpdcgZLB/b1BzDc0Qc9BiCbC/Xg4wpTU3IWYvcW5QuXF0tV
EWnQFrytK/jAVGvETLnfVaUowjDcQ6jYnL1Wn+WCPu01c/Y+W6EzPoa+wYbW
ZCOXVEefAv/wA1FR5ZGFRzP7r1z7M/V1+8l36vAn6tj3rcmNnbm/1AXqzjL1
1+y31zcnn1RfGao4N3KobRRzqaduPqy+M3Dqdv+Jm33Hrvccu4r96W8c6rx2
oPXawZarFa045svP36hou3OoY/B417P6voWWxy8vT8xfmphqGR1vGnrWPPzs
4uiLrqn5q9ML2Lk2s3hnYXlg5dXI2/fT3/Ch/b/xK0ubf3a2NvDpzfiUnn9z
2/5b8vL9K/X7x62NL9S15Y0716fiyXlyMup79rFx8nFIyolrGsobOSvZBus5
xpi6J1i5J9jYRlmbBBtre6ir2Cgomsuo2clreqjoB6kahqsbRSqbYBQgq5tF
a1mTtTDk28cZ2Mcb2ieZO6faeGTYeeU4++Z4hBZ4Z1ek1548ebO2+27lzavR
RaMGerMmcs/2iz6wsLocmHEu8Vh77tnLpW3tBWcbXfwuegS0xhQWuUR5yEha
CHI6y4u7q8pr8exV4GXTFGQPUpFqlqIdMQKj1mDEHjy0h84Z4q2O9qL83jqK
DjripbqkkSAwGgyw2PgoCZy0AbJsBEFmEib7p8nwk2Dorj90Mxg+7AiE9iH6
vMhgIGEiBBryBf2eIF8NsLAS5FjRsTD0Yw5YiYPmw0GhCmBnoVGSIAbrAQN5
YCoC33UivgmF38dDH7LAYX0EM6HWCrC6BDCSQWxlIRkuhCxNXAgnLviDRU+o
zxYUaUHpuiBPC0Qrw7ysRHUuWjUeoggroVAF7lQHV3lAlyDJl4tGjAeO0iHE
6oIyU9BqD55YoXiZHA/tQ1m6LlvoZgA0XoA0uxET+JA4KVKJOrjuDmF6bCIC
GokkBIgDJzFgwE27l4k+QIDwPBx6kww+p+LnTSn7x27ND13aj0JZssSh/Zz0
NhJszlJ8zqLcXjIc8Yr7arWZW/Rl6jV1L1tbdzrrJHgo+BhwpamRjpixnjBm
bDTce95avNhPzy3E0CzYxJJs4ZLqHJwXln4wqfV8w7vRl3/G1zcH1qiD76gj
n6kTv/DIP7P5bWRt4fKj4WMdgweaHh1uGT1+bfhU90DV9f6q631VN+4c7bp9
uONmWWt3ccvV0nNdxQ3Xi5q7S87dKDvfe6hz+Pjtybr++QujCx3Pli4+m2sd
nWkdmb048uLS2MuuyZdXZl5en1u5vfC67/Uqhvn5X5//Lbn+/H5nbe0bHvY/
/hvA/utfQd3mvzaZz/hsauxguggvtPuGL7/472DpoL93Lj4mX0lRTViEX0pB
RHG/rLqdpp6LhoGXhomvnpGPlr6Hioa9moq1mrK1nLKDvKab4n4/ZYMwDQNM
+ZM1TKI1LWK0reJ07eKMnJLMXNKt3LLsvbPt/XNd/Ch+IYWBoUVeIUXewYU+
qcWxNUdOXj/W3hNT+NRW75Wr6oIp67CZwHUn93Oh2edSj7fmnTmra3KHh65f
jLVRgD6Om8NPUMaeW9iKj0OPh1lLiN5BjNdagNeFg9RmBD0OQIe9kQfOoN8J
nNQD9jwEDUEWC01+J1GGSg0M5OCaF9zuBy7FgWxjWIyNJLmHeEZr721FtFcN
NFtAJU6Qpw7g48XLFe5jL3YG562hejuCswLEvgc9Yoas5MHz0eBpCKg1gjn3
kAT4aIyUCOIiqBgXockcXkmDltOhhQxw1By/1iQvQvAQJDVK0tSLoU7chAgp
8DQUmQkB0yGg3Rr4SAELCWAjDWzEQBg33CpGf150d7wAWqwF+vShR1LQqDRN
Ph+dpihipgBMFUCkDv5P+hQHvXOF3hgTnpkyHTdCWsJAXwrarwGPiEG9Qrva
DWjqbEGXBxiKQuIx48wHn5WGa4UYkvnou+1xoz0fhfP3/ZG9CxfE586Irl5R
HCqTM+FG1LiIAYKkYkGmSkG2Irm9hwxpq/WFShXkT+hq1zvohhpxOyqzuwgR
A6SJmTrM5Zq7jmsIFnhZu8XZ25NNLUP3W0VauWW6pBWS+1ubN6e//L63/Kv3
xc7Qm53Hn3YmvlInNn4OvJ5vuvuwpGGgsOHhgeaRw+2Dxy7fO3HlzrHO3hOX
ek5c7q7swPT8tbJzV0vOXitu6i48dzO/8W5Z8/DJq9NnB5bbnqx0TixdmVi8
PL506dny1Ym163Nvby2+71l837v0/sHapydfv734/fnV1vrq7/VP2wuv14cn
Zy/evF5ec4BcEP3/5bxf8L0z/02m/b2Bz6PGWfADJ8Kf99v4Arv1/291xNLB
j0/b66+379+ay0wt1duvLyItLKYsJKotIm0gI2uoKG8oo2CqKGuiKmcur2Ah
rWIrreUqp+ejaBCC2V5N02hM82tisscm0RiThe7p1l65Dl4Frr75HsEUz+BS
79Biv+ASv6CSgMASb98id58811hK5NHSkpuFlY9ddOedeWfdOMataW/aijX4
hJX4Jxba+PeqSE0qMowpEG+KovWasv6CXHpcjAb8bPsF9jkJiO5n42LdzWLJ
zdDvy/U4nHY8jTiQxNRuBY7qIYb8QJWD/qQi/3U+mieaoNcWVJjDqRYg3QJ4
KQP1PaR2KfYBPoYpUdoZa0KWMrBRg3SVgRw/guWIKktw1ACU6oI0c0hSGNXl
R+8Fggf+ULcbOGcJVDggJk4GKXFaAQFaVja6NHV4JhI8jgZDyeCYKSTJharz
oxekaa5x0lznZarmpUuURPp8kH53MOABl2pCSnwoJvhF+QgBYqBXGsGM8y0+
+gYJ+lxFaMIHmnUA89bQERVYWgASFSEqSiKYmpqNAu9T4C9ZYD0LuWJHG64F
TkeA2WjwzgosikNjEozntXcXG4HWAFBiRCiTRF9Y0E8IQve4ae9qoFgiG/TG
OxcuWgKKOaExCl65aFhiyWIphRqz0dQp0T7RIA6xIz38jFX6NPn6TNniYif2
6zaGBAerSJgI01jxI6ZCtD7ixERZlmJ1hQJZpUNewUnx4eYRepaheuFBpgfs
99eqS08eOfXrwYuNO8+pQ++pY1+3x79+7n0xU3/jfkFtf/bJQUrDYOmF++UX
+stb71a03jzYigl77PFWWVNXYWN34dkbRWdvFTT0FpwZPnxppu7uq5bRVxfG
XrU+Wbn49O216Xc3Zj/eWli/s7Q+uPx17PPXiZ+f5n5+XNxYe/V95vnK0PiT
ltudJ9qPF9cXJh0lB1PcXJJNbeP0bOJMt7/hTZH/dYRt/ls6+ec7Ln7wBcR/
8E7Jza2/2DOYTcYnef637fTzzo/31O/v8E3ZAz3zceQMRUVFXmF2AUkOEXlB
MQVRSTURKS0BGT0Ruf1SKqYyGo7yuj4qxmG6NvFGTsmGjqlGDqmmLukWbpl2
HnlO7vlY2PcJKvbFwB9W7BlS6htQHBxQEhha4h1S6BlY7OlDcQ7Id0/Jj6tO
iu93FJ/02DURzHTPc3ejIX2SBFeSptVJc5chDdZnBsRhJXBbBtSKIX48dAbc
HPvZWeyEeO0F+DR49wby7bslsGtaEl2zQ6ZD0PNG4JAeHsmD+aGbcqyT4iyr
augnL+iKDewrBxkoAgtF2FYA9KjTL6gxrjqyfYsFd90JJjxAQRbhE4E85OB2
PWKnNNNdCeI5LZKlCsLGgZQagTZnfIZDuT4+4UqLiyjMT2DnIe3dR28rgd72
ga74Ih3hcKERwCSNsyDpgSIYEqUdEiL1yNGXyyNYcMY1vw3IUAR6XBAfBy0H
G02hMmHSGIxKQSNi8FlZxjxJ8NQXTPkhk0EgRRbi4yHyCRNlhZAyLTAZAC9G
gzdpeHmGnwSw0AaXQ9GPmWA9Grx3AKtWtJWadHEmEMWZkCmOvI4gvfcBL/XR
aTkYE/mddgCjXqsp4soBTMUgTyVgobyLj4FGZx/p6n7wyQe8MgbPZGm7VGmi
pWmjBPnK9eSKbGQsBPcp7qPREiA6afEEKPAHCLFEi8kc9QhvDfG8VVSSERVM
9tA4bSJ7RZbjkiD7cDj5193pP/fmd0beb458end7arKu+37+6fsZR4fyagcK
ztynnLlb3HS78Nz1woYbRfU3Shq7i2q6Cqq7c0/fyqntK2gcPtA2XXXjVePA
WsvI287xd5eefrw696339c/hj5vPfvye3vg+9+vT3LeFmdXJycXeof7WG+dr
OqsqLpTm1idnVsekV8emnY5MPBEYW+kXVOTklW1ln2Rql2SOV5Z+ou58xWM+
Jn62tvFaC4wLeKEplgX+4E3EeJXdr20M+Zuf/i0z/UT9s76FMeLH2vbnNzuv
F3ZuXR6LDE6QkZHhFGTjkRQQkBMUUxWQ1BKXN5RTs1Ux8FG3Ie93zbD2LXQJ
LHUJKnMNKHH1pXj6UtyxsO9f4BNQ7IWBP6jQI6jYO7jMP7jEBztYIogo9cN4
EVQShL3GJ88voDAoL9X9ghd/j+eeC/Z0R/VAjiySosGfYmiap6hyU3v3E3O4
Rw++pA4aFKEYEVidg2QrLmHLy+EmJpQgzvpIYc9rvV3ffUlbGchaGoyBLUAR
DlVCetVIayYM6wH031Lw8ss6AyzCA0EhVJaXcFoDXXcBX6LA53wI+1GJBuDn
IHEJEwwE4DtKtP18u58K0L40ocmQJ3Jzw87yaIkZFKYKURRIVxWZ2iXoE3hQ
XlaUaS+DpiCx0gYUWoE0C5isA/hZEV9hdN6T9MIBWrCDRhwJeSpQtC6I1wTH
tUGHDKFFfG8oJw0vC80xY3xwypwdeOEAVykTcxRAnxv0wA25ag/0uGn28e5i
4adxU8LrNO57gCf+YC4GytFBJMVQd20wGgrepiHrKcjHROQJeY+XAhruQEzT
RUe9oS8J4GMU+EqGFrygRj201gKcNAbGvJAML6TBBVlxoJp76BzY4V4zsOwF
vQ2F12PQaXtivhziIbTLg08gTEVQmZ1OeC+9Fh9zmpVppqWpvzCfNwdngob6
IXLguaLw81nBjXqSPdK7nkgy3JXnn0wt+NU783dgeePe8krHw7GjLfcyjvcm
HxzIPXm/sK6P0oDB+3ZBzfW8quv5Nd2F1dcop6/n1t7Mq7tLaXpU0T5zonul
sf9dy8inS89+3Jj/eXd54+Hb31Pff8x8fzP14emjZz1377TfaD/TVX3q4sED
bfnFF7IKLiRRmhNyGuLS66MyGqIya6MzGsjpddGpteFJJ4MjD3j75Tk4p9va
JVn8fLb5d+Yv9dW/hVyfqds/8VqLfw011I3fW7/xJvn/dBG+1R2vxNikbv7+
+/sL9fc7nAsbH/61NL6ivpr9297Y42jnKiItIqIiLq0npWyqpOugYRqg5xpv
GljgEHPIJ+FUcHJNeGptROKpiOhDAcGlgb6UAN9CPx+KN0aH4EIvDP9hpV5h
Jb6hpUEhJYERpb4YHQJLgwKKAgIo/tgJLPOJyXMtdJcuUyMUakLJalCwNBSt
Jh+rahQuyNugwXTZCGrRAk1aUKMGyJWCAyV4bfg47Dk48/Zz9dvTv7ci/M4g
bJeTqMehdwXgtCnkJAdTdOE1L+RHPLyRC38rAKsZUL4m4GEjMfPQGvAhTz2h
9ST4bTpYTQYPvIAhF8zIQa/EBt9QZpoSJy7p0nwNRwbcgCYbKicCB2gglsKg
QY5xQJSxT5C2R4xoyU4QFt1tIE2K0EFdFGEzGWAmD/OxExz4SROh8DwZws4d
D8hLHtKWgV2EQbcGY58APaY0WiQ5dJjRKgswHgS9iIBn4hCyOJSmBc5awy12
IEcdiLIisjy0cvxQpiE4bQku2oD7nnCVCZDgR6QkwFEj+KkfeB4BXpLBy+Q9
2bZcyvLA24zU5oBf0V2LBh9joHeJoNEUitUAhQbAShjiZ4WcBQlXVJEhCfia
MOm2ER2WaF4E4X1kszFoqRE92ZYjQIVFey+zvbCAjZigNg99oKJwmIKq9Z59
vtwsqY6GIVF24WHqFeaCl5WJj9XBI3XaIZ19S6UH/g6//n1vcaX93qOK2jvx
BbdiCvqSj9zPrr6bW32nsKa74ER3/qmrWZU4/ouqbxfX3S9tHDtwYe7E9ZXG
vvWLT37dfP6n/9XOo/WtJ1++T3xYebo8/mjy8p322s4qSm1WwtGgyAOOkRV2
CSc9ss+EF7XEFLUnUFqSc86mZNQnYPhPrw9Pr4/EWJDeEJNWHxt/IiT6kF9A
kQvmOh3SrD9ObH59uvlr4u/v5ztbi3iLwTbGgt//Oif/s8P/bW/EF1hv/f2J
lyH93cJrrXE78PbfPM83299Xdj69xBt750e/nDp83tbRSc9Sz9DFwDJwv1u8
ZWi+a0JlSF5dbMmFtNLWrMLmlIy6xPiTkaEH/YOLQzIp5HiyXVias29xQGCx
f3CZT0i5bwj2eCAQIwJ2gkq8fAt9/Iq8sRcEFPuEloVHJ3jFybGmyNEGK5Ks
xGnMxdkS9I2DRBXcWFhzRfa2K/H2CtOMS5OmDeBuA1K82G4DZsYaR97ZkwJv
00kb6ejvQ/D3o9CXA/BqAdrhC9xVoApT+FMi8jkVL2N+lQqehYNkNZRtL4lh
L72DMPzYB16IAKN+eK/WUR1YhBNl46Q9pkT7ygx+748FWLCaBWLkIHYWeg1R
Gm0OpEub5Zk0PKlEO2dLKpAnyosjqrIka2mQIUU8JUkbwY8IchIshNA73tCg
LxgKAg22ALMDfLxwohTdgg3DU2VoXJlpQJXJjxU+bgbf9ADDYVBPKGzGDSLU
kVRtkKyLxMqjhwTpz4nQHFWkCVeGI1VhDMO1dsCQH+YXwJNaswW45QQee8KY
UspXgMWEERV1UGwOHnuBmUCwFAEtR0PVupCVKOSrD1IcCZ5qhApVaMkXvDOD
p4XBfSH6fmuax37QcgboD0Fc+SEbVRpHLXpLCUYTVnZ3QREzob02kkRXGVKQ
hmiSllyhr1lCrG2kjeAJdbRLBwxakgaMwSMXmTfNHd/vLyyd73tUXHU1KvVm
SGpPNKUn4cCttIrrmZXXM45fyzx0NeNgV3rFreyT9wrrxyvb5qtufDg3/OMK
JpbWtsfWd55+2Xj6fmloarjnXuflphMtpYdasfCemN0cn3MuEQvp8SeDoipc
oiscEk95pDcFU1rjsJPfFJ9VF5dWjQXbcJwCDXFZ9eTMM+TUusjkUyExh/0x
gHnmOrlm2q8/3V6f2Po8uf1teufnHPXPi+2/yzvbb/AR/dtf/1njfzUYWFLY
3v6XCH7/W/71B3cKmz92/r6hbi5TN5aoGy+3fyxvf1mifpmnjtyeLi2u9Ax3
c4y29M12jq3wz6iOKmpOqmjPregoKGvLzDufnFQdH1VJ9i3xic4NO5mQdNrV
NsdbPSrLMajU27/MB2NBQKl3YLG7X4G7T4GbO8Xds8AvMNM3PNQhxtcs2tEi
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
FdqlSkrRB7lmsPkmsrQExVUL1DlgZwSTkeBRDJj0hqrUQeBGcMYZJbPgtRG4
uZF4SUek1wrfFwTu5UFzDcjVNK4CS7jAC8r0g6jrcRrCuGoG7p4L/qEuYVgR
aVCHB1yQm/5gNm7tskw2WChDViqh7/lg1g9+GYP7kgPex4FrDnC+Ct5fDY7W
wO5W7LCE99mCM07wDSfiRWuR7YZcadpQgSm53FUqO8jEN8DayseYHkCj+9FM
fI3MAkxtom28ctwjqyOSdiRnNmdm7snK684uHsgt3JeNJu2CXqz5U3YwtepQ
avlgSlFfYm5n3No9l9jsztjM9oi0pqjYbYFRVd5R5d7hxb6BRcG+BQGeOU5e
+S7+xa7RNb6pOyPzu9LLDxTWHCzdeqwie6d/+a7E5t25vXurD+7rOH3o8I3h
a4/GnsxNf/304M/3R4tLs2zm/P/OfJfeYINwy685f54zfz9Y/HVv4cfE7893
v3248+nd6Nv31+Y/jLx5P/r2w62P76+/e3P59duLL99eeDo//PjliftPD955
tO/6w72X7u86d6/5zJ2G42O1Q5fK+86W9Zwp7Txd3HmqtPt0RddwzaEzpT3D
kbF3PFQeBghMO4Jb9uC8LXLQDOxlgDpjXBVdsNKIu4WOHHOGXzbKvdkm8aGK
a74UvpsJJ20CjbI8r52MvxpIc9z5OMk49g7kTwXunB8Sqw1rboLWieF8dbkb
XMh3M3Hvd+NH86Bye8hJC2jJAXlZSEYKEpfiEpUkMhThUgbSq40MGRHS1Uha
6whysnwWW3DXLCVe6Ai/1+ZaSsQt78R3uwFNachLDTeXIvYjgnshh/tNPbnT
B9AUSbLriYMeQt8SeH8k8X7aJozm/3hV0oSdxA3ahlFXwXg9oq8rwdGZYGKE
c1TFddFF9xlIdAbh+nJBWzTkpIeISwiIbuI1ViKejUNGvXHXrJF+Vy4PbSjR
FpQ5gnB5REOSZ5M0n9RmPoct0HlP5I4WNCxDvqAmnKNEUNqMk9xINlEhphpC
TfpQrzEYtAbdNCh4ExJGBUc9oJfJ2Gngtyh4zgDcNeSqZOAOpICBBCjEABiq
A2tzHN0Q2SICpathy57YNTA7AXzUwU1I4i8xKKdCwLVIMJUAXmSBr2XgWw38
ogB6kArN5sH3c5BTPlC+FmQvB2y0IQ8GiGEAlHzVM/AtBjw9WoLddKUaW71E
U8GCYK2CRD+PYCebAFMrP4aFvzHq/IY+NJov3TzU2iHZya/IL6o+LqkJZbWZ
uV1ZRf05Jfvzivpy8roy0Gxf0p9cMZRaeTCtZH9KfndCdkdM1p7orL0xOV0x
uV1RGW0xyc0xMfXhkeXBoaj/F3r45jn659j55jgFFrjFVvmlNITn7k0t68+v
GijeNlje0L0te2dkSpN7aptvUosP+pC93a9wa3x1Y87O9vL2zh29fXuOHD5w
dvjMjat3xm88mL335uPTnz/nV77N/f3+cvn3C87SK87fN9jww58nzIUHK7+n
/vye+vVj4ueXGx+/XZv/dOH1x/Ov3p5+On9sam5o/NW+m8+6rs7svTDTcn6i
dfh244kbdQevVvWeq+j8r7D9RFbD8ewdR8r2HM3feSw2/2KAw4iX5Igntsfw
qDfYYw/XmEJZRtjEvqsGqDJcd1NH+LMOwgmAOJW4pQZw1h6Ui0IPLSSxCWcf
Cjudwt7Lz+knchow0dchV1DAAIn23H5mOFtVkGyKDEWDHd7AUxtKppJ69bia
tMiOkrDCZmKcFuWuyfoZDd4FSwqnkGc6npBLJ1oqgAEb4cUoMWYCF3s7/9cW
0kQByLNH1KSQ7baEP3skfnTyTtTgdkUAN3N4gySu0Jrra7v4lw6hqVqk1BYU
mQjcCxC674ibThGLp5O1tLmVNclqyqRGR/4L5qKnjdah+CfYATia4/WVyZ4K
IgFbKO5UaH88uJgDLmZAcaaQnCw+yAg5bI87oQ72qFJ0NpF0NpMGfMHzJDBu
Bl2RI/ynze26jiAsyhWkBp3yAg9skJtyuHNUrjpV2GwTsNcGBY5gfxCYTIbe
FoPFavA1h7jbgBhvCyW4Ak05eIMipKIJK22BLLbAg47wzyKIswNwdkGsGuLf
QDBnynXCCj8YAl1LgScywdVwaNAJNJiAMk1QbwZ2uYI4ZYDyL9oGyE2Hy4cm
EmFISVLDVWqINBqp7LKyrVbRqNc1akmMra9PbRxszG+qco4NMgm0ZgQZm/jr
0/0NDL31aX7GVtF2rhnugSUhMXXJyTtTs9ozULcv3Z+D4v/C3mzU//O6E0sO
JJQNJZTvjy3si8nZG5e9Jx59zeuKL+qKK+2KL94Tn92SmLQ9OqLCP7jYyz/f
wzvT1SvFPTDLK64ovHhHYXNv08DJwbOjl27NTDydf7W0yHk59/HK9Zs9h7vK
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
gJExn48nb3EKOTeOh6FHVlQQklcTU1ThUVTnU9ESpGoKyCgLbZQSWb9+nYw0
r7W6QKwOfxKNHO4I+1kj6koEBVUeQz1KnB3ojQBnUkFnMOyqTlSUISehgD8Y
njGHUUTUo8ZlKo031uF11IVz6eC8NzSfCj6FQtPq0CVx+Lzl5lIj4h4HcDMQ
0wv6UYD8zQHvTMGEOHLRQ7fOj3cgDxxNxdW5IzEMkGgJmvygM2nwvWxoOhcZ
TwNX4pD9nkihIeKhRdFWErBQIWTYEOP08WHKuCBZ/jRP1dJS57IKt6oyt9oi
k5p4jSrvzZ2eUocchU7b8l82ERvRFhzTER3VXndWad0pVfnjNg636lsWZz4w
X66yXjE5r1msl4urL36tzP5cnV1Yfraw9OjX8szC6sNF1JjPlljza4Jsb9mc
T5jbs75wWD/WlDn/YN6OJfkfa6h+Tatz9St79ctaFVjTtkW/lvXvbu/aZUZM
uucd+sDCNlG+xYoC6t7/n0Sw1kAV1j5a00JfwfgFG6sOi/8XEShf+IEtyPjw
9tv0o3uXx08PXm/ee7V016W0hnPx1SfCyg4HFg4GZXcGJu/yiar3DC5z8M+3
9cy1dcs2j06kNzrInLGUuG8v9saD63U88VE86WYUdMCPOOgGd9tBzRb4UmNy
vAbwU4Q8NyFBW/BpVGItg3+vPXwyABwLwU5h0umQozLIVKBMG8q83yLMtCRj
xaKPxOlD2Luhj2Xw5RjQ7gfSnYAnA9HWBrJyiK4qzssctDpwjTPE3hlSWEn4
xa3w8xjkuSH3W20SOxKt8ry/WuEbtaAxBw70BOGWoD4E3psGZ8cgdg4Iw5pb
V52/ksF90omA/gVcjQlblAQMVMV2mG3st9xUyuByMOE1ZoioqYmoaYq56or7
0yVoBqLa+iJ6NCEdmpCWIb8ilVdTX5hhLcqwEqLq8qBu723On2gi6qQhpKYi
KSMnLrtZXFtFQkNWWEaO38uUstuWckBDYI+2iB2VuG6zwDopYVkZPiMql68R
McYS8aUBMxXEQBXJsYJQOPQ6HdzXByObCEc0RByk8LpqeC89qNEWGo0Ar7Ox
O6GzprgHVN7/DAUyTOF2XzCWBF4WgN+1YLUa/AwFj2i4diuQ5g1cjWAlKTxW
HJVBkh9UGwcqQ6EiL+wY0VoG6EgCJXGYKkbUkyQ4K4IobagzhHxvh9oJA3hI
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
V0LGdcmNBsRYQ3irFbgQge3R/pQLYQP/aWAlBVr0BfNU6J4S+JqJWy0BnDyI
kwb+eIDHykifGiVaG5/pzp3jSyzwJVZ7yta7mNQ6uCepMzJ0DUoNDPfGJvZE
R50qKJ7oGnx18PybI2MfTk++OXrr3YlbX89Ofj19//PpmU8XZ76OPPsxMvd9
9NW3sde/7nz4M/V9cebX3ycLf18sLb5aWZldXn7JRLPx8odVFIcsfVpd/cRc
+rS89GVl6dvyyi/W39/MxT+spR+ry99X0NfF7ysLPxYXvq78/bz6+8PSr/dL
fz6ufJ/78232x8r/IoL9z7B4WcFGIFa/rUm9vWGjRHjN7VdXX7BQJMN8jhUC
5mssNjEJoHksLjizmOwV+gb0+X9k/NP/ysTKZyxO0WhFYxYTi36xujr5e2Xk
8+LVt7/Oz7079ehx39U7TYeubG+9UFvZGWZXoKeQo62RICWUSN1U5mTeGuDR
6uyeqiAdrrjBVlrAV0Zsh8aGYRpyxxueiELO+UOddvAOBjhggoz6ku+m8Exm
k6dz8Y+LoefVhKfboMvZYE8QFGIJjFCor4xskEKyFSgvbdXntSVWHcicam52
n+if3ZSpQuRINa4sHXiHIDYBeC0rgqwSwcaU4msPJ9PwR8x5xgPJV5Iou4Pg
NCe4yZ38OE7kT7bkrybJsSpQGQfZWuC0jChyqiJUNb5oK/4IS26GHtnceLOe
oaSGrqi+vqClhbg5Q1BfS0hdW8DETMjRTsjCmt/Lia8+SjQ/jN/NjsvYnCfK
j7cjdEOxk5CVCc7NgTfSm9/fis/RWgylyaraQioaAgoaoooKotY6POmm/JX6
3FFULnUVAS1NIXMj7McZa5Ki7MGxBOhOOLisBf6j8qbIEdav55dSENqizKWt
QfKjI23+4GYa9LYMehsFHqqDuxqCjWqUJD0w6I6tLX6fD75lgnlTMLoJuaws
0GPGHWkEFRlDw+HQbBn4tQ1i1gNWNbJahf+TAF65I69S8WiFXd0GOLXQSjH4
6glm5ZBLigLlVuuygzYW+cqlWAiFynB7bxKMVaNGKarnmllXWDqeKC88GhbT
4u7X7ORwOi7hWmr2SFrOtZSC66kloxml1zJKRzLLr2dXX8/bPlbYeKO4aay0
ebS0abS89XZ95+2GvjvNg3d2HUZtvOPE3T3Hx3cfw6ztxK1W1I7dbj8xvve/
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
p/cX378786bv2Mv3J3rfn37z8eybTxfe9196/+nyu8+X3iBKN3Chb+Dy+2/X
+4f++TJy8+vw3W8fzr94c/jxlxsDvZfe3N5y9nrH2ZudFy41HT5du+doxc4t
6VWlfLsOms5xD/1rUs3nCXNeJOM/5GBfNc84l0jY5QkOyHEb3dUyF4Nd1hpv
vQ1+pM8cazJQbtea3KOp2K73c5Pul2L8j3j8eBF+qJY0UIV/koc9nwT2RIDj
UvwjB8M+Y91pD1VFudZkHe59DjgZBeW7ALYVZo0JtHoJyWslsU5MLnHByhwJ
UhPMae7MO44LnltojmRo9Vapt4ZACFosTFRMVqrbmuklcDTqPQhZbnihA9Ha
XD2aNmO9/4ItaXNDvNXZDE0ex8CLq1YoX5joZeQuUU2O168vmtuaad4aadYW
w2+ULm5On1mXp5+cQArwwpf7LKsNs3Tl4GQyYmOiZrVkhhfN0IGqFuqumuSq
x7BSNbHQCBTA6/yxXUxMkZkabbWqoy05IxB3NgM8zYbuMqGTi7D7zLScF2GX
r9ZGlNeHBuU5Qxt8MQcCwbFAcNQLbBVh4+2BlIvx9DRctJK02IS4yhJva4sL
4IJ1IeBqPugtB6N1+OkmzK9U+DkXd5KjskMGXcgBz0vQ+QXfS6CpfDAZB/pZ
0H096K5wzvYk00QmpjF84cYCfp7YpkrsmWtHS3ewyHU0LRasaI3ibEh17Qz3
ag5ySXOjloXKCloLY9clx6+Lj26NDq+UBRW7+GQ5uydwJLEscQRNEu3kGk/x
TKF7Z7ClBaLgMu+YmuC0lsj8TXEl3WkVe/NqD5e3nKjvPLd+08Wu9lNtNQcq
S3bm5m1JKdycUbItt2Z3VcfxDdvO7uq+8NeBM4f2n/jr6MkTF6/+/fDRs7d9
n75/G/81ifIShKuMfZ8eHVEgglaKfZse/aYYHUJVYKQPYUSK4VeoCvweh/d7
mN2z6e9Pp7//1oWhB7++3Zsc7pn8dn986N8J5OXQgwnER3xD3MRNlDJ9vTH0
+Vr/l4vvv5x7/+lU7/sTT98ffvR67/1Xu//t3ffv833/9HbfeLD90r/rTl1v
2H+t+fDuwqYOWeThpKyDURnHcpr3pZTuTSk8KpO/Ei7+EYKdzoYUpQDd82zF
TZbCI8X43ix8Xzb8PAYdvPVPCDjtB66EYW8n467lghNF+I5kYp4UJLhhkvyx
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
X17eqbzC7ryiroKmCy13Hjz88mpw+Om/0bt//lz5BgPh19WvI/d+/Xs9Stg+
Tor+5/wimp6amprZFEYoYqOIwxYxCnYJKo4cA8jGbdhKBlH71H13QPwruqxR
dNwA8a/ivE7NZZuK65Yjbutg2ldyJEoAQX6cVx50Wr7bduku02W7dRdu1lqy
XmvxZq0FO3SX7TLZLO+wS9PvgH6EommshnWyqm2Kum2qtpVAy56n6cFVDU5U
SQlTLPfY12W/ud961YDTmvfeW19E7O1P2nU5aW1f9Krr3rMeOqNv/bDn4eBG
GHI6EjREgawIkOSJRZujXSbSvzzpeDyKCwCeBETJiDgTw0sRvIIkrgZ4DWmi
c89gJWWAjb5nAzwbE5Wh+HFkqgx8LUVu54P2DKQ0CamIwrqj0PNhaIMTmmou
CTWmhjKqqEk9okk+oCAZrUp5HkaeTkMGueBOItoQAiq8QL/Z/Fe7F/xUZ/yK
kuv0YVoo0/cryXorSpzTXf7QcvYJVynT/fTtu2cdPjQr3IrpZ4wU6krdUF7z
SEHuqd+CJGOGugZT4YhUpgvtVhKln00SumFHIKsxWmFmsjDXk/o8ReoVm1Lv
T3EwkbQylvCxQLJ90BgbyiFFmpLWbE1lOVsDSYErmuuFWaphaprSmrqyNsbk
HE8UqnKh1xxtNSkFdWlNPSYrQvZmBnksFxuKBK8OI692YzfdmI0s+uccukhI
/uMJ3uzHnuwgNWky3c2weFdqoyvjjKlcpd7sMB0swhgpswfn/cELf+SeD9Lo
AdguaLiPtIs51UsDpGuRrgdR/2ZQ/0aA9wrY1bngitKcB8azzuxB+Dup4cqL
8m339aQZFunvSFq/OX/3pnrlFaf0l/fqLGmTn9W6g96ymVG2g1EepHO8oSy7
IRdyfl4jxHyyoI2T0cnL6uYJO5JTTyTAuOA3JMzQ/mgoCuAViP+cU6l5p/g5
PZzsLl5Wl7DwdF7h2YLCs0VFZ4qKevNzejKyOzOKevLbLrY+eHT/x+vfE+/F
4y8nf98eHLzyZejW97/P/v17PU6YFv2ZaWb+35I5EW4Wdcgy/og9W8MpVd+B
r23FUjWIOqjht1PZfcP/mI/bGjXnjRouO4nk77L2oPNqBedlBP93XqPovFTe
cclu62XbjZdt1lm2QWv+Ro156zQXbNBeskl7+SaDVdvNVso779IPVLCKU7Dl
qLhxTKI5NqWxjl3e1tddXQdcnL+5Wf12Vx+O0P/Gs/vAs3qeYvgkZP9b5/lf
bBi/3LEf4ejnBMqLZMod9oK+cFJrKGgMZFR4yZ3Wpv1QALgTJk6kjgTPHTNE
8TCA51PE1XS8iSJqp+LtKH5uh6hkKS5AxMcQvAYV12F4A4K3kvBm+qdK6iO+
xEs2NswjsN0fBZr8EbYz8LdDXOyBtRXQ0iYladB+OknhoQiejopzSaNZ6Jtc
rCdFEpaDPu35151lap0xT21EU0XyiOqcw0ckXHVoyXYkc2Vs30HpA/sX+GuQ
TkVQq4OQY57oWXu5MzZyKeZSLgY0S1PJaCuJu27Md3a0t4kyPBsJSPsPqS5R
UZet8JB86yz53Ih6xUsuwIIZ6oSW+4HLsVhXBNnDQFZfb56jCSnLBTkVjtxN
wnjWJBNzup8LiecBYGZ4zgUvkuhJ+gxlZSlldUkbG9n4INmHXOZXX4nbW7Ab
66RuacyNdqHEepIfJ84ZdKI/30S5s3NRrdKcGGM0ygKY6CHGNsDHE0nyAmW+
oD0Q9IeCN+HE3P5IJHjnizYaA9+DZPuDFNu9ZLdNWI0r87Yv+YUL/anX0hcx
Sz65YE/3g66tlMA9TI9Dcv57Z0UrbeYqHWZv387due+opdnljvIHD27eu3jy
5sWTtx723fl+//K7u1VXTqQ2Z7Aa4vjNcZmtrIyu1MyTfEhv4FHYnpLaEs9t
imTVhXKbouB5xsmU7B5+zileTjcfPpDdLcjtFuafzs3vLS7oKy4+C0dhfm9m
7ikhpEaQIJWcOdp9vef50xdDH/6OfZgeezs5/HBk6Nbg0PUff27/GHsyMvFm
knDy+ieyjJG3SlKDnAQKUvsUDeskZYMIeVWfnZDwKzmtP+K07YjzBlWXdZAC
Qdmr7LhawWkVhL2y8wolqHydV8vbrdhruXi70eLNuotg/t+iuWSd9vK1Oss2
aS/dqrNku/78/ebLNVw3G4XstYvdH5hkVpCfdbqurjsrvS8z60pW3m0+61ZC
8E1O+M2UkBtehs911n07MvuXwbxhJ7nhkLnfo6U+xsg8S1O7mR3QF2N3NtTj
bGx8bxTnvPz619slJ61l/ngse6yxYOQwHfeii3PIeNt8/Pw68am5U+XSI8kL
R8PW4zEkvJSON0rgHZLiPpmp9nmvc6W/syQmMxBxESLOJxrXf04DkC1czsBq
WJivA2agC1jm2G0TqS/76X+0UHEMHT9Kw2uZ5+IYDnqYpiIp1Zh8OQqFjCjF
GrHVwfQ0JN31adUB5Ap/hJhdUSO5q5LvRjO/CZAXPHCaQw63wxzNFwQ7LSry
J5cFYM0e5Gtqsk+O0F/ELg4zJ2lqyRzRmqusLZtuKXdNW+6qgmyN8Vx9Lekw
O+q1GAQWrzdJWKaLlI7aChhiHaHY6wQEcvgbURIBptKu5pL14djDRPAlCRuJ
wZ770B2VyDCUnA1pQTYUL0vQ4iBz7bDcpcPLqjWZ8D8VYonYWpChBu/Sp1br
yrAMsHQb0OMFTrqhEVrA1Aj19iFDOd+fgHzgIF+SwVAi9jcBGwkCX81B8xFg
uZl8aBVZfhVdfx1oj5vz977VvYwNz2Nnf3RA7+5ATuyZG68yL1idzNemZuqt
ync90p7kUmSkHK8gn+Vs2d9/AdIPsXj689T0/fEPt3/cuP/jQe/LOyVnqtOa
hKmtkOFwIaXP7OJmnGTDY3oniygELdHcpnB+S4ywjQWrAwwByIIyT8JISf1P
AmR0pmV2CbNOZ+f2FUA6lN+bkX1KmA4J0umswt6ckrP5FeeOw0B4/PTJz3d/
iIbkH/CxZ+N/H438vfd79P7v4cejVolH7DgablxtV66GHUvdPEFFN+yAusdW
Jdd1MPlDFazqvFLLZbW68xoV57WHnDdAzqPstEbZZamSyzJFpzUHbVbutFi1
yWjlFt3lW7SWQ9hv0V64VWfRZt2F23QX79Bbs9do/SHrtVqe20yCD1gnHLLn
KLvxDH2FlgEZhn58ff8U3QCWegBbK9dTpe/gyif7FrzSXvXCbstT99X3vbdd
D9S9GO17npd1npV3J7vpTnbjjZyGS+kVPXGsdhuNNrV59UeWXpff8Udlvdh3
BZ65ZKpi9aesZd2e9E5txsB+2h+H7SJ/Cl40C+9chJ9Z0Z84u8lO7pP/QjwC
mcojEb2zajG8HBHXUL8VMMtDSHY6mMZeNNsGuRqM3jOc9WzToqF9dHGwDH5s
eXsQ00EHtdAkVzjSh7jU32nIEzboDMSSHUGSLelKBO0DH7nPBifigMAHtHpj
P4OoY9Gk0VyJi8lUM3VpY6MFNf7MF3z0mRDc5aBXrKTuGi5o9lnmYTff0kzG
3IhpYcqMsGeU28wtN1zkpMKUV5MNNCO9iJ49YA2+uksVmjL3HZDVVJA+6Uv+
EUH76oB8CGAkG0ntU5YItZB8miTx0Y32RhH5biKRqy1poU2KtMTq/FGBE2Zj
jIUaS0QZU4MssBwncNoXZLqTrGwxNzdyqBtIcUWbfMHtCPRTDPI1Gulzx+A/
qqSBOBqA1gDyoBCb4IO/ieCXF3hzEDzYSy7RpboeAbrbMN09WJSNXH3ETt+t
VNfNIGk3LUN+bsKRjV57F4VrLcu0WVfiqpZqK5/hv7+ng9/beLS9IufaxZbB
8dEP479/TA8/nHr7YeLn3a8Prn66euf769Z71wRtmaknZsB8UpAFq0B3SlZX
KmREwvbY1Lbo1NbY1JbE9E4OvJh9SpB7Kj2nRyggygRf0MoRdLDTe3jZvRn5
fTmwBMDqAL8IowCGQ8mFo8culMDSkHcq51h3aWNfw9Vb1969/PTr3d9/70VT
7/Gx19MOiRrOPD1nvrYTR802Qc0kSkkjYBckPzD5KzutVXVeq+66HjIfNbe1
xHSQyxIV52UwIlRcl6m4LlFzXHLIevEus1VbDVZv01m0VWfZVu0V27UXbdde
As+36y7eqbtmr+Gqg2ZL1ezX6HhsMQrabhZ1wI6l6Zam75Nh7Jlt4pIJRYeq
I18tlGeSkuZcIPA9lh3anJl4Ka/g3rGmgaYbb07ce3a893HBiRdFbf359RfS
C+rDY4o9XPl2xq6bmG5bZcL3yiTvmJW6e0G28Wq2hpTTVkR9BSldedMD9T0/
988TO8/D85e+EC4oM5VJVcKuaEv9OUQWW0LVIEksgehg4k1y56IkgnRIUMZG
a1HuhJK+pBCezg88Zw9oLRqym/eNvb7Mi+5miASZk6vMJccDqCIWRZxO+luA
vUkHHZAqBNLFaRLT2bThXPC+gNIcTT7vIPf0COmbEWUkbeExN5qyMinamPGZ
JTmZik4V0t/lSHIsMQ+jeVZm8w2N5nnaMDK8SCUBaEU0iPJHbZ1pOro0eU05
XwPJfrs5d7ZRn6jIZOvKHjzClD8oUWbNGDBlPNgO3hjNSlFj7lWU0dOUqnWT
eqFHu7aG8WSXTKspk2uDNgeA/jjCCL7OHwt3JyV4YfneyMlg8CKa6HcBxY6f
mWSKP6MzHtxLIlZ6D3LQfylAxEa+ByNH7YCFGTAyBCmW6P0I8nAy+Yc18nQr
+cw6qStmkmccQL0FkmgoZaU078hKyq6lmPpKCdOVktbbmI4H5By2MLwVlvob
7QixPcSJVTle59d7O7/zfOHpk2Vvhz9/+/vt/dTXZ9NPvoh/fZgYfD/6+ezz
rvrLwr7nvedfP6m81JnZmS7sYGfNECEC56e5uSdTYCEQtCdB/KeeSErv4MIS
kHc6Pf9UFqRA6Sd5vPbEtJOsLHjxlBCSn8zTAkh+4C0YIFmnM/PO5h+9UFhx
uez4pYqis0fTO7JS6nmptbzC1uzWc9X3H9368fGHE0vDlavnzNEhkn+8sl6o
vKr3Nih4VRw2w4Sv4rxBzXUTEQLOG2E4KLmuVXVZru66emZdxJojDsvkrVZB
/O8yWLZdZ+V2neUQ/Ns0l27TXrFDbwlUwbu1V+0xWClvtFzebK281RoFm3Vq
zrtNghScotRcWMZ+XOvIDKfEbN/U3KiqmsK+js7bbT3vuvt/nH7x6+ST4Y4H
f0/eG+158Kf97pvqs/dzmq6mVtbYe2dqHkg02Oa2d36gxroQ4x1eKstcDqwy
W0+13o2pbQPy66l7lpOd15HPWc4d8F7Q7zGr1FSSrwDaHbAXKRKPrZa83Uyf
1JqDJ8rhDUt+Vi2sD5NxNsACdcEpV4mpdGm8gDSVjX5LRx5BUpQp2cOR87ak
OOiDHH9KgQPoN2Z8VSBP6lNwtoS4QvZDxqwOB/IXW8kxe0BsQCuXfpk1308D
FOrMuqM565We7Gnn+eEmiLEGucJabtBC4o8ZivNk7nHn2+tjysazVYxlVbUl
eB6Uyxz0aRpyW0DLSNrgFLjM0oZkqIt5m1FaLaQvKy24qDwrRoukoyuhoyHB
0pU8oyJ3asvSq0qrvOWpBxXkjLXpYe6yjcYyl3bJXFeYm2tIbfBDH8QjXzhg
RIAMC0gnvaglPuBqMvlxEviUjIxwkUkedsuH6quLRPmgp5KRoQx0WgjGhdhk
PPjrBH5qo1VmFG8nko0Z4m+CVnlSHjgwbihJ9OrNv2aPPvFBPgQhLwJApSHq
Ik9zMV7to7PQY6OUz6o5/lvlIhSYCZrSRUlGglg3Z7VFKbEabd38msK0NDv9
Uxdr++6U9t7Jv/mxduDf7ffjPy+86e1+WNh1g1va43/i9tHOO5eyO/LTO2DO
50KqAyEN8zxENSQ8MPOntSXzWxPhEQqBnB4BxH9+nzCnly/oYkP8p3exYcmA
1yHtIb51OiOvJx0KBIICnSsqu1RWeb228nJ1yfnS7J4cfjOfVReb3BjEaw3P
7+I4JMPMr+mYrG6VoG4Uqajpv0fFdYu6w3pl+y0qTttUHLeruWyDIUDEgtMq
NWeiEGi4rVF3X6fmtvKIw6qDlqv3mi7fbQiz/artuqt36i7Zqbd8l/6q3for
duqt3qmzYo/O6r06y/cbrFIw2aJvJe/oph8R41dSktPR0n7r6s23j94Ovfk9
8WocfzYlvvt7+tLHqXMfxs6+EV34MHHpE4yCj4233lZeGTh+8WHx6TtHT57n
H2+KjhK4qCVYb03yV3HXnh+mJMEzIScYUZxVZWwPLrPbJpUij/R6QVZMe1m2
rd4OXPfBxoRE747fueAtB3vrRR4Omf1TOKcjTsbDCEQ6kItdKHecaXg8VZRD
Fx9HRVUAr6X9rZapDWdaaiC2h0FvCPVqDKnDFzzUYT7dNvv7AWk8dOF73twM
R9IJK7lXqnNe7ZcTudAnipbn20vqa9HNjzDCNKUDNaTD9enpvhKxjqDGhvZI
afWbfTLD0Yvq2bI25qi2gbSanpyFoURbsOSvFObfdOxzBiPDb42J1QIPR1qy
E4AZuyOMUuvKjNCX0lCWcLOUCLJCBI5ItzP5msP8DE05zUM0xSMyttqMKA9y
bMjqdOcdgeoS+jq0aDPS02RsNJMykYZORWODzswCbTTXA/2cRh0WgqkUbCoa
nQ4gX7RhuGgBG0NQ6IkO50rhWaSJAPDxMLi/DrukTW50B9meJFMlTGkn4qRF
T9ZCW0zANQdiZ/G3SDDkh/ywpzSqUUNt1rCjFf11pb03z4vceTBqyxbW/gV5
jlur04Ld1Dfq7wTxHvJ1Scnp5mZNJUnPhz5f+3jl3LOysy8Lz70sv/Cy9NSr
4pOPshouhha1WzRdzu55ePlob72gJQ0SIZj/c04LYaqHA1YEQTuL15LAa4on
pkxPsNNPwiqQUXgmK69XkNnFSutImKkCafBi0dmcgjP5cOT1Zuf2ZuSeySq+
kHf8Ukn5lXJYBYhmoSfT4S+wWxKTGmPYDRGOSZp2bDXbZA3LOG3DEAVtz80w
1avab1Vy3AYHlL0arhs13GDeXq7mskbVZb262wYtt42a7mvVPNcruKw9YLt6
n+naPYarDmgv3ae7agb8i+CJgu4mLYtdZq4aXkHOrJSYstLivu6zT24//Tbw
Y+zTFP5LjI+KRUOEFx7hrPpkAr8zgl8bEt8exq///nvm/ZeWuy+rLj8/2jtw
/MJA+ZVnDdeeN9y8mdd6MoZbH+yT5WUQYb4rWHl2thHS4AGK3KRTLQ4mKqsU
q6y/6cH4nAjes5APXNoIxHMWSnR+qAB4FSaqJo81oF8bJM9nUMIdgN5hMscY
OR8GLrhgXzToYmMKziLj1TJ4m8RYzYI6f0kzLaIFyvME8t9M8IEL7rCRJyHM
z0bSX82X3PZZmBNIi3QDJUYSj7QXvTu0+JvTnFp3OX8zxMmIoq5KV9CYpadG
rQ+k3mSjZ+JAXwz1sc381zrzz4Rt4qce8nWhOZrS3Gwo8Q6kq+5yX02w3w60
n7HzwwxIKgbMYDdqRzSlPxG85GINXpJ6qpL7jjAdjemlgeBMJPI4GbxLQcod
gKkW1ViHGmqFHvUCvo4MTZNFB9UkNQ0kzbRp+Q6k3+mM0TD0qwb27iClR0vO
XAMt8yaNZtMhyflpAz4eQN7rSudoSYSboN6mgOWGPeFK/fWhD+xALqwjnzfG
bvsS/heNxsBkJbp0FrJ5MZooD275kD/EgN/JyDd3MLAffXCQLjCfG+E0J8pE
IlFtFc9sb9zhLdE7lON37Es9cjDt8F6ui4Wb/srSINN6n/Cy2OgTtYUnL5xs
vFJ38eul/h8P73y//Pg7VMFXz74sabvNKev0qOgTVJ5vyGzLzexMIWb7ewQQ
3gW9RAkgZoROJKU0xCbXRLMa4lNOJGed5BBECCL8ND+9K1nQlZIJOf+ZrJIL
hccuHS25UAxhDz/CEMg7nQWD4ui5gmPnio+eLSo+k5fdlZnWJuA0JidWR9kl
qjuw1K0T1YwiVTT9Dmi4b1FzWqfqsB7yfHWnjerO2+AVdbfN6i5bNN22aXis
1/Lcou61QcVrs4b7JjWH5Yeslu03XnNYf4OG8XYTGxUnb4vgKK+sLH5Xa/fD
/pfvnn8d+jA2PUT0YMT/zjh/fRbj7wkXSPHbafEzHA78jRj/JMbfiaaejQ+f
/fip9eGbmhvvGu5/aHvyvvXe42Pnn5Reupbd0uQWVmNoctxcp9rbtcDmSIUh
6VoAdisR6Q5Hj7qrpu/Z0qcp+SucAnnsUCoyzAOQbOP5JJjP8ToMbyKJ2yTx
DulPx5jlURJeZiBOD7vkTxpKI79IQvrdqY+3yIwcJOFBTLxu1Zfi+TnOFDcz
kGNKHk5kinNJeB5ZlAuGi5AnhdIFHpinGhbvu7GJt7HcB+FYoVnmtGNWNLaT
dJg1ctyXkuoAfCwQV2NauQfpTwZtLJs0mIU+yKRxLKnu6rOMDef5u88pC6FU
BYGqMFAbRjpvw3ygsuq9kuwd9yVW6pI6prJhLsxbLMnfqaR/qdiHRMkAddph
zVl6OjLHvWmvU8CvJHQogvQyiMm3BtE2oMwNvRKGFjsjKppkBR0pDU0pU11J
R31StRf1ozPj8Xb0ynbpE6pzjDURRxNyRyBtMFL6gwJyexXl0W65Cn0pnhVS
7wZ4jiDYiyR0kzrlQIXU6FY4+jgS+RAFhuLRT0Eg9zCmLIsK9ZiPs9ZeMCJa
QwyHgEf7wOltC/OsD7H9NTgGKjxzsxL/fdUO9GLdNYKDh3mHtNIV1MtN7QXG
GnneFo2Bocf9o7LNVNK1JXNslmYlGeY3J7Tc6z716MrFV3evvz934925rpsF
xe2eVWczai605J/Mye1My+3KyunJyO1JhYGQ2Z0m6ODyW5I5jbGJNWHJDZG8
VlZGJ1EF8voyck7DepGa15dZfC6/+HzR0Yslxy4WlZzNLzqVmd3Fg5qCkBXd
KfmnBcW96SW92SVnCgtOF6d3ZHObUm2SNG0TNCxjFY3C9mt67VRx2anmtEPN
cYuaw3YN522aLpu13HZquW/Xct+s5b5V22OHttd2bY9tuu57TdwUHL01w6Ld
0zOFtTWNVy/defvsw9D30clhHB/GxePT4gmiQyPEtvgNYRCMD4jxAcIInvAL
/kKYohK97MZEk8Oi6c+iqYd/f1/4+vvM+999n36f+fCt9+2b+ltXs5qPWnsW
KWoV7N5aqLC+wHhDhdXeq75aH8Nn/04Gn1LBYzZyPhjrMFv22kFGHIuKk8Ak
Bx0LRXFHFI9HxUWSojom3iaDn2aITsjdFsjmBNMTHUCbB2lcSBfngkkB+MZH
3iSR31rIDusuHAleccp9PtscYbuCNAtkwEIGdySLY8h4NgOvZA4fn5vuTNdS
o2grYc1Bsi/TpG7Hg5YwNNsLRLigPs5YRwT1fjJ2LhqrCQHlweB5uNRkEHU6
iowXylxPljFRo8hrzZZXkUm2YzxNpb1LQ19lkXr4s6qi114yX3THdEWyjgTk
Tvb2cyNcaQ9ZMmNs6ZEg7G84s9SAYP7mJjKJ9tTXEXIfTUhvFMlvrBbW2jBL
/cH5EPAmDgzEU+ItyTqGTFU9KS0Nhr2uBMsGK7ehnDKhQxERYUA3MCA7mVLS
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
/2G0E0M0V7gYjz0Vhi0JQH5EqqJhWPhSeTq/ClbkBChTXJUfuy8a11eRmijJ
whWkglU5vkhQGBITiHA8lPKd56W5YWMiVR1clILC1a5Q5vUnIXfSkCcM3Gm8
1jkfrQ+HlN5sUBo3UL/nt8zfVdHWA5Mfq/CKpvKejAzSMG9Jc0KMFZiuuF5r
3UvehgQLhXgHpJ+sAnKTLBmLhik9dNN2MkBSQxSfkJR/kbCjBED5lZsclKyP
YOtCcF9IikMpyEQK8i5QyXoxds0iXMIx5H2q0i88IiIiaLbax5KtrUlbLNeq
Oa1TvmGh8UpP8ckmzE3Dv67n5vdm8TId9Ipd95bE+NAd9LmOnqQD+vXhpAI9
47Ydq3vWzW3cpFvnH5hPTqOXpaRVRMNTEkOPdzwVE8PMpoXxwpPLkxhtbEFb
ZlFOXFGoVenx7UUHl+ezXArPFeedy8vtyeedzmM3Z9HrabR6BrOVwe/K4HXy
WC0sYjUhpSg+MissiOvlx7ELy3FKKAkGqIZUGUuqjGdWx/IaQBZIz2hKZjWm
slpgV4vXSc06zcg6zQIns5vJaSOxWtLgEK3aWEpFZEp5cHyJb3SBb2SuX0xh
SMqpaJBlvvVPfn8p/vEKHXwuG3ohAVho6hu0W8kUKhbLe74i2NIC9BbGfDFc
riRfIiyTn/9t3J6ZEY5AkAMIsmwEFnygdgJeC4BKCQiHwJeKxXJPgd4E7wJM
SoDxf/08lllS4Evy9GTYu9NsPdJPulKswQN3qoUn1RJ4hBfNxpdmG8RyicoK
SC6NptTiK5MtzpvOO2ul0nVSu8VC9/qJf94eXvjzmPawk9YvvOW3gsr+vPaP
jTde1l0s8nYJOKjuvU+TbbW1Jsz6gec/gweRGTMlWSROlvFHX8xyivmieIt5
veHKz9Ow9xORZ6kIHCLKQ6RZCuKyRU8DVzQ5bCXZ/+F0DBuqh/Snqb7CI7cJ
mPsEzDczhWkjFZmdioSytN1PO9NP61So0nXvZc+3anzZpj5ttbDNYy4V/x+P
uzcrVinVFxvqi8NHIgLyfGMTJUdTZICqO8bEDjOQySzVtmjNIh+lG8d0H2xe
/N5xI+ekclyQopktBu+uOJShDRCOhA0rVEwnZW8/hB2EUH00UjwQPpznrDKd
qjlpgwzvR/pMtfyPInEBKpdSVSfYWCEFEZORX6kqZGMs1R55lao4QUAm47HC
SEzVQdVNc7GRBqp3YlWnKEozcZiZSIV3buohG5FDf2F2rlL2/Vepd5/K/fXY
M7tWnYmNeFBeeaem4UZh5nTf21fNZ9vTBTwT1+pQQrFHeLmVU9lxs2ID/XIv
1+JyKq0mgVCVmFycwitOL0/wqqIzKYXUlNJ4ZhMFmHTOpYKSm6UFvby87BiB
88E8w5XleZGF509ldxdmgeDfCJA/mdHCzOzOLDyTB3ARt41HriUnFCWEZwb5
s1x9WDbhOZ5JpdHgJJSERuUEJOb6ApPmNCQC+4eDc1tgPT+zi5Xbzc7v5YGT
e5or6GFyO9NZ7RAgAXYAu8OnwpJLApKK/UEiiC8JTz0VN/QG/fkGHX6PjgEW
/BMK0mCUlkokIvh4+pdEOAKbtnAHMbR82ez6bLhBGzwRGrZENCyZ+QZlEpIx
qWwafpVQJN/Y/ZsFS0XiGbFcHD0Dh44CPxAD4gCywJuX30gCpifZyZPi6EKy
cSfZgsjvkm7rTnRwJ1t6Uq29qE6+VEcPhoUPxdKfbhXP96yPsrht8dcDh6XX
HXTPOf9z0frYzb8XvtzxxwfbbWOCjO9tj1r8084kc5+cOt2SEJt+TDtxrxZl
/5+ltvueJGwF+OHhWtXBQ3OGXBe37NPhmuznulpcj900Qlb8RsEMUXCAEcOu
bhFGVqUgLp2TeQjjdWRFot/GiGNIX5SGiIP8ICM/6MgwX/35IdzHDZqTJgtu
B28IM0B6EtQvJmMuRyg+8Fr73G1zjdF8i8MK3n6baSTrerxuYzSmOhbpoSmW
puroWyCJtmrT3PkQumRg0QLNlgiV+FjFmjDdK46rC52X4r0QQbKitScmzho3
zl0A13lzMIBoN/gqh/kpVCVq1oQj1WFITyymPVLtQoDu24NqzzZoXTBZBhIE
xRcH+PUQS00GeEEqgibgrnopsu0wV8OwEwSFiWBkzBJ5ZTnPQxfpxq98Wbz5
Y6LmWBAyYop9Z6BcYr7cZcdcJ72ltvv/CNqplrNXq9J0R5WlUad30NOy6udV
zQNlteiL4UukrHP0pHaKH0lvHdlgDXv/X2cjgn9cfNLTUEUpT2CUJp+qy2/k
8sqiQxuqqshFZGozI+dMTsmF/OKrJQUX8rLPZAh6ebxmOifQiGuzMaeGxm7J
YNZT6LXptHpCRjszu4eXfxYkhUJuWxa5mpSYFxeU4eNNs/diWIbnegNzBfYP
EJEH2cGLbBWV7ZxeGcRqSs5oTZdrPqmZnRlZHeysbq7gdEZWN5yIxe2kyGen
pMxuGSBUxxIro9IqI1NOhSeWwzPxDZ0aApxUru2X81nwQDQhnhkXg7AvAehF
BhDL7PZhaMD/W0YPq/1wlO6QTPILCjgBUpIKUXRazhDkJSIQ+SUg6svvdQEH
mu0Ly/8Rwp5bd/tT2Om+JHdPir0H2c453dKZaAeM3zXdypNg70m096A5+VAc
fIimnnjLcIoNiRtR72X01HjDc9M196zW3fd3/NF08VI4vsfUtD+JPHX6gfTq
0OfuRzlOTk2eYb3hhAqjI9XWBqeMDOqC3e4HrB2Ow/yIUf0WMe91wjr+njls
Y5N8Y7O7/hvHY5RnSIiYB7gnApeiFiKySgzasfJWuK7/VgXbbap4Y+RehALK
V0YzAdvFSU6p9nPntXvOu3VicbP5PE9DhOmk9JWp9J6Cec5E3hXp1BLmOp1E
9CyQXccQTxPkAUn5SRoOYPiBLDVeLO6kAybfSR0VzIHqIx4OLdDuxavycvcU
cf7JBkgpAGlMwjYSVNyDkVg7xQnOXClbEaViUY7qw2htdwvFwvBFL6hL7sYj
r9MwN+IUGP7Kzb5qPdZLmWbqKXbY4iAky0OpP1FbQlARBmEmrXDvnFVrPJFz
fthP0Uo/bTGf/kPeGy3I2qF8m7pc+uToz/b/vsYrvt2Nu7ltXpubA8fEPs/O
KdvHI27n5qQdS8h7l2XbWWSddKpxcOtJJNd4RDSFxXcmRk59HLhTwGPtWsjY
oybYq1i6XWuAyRbfH7pV315dLGgRVBWHkloyBTX15fQqqqA3t/zqqerrFeXX
y4vOZmZ3skCsBvSWXksiU/xYtCBGLSO1Oim1KppSn8bv4Bb05hadLczuzmc1
sQH+j84J8WP6AGv3ZtmF5/snlsXEFUaEZQXZJ5iZRu10p5yIzvcgVkYC+xd0
MfmdTB4cfgivyYNcwG2nAkQELwK3kBhNabSGVEpdIrk+HioiGpLAA2JtbFpV
FDBjqQQF0R4K8uV9W+GkDGAeiGrgKkl0VvwgL/LAkA6VnEIpHKj+C4XXAcTy
9i4qBgRh5Ou3wf6XqBR+FXymFK6bB6gHYB6R9DdlkItG0Rs3HkUxY3wo0MJB
/Hcl2rsR7VyJjjD+k+wACgIe4ZVuH0F2p/CTmxpr+u48vZJCfmq4/bnBuieW
xz5kl0v6JmVv0cm+4clno1P3R0XXfkiuD07dH7lV2lafSihxsKx0tyyw3ZPj
9M+d0CM/3ZSnQhFJAm4odW7ecWW2lUGRY/AFk5XCBCVRPCLjIDIuVkKRc8ki
BbR57s/sZQR9pX3LFH13qlwNRmQCFVkOIoN5QWmyaEFBkgaD/CfeV9XmBMb1
OPIoQX2ajx3PgMKJd7k68d44B2eM9UnE3ArDd1f/wVD5TkdGecjHbA1mOsbX
G+ny0ZCSNdEUKOmXZc9pDFKnUi0r6YfPJCpcSkCekpR6k7WD/DHx7shg+jxZ
mLLUFSvxUHiVssTJFJtirvCRqvKNgBlKRz6mqZKsETcDhOWIyXTGVPghZyIx
+S4KlTYaY2HzfxzFvluPvDRSPxuKuRyM3HVX6tdTvLN+Xr+Z7tnQpRWWmJmL
W2b6dkoemt6O1Kq230I8uZ9k6Zi61xB4AcfQgrb/KG3XAfrBPQJzS/BXxhGL
XK+o1lTi0NWb0kEojOwrbc05uCF339zSnVrVO+b9qmqV9U8PtN7NDcMXkcmN
NeW8Wm5GG7f0QlHlzZrq27Vl10oKzuXyWiiAwCaXxSSXRxGrieyyVHJFUvKp
WGD/1MZUXgcrvycvuycPFkJrKUnFsWH8QE8axMBeLOvQXN+E0uiovPDAjADL
GEPDgPVm0bu8mKbxBV4AemW10wHyyepgcttgnYTTRoFbA1rJcHBQM4nZAsAV
gdlEYjUQgQNC4XRDCvAIcl0qVGb+Qmd+oPLR6BJ4vQvKmyUA6cASjRQavFh+
sRdEeBjwv80KhEBMR/9fzVMiBtlhamx8+BtAQjDOi8RCAHumZsTT4pnZbd1y
/0GnJ6Tt5y5EcuL9aW7eNGcPiiM0fpKDK7B/ko0L0cKdYB1AcCFzkhob61/e
fzn9EzintD+79ubhw49N9N+SueOPPsBNBqOwaop+kInvjYmv/pTcnZA9npT2
TT8v7Gpx3ljrqF1ir5J1EtdmPOeTofqkDUbki3wK1S0zXUE1/7cgwL9i/7Yf
rlqySAyaDqKrhiQQh3pBB0Hzl09nr+fp4w79qWyxRrXBCSvkKEtzFNAiuFNA
2vzHJYoKOVyRl6BN9sIEmGGqPLDSTA2QGqAWtErrBndhcowa4Lwezhhna+Rs
lJosU1XChRv6XmTOycleiY9RuuahMWGtNm6kjDooTkXPTzFTOXpCgeWqMkBT
/0LEjLIVbuI10hMUCLG4e/5aP46pfdyn9WOf6v2Q5SGu6lEmyBeq6hQNgQif
ocTYh/t7HjbluNKZUOzlcKQ/Dtfrr5B8BHfx5NyXu9UerNR8Yq15Nw77JAZz
NwjbeFi5fefCz4Lt0jvbfzUumXpkgIpCRAPuRZxNybn+JEFEoodxqqVJkp4F
08KaYvwnV29Z7oG9/EMnOAY2p7zD+rJKflWfGWo8J7r3Gm5UEaOvzt2oNzWu
3qNbv0P7nMGWyd774C34dvF5c0k5pYjAaKbk9uaVXi09dbOq4lZN2ZXy3NM8
Th0hqSQqLjcksSgKX55IroRLLtKqYghVUcwGPK+DkdXF43dkMhqY6RX4uPzI
kAx/QAy9GDa+TJvwPI/ooqjI3DB/ppdJxEG4jS7kX8vkHd4c8/gSfwDvMzvI
eb3cnDNsQH753UxeFwPEf+AOvC52RgeH2yGfl9tKYzWTmc0ESJnlc1FEP2Ww
qzU+C3Wkcg2PbBauz1o+lPSIoCIOzlF/IxEPQZ2bXA8K4zkM8jMiYOvg4wys
6MPPQ8ufFk2LpkD8n3016CiodHBorLGnMyU/KSI3KDDDw4fp7EmzAwfwXN90
B1+8fSTZj5/LuNR9cfTVCDoJ9dYgrdxjF583NHmSQvx154Vcgw19Dd5EAH5w
Y0hyYxR9JJL2C9FX6EBZ7znbHZccNbvcsHX22E6fw7cPbvy2Q23YSPOd/7aW
YI+8yJhcV5dcM6eLR9b/0lectkVkoeofPbU+7lKePKCOOqkJKavrzRbYrFOz
/FedZaw6nKKM0pQgVilUQhu1Pwl0CXYY+x1IrhNSEYTkeCA/aTqyXEX5/Urc
VOnatgx3KvUQPQZOF0l2wb4hqMDrANk4WaHio9wtFRWR+fj5F5wxL/arvliv
M7RL+4nvEndLRO8oLstVaSpDbYoJCXg/WS2LfYibZdkeoPPw2Lxbh5c/OTS/
0lk70kUtxgL7gagpYWJQwIv5Kq3mOn9rIL7bcXcjlJ7GwuVET+NwqScUQ4+q
5h7Qqjrw1zl3HUDtX8UhH5OwNWbYsM3KV7O2yj5aSz8cQKeTp5+H9iXNyYrb
llIYXv4AsNzT0Q4HU/W38C2W5hkhRSdwFfpaxWaGGfonCx3c7xGYg4V1o9UX
x+svSfpBEISalx8P37c7OLTtWdq8Qeuqszn6ZAx9ND5571dXW7OgLavoQnHp
lVMA/5RfLSu6UAiCM7kqIT4nKEbgm1QURCiPItUkUuqSidVxxJoYenMywC0g
BQCLBYwAX5YclR0ayPXyYdj50k/6c2yi8r3ii2NiCsMDub6WcQZGYRuMYzaa
JW+zpxgG5TgnnwoGRCCnm5J/nl9wPiv7DB+OwO2mye+8MLJ6MgAjADQcOAKr
jU5vSocqiIYESn08VCbL6/eziuXftcpZtTMq7/aOgtQg7w5/laLDUBQEObLc
WYBbTElAkIf2Pw1Xykhg5JfKJmemoDuIf0sgZjHP+2/DlWfrGK1kcjMhrSou
sigMALkghnsA1SaQZJfKjKiuqui/91r4VQTHZ8FLZ7D6erep9xY9f+TByxm5
9BqWXqdlsnFU8koovjUsuzOB9oslz0TA+D+UX71rs+OJ+4J7XovOeC25g488
F590/Z+Fd46uPeN8tDk0Nj8wtjIyIWeXftXufRc3L3i5Ufur8ZKLlho1Zouv
7V734dCGN66bGvzWpTiu8Tg8j+G49WXqH2I/nMxHEU1WkuSoSgrXZO1WNFiN
ddqA3IjC3E9EnuABZdCQZCFoMSKr1boeO8/n5AJ/D53KOJWSMKQ9GjuTpQDb
YTngCdpl3vODPdY3xmneikbuW2rf3bHqudWKkigdVzes0XGkwkNFDPIIB4vm
YF+naiQ4LQn1+LcuUvFqkPId71X3wv6gnVQMtVZOsVYYSNFG2UoSANV4Cs98
NA/pIGZrFS95KnxJxg7i4dCqalvloOMKFjvU/luilqKPe5em8jUVGUpBngYo
xG1UCtmtdDtjg+SLi/i+5YtA5IUztsNNq6iZ3nCv5e7w06ar3UEWq4knFpWZ
ap8yQeoNkXa7vwGDzDjp2RKX+rKwdqi8e7L+qujsfdnACLwDjqJjP0d6E1I6
t/7btV73bUYm+gmVPZ5CXwsfX75b1V1ReC2v5GpBxYVCYJPsFgqxJCxO4BWV
6ZmQF4gvhfYPV+DVxtEaE2fH23I6yKxWMqk2FYCfiKzgQIaHF83Km2EZyLeN
LfEhVCWmVyXG5Yd7UE5aEw7aUw7AveqcE/4Ci+hiV1JtFKctHcT/0ouAcefm
9fBhNunKyOzmCU5z8s5kAyYuOJ3D6+ZzOunM1jRacyKlPkauZPgtzpcf8exg
B9EURDvCIRj5oc5tEt7eEo+jAM3DMT5y5AMrQvJ7XbMqIJgyAGsA6UI8M9sd
kE8+gdcGnr1+W3GuJuscL/M8j3uaQ++gEutSk0pj4jJDODnpva1tb+99hPcu
R2WyCSn0uClIw8WimYkfI/JrB/JpEmKJeEIi+S6VPppA703Jnsygs9fq36Ff
mh/cszvw1nnhK5d5j1xWvmQxKnkZhAhzdoQRheFH87avcAmqjCFkn3Aq2L+7
wnJJnfGypuOrCo9psc3UG0mRZ8npHSmxqfs3UKw2cmJM+d76z9K3TpHm/jiA
iA5poI7qKHlVp8kCy8WK2+cq1drhflCwXym4aTqCUhXh1FABTnZqeaatkp0N
EuuNXCIpX8UjH8gKMroiygbEQUtUsCzREGdzAHMrRfsdEflIwn5OX9ZIWYZP
Uw0JUjppjNR7q6ECLXhnU6D4PlXX9SDGRB/bFqX2jIL7SMO9J6vwHLA+lmp4
K8zbNA0ZSxklI2ga8j1knu9SjPEyXJM9ZoSoMEFEZujIHT/VBBNVTwOdhXNU
189XuuijMkxWHElBxpNV6o9r+m/V8lqnyrdZdz9910tPzIAH5p4xUpUbVHGt
petZ76uZsaKu0jCz1bwTq5uPqbUfU2o7qHiBl14STatJiX5189LX4p6RqguS
7j5p7yv0zbRUDKOSUDhzkZrdsnfn6f3bp569lf5E0SdC2Xv0w7O3jWerSy4V
Fl8uzOnJYtSn4UtCYzI9ojK94/NCk0sA7IHxn1GfCm8EAJbalsZqIzIaiemV
SQmF0eGZQb4MVw+qNQD/QdmuyRXh1Lo0anVaanFCBN/Hm23pwzkekm0Vlm8T
nG8VXuyaVBNCbkvi95LzL/JKLucXXyzIO5cjkJs9vPAov/mbeyY//2wBYCK5
ZzP4p6msNvysaGc25suLk1IQ3oHlw7vtwAhFcCYVVPiARDAjneW/s7UdeTET
fmaWHYthQQgeuQdJZ8TyoA8semz63K1rBb35OZd4eVdzCq7mgpN1ISu7lV/R
Wnr72t0fr0fhzJ9hGToJMRj4XnLmDRk0LCXBsXKzCmoR+MFkr6WS+5PoUzg+
C967eQtnZ30/O/DYxvKTzbL3VgtfOu76nFvTICgJSHF0I5h70h3jyJ4CR/dT
btHEPUasDZsbbNdW2SvlnMTyzJA8a+2OZJ9LmYJz/Dy6k0vkij8KTxo0BYff
8t4t4+jM0Oc92676eYvWsNnymp3zPRdjDixWiPobM0JQn+FixDzl6XAFWYAi
CgJy1qJn+GURNlhvb6QmGfeZifnCgsoceH0yUFFGWvAp/U+fI0iAMe4jRXuc
gxVxke95GmWZi/jMP+mRSKQ95myIEuQRBLjL7FOKbtAJrJkRpj5EaZClMELG
jTPUAKPxMpwTf1KxLxErilQSuSpMGCFTEWrn4hbyDmAGyMoiulzmR0a+RWtm
GGmk2q7dtlRjsbZm7FbFn0TNkURkIlppIEKbZ7w45N/FgauX5RodvGGjO2CJ
faaHbXBZU3kmp+5Rx83BF29kUnZGSpLJ3vzjq8+aLD57SLnLfF2Tf3hZrNet
9+f62hpHy3qFdZfFZ/rFF9/Jvk7DdxlCZfRp7/Xq42aXGWwY8H7KZC/EIBeM
vhu7fONS6ZnCnG4+u54cXxARxvGOzPSNLwwFtJdYk0xvJDBbSBDztFE4UB1K
odQSiKcS43LCA9k+sPtDtQ/gOkfm+6ZVx9ObiNQGYlpFamxRaFiuc0ShXXy5
e0KVT2KtT0J1QFJtEKEphNmdzD9HK7icWXqjoPR6UdGVwsKL+QUXc/IvwKGI
wP4LzheXXCotvVxSfCkv9xxfMtuNFcPxO8IxiXBMPo1kGoWtrlmDBgFdOtvG
kgt9fjuLnPfKUDnggeUdoVQEniSV02c4zArGbPTVh8HqC81ZvZmCi/y8y9lF
V3PLrudXXS3tvHb6xeOXY5+npCMo7K+J/2+bWAKLpgDnCEXwRaAXwG8Gx2dN
SSUvZiQgt76QwWmiX+X39L/LJh4PPXD3e39i1TuTdQNuluN119pL6vxibdyS
LZxTLFzTrXjUpKpYSqFnYvLWQzVGa856KLU6I9VWmGanFX2nBE+qah8V1TYl
peO3/JW7/8App4iqw9un4nRRYE489aFk3YfOK9ibNEP/QQK3KPkuRR77qKGZ
WDQXEWfr/DDCTh1QkNmpThNW1HorpwVgMpMwTzkKU1wFSbbiNH7OkL7i5AFl
qY3aNY95biYIw0ZxjKuJAjqchRvKVaviryoq1qvCLywKQG5HqYrjVGYcsZJo
neex8xJOIl72SG04MsVGZhgKMqriOW81i42KMXZaN+JUvjgov92o/GY1MsNa
MnjW9EaspvTxMRlXVUbEyFKRySSNYgOdNBc98+26m1doHl2ucMdTeyJJZdgb
+eas2Wa1kn1cP3rbpmzfyELr47f2a/ftUqrfocxnWrc/7br+/dGwFL3xeiDB
3Tt82/xW83/PH5p7dotSi9XxOh7jyfiPR++ffD59YbrhtqTrPnruneTaZ9lP
gEzBmw3sRTb08cfZlrPTsDk0IwH46K0U/SKdGZ65+7CvsK2AVJGSlAPs3zMy
0zuhJDytOpHWkMaEux1pGe3MjDY2OMwmCrk2JaUsJoLn70dz8aE4BLIcQ7M8
4kqC0msTGS0EegsxvR4fWx6SeMovudY/rSEEnPSWMGJrRHpLeHprCKU9ktOb
IrjIKL6WV3mnquZOXeWtyrJrJUWX83LOZWefzck9V1BwsaTkMhyHDrxAOIJO
jciEY1C6D+e5QTuUwGALArpYOmvbANL/f+hIKvldxJdPeJPTW5ABpydgvwDO
PJQjnqlJ6fkb97Pb8vhneHkXsguvZBVfyz11ufTMrbMvn70b+zwNov3sRAjY
FpCi/5saBMdEgO8vQ/+XWaTyu8aDEjhT4qME/Yyi32RwWNC4TDaCioZEdwgZ
Dw5vfm5y6EM8SXjh3ZXqLp8YC4dEU/tkC/94a05iVIGzT01YTLaTaaev3UM/
3VseyAUr5KL76m81VR/azr8ua7+ZV8szssj8b2uFhWHWSaeuI9um7dSlQXCl
hUiwjLNNKf2A0vBZ/TsJqlfNlNAcFTQXIyvHSCvmvziu+m73shHLRY+i1epi
kUYCciMDO5qBgSNTCpFp9oKXh7Rf71v+1GFFiTsu1Qk5HaIsEajBtle+whfe
3Kq0OZX8fzpZuteSkBfxuE/HsF9PqqPPo17WbBIEIEx/5Ew8TshRgGVSNqY/
dO7xhWoRJn9cSZw/EKFwU0/toe2CnxUbvt6KmnzsOH3ryIxAVRaJiHxVRSEL
S3cpR+uvCrXZaXdotcHfOJae2nd/za9HkNe71OqO/1kaFcK2tGSbWAi8/biH
/+zYpFO5+8/Yk0tarhXfGn0xNDM+NDnNy8+jMxLjDyzpPrT04iadniMbqpL8
6y83vRJOfB4cGTn9SNh8T3LmBXrls+TWIPoLlj4gDpaXRAAlBBYCzUcslgxL
4RLqYfTjiw+l5YI4pn8E2zki0z2xNIxSB+/2slopnA42rx1qHvgdPHYjhV6D
Ty6IDOF4+dCdfBhuQTx3EPyTq6KpTXg486QjndyMJzTEElpj0tuiye2R1I4o
emcsqyuOdTqB0RND6w6j9kSyzqZlX+YV3yiqvldV+6Cu8l59+fXy/IsFAA7x
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
noXfAXP/gzZhRwDyJwcZ3XTefctl02UPvb59q9/uWPMjMRW9OyS9M4I+nJC9
lF1KLsjRMyo1N74Wm/CduG8yDRHSlYaoSzrDTIsd9evi7CujjtRwArieht1G
c346qI/548bDdS/46dcUEaKCjzj8M89/z1/0/SsHYxagFAzKUR4k/9McZH3J
48Rjo/3dRtsSjy0MNtal29rkGe35RdSV8eAYdkmxbo/vZo7+Uq+/EaPlOMs1
uAZvrJSvgtIBKVAcTFvK1Jtrv31plqn2NHc+oAmSDNVLFlpZO1YXGR1NPrSS
ZXOYf8KRbelyKcj1s6Hqz20K/aZ/lTnaEyz13Q7PCTD/L8J4TZ7jps89p5+d
u0ixMkg9ujbu0OIQvb/Tj1rwjjpWnTQ+b6R9yxhzy1C5JtqQnhONj7TI9bQv
CwgucPEvsTMuObq0+Lhm6VHlWiOdTja5KpVSxaaV0NLKKrNojYQMhm2d6ar2
Iwu79ed2mK0j4R0800/m56eLf4nQZ5OyJ0L0vVg6DNuRwk8wjgKbn5b/mQLJ
YHJyagomAuAUM+IpkRQVSmYnJKCfP3yvaqlm1dPZLTRuPZFalhqXFRPK8QvL
8InNCY4vDE8si0yrjqQ1pUCO3MsDpJV/hptxjsQ6E0PtDSOfDiB1ehFaXQhN
DimNdinN9ultrtRuL9ppb/ppP/ixGxi/C7XDg9zmQWr2ozTHsNop2Wczy64X
NT6o6+jvAgR91uxnlQ+S2dauTI7AJ+GsWqh5k+v/Zb87WpAvPOx7LThVEZ6R
BNBOGB9gnog4XnReae79iw/GXkyLP6EzP6WSSVjdlM9CQSGxlTfXIHWFIEYE
PUIqmpYCxg0zJgBU0jeo9KNENiKFC2KmZ6/Yo7PYbLadMPlB+Kbp+dvKe+OX
vszc/DF19bvsLdpW1Wtpc9TU5Yip8wFT173GPgfDffUveBzvs995x3F376FN
d3dt/sIpRh9NobdHZQ9G0dewj1AViS928ah38HvipT8Zqz0VqzqJn3OXaFZJ
T20M8W4J9mpOjC5Mi6Hs/vPyodUfD+oMmSg9d9ySY3ZcEBsRsPNPz/8Wue1Y
lmOwcDRME01AxFSNvqCdD0qrHrQ0kY0PeO9YG244NzvgcK1/as2hVSLSPGDM
KF/5G3lZoalKe+zaDD2kPnpx+kHMlRglEQmD+mBkgUovA1aHbFlkvn4OeI6E
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
zDzkufRp33x9XEhrZmKM2idxN3/a7KozWlKVmxjLjSFVx0WVhwUXRROJMXa4
ZFNcqjU+zSE2ya6qLJZP9qy4+G4Hx3dgc4o7zi4cjyscS8juj6Y0BYXk2bnT
jMmRZvVa17Jt1VyizZwjTDhFVNGJEEBoYP8SuCEIBjHBqRiuODmEHU9g5zAP
OJFbPlYUQs+DE1gXEokwEj6WbB4enDV1d2Tw0+DoblV4eKEPsH/nJCObeD2z
CG29wGvafhc0vL9V9/pSE/+5fui35rHX7JKUnNM0PTL1cDkG+AJzYrF5SIlx
aAn4ak0sNg0sMPBh6Dkk3zAMuXTb7Xslh29VHb/VcPsONXssbiOvX56O3p/N
ry+jVCYn1sSmNCfQ2qj09tTMHjqzPzNngJl9N4PVw6jvaVqafHy0IZZswWW+
mP6tEJxdKPMf1vDhQyS3fEwgC8FIbiLI+UFzJdlrqeQ1mimL34poSbEEAXrB
C+Tl2OFMzfRSzdRO+/b+6N7pvHRv+KVw4uh0W1zVXJ9USaHVpdMbstNqmIyK
rJ6KqoO1Z+BNwKkZkIKdSiSHYuBBEiG6sAAysuAPgYy+HekGt2fTXX/X8/M5
00sH5V07Q09DgrxDQywb45IqrJ3znWxq/Dx4Kr+vt3qvyfqnbP+vPRPvOCVr
0WhBZXFp8Xpa0cpfc3Sv5yh/n/Dlt2WGX4/5fH3Ea5MML5+OzD9p7t/vmdxg
Jk95/GA15F8ehPyRrXyZbWlb4u3JcvXOdffmhhLolh+PBP953u1Hq3bvLBTp
b8qeTZ9ORvoaxitdZRhZU/Qdc83MuTYXk1V+Ueam0pOS9IDBGmbk5Hv4ZzsF
Um/o9Gr9dd3mnUntfynTv5Burphic4tsoUE1tcjQVOXb/KXG+Ae12j9fDg05
axyVDM5K7m+B4+9gc7/aLTTfWD3h5nuJyr8s1fzTy65xXmEhpyC9mleWnZMW
m+5NpFkEZVkSGPb4TMeANOc0iktzS1pZsn1R1K2WR7Ul45nF90mFDyjZg7GU
hkBinqNrmplzvEkcUS/dWdM3xsKD6uCf7Pjo/hAkK74RiI8lwBEwbUCRQCx5
CVWRz6RCgUD03w+At44gOBMK0T2KKDaGu0Ml0kfTMxmV1KTyqIh8ghfN2plq
5JBkYhOrZxZ+xzBUQT/oug7hkk7AdzpBFwxCr5hEKFjGK9skqzuna3oyDb1z
TPxyjfC5Zv4sS98cE0+mqWuqnmWMgk7A9duel2+7fKfmelHL6xowSoDwhx/M
cptrEwtTQ7KDiXk+YcX+keXB5OqY5Fpyagslqyctu5/GGsji9OUPjo48Xjo4
24EVTozDiW37hZQPVOdEjPa20HatWL4FA8GUctHfegkwCZSDhoKKB1ApGq0E
i1ElLZTqL4QapE/6XszypxZq5h63P305/Opo9vT5/b3DsVeSNen4+ExOZ3Fe
X1l+Lze/p6Siu2ppcRb+bciaBu8AMjZQcTrp2/4ddC8JegYdyV7376zFZ+y6
3to2/2yHmo5MC4c67oWnBnOplIbQpDwbq0zdL5pMv+g3enfA9t27Xp+n0zzc
qWauqYakDN+KVGaaiXrWzb+UmRvRbmikfnOxx+TrmQBNZHRW+nBNOrKEPHwi
fbizluC+4vnOk6gft7h9lHlHk6GtVRUSzPUhFLr7lwfiaWZftTp9sWr5iw3j
H07x3WYF012z/CjbW3HXFYpN/t7k+fcB39822n+cr/VlpbvaI3bBfsvoi5bR
hiBSRVBUspJxk47iit7PplR+1GJyI9tcm2Z0Kdnw61wvhzwbr0r9K80W7zbp
/HDCQ/+wdlA6sCId3pStHQoFsvoAaoW+drr6R3T13+Tf+NmzjJzX93aZWYkx
dCKZSUjM9yUXeYfl2QfmOvpn4/B035BEr0IWvm+cyW8PbhxmlY5z8u+TuI8S
2YMx6c0hIVx3D5qVfby5PcmCkOSIT7UJyHYPYeGzSsjPX7+CAFgAMazwUIQV
MaDc00u4DwIODIqE/4iCsNfn1VEB1JhCkTNmDOCf2tp8WlSTH5Lp5ke3xqVa
uaSY2Sca28XrWsTr2iVpOCTfsU9SBxDIhnzLNlHBgaLkkKrhTNcGCbIbwxA8
3bMMPTKMPOiGDlRdG7K6cbiiNl5J3eumhudNbW9FTb9blR1NaaWZwTlEb4Yn
jonzZXn55rgE5OIIhfiw0hBSdXRKfRKtjZ7VkV7VXT75cH5/VSB4BiWg0dKk
GA3ZkOwkQsWyoAuI5RkuKpmCiaXAPwaJFi+lCCqQBaH4GQb4pGh8RmdoZHDd
zOups7WOp5OVD+f501udz7Z74LKAxwNPttvX90ZfzY4vlw80lgzxCscqCwcq
W4bbn7/cxeYr5QcIRuGA7woGEylcPYbA2QQ4qoMczR3slA9t+OF2PDWfBHoL
x54dzZ2V8Lm0kiReagY/JIlhqF6o+7d+vY8nzN4dt/xpE+FWOCuMkIHzotsG
p1jwM1JKvfyrjQ1rTC0zvlMoVrz+yO7mKy5HuvAKmXqK3HuCTLwST76cxmtt
ur2zEfof9a4Xi7ych1j23bQYbmAMzdieaWqcqvoB1+D9VdWfL+j+ZKw/Zmi7
Ni/FPsH+OunS561674+6v3Pf850uwoUyX8dqO60pStpBw/jr5tEiO/eq4MAM
Y5cKTf0F9Q9Xb/ysy0Ezzs0ixlAxQeW7GI2/5Tu5cI3Ue01+Oaj3k/s2F/cr
+wXtk7KxbdnEY5CaDWbzKoysC29/la/2YaHSL0ddTGRLooXORxSSb2qWR2FN
anpFWESBfXC2R1AGMZge6ZcaEJ/i1tKc2D2Scm+hqmGyonAkqfheYsFIbEZ7
SGSlFy7T3CHZ0DHRzJ1qGZDlHlkcSq6MTSyNrumswhZlwdgvQYM/pvwnhHKC
WEMfBUJHbxNhzP5hmfQMngWC0zNImZBTLiG0ePPsqKyaG0R396LZ+NBsPegm
7hlWvrn2Qfl2QRwLf7YJjmHskanjnqHlmgks3wA8odkzTNwZpi7pevbUO/bJ
msBHTKMV9YNUdHyUtLxuaOGUdP3VdQNUQrl+QYU4fL6Xf66HH9PTm+nhzXL1
yvbF5/oGFgRGlsbEV8bRatKaB9q3l5+f7sjApwDWKwVZM+qnbwfBoCgKhvfP
jR/TPMHwDJxbfAIXu0Nw/hJWYOTZLjpEjG3NOHgs3RndX2nYeFT2cJq3sNGx
vdW1udX3ZK1rc7Vp5Vnn+nzfUt1ge/lIbdV4Q8lg5dD04NEZOimGZs2IHMah
mzjQdsOZWHQmgTIUQhFM6k+eHh727W6llT53UH/man7YOSNbRBbvreS3l+R3
sJs6GyuoKWy97+oMv5/Q/N2i6a/HrD9gZfhGFSaE5QUHs31ig29nmnyebnOz
2MGxzdevRFGx10hhjWCKDK4hD5/Jpp7B6e8N2e7A6oTp908dfjzp8h9cg6/a
4pProv1babRichg3GJ/n7U3V/Zip/ZO+G78YTjGuHo7m8vzZ8eY1LenhN//Q
YfSHCbcf3LN7p8P7a064IT/cZZ5dftYw/qb5AcfUJt/bI8fDm+tIGFP5dum7
nw962CZE+YbY6SZc+zpK9WOWtVmZvXOP8V8f6P143PD3BwX10t4l6eSOdOIV
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
2lMzoiI5+KhSYkxZcGwZ4f8A4a/d+w==
        "], {{0, 0}, {256, 192}}, {0, 255},
        ColorFunction->RGBColor],
       ImageSize->Tiny,
       PlotRange->{{0, 256}, {0, 192}}]}], ",", " ", 
     RowBox[{
     "\"\<description.txt\>\"", " ", "\[Rule]", " ", 
      "\"\<picture of a coneflower\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Tar\>\"", ",", " ", "\"\<Rules\>\""}], "}"}]}], " ", 
  "]"}]], "Input",
 CellChangeTimes->{{3.822494374559599*^9, 3.822494402741148*^9}, {
  3.822765146807005*^9, 3.822765151181993*^9}},
 CellLabel->
  "In[179]:=",ExpressionUUID->"afa65533-3ea6-4b8c-8eca-789a044380c6"],

Cell["Import the names of the files in the .tar archive:", "CodeText",
 CellChangeTimes->{{3.822494425183885*^9, 3.822494438199246*^9}, {
  3.822494474783702*^9, 
  3.822494482343338*^9}},ExpressionUUID->"d06f0cfb-21a0-4ae4-b0b8-\
5c81c78931a2"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<test.tar\>\"", ",", "\"\<FileNames\>\""}], "]"}]], "Input",
 CellChangeTimes->{
  3.822494412356462*^9, {3.822765162230051*^9, 3.8227651657047253`*^9}},
 CellLabel->
  "In[180]:=",ExpressionUUID->"731cca41-4c8c-4ea6-b18d-d1e73c6b82bb"],

Cell["Import a specific file from the .tar archive:", "CodeText",
 CellChangeTimes->{{3.82249445727985*^9, 
  3.8224944696653957`*^9}},ExpressionUUID->"c3771dab-cda4-4329-9712-\
79932b69dfa6"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<test.tar\>\"", ",", "\"\<photo.png\>\""}], "]"}]], "Input",
 CellChangeTimes->{
  3.822494416259644*^9, {3.822765175763255*^9, 3.8227651835588837`*^9}},
 CellLabel->
  "In[181]:=",ExpressionUUID->"8644e74d-82c4-4ae6-84c3-58116dcaad37"],

Cell["", "EndOfSlide",ExpressionUUID->"db55e69f-20bd-434b-a0f5-32d985033de3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"41a8b154-cd55-4688-911a-b31b704d2a34"],

Cell[CellGroupData[{

Cell["Saving and Exporting", "Section",
 CellChangeTimes->{{3.821009267480449*^9, 3.8210092754672356`*^9}, {
  3.8227652720429897`*^9, 3.822765286204941*^9}, {3.822857057320901*^9, 
  3.822857065096405*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"25082016-5c2e-48df-a1d4-b5c6289947f4"],

Cell[CellGroupData[{

Cell["Save, DumpSave and Export", "Subsection",
 CellChangeTimes->{{3.822765305454155*^9, 3.822765324308083*^9}, {
  3.822857068692389*^9, 
  3.822857077080893*^9}},ExpressionUUID->"5bbb73a6-821f-4f44-9de0-\
d2fdce27b31c"],

Cell[TextData[{
 " ",
 StyleBox[ButtonBox["Save",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Save"],
  FontWeight->"Bold"],
 " writes out definitions in ",
 StyleBox[ButtonBox["InputForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/InputForm"],
  FontWeight->"Bold"],
 ": "
}], "CodeText",
 CellChangeTimes->{
  3.8227656424938383`*^9, {3.822765672534306*^9, 
   3.822765696820689*^9}},ExpressionUUID->"7d250353-2921-4de4-8d73-\
511a69428c83"],

Cell[BoxData[
 RowBox[{"countryPopulations", " ", "=", 
  RowBox[{"EntityValue", "[", 
   RowBox[{
    RowBox[{"RandomEntity", "[", 
     RowBox[{"\"\<Country\>\"", ",", "5"}], "]"}], ",", "\"\<Population\>\"", 
    ",", "\"\<EntityAssociation\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8227658147126493`*^9, 3.8227658171185904`*^9}, {
  3.822766359577455*^9, 3.822766392301893*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"feec83d4-2f21-4eca-8c0d-66f1d1c0fb55"],

Cell[BoxData[
 RowBox[{"Save", "[", 
  RowBox[{"\"\<testfile\>\"", ",", "countryPopulations"}], "]"}]], "Input",
 CellChangeTimes->{{3.82276575470118*^9, 3.822765825388789*^9}, {
  3.822766398277267*^9, 3.8227664012901573`*^9}, {3.823181637656068*^9, 
  3.823181637888521*^9}, {3.8231816770416937`*^9, 3.8231816774889307`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"a082da16-2ab5-4125-a0cc-a45c855aa060"],

Cell["Save will save in \[OpenCurlyDoubleQuote]plain text\
\[CloseCurlyDoubleQuote] format.", "Text",
 CellChangeTimes->{{3.822766190991323*^9, 
  3.8227662309272833`*^9}},ExpressionUUID->"4fa48601-b3f3-4abd-811d-\
2fd674406656"],

Cell["\<\
Open the file using the default application for text files on your system:\
\>", "CodeText",
 CellChangeTimes->{{3.8231815805242643`*^9, 3.823181600717277*^9}, {
  3.823181696739484*^9, 
  3.8231816971764727`*^9}},ExpressionUUID->"6f63ea76-2292-4ce7-98b8-\
b0b775c7cf40"],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", "\"\<testfile\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.822765828092845*^9, 3.822765839607815*^9}, {
  3.823181642693705*^9, 3.823181642996365*^9}, {3.823181682822826*^9, 
  3.823181683327661*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"25279df6-886b-438f-b407-819c4c95e7d0"],

Cell[TextData[{
 StyleBox[ButtonBox["DumpSave",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DumpSave"],
  FontWeight->"Bold"],
 " saves definitions in the serialized internal Wolfram Language format:"
}], "CodeText",
 CellChangeTimes->{{3.822765914217407*^9, 3.82276598196451*^9}, {
   3.822766025346313*^9, 3.822766027100169*^9}, 
   3.822766275476019*^9},ExpressionUUID->"acf9fff6-3c0d-4a4b-90b3-\
b657726864a8"],

Cell[BoxData[
 RowBox[{"DumpSave", "[", 
  RowBox[{"\"\<testfile2\>\"", ",", "countryPopulations"}], "]"}]], "Input",
 CellChangeTimes->{{3.8227659896579657`*^9, 3.822765997143125*^9}, {
  3.822766267424962*^9, 3.8227662699525337`*^9}, {3.822766303469767*^9, 
  3.822766305604362*^9}, {3.822766498476618*^9, 3.8227665070633383`*^9}, {
  3.823181855726575*^9, 3.823181856729562*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"1ca9ff49-25a5-4a83-8457-f691f7be7c65"],

Cell["Open the file using the default application on your system:", "CodeText",
 CellChangeTimes->{{3.8231815805242643`*^9, 3.823181600717277*^9}, {
  3.823181696739484*^9, 3.8231816971764727`*^9}, {3.82318192937824*^9, 
  3.823181929860784*^9}},ExpressionUUID->"384a570f-b84d-420d-ac31-\
792646fc6cb9"],

Cell[BoxData[
 RowBox[{"SystemOpen", "[", "\"\<testfile2\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8231818796532087`*^9, 3.823181883837408*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"57a23278-2c8f-4c87-9740-f293a6b5191d"],

Cell[TextData[{
 "Read in the file using the Wolfram Language function ",
 StyleBox[ButtonBox["Get",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Get"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8231820599573183`*^9, 3.8231820916478443`*^9}, 
   3.823182127394326*^9, {3.823269948123159*^9, 
   3.823269948706704*^9}},ExpressionUUID->"87b82ec0-d947-484c-969a-\
76344d1b00a7"],

Cell[BoxData[
 RowBox[{"Clear", "[", "countryPopulations", "]"}]], "Input",
 CellChangeTimes->{{3.8227665797231216`*^9, 3.8227665879585743`*^9}, {
  3.822766631266265*^9, 3.822766633503338*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"be9a3cb2-373b-4b82-be35-95478866958c"],

Cell[BoxData[
 RowBox[{"<<", "\"\<testfile2\>\""}]], "Input",
 CellChangeTimes->{{3.822766317884082*^9, 3.8227663360350313`*^9}, {
  3.8227665354276047`*^9, 3.822766556066759*^9}, {3.823181866896941*^9, 
  3.823181867771583*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"3ae398ab-1676-46cc-90df-0a0b98358c6d"],

Cell["\<\
The symbol definition saved to the file is now available for use again:\
\>", "CodeText",
 CellChangeTimes->{{3.823182178709797*^9, 
  3.823182194563451*^9}},ExpressionUUID->"46201a96-5fd1-48fb-a52d-\
4d5c74915779"],

Cell[BoxData["countryPopulations"], "Input",
 CellChangeTimes->{{3.822766621167203*^9, 3.822766623963107*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"3960298d-8009-4624-9a50-0c54d221dc0b"],

Cell["\<\
If you have to read in very large or complicated definitions, you will often \
find it more efficient to store these definitions in internal Wolfram System\
\[Trademark] format, rather than as text. \
\>", "Text",
 CellChangeTimes->{{3.8227662608667507`*^9, 
  3.8227662629579153`*^9}},ExpressionUUID->"735f7549-a8b9-4c8a-88fe-\
5f5cad906f15"],

Cell["\<\
Export can be used to export data in a specific format, for example, CSV:\
\>", "CodeText",
 CellChangeTimes->{{3.8227668688738956`*^9, 3.822766907419895*^9}, {
  3.8232717864191513`*^9, 
  3.823271799624053*^9}},ExpressionUUID->"4155aee6-0627-46a9-a454-\
8be025a16b38"],

Cell[BoxData[
 RowBox[{"list", "=", 
  RowBox[{"EntityValue", "[", 
   RowBox[{
    TemplateBox[{"\"Group of 7\"", 
      RowBox[{"EntityClass", "[", 
        RowBox[{"\"Country\"", ",", "\"GroupOf7\""}], "]"}], 
      "\"EntityClass[\\\"Country\\\", \\\"GroupOf7\\\"]\"", "\"countries\""},
     "EntityClass"], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Name\>\"", ",", "\"\<Area\>\"", ",", "\"\<Population\>\"", ",", 
      "  ", "\"\<GDP\>\"", ",", " ", "\"\<CurrencyUnit\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"d7ca736b-71eb-4459-8cb8-a0c3737fa698"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<G7.csv\>\"", ",", "list", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Name\>\"", ",", "\"\<Area\>\"", ",", "\"\<Population\>\"", ",", 
      "  ", "\"\<GDP\>\"", ",", " ", "\"\<Currency Unit\>\""}], "}"}]}]}], 
  "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"9305ab6b-b0b7-4a77-a475-0741940cca56"],

Cell["Import can be used to read in the file again:", "CodeText",
 CellChangeTimes->{{3.823182215096012*^9, 
  3.8231822282122183`*^9}},ExpressionUUID->"807b4a04-1845-4199-b2ae-\
90948656ef80"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<G7.csv\>\"", ",", "\"\<Dataset\>\"", ",", " ", 
   RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", " ", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.82318223372602*^9, {3.82318231752884*^9, 
   3.823182337911971*^9}},ExpressionUUID->"6f6d95d6-8ae0-4641-969f-\
be0d917c4e50"],

Cell[TextData[{
 "The data read in as ",
 StyleBox[ButtonBox["String",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/String"],
  FontWeight->"Bold"],
 " can be converted to Wolfram Language expressions with ",
 StyleBox[ButtonBox["ToExpression",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ToExpression"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.823182215096012*^9, 3.8231822282122183`*^9}, {
   3.823182347531111*^9, 3.823182369485135*^9}, 
   3.8232718129279613`*^9},ExpressionUUID->"4d4d0452-563b-493b-a8b1-\
0dbe92acb82e"],

Cell[BoxData[
 RowBox[{"ToExpression", "/@", 
  RowBox[{"Import", "[", 
   RowBox[{"\"\<G7.csv\>\"", ",", "\"\<Dataset\>\"", ",", " ", 
    RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", " ", "1"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{3.82318223108182*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"fdbe15b2-980c-40d0-ad76-36b17e893398"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Saving from the Front End", "Subsection",
 CellChangeTimes->{
  3.822765289072672*^9},ExpressionUUID->"f6ee73e3-60dc-4825-b4d7-\
9473dc523da6"],

Cell["\<\
All the export formats can be saved with kernel commands, but some can also \
be saved from the front end through the menus.\
\>", "Text",
 CellChangeTimes->{
  3.8219067901534953`*^9, {3.8224237530968513`*^9, 3.8224237551175756`*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"6ecccc58-ad9e-455e-9347-71e62729e3f5"],

Cell[TextData[{
 "Notebooks can be saved as XML, plain text, ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]],ExpressionUUID->
  "7d3b0b65-301c-47a2-ab34-0452b02e7aa6"],
 ", HTML, RTF, PDF or PostScript under Save or Save As",
 StyleBox[" ", "SR"],
 "in the File menu."
}], "Text",
 CellChangeTimes->{3.8225647312874203`*^9},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"cb04cb12-64cf-4465-85e8-66fa61c0d935"],

Cell["\<\
Cells (including graphics cells) can be saved to many graphics formats with \
items under Save Selection As in the File menu.\
\>", "Text",
 CellChangeTimes->{{3.822423779049457*^9, 3.8224237826494617`*^9}},
 CellTags->
  "Importing and \
Exporting",ExpressionUUID->"6b31b06d-5846-43d5-b261-4fe7f6729c18"],

Cell["\<\
Select the output cell obtained after evaluating the following code and \
select File \[FilledRightTriangle] Save Selection As to save the image as a \
.PNG file:\
\>", "CodeText",
 CellChangeTimes->{{3.822671350923913*^9, 3.822671454681666*^9}, {
  3.8232699981885157`*^9, 
  3.823270007634583*^9}},ExpressionUUID->"3fdb131a-a4d3-42bc-9fa3-\
99863effd3a3"],

Cell[BoxData[
 RowBox[{"BubbleChart", "[", 
  RowBox[{"RandomReal", "[", 
   RowBox[{"1", ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "7", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8226712447307034`*^9, 3.822671297090639*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"74572cb1-1fdb-4738-af1d-141693aa8eae"],

Cell["", "EndOfSlide",ExpressionUUID->"8f5a6e02-ff6d-4cd2-8f7e-a6a3c1abd0e9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"0332e271-3e41-4b2a-8a84-e151aba603f5"],

Cell[CellGroupData[{

Cell["Getting Data from a Database", "Section",
 CellChangeTimes->{{3.709319215223402*^9, 3.709319225401836*^9}, {
   3.713183108975733*^9, 3.713183109395059*^9}, {3.7147472842368917`*^9, 
   3.7147473183963823`*^9}, {3.714748884630917*^9, 3.714748894707773*^9}, 
   3.714748991071229*^9, {3.714749634726173*^9, 3.7147496389407387`*^9}, {
   3.725730865212603*^9, 3.725730865514154*^9}, {3.823026598877852*^9, 
   3.823026599822268*^9}, {3.82302695583806*^9, 
   3.823026956669991*^9}},ExpressionUUID->"7633cfc3-8c10-4af2-a624-\
3eee9a0ac364"],

Cell[CellGroupData[{

Cell["Set Up", "Subsection",
 CellChangeTimes->{{3.7257300377964373`*^9, 
  3.725730039458955*^9}},ExpressionUUID->"381128ec-66df-474f-b1e3-\
3a1e474fcd72"],

Cell["\<\
DatabaseLink contains a number of example databases. Install them as follows:\
\
\>", "CodeText",
 CellChangeTimes->{{3.725730070906144*^9, 3.725730091300312*^9}, {
  3.7257301344960938`*^9, 
  3.725730181679365*^9}},ExpressionUUID->"e8273f89-ebf4-42d1-976d-\
6669dff6a0af"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"<<", "DatabaseLink`DatabaseExamples`"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"DatabaseExamplesBuild", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.714765698960204*^9, 3.714765699306169*^9}},
 CellTags->"databaseExamples",
 CellLabel->
  "In[105]:=",ExpressionUUID->"0d4f729a-cfec-454a-bdca-9e883aef41b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Connecting to an SQL Database", "Subsection",
 CellChangeTimes->{{3.7131953401038427`*^9, 3.713195352316354*^9}, {
   3.714765488411426*^9, 3.714765506121314*^9}, {3.716494231719722*^9, 
   3.71649425141201*^9}, 
   3.823271930289892*^9},ExpressionUUID->"e3bf9931-6da4-4f45-a500-\
a2f132367c0f"],

Cell["Load the DatabaseLink package:", "CodeText",
 CellChangeTimes->{{3.716494347659135*^9, 3.716494360064908*^9}, 
   3.725730419110517*^9},ExpressionUUID->"ebaff2e8-acbd-4782-9725-\
fb6f1874dd60"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Needs", "[", "\"\<DatabaseLink`\>\"", "]"}], ";"}]], "Input",
 CellChangeTimes->{3.716494263855549*^9},
 CellLabel->
  "In[107]:=",ExpressionUUID->"d71e1acc-a910-4884-bd07-6aee319d38d7"],

Cell["\<\
Open a connection to the database (the \[OpenCurlyDoubleQuote]publisher\
\[CloseCurlyDoubleQuote] example database):\
\>", "CodeText",
 CellChangeTimes->{{3.7164943660170097`*^9, 3.7164943729080467`*^9}, {
  3.716506371191174*^9, 3.716506379980502*^9}, {3.7165067881758223`*^9, 
  3.716506814797758*^9}, {3.717180215511177*^9, 3.717180215835534*^9}, {
  3.7257303987042503`*^9, 
  3.725730417510541*^9}},ExpressionUUID->"ab67171b-8c53-4638-9a4c-\
0ca228a9dbad"],

Cell[BoxData[
 RowBox[{"conn", "=", 
  RowBox[{"OpenSQLConnection", "[", "\"\<publisher\>\"", "]"}]}]], "Input",
 CellChangeTimes->{3.716494263855549*^9, 3.725730426078787*^9},
 CellLabel->
  "In[108]:=",ExpressionUUID->"5f9c443a-8148-4999-a62b-24ed7e2033e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Getting Information from the Database", "Subsection",
 CellChangeTimes->{{3.7164943838101063`*^9, 3.7164944123481092`*^9}, {
  3.82327193915276*^9, 
  3.8232719428984013`*^9}},ExpressionUUID->"de06d5d1-576d-455a-bcc0-\
09f7d578ab90"],

Cell["Check the names of the tables in the database:", "CodeText",
 CellChangeTimes->{{3.7164944223382874`*^9, 3.716494436323555*^9}, {
   3.716506819837802*^9, 3.7165068261898127`*^9}, 
   3.725730433245996*^9},ExpressionUUID->"6d816fec-6ff4-4d05-a7a3-\
251037d46b8f"],

Cell[BoxData[
 RowBox[{"SQLTableNames", "[", "conn", "]"}]], "Input",
 CellTags->{"b:3.1", "Ex--21943492438155078303,64"},
 CellLabel->"In[109]:=",
 CellID->27124,ExpressionUUID->"3596bf61-7402-4828-a20c-92cd05fd40a9"],

Cell[TextData[{
 "The ",
 "DatabaseLink",
 StyleBox[" ",
  FontSlant->"Italic"],
 "package offers a number of Wolfram Language functions",
 StyleBox[" ",
  FontSlant->"Italic"],
 "for working with SQL databases. "
}], "Text",
 CellChangeTimes->{{3.8230270303023*^9, 
  3.823027082433898*^9}},ExpressionUUID->"aaea6b3b-b38e-4026-a90e-\
af4739aaf4bc"],

Cell[CellGroupData[{

Cell["\<\
Select a few rows from the \[OpenCurlyDoubleQuote]SALESDETAILS\
\[CloseCurlyDoubleQuote] table showing the column headers:\
\>", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7165068988396482`*^9, 3.716506934310789*^9}, 
   3.716555131870565*^9, 
   3.72573044634993*^9},ExpressionUUID->"596a5220-d867-41a4-b473-\
03d476cddee2"],

Cell[BoxData[
 RowBox[{"SQLSelect", "[", 
  RowBox[{"conn", ",", "\"\<SALESDETAILS\>\"", ",", 
   RowBox[{"\"\<ShowColumnHeadings\>\"", "\[Rule]", " ", "True"}], ",", 
   RowBox[{"\"\<MaxRows\>\"", "\[Rule]", " ", "5"}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.7147657583682613`*^9, {3.714765792021305*^9, 3.714765795818323*^9}, {
   3.7165068801871643`*^9, 3.7165068832967987`*^9}, 3.716555131871121*^9},
 CellLabel->
  "In[110]:=",ExpressionUUID->"5b816c88-6d4c-4c3c-a54d-8e7324f0021d"],

Cell["\<\
Select the the titles, as well as quantity ordered, in each sales order (the \
final goal is to compute the total quantity ordered for each title):\
\>", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7165069951135902`*^9, 3.716507031600024*^9}, 
   3.716507140328558*^9, {3.716507380872633*^9, 3.7165074070558033`*^9}, {
   3.725730455230695*^9, 3.725730519484375*^9}, {3.823271967778213*^9, 
   3.823271973632965*^9}},ExpressionUUID->"e8b2ee51-286a-4889-b851-\
7cbe15671b30"],

Cell[BoxData[
 RowBox[{"data", " ", "=", 
  RowBox[{"SQLSelect", "[", 
   RowBox[{"conn", ",", "\"\<SALESDETAILS\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<TITLE_ID\>\"", ",", "\"\<QTY_ORDERED\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.7147657583682613`*^9, {3.714765792021305*^9, 3.7147658233806057`*^9}, {
   3.714765853779509*^9, 3.714765854937508*^9}, 3.714765887954249*^9, 
   3.716494581403434*^9},
 CellLabel->
  "In[111]:=",ExpressionUUID->"15480c0b-1e24-45f1-ab05-23bc308bf9b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Use Wolfram Language code to group the sales orders by title and sum the \
quantities across orders for each title: \
\>", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.716507051212441*^9, 3.7165070841939783`*^9}, 
   3.716507215667355*^9, {3.7165074147905703`*^9, 3.7165074631089373`*^9}, {
   3.716507582021309*^9, 3.716507595244*^9}, {3.725730554013838*^9, 
   3.7257305570182858`*^9}, {3.8232719817385607`*^9, 
   3.823271982729356*^9}},ExpressionUUID->"1816b1fe-b4d0-46a3-a126-\
5af6754349b8"],

Cell[BoxData[
 RowBox[{"data2", " ", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"First", "@", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ",", 
      RowBox[{"Total", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@", 
   RowBox[{"GatherBy", "[", 
    RowBox[{"data", ",", "First"}], "]"}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.714766354218075*^9, 3.714766432401528*^9}, 
   3.716494650657811*^9, 3.716507130725142*^9, 3.716507215667849*^9},
 CellLabel->
  "In[112]:=",ExpressionUUID->"fc17427a-1e95-4d24-9f6d-aa8b9bebdbf4"],

Cell["Visualize the total sales for each title:", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.725730561371745*^9, 3.725730575498024*^9}, 
   3.7257306224690533`*^9, {3.823027137221418*^9, 3.823027140617944*^9}, {
   3.823271988914459*^9, 
   3.823271989193716*^9}},ExpressionUUID->"fdabdd8f-9185-4804-9e93-\
ef5bc4ca21fd"],

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{
   RowBox[{"data2", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"RotateLeft", "[", 
       RowBox[{"data2", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}], "]"}], ",", "Below", ",", 
      RowBox[{
       RowBox[{"Rotate", "[", 
        RowBox[{"#", ",", 
         RowBox[{"Pi", "/", "2"}]}], "]"}], "&"}]}], "]"}]}]}], 
  "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.714765898585672*^9, 3.714765944821094*^9}, {
   3.7147660007164*^9, 3.71476601854148*^9}, {3.714766065978792*^9, 
   3.714766122467805*^9}, {3.714766196227559*^9, 3.71476621583561*^9}, {
   3.71476631614776*^9, 3.7147663250030537`*^9}, {3.714766418636056*^9, 
   3.714766508189384*^9}, {3.714766557379628*^9, 3.714766589537101*^9}, {
   3.71476665033529*^9, 3.714766663461076*^9}, 3.716494650658338*^9, 
   3.716507130725586*^9, 3.716507215668173*^9},
 CellLabel->
  "In[113]:=",ExpressionUUID->"0a7b59a6-5ecb-4b41-b755-60c4504e8109"]
}, Open  ]],

Cell["\<\
You can also use SQL directly to select rows of data from a table.\
\>", "Text",
 CellChangeTimes->{{3.823027212854521*^9, 
  3.823027214958784*^9}},ExpressionUUID->"639bf4f4-6963-41e6-a094-\
25211ee16b5d"],

Cell[CellGroupData[{

Cell["\<\
Use SQL directly to group results by title and add up the quantity ordered in \
each group:\
\>", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7165073576254787`*^9, 3.716507370792862*^9}, {
  3.716507472607527*^9, 3.7165075338648*^9}, {3.725730666593438*^9, 
  3.72573067074338*^9}},ExpressionUUID->"959a7182-ca98-4b7e-b477-\
0e826e836604"],

Cell[BoxData[
 RowBox[{"data3", " ", "=", 
  RowBox[{"SQLExecute", "[", 
   RowBox[{
   "conn", ",", 
    "\"\<Select TITLE_ID, SUM(QTY_ORDERED) from SALESDETAILS group by \
TITLE_ID\>\""}], "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.714766815725134*^9, 3.714766927315689*^9}, {
   3.71476710342279*^9, 3.714767118965431*^9}, 3.716494804179831*^9},
 CellLabel->
  "In[114]:=",ExpressionUUID->"b4e2ff17-5e75-41ef-b948-f05d5dc6bfd2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualize to compare the total sales across titles:", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.716507601796386*^9, 3.716507634141024*^9}, {
  3.725730687153206*^9, 3.725730689942481*^9}, {3.823272000777791*^9, 
  3.823272001106515*^9}},ExpressionUUID->"9a7c1397-c8a9-41f5-a250-\
2646577d57f7"],

Cell[BoxData[
 RowBox[{"PieChart", "[", 
  RowBox[{
   RowBox[{"data3", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}], ",", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{"data3", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
      "\"\<RadialCallout\>\""}], "]"}]}]}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.714767121483667*^9, 3.714767192489197*^9}, {
   3.714767243514009*^9, 3.714767251567593*^9}, 3.714767285002069*^9, {
   3.714767350826028*^9, 3.7147674154999323`*^9}, 3.716494816729451*^9},
 CellLabel->
  "In[115]:=",ExpressionUUID->"058bd0f2-23f2-4976-a5b5-d0dcefa79a83"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Closing Connections", "Subsection",
 CellChangeTimes->{{3.716494730821911*^9, 3.7164947425241117`*^9}, {
  3.823027265594746*^9, 
  3.8230272683163137`*^9}},ExpressionUUID->"aea3aed2-117c-4c4e-bd91-\
e577ee7fc73e"],

Cell["Check for open connections: ", "CodeText",
 CellChangeTimes->{{3.71649474521852*^9, 3.716494762642803*^9}, {
  3.725730737148674*^9, 
  3.7257307397792273`*^9}},ExpressionUUID->"1ccd0e34-b75e-41b8-af1a-\
a1d873acde2f"],

Cell[BoxData[
 RowBox[{"SQLConnections", "[", "]"}]], "Input",
 CellChangeTimes->{{3.714767720694193*^9, 3.714767735203641*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"0824c710-6279-4db8-852d-2f13f4296ef3"],

Cell["Close connections that you do not need:", "CodeText",
 CellChangeTimes->{{3.7257307415703*^9, 
  3.7257307529795094`*^9}},ExpressionUUID->"9cb7268f-0893-4b1e-b837-\
76680c55d4a1"],

Cell[BoxData[
 RowBox[{"CloseSQLConnection", "[", "conn", "]"}]], "Input",
 CellChangeTimes->{{3.714767738715557*^9, 3.714767750171919*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"b032ab6f-90e5-454d-b1fd-eaea9f513db7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Additional Resources", "Subsection",
 CellChangeTimes->{{3.716507677769109*^9, 3.7165076900171833`*^9}, {
  3.7257307645413446`*^9, 
  3.7257307839086437`*^9}},ExpressionUUID->"d9947804-31d3-4d49-9911-\
bf911d7aafe4"],

Cell[TextData[{
 "This tutorial provides detailed instructions for working with SQL databases \
in the Wolfram Language and many different examples of connecting to \
databases and fetching data with both Wolfram Language-style queries and SQL \
queries: ",
 StyleBox[ButtonBox["DatabaseLink User Guide",
  BaseStyle->"Link",
  ButtonData->"paclet:DatabaseLink/tutorial/Overview"],
  FontWeight->"Bold"],
 ".",
 " "
}], "Item",
 CellChangeTimes->{{3.8230268611111097`*^9, 3.823026932168201*^9}, {
  3.8232720353795958`*^9, 
  3.823272053835504*^9}},ExpressionUUID->"bc984a60-8025-408f-8852-\
94404745768b"],

Cell[TextData[{
 "This tutorial provides an example-based quick-start guide to using the \
Entity framework to construct and execute queries for relational databases: \
",
 StyleBox[ButtonBox["Relational Databases Quick Start",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/RelationalDatabasesQuickStart"],
  FontWeight->"Bold"],
 "."
}], "Item",
 CellChangeTimes->{{3.8230267783086853`*^9, 3.8230268563036623`*^9}, {
  3.82327206838649*^9, 
  3.823272080723134*^9}},ExpressionUUID->"f2a7b21b-2b56-42de-b1db-\
4c858c2a4952"],

Cell["", "EndOfSlide",ExpressionUUID->"84c0768a-23a1-460e-b6aa-e653b527610d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"bed44165-58cb-4dc6-bc2d-219d58dc3e75"],

Cell[CellGroupData[{

Cell["Getting Data from the Wolfram Knowledgebase", "Section",
 CellChangeTimes->{{3.822766951236836*^9, 3.822766954960025*^9}, {
  3.8228570973644753`*^9, 3.822857106330265*^9}, {3.823000129924861*^9, 
  3.82300013994508*^9}, {3.8230261248396482`*^9, 3.823026125851263*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"2c6b5ce4-db32-4bf2-a990-8662f78020cd"],

Cell[TextData[{
 "The Wolfram Language provides access to many data collections that you can \
seamlessly incorporate into your computations, visualizations and analysis. A \
complete list of functions for accessing these collections can be found in \
the ",
 StyleBox[ButtonBox["Knowledge Representation and Access",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/KnowledgeRepresentationAndAccess"],
  FontWeight->"Bold"],
 " guide page. Note that ",
 StyleBox[ButtonBox["Internet Connectivity",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/InternetConnectivity"],
  FontWeight->"Bold"],
 " is required to take advantage of these collections."
}], "Text",
 CellChangeTimes->{{3.8210093162312307`*^9, 3.8210093193748274`*^9}, 
   3.82190739117906*^9, {3.822051246011608*^9, 3.8220512619776745`*^9}, {
   3.822051330698492*^9, 3.822051335880858*^9}, {3.822565032555746*^9, 
   3.822565040604746*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"576e7232-c224-4dfe-bd6e-8774504e5488"],

Cell[TextData[{
 "For example, this ",
 StyleBox[ButtonBox["Entity",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Entity"],
  FontWeight->"Bold"],
 " represents the country the Netherlands:"
}], "CodeText",
 CellChangeTimes->{
  3.8219074004649816`*^9, {3.822054881712929*^9, 3.822054882113778*^9}, {
   3.8220558393811483`*^9, 3.822055840203556*^9}, {3.822857147317861*^9, 
   3.822857176823822*^9}, {3.8232722288044767`*^9, 3.823272229787175*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"40aa4466-cb00-474d-bdd9-e0cc7d928ad3"],

Cell[BoxData[
 TemplateBox[{"\"Netherlands\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"Country\"", ",", "\"Netherlands\""}], "]"}], 
   "\"Entity[\\\"Country\\\", \\\"Netherlands\\\"]\"", "\"country\""},
  "Entity"]], "Input",
 CellChangeTimes->{
  3.8220556719088182`*^9, {3.822055708848242*^9, 3.8220557147340584`*^9}, {
   3.822055813591687*^9, 3.8220558174895153`*^9}, {3.822424049659243*^9, 
   3.822424074814464*^9}, {3.82285720371506*^9, 
   3.8228572049094152`*^9}},ExpressionUUID->"47294322-682e-4386-8fbf-\
7749ef7b829b"],

Cell["\<\
Each entity has a list of properties that can be accessed to obtain more \
information about the entity.\
\>", "Text",
 CellChangeTimes->{{3.8224238396540937`*^9, 3.822423877460353*^9}, {
  3.822857181922757*^9, 
  3.822857190786611*^9}},ExpressionUUID->"51913a10-740f-4ea2-837e-\
ba1363fc8350"],

Cell[TextData[{
 "Obtain the ",
 StyleBox[ButtonBox["EntityProperty",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EntityProperty"],
  FontWeight->"Bold"],
 " ",
 Cell[BoxData[
 "\"\<Population\>\""], "Input",ExpressionUUID->
  "df8f81ae-710e-4bd8-8f3c-4383f488bcae"],
 " for the country entity the Netherlands:"
}], "CodeText",
 CellChangeTimes->{
  3.8219074059799967`*^9, {3.822054884875023*^9, 3.822054885231206*^9}, {
   3.8220559537399125`*^9, 3.8220560066456738`*^9}, {3.822423892844408*^9, 
   3.82242391389007*^9}, {3.82256785698608*^9, 3.822567867703457*^9}, {
   3.8232721951077623`*^9, 3.8232721955247498`*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"881f17c1-d0b0-4ec7-ae0d-ae4a43075ca6"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"Netherlands\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"Country\"", ",", "\"Netherlands\""}], "]"}], 
    "\"Entity[\\\"Country\\\", \\\"Netherlands\\\"]\"", "\"country\""},
   "Entity"], "[", "\"\<Population\>\"", "]"}]], "Input",
 CellChangeTimes->{
  3.8220558751099854`*^9, {3.8220559081596766`*^9, 3.8220559150249453`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"d3b435b2-72c6-4ee3-bae1-b54572598525"],

Cell["\<\
Other properties, including area, capital city, flag, GDP, name and shape can \
also be obtained. \
\>", "Text",
 CellChangeTimes->{{3.8220560090476956`*^9, 3.8220560291685805`*^9}, {
   3.822423920710693*^9, 3.822423937469705*^9}, {3.8225650599102297`*^9, 
   3.822565064564505*^9}, 
   3.8225678831060057`*^9},ExpressionUUID->"ff014a99-c8f9-423f-8c80-\
bd9447713a60"],

Cell["Here is the flag of the Netherlands:", "CodeText",
 CellChangeTimes->{{3.8220560090476956`*^9, 3.8220560291685805`*^9}, {
  3.822423920710693*^9, 3.822423952749812*^9}, {3.8228572492533503`*^9, 
  3.8228572539892073`*^9}, {3.823272190700445*^9, 
  3.823272190979896*^9}},ExpressionUUID->"ba10459b-2e49-4337-b2a9-\
e9c9e8cb2408"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"Netherlands\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"Country\"", ",", "\"Netherlands\""}], "]"}], 
    "\"Entity[\\\"Country\\\", \\\"Netherlands\\\"]\"", "\"country\""},
   "Entity"], "[", "\"\<Flag\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8220560346660995`*^9, 3.8220560519149623`*^9}, 
   3.822857240655435*^9},ExpressionUUID->"a09df921-6fed-4baf-b796-\
9a9097fbbe0d"],

Cell[TextData[{
 "You can get a listing of all the properties of a specific entity using ",
 StyleBox[ButtonBox["EntityProperties",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EntityProperties"],
  FontWeight->"Bold"],
 ". "
}], "Text",
 CellChangeTimes->{
  3.8219074134761567`*^9, {3.8220548905653715`*^9, 3.822054890986094*^9}, {
   3.822423996228408*^9, 
   3.822424026915092*^9}},ExpressionUUID->"3c229856-7863-41fe-862c-\
93cf7223bf0c"],

Cell["\<\
Here is a random sample from the list of properties for a country:\
\>", "CodeText",
 CellChangeTimes->{
  3.8219074134761567`*^9, {3.8220548905653715`*^9, 3.822054890986094*^9}, {
   3.822423996228408*^9, 
   3.822424023096739*^9}},ExpressionUUID->"ac859246-d79f-40e0-91a2-\
25561c346d86"],

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{
   RowBox[{"EntityProperties", "[", "\"\<Country\>\"", "]"}], ",", "60"}], 
  "]"}]], "Input",
 CellChangeTimes->{
  3.8220562195477786`*^9},ExpressionUUID->"2b24af2e-c15e-4cda-ad47-\
c0df853a33d5"],

Cell["\<\
This extracts all the available properties as well as their values for a \
specific country:\
\>", "CodeText",
 CellChangeTimes->{{3.822424520607092*^9, 3.822424537097814*^9}, {
  3.822857406114366*^9, 
  3.822857419544392*^9}},ExpressionUUID->"a9967550-4d11-41a7-b59c-\
7c6ec33886c3"],

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{
   TemplateBox[{"\"Netherlands\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Country\"", ",", "\"Netherlands\""}], "]"}], 
     "\"Entity[\\\"Country\\\", \\\"Netherlands\\\"]\"", "\"country\""},
    "Entity"], ",", "\"\<PropertyAssociation\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.822424446039249*^9, 3.8224244668143587`*^9}, 
   3.822857431356135*^9},ExpressionUUID->"94bbbff4-dab8-43af-8206-\
64b295163044"],

Cell[TextData[{
 "An ",
 StyleBox[ButtonBox["EntityClass",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/EntityClass"],
  FontWeight->"Bold"],
 " represents a class of entities of a specific type, for example, all the \
countries in a particular continent:"
}], "Text",
 CellChangeTimes->{{3.822857282991488*^9, 
  3.822857333094056*^9}},ExpressionUUID->"e348d65d-a56e-4a47-8da7-\
c3fc0a386902"],

Cell["This gives a list of all countries in South America:", "CodeText",
 CellChangeTimes->{{3.8220548940051317`*^9, 3.8220548943017893`*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"13113681-ddbf-466a-aa2f-5df1985b4116"],

Cell[BoxData[
 RowBox[{"EntityList", "[", 
  TemplateBox[{"\"South America\"", 
    RowBox[{"EntityClass", "[", 
      RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}], 
    "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"", "\"countries\""},
   "EntityClass"], "]"}]], "Input",
 CellChangeTimes->{{3.822424114061199*^9, 3.822424131267099*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"bd455f77-7531-42b8-ac30-ae8a317405c8"],

Cell["This gives the current population of each of the countries:", "CodeText",
 CellChangeTimes->{{3.82205489644354*^9, 3.8220548967281322`*^9}, {
   3.822567898155109*^9, 3.8225678983384542`*^9}, 3.8228573533729467`*^9},
 CellTags->
  "Data Collections",ExpressionUUID->"92ec395a-5827-48e1-ae48-65ca537d8486"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"South America\"", 
    RowBox[{"EntityClass", "[", 
      RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}], 
    "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"", "\"countries\""},
   "EntityClass"], "[", "\"\<Population\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8220563340778894`*^9, 3.822056344037001*^9}, {
  3.822424143512669*^9, 3.8224241606963463`*^9}},
 CellTags->"Data Collections",
 CellLabel->"In[35]:=",ExpressionUUID->"8da362d1-8713-456d-83dc-67c22256ef78"],

Cell["This pairs up each country with its population:", "CodeText",
 CellChangeTimes->{{3.8220548986409755`*^9, 3.822054898929566*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"880d606c-cea5-4d90-b19b-5d32a4ba69f2"],

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{
   TemplateBox[{"\"South America\"", 
     RowBox[{"EntityClass", "[", 
       RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}], 
     "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"", 
     "\"countries\""},
    "EntityClass"], ",", "\"\<Population\>\"", ",", 
   "\"\<EntityAssociation\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8220563340778894`*^9, 3.822056344037001*^9}, {
  3.822424143512669*^9, 3.8224241874142857`*^9}, {3.822424218275839*^9, 
  3.822424230459383*^9}, {3.8224243072524843`*^9, 3.8224243091522007`*^9}},
 CellTags->"Data Collections",
 CellLabel->"In[39]:=",ExpressionUUID->"aa54ad65-1852-41a6-94b7-052d24d3c123"],

Cell["This pairs up each country with its population and area:", "CodeText",
 CellChangeTimes->{{3.8220548986409755`*^9, 3.822054898929566*^9}, {
  3.822424392749028*^9, 3.822424393974291*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"ff1176e1-2da9-49a8-8243-ff3f9b1a0ca9"],

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{
   TemplateBox[{"\"South America\"", 
     RowBox[{"EntityClass", "[", 
       RowBox[{"\"Country\"", ",", "\"SouthAmerica\""}], "]"}], 
     "\"EntityClass[\\\"Country\\\", \\\"SouthAmerica\\\"]\"", 
     "\"countries\""},
    "EntityClass"], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Population\>\"", ",", "\"\<Area\>\""}], "}"}], ",", 
   "\"\<EntityPropertyAssociation\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8220563340778894`*^9, 3.822056344037001*^9}, {
  3.822424143512669*^9, 3.8224241874142857`*^9}, {3.822424218275839*^9, 
  3.822424230459383*^9}, {3.8224243072524843`*^9, 3.8224243091522007`*^9}, {
  3.822424361476021*^9, 3.822424375952696*^9}},
 CellTags->"Data Collections",
 CellLabel->"In[40]:=",ExpressionUUID->"41858468-0fb5-453e-ad39-343a2d5899f0"],

Cell["", "EndOfSlide",ExpressionUUID->"c59b933a-44c9-4a21-a610-b044aed797df"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"44cb5668-06d3-42e4-8132-c4ec89e6de75"],

Cell[CellGroupData[{

Cell["The Wolfram Data Repository", "Section",
 CellChangeTimes->{{3.709319215223402*^9, 3.709319225401836*^9}, {
   3.713183108975733*^9, 3.713183109395059*^9}, {3.7147472842368917`*^9, 
   3.7147473183963823`*^9}, {3.714748884630917*^9, 3.714748894707773*^9}, 
   3.714748991071229*^9, {3.714764120781253*^9, 3.714764122492176*^9}, 
   3.725370439311653*^9, {3.8230273420037518`*^9, 
   3.823027342329574*^9}},ExpressionUUID->"16ddc666-5d14-4cb9-9cb4-\
47b3b13bd55b"],

Cell[TextData[{
 "A public resource for computable datasets, curated and structured for \
immediate use\[LongDash]computation, visualization or analysis: ",
 ButtonBox["https://datarepository.wolframcloud.com",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://datarepository.wolframcloud.com/"], None},
  ButtonNote->"https://datarepository.wolframcloud.com/"]
}], "Text",
 CellChangeTimes->{{3.725370858840502*^9, 3.725370895111496*^9}, {
  3.725370942418853*^9, 3.725370946375903*^9}, {3.725731274030037*^9, 
  3.725731282641404*^9}, {3.823270066139893*^9, 
  3.8232701181390676`*^9}},ExpressionUUID->"1f30251f-2603-4391-9052-\
fdb443b4599b"],

Cell[CellGroupData[{

Cell["Searching for Data", "Subsection",
 CellChangeTimes->{{3.726102102749428*^9, 
  3.7261021079988728`*^9}},ExpressionUUID->"4e49d5d7-bebd-4d67-91c8-\
3fe11d119142"],

Cell[CellGroupData[{

Cell["\<\
You can browse the different datasets on the repository webpage.\
\>", "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7253712770542183`*^9, 3.725371309152391*^9}, {
  3.725731244253316*^9, 3.725731251361478*^9}, {3.82302745930447*^9, 
  3.8230274765388107`*^9}, {3.8230276005493307`*^9, 3.823027607275709*^9}, {
  3.8232701361326523`*^9, 
  3.823270136643796*^9}},ExpressionUUID->"aae1f191-d9df-4044-b651-\
673585061778"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvW2QXFle5jdrO8L+6OCLvzmCRj0DGDZYL8QSHgiHx8QuDAsedsBsYIII
YV4WyxoiYFnN2m23w4PsNppmPG5BM0aodxux3RKrkXpmSkxNqxUlISmkbnVp
aqSR6NJUdUkaFSVRrdKW3qpUMsf3Ofc+N/957jn33qzKqqyXJ0M/ZebNe889
95yTWfl/8v/ynb/8m//k1/69D33oQ7/9H2X//ZPtu/6r3/qt7f/yk/9x9uTn
PvXbv/Hrn/rVX/mJT/3zX/31X/2tH/7lfz/b+ODvfOhDv/AffOhD2b8PPfPM
M04IIYQQQgghhBBCrJyP/94XhRBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEJsQD75uTcG3gchhBBCCCGEEEKIjcwv7v2ye/XNc+7qX/2V
+8qZUfep/cMD75MQQgghhBBCCCHERsLqKyHSW4QQQgghhBBCCCGagX6S0lek
twghhBBCCCGEEEI0A70EukkbfSXk+Pmvu+dfPzHwaxBCCCGEEEIIIYQYJE36
yuilb7rPHz3l8+A+/9oJd2b0G8l9z4xekt4ihBBCCCGEEEKILUeTvgI9BbpK
rM4Qtr91/uvSW4QQQgghhBBCCLGlaauvtG7r9LvSW4QQQgghhBBCCLGl6Ke+
Em1beosQQgghhBBCCCE2OdA3oHOshr4S0lZvicUiCSGEEEIIIYQQQqxXmvQV
6CH90ldCmvQW5Nb9v790WnqLEEIIIYQQQggh1jVt9BXoIGvRl1/c+2X36tfO
SW8RQgghhBBCCCHEhmI96Ssh0luEEEIIIYQQQgixEVjP+kqI9BYhhBBCCCGE
EEKsN6BDvPBvT9bqK38+8s660VdCpLcIIYQQQgghhBBi0EB3gP4AHSKlUUC/
gI4x6L62Af38/NFTyevB9j8aOrNhrkcIIYQQQgghhBDrn82mr8Sur05v8df3
5sa9PiGEEEIIIYQQQgyeza6vxK5XeosQQgghhBBCCCH6TZO+gtwsyIG7c//w
puNfvPqm+8qZ0eS1S28RQgghhBBCCCFEL9RpDCIHvi+DnichhBBCCCGEEEKs
fwatYWwEpLMIIYQQQgghhBCiDYPWMDYC0lmEEEIIIYQQQgjRhk/tHxYNKD+L
EEIIIYQQQgghVsKvfuFY63yy2HfQ/Y0BfaSXvLiD7q8QQgghhBBCCCE2J185
/W7ruBrsO+j+xkC8Ty/xQYPurxBCCCGEEEIIITYn0lmEEEIIIYQQQggh+oN0
FiGEEEIIIYQQQgghhBBCCCGEEEIIsV6J5ZPttQbPrtdOdfE//qu31vQaPvm5
NzZM/l4hhBBCCCGEEEJsXmLxN9jWSxvh7Rs3/mZNrwH1mTdKvJMQQgghhBBC
CCE2L9JZhBBCCCGEEEIIIfqDdJYB8colN3Z7zl299UHJxO07bv8r6WN2DE+5
q+YYv/9rve0/NNQupmvX0Hvuwq15d/fxU7cYzO/i0qKbydp689yFlV1z9vjC
xdEVjeNLV+5k1/VB1zi2Ijv32JX3Im2ecm9ez8aqRRtj12fcyJUpd2j4gtux
kmu4VL0GPB8Z7iX+LtbvbKwnJ3vo2yk3EraBfpw7v6I52jF8s2sdJsfy0qTb
P7Syc3V4KzqP9e+x9nPfbn1dahiXqeq4+ONW9p5Yyftk7Podd/bKTXfk3Kjb
VfNZ1K9x8+t8JPH3JvIZmerzhfGbbujcJfdCzedhK1654N6c/MDNPFjMPufC
z72n7u69OXf20nsrer9jbR66NONu3Hvs2wzPMTM750Yu1q+d1LxO3LrlXqrM
29qu69Ucx36v410jN7P27BqbcxPXb7oXWvTl0PidrjHt5e+rEEIIITY/0lkG
xCuT7n5l5Jy7MJw+Zuj208r+N66ktY4XrsxX9r9/61p9v157z008qJ4neVt6
kLaTQr50s6LZODfvXlzBOI7M9tDXyu2pG/lS2OZ5d2Op+chYWzO3ZyI2ThOn
3ETifIuzN3toJ9Xvp+7Ntrbn0Ezi2uZb2R29rMPmsbzjDlXmpgdem4qstfyW
fs8sd+4Tt3v18xd7P/vb0srGu5/vk/uZPdxsO65w3FLjFP28aL4tPn7gzr7T
owYMjfH2gx7O8tRNtNEbAnadu+Xutx2rpUU3dmm053mdqazvtVzXqzuO/V7H
O87die4/cbHhb1ri86Xu77EQQgghthbSWQZF3L6+cSX1e358/zpb/M3Id9KJ
S2l/gR0jM8uya3y/J2O+IQGvReymFdqUsWtsf4vrLCndo22bF8718P4ZqrMl
H7j9rcci3e+ZyXZ2zJFbiZ6scI5euNSrzmL6fn1yWed8sU7buTfT8xgu51av
k12osX2f1uqta/8+wRqqe3+vbNyS4xT7vOil3Wyed7UZn1feW7YOsTh7q7VP
Ru2arLndz86Ruo7YvFZt/TVa12swjv1fx2+5sceRHR/fqe3PoeuRg5ZW9puB
EEIIITYX0lkGR+w74+Ltqfj+Cf8XtzSXsIFj3x9jukLOjpE7K7JpcJu53qC1
bAmdBbdFN9TSh2R/7Pu6uV19p+17sabf2Rpptjdr7P4B6ix+NO/d6fn8Y7U/
qS+6I1G/o/7+7r9Y97v/SPx3dN4a/c7W9H2S3yYupjTa9amz5G0nPk/JK++5
mRXOOfScRo2gVk9tvs0k9Pe2Osuqr+s1GsfVWMc7zn0Q2eupOzuU6seoi3n+
yZdFCCGEEJb1oLMcvXDNH2PppTb0RtVZor9vJn5r3/XOXOJb41M3ErXpI3bz
0gP3UrQv70W/N/J2/968Gxu/6Uau3HJXZ+t9wsdGauZtrXSWpafu/uPFRhaz
8ajqIXGbcTEbA8TxkxvZONT5/9fa2CXZe69eZmm2Exv6nd/qbIacHXV2/2ro
LEuL2RjO59x7UMnhULklfVAipDRJc7sR9es678buZesiuV5iYxNfa8hhdPVS
2u46crvB6k7qp318nzx+0LWmJ2bzfEzp23zi8yPxnllqfg/eRz6SWwmfpYTO
MhP0eaa2z3WfSW+5CzUfZ4g/unr9Vva5d9ON3Zqv1Unu1mrMCZ8J3PA+uH3H
nR2fcWO3s/Ffin2ezSX9JNrqLKu7rtdqHFdrHcc/h1OfvfHPs9R7QwghhBBb
lfWgs2D/8Pbp1/+y9fEbVWf5+HAkTifhe5yM6XAJmzFmozyI+0Kn216M515B
DpeU3fD4g7TvxBrpLDcu9bZ+u4nZjE/dm4m8K7uGJ92N6FikfCYMrfJPpLSx
Nv3u3O7frvePeDOVK6QPcxSzS2I2zAsjN7OxTPcj7U8RtNMiPmPx3q2eryOa
H2lZa60uZoi3p+5Cgza24vdJKgfFa6Puwmx8Zcb9q3p7z7Qm+nmR8s0674Ym
4/Oe8pfZ8U7MjyG/xXOGIPdI+rNyKHW9r01Fdb/7t29GP493+fdBi3ZT89qj
X8VK1/WajeMqruNdF2O/Y8Q+w9+KajIz46N9e68KIYQQYnMgnWWAvHIt8v07
lre03u8hFmu0K/Ldd/F27Hfj99zdaKuP3ZHa2Jd0n8bOJX4/XiudZUX+23Gb
MRVvlc9jzH+i2YfkpcnwR+AHbuRK9ft+cjwb+909zuncAZdq/ZlWR2dJ+/sc
uZ74cbxV/NMX3YV7wZp4cCdi1z12hwa11obD0X7qxq7cqqyh+01xeKva917s
yWW8Z9qwjM+L6nsqdUzKxySbi4ZYvSO34h98yfmK6amNuTxQL2vOnW3I9dSP
NbmyNtZwHFd1Hcc/Pyu5rSrvXdx6yaMlhBBCiK1Ck86y/QtfdQfOXO3i9491
axjhTTpLW+K5bSt2dVSPMbeI/fnilaq9Ecuxm8rN2M62j/crGTOzWXWWjLOh
bd/Yj4h98viO12wqdbRTOXsa+919u5qY03RMWn/mqFedBaR8rBrXZeS9cv/6
Jbcjco1t/WP6vdaq1/Y4s9MinwUtdaXV6ntMs4jP2/rRWaJ1YGLHJHzJ2mlb
CW0hFTuyCp97/VyTK2pjLcdxlddxPB6oO34vVu/o7vXe604JIYQQYvPTpLNA
7whvoY7S9HoTW1dnafe9sZKnrxLDv1jxgam2G/eviOkDtbE/AUNR/+9ErMsm
1ll67kdkLO7fgm0Ss7fb1LFo1llS2sZIbA30cY6Wo7PAzyoea1Fffyh2rqvn
stdeqdrf7XLo9HutReYJ+trvxWK3mn2iVrPv7edt4+ksL43HfKbqY1Ys8TiT
RJ2olBaRykuzxmtyJW2s6Tiu+jqOx/OV+X2iv3f07hcnhBBCiK2BdJbBEvM7
CXNXHLre/S39/u05dzf4PjjRFaMe85N5EPk+GP9e2VOs+XAsf2rCxtq0Okts
HDMbuaY2b8w+4ff5mHZVm1840e+7lZzFMZsgtB2eupkHwZgORGdJ+LQ01Fut
6oa85th7ojcbqS9rbehW5T3A3J8xm7Nfv5Uvp+8x/a2nuKGWNbeS9FFnCXXK
mF9Cbzl74rF20TGty8v8eN6NjPTmV9XvNbmSNtZ0HFd9Haf+HuefVbHP7H7X
BRNCCCHE5kE6y4CJ1XnJbMmOP0nVt3rinUuVmPPu3/kj311jPirReh69/g4d
12qi3303cB7cujHZH8sJUXtMzF++E+MfqzPa5McR6/fi7Fyl1mqYM7migWTr
5Gyo8wxIZ9mVqOuR9u2J/N78oFOnKKbbTKRyaLZdaz3atKFm6vNYUI+L/V7e
p9ihnvs+EsnR7eKxh6n3zA3UmBm/5c4muelerPN7WMbnRfS9WKndFPf9il9b
mqjGkFjXsVyz3X187MauXOt5rgers6z9OK7uOgaxms2L7lBUp23vtyOEEEKI
rYd0lgETta2sLRnmqc3reAyF3zetjhKxT6I1Kvuis6S+aw9OZ0Ht0bsPHidB
fdKxd1Lfs9v/Nr9r6JobS9SzqLWPI7+5d/8GHMlN3Bg7FNFZbk9VY1EedNdH
DuuxzoxPVvNGDkhnidaarulLzB/E/m4da69NP+rWWm82bWxt2Ri7mP7Wh/ib
VN8jeuSO10bdyPVU7d3FSB309GdA863h2hL1hlLz/+KlD6L9rub/7uEzq8cx
Ta+n9+pzTZsxmbk94w59qU1+rPWqs6zeOK7uOs6J5XO5/6DaUjyvvBBCCCFE
zkbQWfA4zMVrX9/QOkuD/0TFNizs7ap/c+e3tai92Vb3aPgOWmX9+bO0uaVt
gbjtsLj0tJuG9iditbYLYrmHw/5UauZkt7GaOKS4P8uk21GJ6zL1rF4L4xme
Zmsocv0D0lmiMSA18SjV+IDQjo/FKLSvFbJimzYSMxSOQ8zGuxvWPOnX+yRc
0035fZL5mNdQZ0Gt+XOX3KF3rrlD597LuOZGJj9wM5WcVZ1zVHPcxPvbi29T
fL01rOsvTSVqu8Vv92fvuJca/CXWo86ymuO4uuuYpGrwdbUSqQsohBBCCNFh
I+gsf3b6SuV1bOPrG1tniftNTxQ1MSt+8PcKf4Thqj/01dQxPq9g5PfRqB0T
y+NSR8zPevPpLL3c7td+j3/LjVVM6aq9+WLPuQBiOgv6caESO0Qfj4re4/Ox
xvPwDkZn6cXfKuYDVPV9iNl0Ew31Z+vWWi827f7r1eIqYRxXTIuBr1pdTprV
fJ90+pD2I1lbnaW3WzzeLt7fdjXWOpy9V22jeV2fd2dvJ+qWR2+LbqQmF/J6
1FlWcxxXdx13qMb3hf1rUwNOCCGEEFsZ6SyDJ16DOf+eG9qFnbyY1d/mmU+z
+l00EUe+SeOG2tyi/j0119P2dmOyIS9iLCdmZkdX94vl8+zN1qWtciTMt1LU
twljhvKcBeer/kmD0llimkMifirmwxXTpWL7tbWZVmbTxvM7HGm138pjh1Zi
ny7OzjTMf+I9U/Ez6MZrCKuosyzem0nE7g0ibii8tkvuwu0HLa/vsTuS8GtZ
jzrLWscNtb01r2NDtLYQb/2J5RNCCCHE5kY6y+CJ542A7XeqYvN26s68VbGT
8xwfb0XyayTs82i90V7rhETscjfg/Cz35t3E7bk0s3NuZCTlw7BcneWBO9Qi
J+ILkZgh3+fHi1026P1oH9L1Tut0lo8Phb5PmX3/pWuB/8diYcutn7ih2HEp
nSXmE4bxuv/Y2vaLCbs2UYe8xVprbVMmavv6Ptl5fxy3I3uqAday721uY+fa
+PqsYb2hVrenbuJKXaxVItaxJtav9WdPD/l+ck65I+MfJN7vtt24FjhYnWXt
x3F113E3FX26oW9CCCGEEBbpLOuAiI9DrplMBnZG9++alTiEzAbdFdFm0t8L
EzE/vXxPHoprNa3jlDZIvaGxi5fcSyOX3P7hUTcSqzfcUMeZXAhrJvd4u1/4
LLXpd2feqz4SYV7HxXs309c/IJ0l5ucVzy8crw3by+1qi1iHldi08ZpUPdwa
6lkvp+8z1yfdi8PZmh4ZdYeuVP18/D6t9J3l1EJvQUJnqfrGLGbr+YG7cfuO
G3lntNU4Vet/9xoLEtcYZlaQS+fFd25VYvxM76I+iYOu67zW47i66zhcf7F6
3HVatxBCCCFEh7XQWX7/2LuVPLb29S2vs0Rt2zn30rnAzyXI07AjfB25+Yan
Kt8N098xY/VNXKUmTR2xnBMd34iAtdJZerQzGuei8tt8XJ9qtIVrfdFb3pKx
Q3U6Szy/qr11cpSsF50l7icVs+F2vFOtg93rrTk35krW2qmqj1nPt6cryrsZ
73u3nhqzmZPv5TbvmdXQWbyWvMJ2fw/5N6IffK1zIn88VgvLQa9bicYL3nJn
E75ZsfEctM6y1uO4uut4jda1EEIIIbYEa6GzxHSUpte3ls4Si3t47K7e7v4O
W8npGLHbb1yv1jat++4f10na+vzHf4tM6g0bWWcJ89Qm4n/qfIGicTA932L1
U+L97tIyorV7eLNxM+tDZ4nlUcFt4mJ1fFecG7O4xqbYoWWvtT7kc8VtJbFD
rfqeim1q1KDWVmepr2/ejmjNcFe12VPE49Qe95hDPEFUj12fOstaj+PqruM1
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
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEKAH33uT4QQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCiL7xy39w1O0+fMrtf2vU
7dw35H7id/904H0SQgghhFhzDo654+++Pfh+CLEMDoxNuJf3Db4fQnMsxFYG
+sr49KyL3aC5DLp/jew97U6Nj7udg+6HEEIIIarsG3Pjd+fdtOdhxpw79+7p
wferhufH5p2bn1pxOy+PTbvZR0tu4UnGozl37I0jA7+2fvI//dlxd+rK1Kb+
be7Aldli7c672YypG1Pr3L496aaz7/DnDi7v+J1nsGYfltc8xWufX3BTk5fX
9FqwrrC+sM4GP66rw6HxWTf/JP+MmL0z7fbsXf057mLvZTfrltzoyaHGfQ9k
fZ0aHwu2D7njk1Pu+VUYm50np/J1OJ+vwfHsPHv2DX7O1gsb8+/LaTc6fbOy
XnaenHDnzp9YB/3rH5/6k2Pu/uNF9yDj//jiKfdzLx4st/9l9rmGGz7f2rS1
+8xNN13M9fz8rDt6eI3m+iD6Oe92r4PxFEIIIUTAwQm3kH2PP3X+qjt6fjz7
Tj6bPc/+ct9YW5utF6CzLNydWFEbR2/gKpfc+JWrbs8bb7vjNx5mzxfcoSY7
6vCUm7+7co1nLfiL0XH/XRG/121WreX43ey77Z0pdyhbv8fenXDj2fNW8zgw
Trqp7Lv4qWXa4NsPvu2OjU24Y9n1nprO1vCjWf8Y246eXFs7CL8F8wY7ZfBj
219enlzwa+nUmbfdnuGrbnw+e/rkdovfjlc2x13szezeO3PueGGj774y56av
xHXwY3fyuTjedd7Tbiqz8feswvh4vfvJnDt65qo7PnbTTc0v+c/UNprQavZr
PbDsvy9N9OPvT10bmd2+ELHbd1+Zd9Pj6/v3l17A30NoLNf++oPk30Z8pnm/
lhP1fi3bh6fzv7Njl/1cnyrm+uha/A3y39/mpLMIIYQQ6xH8nc6+K3f9fuW/
N1T/dm/fdyR4PuS2r+j8R9zOvb3/7tOls2TH99yHfRNeSxp9I9jepi/ZsbN3
Jno6H8ap7rW6/i9nfAi+P+J75GbWWqCzTI916wujj1y27WRfx3I5cxcnt8GP
7yvaWEGfdvZBb1zpNVHL23xay4lsnpy7fDIYn5b+LG3nuPLZ0PB5tnNszk2N
xfW0Y3eW8omYv9ndl5iesXcoez+sbIxievfR6awPT2YrWlT1M/CE79dq+NkM
nJX8feki+/sY/M1dzt+fSjt1bSTs9t1Yd4G+t/K//4Pj0NnL/q0CrbhuP/q1
1P3txPtu4UbgR9bnvzXJuSzmy7/f+vCeFkIIIUQfSeks3LZv3E3PzxW/Vbrs
O35mvx7Otj3pxDFP3xj3x+F3nfn56fK7184zt33be8y55h/N+nYPTc53Gngy
744Wv8HuPj/tv6Mu+PYXyt9xLc9n3/lwDPx0yz54f/kTbvxRdsxhu//bWV8f
umP7Otv2jD907tF0ekz8b8gP/e+Rvh/ZNby8t7ie4nw+juDG1fo+77vsbTV7
W5i/nY9rYgzzcZv28Vuz/vUld2ly1s0H34v3jM+7+enx9DUUbHatJaWz0BYN
xxK/9e9+d7qcR2y7/G6uybycjem0ib05dGPBLZhxx7rz85DNa9fcTV4t9znq
1/VS3j7WTaXPuf0+e2e+04dsvwN78/fa/KPAxnnjZvmeqb4Puu3co9MP8/en
2efc3QU3/u4Jt/PktJvNxmGq8p7he7N7PU6Ntc9/tDm1liPucjYe85NhHA7H
a8JNTU+YbUNudH6+8CWpmWOuyTuz2Vzwxezz6Y233eV5zk22Js+f7LR7N2/3
0I358nX4II4HcRx4L0yNZ+sF7/Uz1DVCneVk1l5nDWA9b+9l7desv5yruX/k
4bzvxybnzHttwZ3CZ+O+q9laWyo/RxceZZ+Jic/cwa+D3mn8+5JxLPj7d6z8
m5XP92U7btn7f/dz8b8/O98Yz9/TT/LPHPj2We3jaHCec+/F/4bZdd2os9R8
/m0ULr7/156m/RBDhBvuU/scgO9SzXynvh/Uzd2BbP6np+fKvyPPR+by2EHO
14K7PP2w855u8b1ACCGEEGtA8Xf63Ni4Oz424c5lf9/9dyfaa/sm8u9k0/n3
8e3Pve2QNW7+xnj+neDg1fz5ZGaX7R3337GpafD31dFh+rw/zPOq7Jsw+x1x
R69MuQP4zvBG7n87eiY/9x7oKZnVEP4W+/y7eR8vF3lktr8xlf9+mJ3Hx5FM
d7737cS+T2a7vnt62/xK1d+h5I3MhkIuhuI6Tt11ZZs7hzM75u602/lc8btz
ss9HvL2/UHzneT77juzKa64ZQ3N94/76jpSxXR0/5NyO69hS9WxmreU4fku8
c9PHDPnYBW+7duyEcCxLH+9CW3n+zHS5RneenzW/xWdjXNiGB4q2TmVfc2cz
WyNfY4W2+MZVd2ost8Vfhn2V2cxHDx7x50LfXMU/v2g3sy3zXB9HsvW1VHxP
P+lfGz/fmVf/W+l0PIYvtHPzOA7jS7Cvs268Nuk1pbcr7xmux9nCXtp+OD/u
3OH282C1ls2Sr2V79l739s+jOXc8jMk6POVmu+YWOVkYK1Q3x5wLxBnkn195
jIkrdY4Dk7ndtr3SLvWQsejv5f5z7d0ht9uvQ8Z+WJ3liDs37w2xQrc77T9H
EIfUdu3XrT9yrvQnO+3G78y6Y2/k63nPFbM+945l/Zp3B/YdyX2Eaj5zNxpN
f1/yz4kFd6zI4XFoMv/ceNmOfTZOeZ6pk278idGNg78/e8Zm3dQk86Ce9nmB
porPD54nt+uzv7OTs+7U8FD1b5ilhc6S+vzbSODWFA/Uet9sLfu/Ik8W3Gg2
Fl1jWvOdpm7u8hjAJXccayR7r6fmkr5T+H7m2yk+u+lLJ4QQQogBUtjw05n9
DRt86m7+u8jC3eK7uH+9E6+d23K3u75LbD8zW36vz2M28J0w+97wJP+dZb74
vly+tm/cfzeYGr/a5V+ef3/LbY3c1z7/7hHmOYh9vy+PPXzTfGctvvMH33lz
H4ganYXsPeFePnPVnYOty/MdhH010aLPuX10vNRGjvhYAtiuTWPory/I8wv7
iDpM/t2tt9x3/8+xc6Ud3OQrvZHwOktmr2Htjt+Zc7OP8u+no2dOdNaKGUs7
X+QQYh38nI5lo1p8R83WEezr8Xn4DVCLyF/LYyPm3NE3rM6V20e59lXYjn4t
hvPUHVPi2Zdrncjd0P1beH7OUwm9o/o+yNce4xV8W8W1171nrD7DGJfcrm7x
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
2A6PP3P1hMe2XQf3s22wD2fG/sJfP8aW185+YDteD8/z9anTfvuRw6+4k2eH
3NWpC5X+xvoAsD+OQxupPsa28xw43p8/u36OG/qN+cPzunZwTGxO+PzR40dC
iC3I01/7bjf5ie9z3/6pj7qlH/8hz5Of/j739J9+r3v63Efc0v5n3dLrOfN/
sM3dfvG73NM/eNbjX+Pr5jH2u/NL3523gf2OZpze5lkce9YtXP+w+3dX8vtZ
A14D3/7qd7l/d2Jb+Rz7fuXKR9zuh99b8mq2/x8++M/cz937rz3/+IOfdx+7
9ZuefzTz37sf//Yn/D34L2/+S/cPvvkX7gdPH3b/7bd+1P3G9R/07b1/8zv8
fj908Vz22rT7weNzJX/vS5PuB8+/17XN8+X7nfvlYNuJbYu0jb78wPAp30+C
5z/83utd4BqBf3zxZffRi7/jrx1jgMfgR97/P91/MflH5et4jsf/YHR3+Rru
/fZsG47HNpwT+/3nX9tb7uvPkz3+sfFfKMce4Pn2ex8tz4vHAHOEbZwrtIX5
wFz+mwff6z7zrX/oznz7w35djD/8iJ/XT/zNT/r7Tz38+yWY//957gf8Y9wT
nAPzCXhOgn1xnj3v/133v5z7fvf+2W3+POTOBx/xjN/6sHv/6ja/5ngP7p3f
5o/BtrdHt7mvf+U7/XrGWn36R/+J345tx4ee8e1jDH5i/B/582Gd4jpw7Rwj
jjXGsFx/lnDdLWP9/fD+uUbm5jYek5MTJb0eM+i+bxU2w1hvhmuoY/+Z62vC
Kyff6wLbXv7GB+6Lh950F3/7N92DP/mcuzv9Dfd04ZZ7eH/SLf3tnAfPb8yO
ug/u/ZXfjufY7+GFr/nn2M7XwDe/fcoNfWWfOz/6lXIb9+Nxj379lzw4J9rG
MWwb++H4kVOHutq+cvlE2S6OAdiG/biN+wO8hu12G48Dvv+f+bS/9m99+V/7
5zwv+kPsMZ7J835f3Ntz4nwAfS2vKdsP18ix5bg+/vKf+nNjO687HCteG8eB
c8F9OA/oB/dlf3E9vm0zR+c//zn3t8/+hx6MPba/9m9+318z9sM4cCz8NZp+
4dycly+8/L92gW3Yn+fnOGPs+RztkKn3v+m1Eegf0DBg+1sNA9tvTY6WGonV
W/zrma0NbQTHQhthW9ifOgn0lkf3b5S6i9VbANqg5kANB20S7Iu2sC/6i/Oy
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
l9COX4kGVnctdnzWSmdZSS4g6+OV2qffOh5g7F64nesupuM16SzwR4HOMvmJ
73OP/2H2feAnP+7BY6+3BP4tlfwsidwsVmup82ehHkIb1tfpvVqNGQpzs4T1
m0N/Fquz0Oa3sR42fihmo1biQILazPZxV+0i5sI1Gos9F3Pf0peFmg99VejT
4rWa7HW0/cP753xtolBnwf7UPnA+5m7hfjjexvpQw6E/jK1JTI0FOgzu2T/q
KzYnbhg3xNcx1hhnzAtz3nJeOQ+sAUWNhf4rds7Leb/VqTNl9RUb+7Ng4n+o
oXidJVuTeGx1Fjwm3BZC7cX6ZuEe6876SPla2MzzUxdftlytxWglzOXDtWq1
Oq6tcE1z39WwTcFW0Fd0/fXjMOh+bPVraGLQmkqor9jHsLWhoUA7gS3t43gK
nQW2OHQWm7fDv17U/LF6BH0tqFPYeBPW1KF/BfO2Wj8N1jiK5RKxNj51ijB2
CNtt/A99OnBe1s4Bvu+FXwzjgLg/NQ1oIMDqH1ZvIWiDGovVROw+9jj6vFh9
ib4tNkduqKvYflDnCXUWtBXm67Wv25gh74eTjR/mhflxYjqL9VXiPMTy9sTy
4FInoS8L4n6osbB+M2s7I48K9rW2O+6xDe1AO2Fb1Feou4Q1oPEaYD1i2PbQ
VEItwPqyxGKEQrs/jBsC0FlwXrSJ+zY6S5s6QyuBuXBj+VJSPjlNvi2hf0kb
vYXzZ3OwcD8cw3XBfDJhfuGYH05brSVlK1pot9dpLTZWpZ/2Yxhb06utHV4L
beg6mx7X2W87OKZHWF2nTZ4Wew3of+pabD7X1Y4bWo6Ww/Vi1xdjj1L7r6XO
0otuFLuWujxCnPO1uBauudS4xnQW5r9lfhZoLOd+5sfc+M//tJv5pz9TsvTj
P9SltYQ5Wqiz2JrOCyZvaSxPi82zQl3E+p9gG+NASlrUGQq1Fmo3bBv1oam1
0JcltEnDPCrUWrpigoLazmEuFtrL2Aa7l7ElVl/pxJsc7qoLZPUL+oegb6jf
DM3DahthTlvqJHYfm7OFcUjUWdAe9A7GDFFzoa8JY4L4nDFGbJv5bW1cEOsy
2/kFeIzt9AWBroJ5Y34WHHd86JkuP6YwhohxQdzOfamDUGdh3BB0FugpXfFA
RcwQ1ysJn2Mf1nUmzLmLvjLfT+6TNB2t+x3VXnrUWmycGXUWriGuo/CecJ9+
2qRgK+sLGo/u6x90P7b6NTRd36C1lTqdBRoD/VRKTSWzvemzEtrUtMGtvhJq
AtRXqBekYoqsL4bNbRvLi8u4IJ+39sv/uqP3mFo70FSwnc/L/T7z6TLPbdg3
mxPX+vbYmCDG5Fgdw9ZmxnF4TB8VaCZWf7FxPLgm+rAwNog6CzUY9o0xQmHN
6DJfbtaePc7qQNbnx46zzcmTyq9i/Vms3hXLmRseizUEfwboHNRGYPtTW7Fa
iwWaCfQUHGvzsDJ3C9rzrxe5W1hLiDFF3G7jihhLBL0llk8klXfV+mCEOoTd
Bq0B10cfnLBmTkxnAdB4+q2v0NcHWJ0lpZ+k4oqs/04sN23Mv4V5b6y/UCx3
C+ON/Pow+XFDnaVtfFAqh06d/WiJ2Ya097l/aG/X+Y4sB9rivcTYhNeRsnNt
nRnuYzWPfugVtiaP1Y7atmuvg+Ob8mGw82Jt/ibfkV7gNSxnXMJrqRvf1Prj
tfRT2+M1Lfda6rStOo3Fxnr1+1pS7cZys5S5a/fnGstXP/YD7sDPf9Sd/Rc/
67n8zz7pdZbSp6WIIbL5cNnm1P/2TN5mEHvRFDtkNRbqIrBh6asS5mdp8mkJ
9Ra0ZR/DT4Y6C+OHUj4tldq8gR0N/xLoKFZnoa5ibW/mu2XO287rh8sct9RJ
mL+W8T3UWbzfxOjujm1f6C1h/A5jiKiFQAfBMTgv+ojzoD36rlBTCesvM4dK
mEeFWgr6RY0Fx2AfbMNj5rjFWNs5ovYCrQs1kREnhMff//4nS18YHA+txfox
WY0F7ew7+6zP3QOgrVDPoz8L9BJoJMyJa9cjfViwD/xciNdYCt8XPAbW5yXM
iYt+4Jrp8+PXSEpnCWmruRidJfRdsXoKY8Psc6u1gH7YomAr6gkan/rrHnQ/
tvo1NF3boLWVWLwQ87PQnwWaha3bm4oBgm7h43MKDYN5bG3uD5tLBcTyf4Rt
0z8mzKtLXxVbJwjnZx+oMTBOhjlXmKcW/cM1Wu0Er9PHhr4r7KvND2y1hTAP
blgzGtDPhPlqQz8V9slqUnzdain0XQnz34ZxTGE/MDYYO2ouNh6LbafifsLH
qRy6sbkL5xY6AvPdQmthjeZQW7HbmLeFmorVW+gDgbbYro0nIjaOCG3h3ufW
LWJ72vqy2NihWG4Tag9oA32izgLfjZjOEuoD/cqFC02F12t1i5j/Siomp+5x
mCM3pXOwXhE0J6uRhXWzvV9TUecbjzF21oclprPUaS6pfdvYa1ZPidmNJLQt
e42FaQO1iuW2iT7GjmVu0lQ9mH7kRLW5TFZax4Z+N6n5Ss2LjSnqxzz0Qxuo
u5bQn8nu1+9a37ymlWhQqfeKnXtek92vyc+qV5pi1UAln4rJW3vnl77bffxH
/7H7vz71E+4vv/ZH7ugX/gf3tRd+odRZED8EnxboLF05WoraRYg3wrHwhUGb
NuYiFTsU01noywL7nHlPUxpNqu5QXfwQa0bjObUD2PeM/UhpLYzdKHPiGjua
dXxtnWbrs0I/GLxm88FQd6FeAm0F+0C7sLFD1FKYf7asOVTUgmZeX+vngsdo
m7E/iCOCRkLdhXqJ1VoYV4TX6W+CMbI5a4nN5WJzrVBjsbWC7FzZekKYW8wD
NBb6hqA9PIcG4/U1EzPE9hhbZPUVxvZ4TnR0E5vXFvfMhct9wPVDz+R5Wo6a
2DcDNRe7nrkWMS7Mi1PxabF+LC1qUyV1lmxtcV2VMUGmRhVz71BrSWkuK7HT
wFbSD1Zq126V8doMGgXna9D9WM3rGrS2kvJpodYCOz6mf4T2OLQYahyEfi9h
LhUeT03B6jAx/Ya+MWGMC88JXYR6CnUSHsNYGmxDjBB8V3zOFZM7lr4cjC9i
Thars7DWMo+L5WCxWgfzq9CPJZYzxsZTWT+YsMY0ryFVT8geH8Yn0U+GPi7s
n7/uIF9uao7DXLnMExzmJLZ6it1m60GVOTiuf8vb09ABwrihEGgx0Ax8Ppdr
l8p8uNBEbC3oUMMJ87fQt4U+LWEdZ+ZlCXOupmJsQv2lqy4yfDmK3K7UWWL1
hkL9Bn3rh/9KrLaQrd2Tym3bxi8k1JXC41P5chlLxdw4uB8ePuJfwz3ml/Wj
fX6coN5QzH8mdl93Df2wkZt0mH7YjZZ+1tqNXUtMh+lHPSVbd3e1cga3vZaV
6CM27+pqXgOvg7llrf8L6cUfqI6mXMX9uhZeT8w3p1/xRDbfT908x+oDwX68
/eJ3eY1lx57fcXfnbpRAa6EvC6DOUsnTUvi1TP3mtlxnwTlOb4vmaYnlaEn5
szAnaow6vxb6tIS5QQB8J6DhUM+xeXG9NlHUUKb/gNVaqKcgdsfqLczBAmgP
856aSqcO0eFCe8lzqDDux8bw4DHjfGzuWvq40M/F+rKgve/f93Lpw4JzIo8L
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
sLYObXZbY8juR52FOoLNt0KNg9uos9hzhnlImG+GOov1BcF12Fy09I2hRmF1
FuoVuOdjajolhW8M9QjmvEUf6VfCfMK8Jt5znDnWzFXL2tToW6ipMJ9MWJ+I
/i3sK9q2OV6sFsbcxNRsUj4vNiYJ1x3GCsXih+gPRT0FGgh0D9Zwjukt0Eig
p9AXhblbGFsCTQOv2VwtNo4IoC3qMja/Kh7beKE2vhpNNZ2ZZ4T9Y/sx/SEV
M5TSNWzsC/QV6izUWlLxQ3X5UVJ+L021kcKYoFDXsftCI/nqN94uSfmb2Lbt
GNpYrJRfi9VbWB867CuPH7StJ4QYDKHOAj2FQF8hVmdp0lpsDhfv0/LcRxq1
Fuoj1n8EQAcpjz36bFRn4e/0Ye6WmI8L9u3Ks5odB3scoG3eLxj7H3Yy443o
nwDblbly6UdgawBBY2FuFPiV0JcF2+nvAtvZ1uXlsYz98Xlcsuc4F2xmxJ5A
j0lpLdhO3xm+ZuNJrA9L6MtinzMPC3UWq6XQtyWEOVtC/6FXjZ9QVyyX0V5s
XpZSi7nV0d78a2cLP5MijzLmHVoLdZGuuswmRqjMzbK/WxMpidRxjsUMdcUP
Fe2UPi0RnYW6n83VAh8Tvw7q8uEaXxbGCWHOkSvIxqwh9w3GFvPE3Dl2Dm2O
HesbxnVM/cvaXdJZVo9+aiS2rUFfl1i/jI5uDJ2FGgtz4MLOZg1n6gtWY6A/
htdWCt3D6hrM9cG8JNQ5wngia7vHdBZqDN7+//znvN7B89m60dQnbD9KraXw
y4A+AR8VWxeZ/eF+Ni8Kr42+IHYMQv8WW3/JvgZtBNfCtqiz0I+FbWM7r8fX
ICrqJOF41EjCPdvEvvQZsrFBtv4P6ymXWkrhA+THKojlosZFncbWReJchPWg
qH+F+ZHxGjUwbid4DXawz5dS1GKmHwp1Fvq6MNcK9gPQU+iTQq2FPiPYzrpF
9G3hcaz3bP0hwty3sXwjKT0h5nfCvLfM/4J4J9j1YVxPKsdLKlYp6VeTnY81
kKm5pGKNoG382bn3u4jpHW1ijWx+mZg2ZLUN6io43ytnbpTw/OxD7HjmEKaf
it+eXSv8WzjG1NxieouNJaLWw3w5g7b1hBCDAbWFiNVYrM5it9VpLTZPrtVZ
mA+3K1fL0XiuFtjktA2hifg8GJHjqNH4fKjnO/E/Pr9qRItZMD4SZR7V8905
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
adH3eUajr7JepUcRK4m+tvizwETQHzBbCO9bNC546EbvW2csn/zsvTa3Rq/y
8YCzuI5lQ8syxzmm2MU2LGYJK1mqqVnKgqa2v0Du4t4s+OJEX1vnLL2eIS2P
M6bwYtFzov0wn0q8Tvs7VF05lnPeLL3s+a1cxty2j+oy5DZsCCa2zxnM+zq/
fWuMLjq9n2jseYuMRUykx1nGPFvoIfL+Iecs9O/EPp4eYxFL8c/0+ai/wnUt
0qgwn0hsQ/xDfEOfxRHw0hUjEWcRd1GPzt/+jnee+tauUlxIrKUwFXw9qheL
am60KEr51YpbiGcwSxr/FrEM8Z3CWFb71fLi2fra6Twe8Rb8TpyxwERce4Ke
RSnmwnwh8RG2YXt0KfQSaZ/MEfL5zXEd/UBoWrScXiHmOLsnC963L/z22p+F
3PAfMf1G8yOpnqt4mTTP4afWXifNW+XWjQFzGOMsegacnZT1VcviDCP2B7V5
QbdvDnQ2hYMcrX1lYBV4z+qzz1RmLnX0nhV74jpEfYm+67PF8cHVeTBfiPfO
nWBG7Zow07q+lvdBdzPoDQqalsG2t2+22lb1WOz58PqXevgyeaFSq/t7jpnj
TM6yXbp2hZq89zzE68zzwHboUVin9OfMeQrPIPcwOct0ojeifyjqVnR94/Ko
d1F6Pw/+t56qVd3ng16ZniZF68ZmN7vPavSSxRMWrxLVyr6NlsNXenX32Bxf
tBJazxxjvFfwctEy/Z7364h39DxSfJmYgR9j4SzRD7dyFp1jmWVsnEVMBJaz
lF9MaUd83zoWn5MNS9Mr1wA+he5H1wAu4361+iz+5POPttG1+LbMe6Yfi34i
uBhznfFrgYXh+VNmDNVrrOP1XiF8WphjVLazOeA8D3jairfgZws/od9D+gPn
LfoMb1FqWzEWsROvsYtepdbkqtfpF8L31vtNer4sk963Y3yjxybmenGW8JGx
z0s4y7bbzuls9sRZ4jxneoikQWmcpc4faiwGb53VK31BPAO63z7HuXgl2ywr
PTuHrgen6sPIUqLn55z/7WVK101clWNWLtW/cG8OqQk5S7ru4yrdl6l0Ddjc
vCH3VRnLHmeBsbgfbtSxjDGWMc7i6Zyl1KCrz0pqbGY+l3lCq+3EX5RaLo6i
V/mpqH9I79VTJBYibYrYC1oXrXdOJI2MuAkzl8VVxC7EO8RC8FVpfOXO9xV9
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
ez0XCN/bNru5ete614r2Q19V6+WqvrviVn7ttb5pXmBh9HG5T0w9XvqpuE66
fuJd8i6Rh4l0H2hDxDG27fnp+eD2lsV5Q1MeLnOalp62xfUt+OPq3PC/lc+v
eAucScxJGXup4HWlZ6hqWJT6rDx0rZe5mcfHDw5+DOfJ68AorsM5zKVqVupR
vTKT2VnJGAfBk6OX+HSgiym+I6Z9YP9Ts6PVm9JjCNvwj962sd9Gr/otdD2H
8GtxzqLrFT1iPZn1o+Pdh55lCXOBs+gYOA5P2Ao+PHr13qCY9JPF6462Ran9
eE+RfsOPKx4nnMZZjWpe1dc+AwYti2YORYYyxVrcC5dlqu3Fa6it4Sxe8w88
cJeyjaltpnQg22hhtmE7YZ9N0zJ1XEv2PaV3WZL3+1oWMRJ4SPGpXd0b92XR
cjES3TultmeekHiLz2xmbrO4iVLPDvuiZ8z3redNfE/s5dB14VgdfNX8SmLq
+K/DefTyqvuXcH/QGaGZusrn07s/c8xo0RzkWheLq3ifD/4r7nELY9Hc56N/
/vdL6r1rWJy9kMwp8rlHS1iLv1LTN21E1V40tsLnqqFoGpg6awiPEdWlqt3p
61F/BrOD9R5fDPlkSMMizqJXOIu2lcZALEbbannp7alepYW1eFZfF+lbtD16
BPqBYC7e39NmC1XdSuEQR2udCZ61cAp0DWxbdA0fHfrmUnvzHi1L87ytvUNF
78OMJvNqIeEw2oZ74h657kmsfavPBc0L+9A1KDOGmDVtc4rhLMzAFmfQ/dBM
HrQf+N9GrcnYDOYpHuP9RpHT+G+M7XdbTUvPG1dZGNKrd8t5irGILX39g7c2
rxY9m2KB4i161fXTc8Oc8NK/dn/9XOm6HrrWy9zM4+MHBz+G8+R1YBTX4Rzm
UjUyehRqe5/L3NOxRKYS2Uv00S3eL+/8ZwNPj953e763sY5eqjPx7fAT4Rh0
bHrvjMOPf1/9OEsZxpi3iGs6xGJ6fTMXfbwcA/459HcNPHhq0hvUPFjsHMVZ
ovdK/D2td3aifY1pnPy68L0yb6jO6nXG0rQnq3o8ps8KGvNrcY6iV9Xe6BvU
R0Stz+uGlmUJWxnjJXO6lrmc0sdsu7+5np+l+z9HvxBaFtca6X64L4sYS0/L
Is4iFiJvFT0P6FjUP/Tnj3639RExs1kpJuPeLc5Xopal+ORegrow82ols58O
fRyZ/cT3Z66ni3q3eco+3dGzoA157mbrIRJTif0/cBbpU5y34JGLFob+I977
jKPCPUzPos+q2fWbzlh8TlKvd4i5QtT9zBei9sfPpfCCyice1tlB0mKoFlXv
j+pX17SIo2g5mhaxFmlZvuX3/26pfeEteGfQP6RlaFPQG7xQZzhrufat3iMl
vUT4kTCjaMBX4CiwFs/qVyseUnqL7q37iLy/CCaDj0vjJdVbhf2137l7yqiK
LqWykQ0vYZspDWsRryk6FmN55R6uXnUMjbPcWmtx2hzreu7iA7AmNBmFWa2u
o66drrN0HjCWqGdxBkI/Uc+Pxd87Q+nxl+h12/O9XcJaxjiL9xCJH8FZdJ56
1tBM8ezpOdMzpeuhZ1bXTFopfFt0H9wLN/1ZLmceHz84+DGcJ68Do7gO5zCX
8AWxkMZZPvHhWc+UHndxf1w+u2cLvMV1MGN+LGN181LG4hqRHhPSe23D/Jxe
/4u+e1EMI+oxej0v8AlpQpxJHHJWUu8cYCI91oLnSpnzXecNxfOZ2r9YDX1V
ej/2XPT6ncRaVO/GWhgmwvwZuAnpvGXMq8X1E9oHGgf1q7impXGWsR6fOfax
jWZkqo9nW63MEv1Lj6lMHcMcvzkDY+lpWdAuiYOU3p86qzk+A/SUMWsIX1vp
Wb78H36nsBal3ru+Bd5S/FmCTkr71TL5tWjbQ9eEmZmZh8niP/ojXzGY0zPF
WUpdLX3Lm9e8RawEn5Y47xn9C/1AaE8GjMT8d1nvOhZmBbl2pXEWm+XceoZq
UuM3LxZ6X55a98OU2UKrelN1KFoNzWsRFxDvkC5FrIWkR4hUbSvWoqTW1Xdg
K6p59Vn1sBiNkp6fMlu3MgMxBDEX5hXh6VL4wkfXXETrdaxiHc5FmNUMD6HH
x2dBO2dpvi53TxmTjrMwGWY1+zxo5y1VbxL1Qs5Z9Nvluj+79iAe9Gk9fTqT
2/10Wu9QPRf3nUHPo+uElw1zmrRMbEHMS/OPozeLc5IxLcsS35UpDuPv42/0
XnualjFtC764Zf6QZg/de7H0Dul50zmLL+n5UmoZz90LlRmKs5T+ofunc4h0
Xwqrun/K4Q5d62Vu5vHxg4Mfw3nyOjCK63AOcwnzUH8PjAUf1iUpdqI6ufSy
rL7rni34tcIwiueu5s+samz3c4l5Hi2J1/o9j1bXrUjboqTXJW4P77mIOUTO
Cca8RXraj0PpWXrH30v19ijx+NVzEn1b6Ctb8jvaDp+XKX+WqA/i93ucxT1a
VBOLkyi9F6jHWyJ38f4hann3aBnVs0z045yp12aOuSzlJUtZyRRnWfrbYxqd
LTlLnOMszoWGSfeiN2MKPx3eM9dZuhbxE3EU+oekaRFn0as+azm9RHq2fI4z
+6eXSPs6dK2XmZl5mBRjQU/gdXDsGcKLI/IWtCHuletzmF3D4F4vfG8jO/qU
3nyhxmnEU27dGNTzZd+rY1Rd2TQSd9csoM25ubNmF2g/tFzMQb0/f/7e1zVP
FpgKnEU1rebbqOZV7waeGZG5aD/iItK2aD+qi7UM1uIet/CV4of70VOm4N4r
rnl57/NfXXhG06Uc3RiwEX0u9+nu2g+X3/NZz8yHbv65xlYatzlazwXmuvkc
IpIZRG2Oc/TE8TnOT5m+pfoPt/nRRzcbP8FTBt6E5wjXSfdO11bMQfei1zc0
x1riLKK5uUNjOpUp5rJk/tCYtqV44n7klLXgg6vzVeqZQjfFM8c8KzEWOAt8
Tvf0YZ0tLr3QoWu9zM08Pn5w8GM4T14HRnEdzmEumfvDLBv5XkRdR49R+Dyi
poNZvYfR8F38WtG0SCPis569R4k8DzeAi0SNypQOBy9ZfFrcg/ciGEbsixJ/
wC92TNNy2TjLEuYC64C9/OIv/ERhLkv1LOwbndIYj4vXhBlG2j7OmIm6Bte3
qNaWr62Yi1hJyVrHR94y4DGr7Zjv7L1DcJYNf5apnOMRcxqRKV3MUhYzpbWZ
4zJT63eoZdF31C+EJzG6IniX+Ik+6744Z0PHpO2ct2g5nipKsRb3a4G3wFrQ
wvhzJL6j540eJf3uoWu9zMzMw6QYC1qCbobZyD6Pt31+5rRubr061NFafmeo
bXB/WveG2WAtxlyav63rX/y9HRvaF+bWoLUos26cD9w9rdHFLlRvirFovfpQ
pDlBvyJtgOpT9WaIp4itSFOgelc9HF/74NdOdQbkap38M0oe3ypMRFxFvyM/
DXw0VBtr385b6O0p/TLGQFgnvoBWRpzFdSyuNWE53KhpRKqWRfsvPix319vT
a4SOBE1J9HsZ5SzVD1fLxLkK63rmiYEvjnMXbYu2CP/hptGp5yqfETgLHi3o
f+Asul9wBjEHXf8eZ+lpUeb6gqa0K2Ofe7+xDWcZm/mMP4ueKT1HYn06Z527
uApaKT1bum7iLEoYi54z3TP6rphtdehaL3Mzj48fHPwYzpPXgVFch3OYS583
xGyhng9L1LC0rDOJSPEWMYLIZdhW+2++LSOcZameZaxnZClnQbPiv9ebrXOR
nEUJiyqspePTIj2L2Nhl5Sxj9wbfFjiLa1m2PYe5+xT1LPyG19jM2o2+pc5b
8MyVFiEyF+8tcj8QrUNHodT3YDTK7ryhpVxlac/Otoxk6e9N6U7GmMkSHczc
Oc2k9wu5lkX3VSkti+6da1lKX9fL/2fhKGIkeq9nAd6i9UWH8ulfb/oWeono
J0LPEnUyzK9iDrTWJWfJzHx8Ez9Tn2/cYywbrOWZJwY9RgNPFPpFVp8bx4n7
st9pdXmHsUT2Qv+Q+7f48eLDUup107HQT4MfLT0n9KPw7/14sIiNwFakT8F/
VCyleWbIp1RsRbOE732+pdiL8hs+8GTxaxEXEV+Rz632zdxn1choDOAl8A0d
p2pkHU9jIpWBFJ9Z90whb28mbCPOfh70Gbl+pepfihfvnSHDgVtFZuLMjd8S
M+Ge+jq2L/uqv9P0VM+tjxP/X3qGHtrsa3qqdB3FD6TZwKtEnEX3BX+WHgNx
3Ur0yvXlzl3meo2m2MpS5tLrIXJ/FrQsYix4LIuxiK0Un9vXXt/mDum50jOk
61sY4ktrNqX3yVkubx4fPzj4MZwnrwOjuA7nMJc+Gwj+wXsy8grXqhRdijEX
nzvs2/sMZz6PzYuGfZxnrhDalCnWctHzepYe/xI9i3OWQx/7NiyEuUHqHWN2
0lIty5L7Psd7XL+i2ln8Q/U3tXBP3xL1CarZVcM35mIaFzQr1PTaHx4to164
S3qEluhPlmpFpljHnO5lqodoqUZlqdZli34htCzukUMPD5oi3Tfnacxxpj9I
6/FmcfYGa9M6sRh6ifBoQfPS8/vBu0Xf0/4PXetlZmYeJql5W607wlcGWpTK
SZqGxbUodTn6k+bFUtfFmb7OUXoeK9F/RWzFZz83j49On0rjEO4vYrOBVW8y
64deIWlMpBXRq2pZ1bXf+7Fnm15F9S5Z5sAYX3FdS9G5rGp+OA2sBc8W5hbp
t+E9pf796Jo/aBtxGfU/MadZy9s5RS+Vu2uvlMhZYBf0D4mfiFWUPp875odS
eUucFY2WxX1umg8MM56rZy39TzpufH/Ks2L8x9lN+X7V1US2omMUb+I9Sc+Q
1jFvSDoP9W9J9wFniazFOQm8ZWxG0JhHbpw3FPflv7ltjnKWd/9G4Sw+M1zv
0bDQIwRnkZZFzwpewcyS0jNW+ulqz9yha73MzTw+fnDwYzhPXgdGcR3OYS7j
bGbxETxUio9KnfHc07g4h9F+mi7mEx8+5QSmVeF3+Dw1L9o5yFjdHOcIj2ka
mD8cz5MZzodmET1ewEydpf4shz72pbwFzoJ2Cmak8z3PPpduq4xznJuPbeUt
xf+0zqNZwly0vfcUkV7nO2eZ1LTM6VuWaFWmOMhcX9C2WpgpfcvcuikNzhm1
LHCWqGUR58CbOGpZmOOslDZF7ETvi35l9Qpv8VlFcBXmDknL4vOL0Ekp8cpF
E3PoWi8zM/MwOZjjHFlIh7E0v9K6vTOVgRcL+3rzV7bZMmP79Z4j379zGOYD
x9lEYgBoZpomB94Db6gMQfV7+bf9W+u5P/iB6t//xT3EWFSHioeIu2hmrrQs
PZbSS7QsJJ4t2jesRVwAhqLf1rF4bwx+K/TRcOzMdG5znKv2ZDB/KDCXxkaO
bmz0J5U5yUdrtgNjYfav9w8VrlJ1KWiGtN8y+7k+Gz5/Wqm6Xn63g3v/3JC1
+LkVH96jtd5C9we+IlbgnIVjFFvQdZQ2SP4s8C3XtPS4B2xEOTUTKPIX386Z
yLbalchWeozFOctXvfBLRR8FY1H/GD1CcBVdCzE8sSe917Ole8v10vXVtaZP
rmiOLkG9lznM4+MHBz+G8+R1YBTX4RzmEj9a5gOJj0grIc1B1Juge+FVrMK5
hWtg8Cp1bxZnNT6baMo/ZUyn4ttoP2ItPb9avk8vEd63+N8emkHE45yaNeSc
ZWye8WVP5v7Emc5ieviojPURnaeni+9kZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk
ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRk7Cxe+/zJ
Kw8+efLJlz936CM5TMyd/5c/f/Jv7rx48qPv+KmTH3v3iyfv+9mXTn73tT+7
2GPMyMh4vOOsf08/7n+/Z2zEF159+eSTq2fid790+f479uj3Pl2O7d997kuH
PpSMxzr+rP05yWfxNEb/bOZ/Yy40Hv3eKyfve/6nTn70nT918vzzRycf+NjL
J48OfVAZGRkj8acnH3jbO07+yg+s8skXT/7o0Idz4TFz/q+9cvIPf6Cut/zA
5y7f/59mPL7x6PdeOnnbD//4yTc++a6Tu/c/f+jD2Vl84f7RyZuefMfJd7/1
9snHf+9x/jN31r+nx7+X1/bxjEev/kL779jzDy5Z/fjlV07eXI/tG9/9yUMf
TcbjHK+9fPLd3Wfxcyd33/6u1X9rf/zkbT/5GD2jo382L28NcR3/v+jRyx/c
qEf+yg/cPvndQx9YRsY1jy/cf7HzZ28i33pU+eefnNx9a1x2EfGZkx998vR3
3/yTr3TWf+7kx+r6b3zHRzvr/+TkfW9bH/fZ/26fPv9Xnn+XXbMXTu4+/8LJ
m952nt87fDz6d7/c/v8h5ne/9fmTF/7V/3XyR1/e5S/+6cmjL31pr8/W1Dnp
/4fe9LbbJ3d/9pNX+r5NxSvP//j6nH/4xXCt93/99xNfOnnhh+3ZfP7lQx/Q
AeOsf0+PfS+v7fWNPzt59Nrqz/uX++zs0ctH7b6/sGfO8ui1Pzn5o9f+dPkX
VrXtm+qxvelSPZNX9e/QjDPHl19uXMGfxUcP/P+133XyydcOeIwXGaN/Ng9V
Qyim/66b/v+iqxhfOrlr/91+0ztePHnhHe85+YfPP0a8LyPjQPHKu7dgLAPu
/Ccn7+PvyB++yL8jP73Wibztg5u/+3sfPfnGdrwvdFjtZ07eRo1wrn/3mjp/
+zvtyZ86+f/ZO7ueRpLr4X+g/Q7c7s3khqvhIlcjsRkhRUiIi/gmg1gpKBoI
jlisxBpELJBsbTDsysLKYDFC7LCCCYuZOONFjFHitWCeAP+YBWQPRDpPVb+e
6q7qN7d5m/OTWsky7u7qqlOn6pw6deq4g7fcJdo7SwFkZBIWN+KJAbXmJQOy
doyHYN+k+/1rD3Be1CjO2H6l8U3h326i/rvDNZTG7LYbKT2M9ahoRNXTqvuo
bh8saB2+VHf7OG7Oz3JhjZ8jxYBjicK2vW3urw4lIqOSxfoqmk88nHmhL8q+
eVs2BPjqOq950b0E+bp6kw/gewjiHtE+OoBapWpftartY2Y28/JOVfz3PXNe
fVs6EsUaSvwojWLGiEXQf+Pap3OyaenXibVObASv70f/Nlx4AL5wHTzPHilW
oFGvs+sAymtFSCBfOb8SxYMY39e9tR/8TUO5Mhwf1fXvYv1gK78E/QPou8Zk
8VH3nWs4Zt9arRy45PQm6r97XECjUmH67FP3A8TtZ9H/jer2AYLsIZkf5Sb9
LKbsBY6Xuqt+lnutQ4lIeMgin29X2Zz6+FOShbvoZ/HRdV7zonsJbgPpPgCC
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
1dhwl/wsON+cbbOic+0G3PlLo9giUeop3Dc58ofiOQjKM+uXt8zCdyyV5SSO
KpsyWlCes+flvZKzWoP7Wa7tuGRVLoYrFBOP9n2HaRs7fiUHjRo6P0y2L9lB
GLk+3ilIcxA7EXMmO3L1h7ANfdcQ8ZkGgWOBWv5+FsXcDJ8hYZcnbH4WO8dw
0Nht93f71GGUfiehfVRG57DpZ1s2UPyUXC7xeRbIzvDT5xF8yGKuJncuaJH4
xtRu+Fki9Zmbys+CziSU5aPXvgntM/Q630wmU6o68f6OQ+HsJvV5vFHG1Ljs
vWsrP0aQM/1sbFn9bGASxZg4z68Oq7OaxjeHnxNE8bNg/5bqjMKb8bOoz7Hu
Hy9AI4i8IZ3qt98zfh2p+u6wOi2MvtSJpuu6YStAuH4Xcd5FfhaCuFt0z88i
+t+lY1QIjkvzII4v7v2yOF+aXA+LZZL5KXDuNvuMaC/fclQ/S8seLyQ5yRro
e2/bz+KeczI7fhbvU8G5MO24IrcvgI8dk9Iy2GVz5tWMVk9+3+T6LV4fE/aq
HIhnPQeaP6NcZ5L4feF8UWs9NKpsXsNxTWaH2nNzU/aC+VnceU3xXFNmo9Tm
bFkYytn2VRg/C973Z+VM9Nlv7i67KFPt+oH0fmutzmM9zP5myflXR4ozJiTg
OkhvSOxVZEPg80Tx2uOII3aiXSkiX5EqnkVSd5c4Rls8m0Sl3+R1K8rqhCxP
7aXPGSq+880I/e7yEBqS/Rd2LkvjG5CsyepJ7J8r0rVX8cwU0PJvJNC5KGH2
ROL+ZZ3fLHBh5BSKb0z1y88cxc8Sqc9cBVg3dhLFzyLIkyTnBLZZcA6MoDIF
3jqUx9Q1ZDFG6PvVOjLKmBqXvSfKZ3/A+LUqyv28zCtTmRM9is6KNieI4mdp
11B+HuEMc/OhK8h/1z0/iyVv5tzkiumE5kWgeA6bA+GMnPUj9y/aTUOnxKAj
nd8tH2PC67Tg+tIsaxRdF91W6Ea/CzPvIj8LQdwtuudnAc1/buniL8Qco+2T
A1hOpqBPdQ6Jk7oYJyrkZlH+RpLbwVGmxQ2eL/Qa2pd1WB6315bEMRWt6Qzm
HM+MHs+Cz7PLmmdTXp269mHftp9lKFeG4yM232R2a3WtCEOOdRUxhh6tvX3B
zzQ29qyc7ENWiHv1OJMjr88lz47q2ngZpZ78vkn2W3zeBD77RvTfpWF9z4yj
uoaz2jakE5Nifj/HnmMeP6/HNLegsVMU9o87Y2fCyuaxcbZCz+gCVOv2NzU2
7G/tDeVncdc/PjedX4m5bfb3a+3c6Go+I9RNTTG/8R/vm0K+Ra3e5nzOpnWV
HcnUkZGDcSANpR27bdr1bdue8opnQX6O/tlto75bUFtbEuL9w/hZtL6S29bj
/VndlXO47hx9UtBlvB/pMdPVYk54nte5zjzvg55nk8lpvQwjOEeGYC+p9ZvS
h4XtD3ali+ZZvhdaThxd7jxyhASYb4brd4eQHrDLYsdQ1yGLYsf0dUG8JsrX
UQvQaPJ5srt/Lu7hef+B0A8yawfaPceVVUeOgbA5vveFHKl8n9SxtifkWnv2
EJbVmMZULJdWvofmIRwb+V0jxbNE6TPCuVMZqGl7wJpsrPHI0xnJz+KQp4EZ
2FL0DVvvhJEpLx16bcXrDaVXDVnjXLAxLO1Zz+bvwo+p8dl7TrnvZ99g2bF8
HM7NQy8+XxfFDn1mxSi0hHzt9rnaTp01r2wXrLOizAmi+FnEc3X0vnLMxz6u
5wLKdSx+FrSPdJmNZ3xeYJ6vxK+gNHLi+ljJPIfv8tDK8WbmrouqI834FNEH
4jGHDq3TQuhL6EDXRbIV4ux30eZd5GchiLtFbVZ2JqATH92h9GGz5+fdudt6
HDnllmtBxglRt/YkZXGP4nzgM0UcYi3nLpN4pVzrXXY98WsGrdfZfvqwfhac
28zrCuNn8cpRHuYszqB5KK05DqKcngpwr9OuXJX+Tst7HKGe/L5J+tvLMspt
gmXgApbHHO9jMizur0druAFzu8nWYsLJZktYU9HLNQm9Qv+ahK2ja//v96h/
7V7XuRsSWdgRbaNwfhYxHy6/1o/89wxpdSZbW3eeNcTr29M/6KBZdudYlFxh
/Syqa2LNfQ5HVhEnLlyOs1QD5azke7NcdSjXb162CV6zVvVxZc6AQPPN4P3O
6ffR21vMOdqD+9tVVRwrJJds7b46G0y3hT2z/kySy8LVv4y4wnjG1AP59xtj
pl/fxeeRWN8Uqc+I9px9eexRCZHbx7k/1CVPzitRsO2zsDKl1KHfu84a6mHP
EeR4wLl+IxJ+TI0+Z5PR3ltx5RN3ypwej4f95Y6Y4+Y2Gl/NvPnRdFaUOUHg
PEmO+jrbKQR6Vyx+FlW7oD0/qqtneAaWdzzGNL0R0J5lxTVoxAhF0pGOcQud
N6yeQ4fXaWH0ZSe6LrytEHe/Cz/vwu8gPwtB3D52bJpz3yzGbw/tgbWXUZYX
8XhnxRUDoY+dKcg6ztFVcyGMD/Jz6fCeRh6HoV4P5z75fskZAn1jS9K9rs55
hj2PttdpXN+Ox1ppvO01VHMZVxm08wfq+9Z+3KzCz5J16dCWNY/slaxp2vOM
ADnTPPR7X2IGsvlNOFb6ak5hedw9L+yfXtVyb/QZ45MrD0veuTfMrLfw9eT3
Tarf4j36ovy0oJrPSe2InkQG1itofoP9LIMZSI9Nuu4ZmVOv9YeTzRbUigvQ
J/k9P8d4vWavNXnLjlf9G/cfbcOEbE48zNeG3fG+fu9zgXOVBMxxp5Ubxetj
mTqrrLpy3+rXJGRKB+oHmvezdnDmFNbiYyoHsGXkJvLLAyuupeUg4dKDU7Co
mhs3K8J6rll2/nszdzPf0y5bS+sdL8Ky5AyqPvZ3mT2n0m+qujVprC1JZa+X
x1dJzr618NWNJsH7Xfuk4s5Tavbl9KpkbZGvS8p8RVOQXVPJx6m4lmlcibkK
e79pR84INqFfHVrlr23CiExeB9P2urNBHGMqb3NXvRr9zq/vNooZ6TdF6jOX
VZiQ9AtlXfnJDrJJZWNkeW5earMmZjdd9RZWptQ69BBKrty3dl/xz68Rdkzt
bM4m5aisxZDJ6mJkVo8pwGPs0Jx7H5gtN+yeUl0sJ2vz9HRQnRV+TuDdD9H+
K0l9tfdWJWPyJNMTFSglJXKtlNGo7bIfaO2GX8t7fj5WHkeVkcriEI8NwT+N
oCNrQqyFHXeunkPrhNVpYfRlR7ou1Hws/n4Xdt7FZSXh8T0EQTxc2ieHbE5w
oF3HJzL9cNNca3G9jaNTOK7Xrfz9Si4PobZ34B3THIWrpl0vzeAxoHeddtNs
bz12OhBaXbA24e3hrIs7UU8tXWbM77qUlEOYY+m+Gi77xydczg4D+g9CyibE
1L+86t98D29X9h3HrHzHzRj78cmmNRfC+7Y6pX15atULr89we9pbcGzdG37O
IszhtPkvj4c/hDPeVoH0CM+/s2/onaCyg+DffnTYZf3GvukE94mAfT0UAfqd
ydUF+16jzXid+fiUNZnn9cP3RgZs4/bRAaurfUO3Bf+KQM9ungbux533+ZYm
G/z7j0/impNH6TOGvqvXI/TRKOjffXxyGKxfhZEpTx0aQo4lRBpTY6YzfeoE
26VGHIWms06ZngygS250TnCtyUBkXRwZtMY4vAANnpeFyQ3XE2dsTnF2tA8l
5J8KnE+ay2K9bsu0109D6khdPx7YZ0CZBBhjwuq04PqyE10Xfj4WN12bdxEE
QRDEfSLKGRoElM0zhwLsa7svhN07RRAE8emgOJuWsEH7QNLKPLGKc9MJgiAI
giAeEuRnCUz75BTaVxdCXrce6RkC9xPysxAEQajwyWdBCH4W+XlPLdhK23t7
1OeDEwRBEARB3HPIzxIQWX66gGf43hPIz0IQBKHCL58Fgc+90tYhhjOwXFyF
dXaVcktiTpNEkWKCCIIgCIJ4uFxWrDwjvdPkZ1GC6kmfZ2egfHI7OQe6RRud
i0HrjARBEBh0Ps2A+4xEwkCaE128Evy87dsuJ0EQBEEQRFe5hvblhX7dUq7C
+0K72YSzS3Y92LxuLVsWbrsoBEEQdwxLP4bMCfzpwXOiV2C9WITFuRUo5dn/
5lZga2c/9lzcBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQ
BEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBEEQBOFF+2gf
yjtlqNWboe473qto9zWa110qmRqzzOVK/cbfTRAy7qVMXh5ClZd5pwpnt10W
IiLXli4Oq8O7zW2OEQ+JaPV4AbUb6NvHlVXIJOdhgl2Z2QJs7dwj/fcAuZfj
EEEQBEE8RK6q0P/FOHzGrp7pcuDb2nsF7R5+pXduem5/AdkB/d2fDSyQfUjc
Ae6nTFbTk0Y/noTy5W2XhojEZQV6I+jwbnO7Y0S3qUN2dAp6BiYhMdvdOo9a
j7W5VNf7di2XtspmXaOr3XmZguONJehjurd3eAa2jj51f556HKJ6ip/20SYk
BieZHpiC7MbhbReHuDFuTv8TBHHztC8v4OyyFc/D2By9z5gf9aUrwctQWbLm
VZlb8LMsDhtzieElaHf6uCtWn82LOArWfe5TWW+dFrSbzc7lIxAxy+QNUZs1
bbEpqMZoi8Wqo7rGNSsnk4+re25zXFUsX3kwHX4z/eJ2x4ju0t5ZQL6FKYcf
I165ilqP3erbFpdla+7Ar5H0EowkplgZT7vwMhVNyAzaZegNMYd5mKjGoZjr
ieYhGvY6BbsGF+7NuP/wiH8s95rDeOt/giDuNxeQNcbLkWIMcaGh5+g6d8bP
Mti5TWuOlT3jN7sOF4X7VNbbxhoLBzLQ6Prb4pXJm6I7tljMOqpboDiQUv2u
+4Q8CKnDb6pfPGQ/C9RX0Tx7Ho7xv8UsV3fVz4JtjYm121rLv4bSGPL1lD71
mALVOBRvPdE8RKdRnLHqtGd887aL8+kS+1juM4fx0v8EQdxz7HE0lrUb8rPY
89HBu7/f4z6V9baxZfQm1hvIz2ITs47qFkj33Ws/QFg/yw31iwftZwG+Z+AA
qjtVOHbWYcxydWf9LKhc2cptxjZcQKNSgVrtU/excLzGofjqieYhJtdwXKtC
tXJwb8b8B0nsY7n/HEap/wmCuOecwoSx/7Zvttr545Rz9GvjknPzc2hcnlas
Nu1W0oj9HC7c+bHyPpX1tjlbmzdkNAW1rryhezLZXex+3R1bLGYd1S2am9Ya
WLZy3+JZsG6uhvKzdL9f6IhjBLbD7/k+LT9ilquo9dj1fUNW3pjuyhHhx82P
QzQPIe4UsY/l92QOQxBRuapDKZ3RcnZZsVkDU5DJl906vbkPy9Mz0It+2zuc
hsWSvG8c7xQhkUhBplRn7zmA7HjKfscXkzAxZ76jBdV8Tnhu31gBGlfOJ15D
OZeDocQMrNcv4GxnlT0f7dkc4M/cdPv8j8owMZaGobEc1CTP5O9OsH9PTK9a
5dmay8HIGCrvYApGxjPsbzPod2xeVq/AoqNOtPi3nKT+kJ+lf64CZ3vO8k9p
5Xfe5+9nabLyzgtt2MPKmy2G01lnlVUYcZQnk1+FCa+5xGUd1lld9Q+K398/
XhTi+xobRZhIzlj6mbd/gtfn+IzYLgGfJ3z7rPPbeT2uwrGrrUGT4cVkGnrQ
s3sTGShV7H3ugcvKnzXueJbRHzrPYxOkXx7CMivn0OgMlGruNc6znRUm1zMS
udfv6x9dgAaT/xrve9Y3zBi/vYBqqcDkc0poh57heSgf2WNru74N6eS80F79
YxmtryRc5Qovp5FkUkYoucJ65lrTH+lRsR5G5rbV7z2paroOy0UivcLq3HxG
MFustlaAoWHc/pMwlCxA7YTXf1Adhb+lxXTJCgyhOljeu2B6mrXzaFrQazan
TOdntH9PFw+k5WwwPTziqJ++sQVDTupMP84Leq6XlUWTjzH0zNA62qxr1jba
37nebEJpGuUKHS3avw3Q753vrBWXBHnpGZyB5WIhUI6tcP2CvWuNjZXDk5K2
DuYnwWPE4s4h1EqOsnO9tCZvP87Z3iZMONqwf3wp8PuD6sJosmbIsPD3gHIF
4cboqPXo72eJOkbXWZ2w7xydFOXIMQ/h8DZMj00JbdA3Og/rUhn31wtSjP7m
PaYwnbAm1ltvYh62jD0GbZc+5XlNJfsFUN/m49HWbAaNU7ruNueIxzti+XuG
M9b7ZN8u060js6vKeJHQ45CyniD+OZNGJ3NAJgvs3iGVjj+psG9RzDNCzoE6
0zOq+U6H47WMEHZR5H53dA3t2qYoV6zNlq2+wL53WqzbxKzsO4x6YWNu46rF
xq0Fx7il0P2hx9y4dW7IOYxyDsJkn/17n/DNzAZQ9WdBr+jPFvqNp+4giHC0
66tCbjXXlbDnqe29FaG/u67RgkOm7T13XD+p3jPE+sLimOKZAznxmZdlYZxV
l1ssi723WRa7jcrJxkr9viZkBrzewcvVgvXklGc5XPtpkZ8lVPm9/CxX+zDi
UdbeZLB9rLXcjH+5HHOJRinn/fuBeSsnQXXa+9lbl+GeB0Y7LSa8npsWxg8/
GZ5YqwcuK9+j6tmWqO+EJXC/RHmVZf63atq267Hc2/2BzS0F3+e4fm6C3/vZ
pc1ntGd5t5l1ZkcEOY0ikzJCyxXSM72jaaXM9Kbdue/blaJ/mQP4WaqzKc9n
LO/9vwA6SvyWfjY/F79lEraaSE4s/aeoC5dfwV8HLu6+8exz5pk94XW0UU9m
bsSBNJuvKp4dsN/bNGF51K8NffwsQfsF+7bl8UnP3y4GiGHEY4TXxf37TmrF
jMc9k5o94EkIXRhJ1mR/Z3/zl6vwY3TUevT0s3QyRnt954CdC7SW92pDNs9y
tnsAvSDDzkWqGlNYv0io5DkNpVJB+T3pjVPFu1gZhxXfNroE63OqcYJ9x4nz
Cy6g5NXfBnOuPEpRxiFVPcU9Z9LoeA5o61fZvg3ctsI8I+QcqFM9oy5H9PFa
+p4QdlEn/a5nWK2bsqVVZZv2Tm8r68Xr6p+tKO4LOObGrnOD2FngPQe59JZ9
rnOqDl2Gz30cUtoPrE4e3vZb4qZhunkIy/5oDrYqB9DYK0PakD1r/onOI9b6
a7IItVodanwNAce2COdcor2r5jsS7B07VViflY1bU0y3lKG2URR0nLAXWeKn
SKRXWVkOoFxaEnwwCZRPCe+Rd9s3sj22LaiVVmA5l7P0Ci/7cpH/rci+ge+5
RbnO2Bx/sbgNjTqrk42CUP4SHjuk5V8JUX6nPc3m6EhP9CXZs45OmZ1csdrQ
VYcS2pWCWKZZs04LYnmdfhYrL9mkFj/CZaKxtwkjyK9s5oDjsUfL+YItL7zO
8vxvRVhe09c+wjzPWS+9Y3zttwlnJwdQSutr2n34DDiHDE/kt+G42dTW4u2/
p6B6FaystVl7LEnMbcIxz5deK0PGsM+yUc+BCNUvvffJqub+MltiiMnhFpd5
vu6B8o71Jwv6++tVZg+i8XPMGCtPKqxeViCN7NL03AqU2N+W85tGTFF4OY0q
kzLCypWsn/J6qO7tw9YcnlelxRh+h4z1ji1Bee+A6clVmBDGcx8/C3uOpUMG
Z2Br7xDazVOoFhd0fTS8pPl5/XWU/Ft6RxdgfY3Jc27bkOWUui498pE4z5lN
53UdWM4btsQAt1kOYZ3JwiKKM+mfLkBJK+cKVI8uHDIZVEcbZXD5oya1deZ1
1le3+JpniH5vPXNOjLvMFMvQqLFxa25eXLP02jcUqF8435XS9IvW19K4bqeU
dq+Ju0/ztddtJuv7rvEWj0n4HGPt/Tv7cKbJGrIHffYrhNGFkWRN+vcgchV+
jI5aj2o/S6djtPs7uRzxbyzXzL4j6sqJ3Cb7zgOtH2J5Fc6pDqAX5G0dfExJ
s3Jw3ZeQ2EF940w3Viooxs8tZ66+zdpweaMCVcdcydLhfIyobNsxJl+49yEI
/W14XtOtZyd1KE2npPdEHYdU9RT3nCmeOaCtX2U6TTX/DNPv49Azynlw1PFa
Roj5V1z9rn+6CNVKGbJjEv/fcAZKzGbays8L9YfHK3ff42MW03UynVWX6bqg
Y27cOjf8HEaUT4eNyfuz1lbblgzq5RfzGrnnDClYXKsw3SH2w/7cvp+0EIQn
5bStI3uTzjzmLdZHD6W/da2HMb2UQP3bXj8Q+0DCcZ+151TrHzlhjxDWX6r5
Fu/DrtguZh/2SPpW1Dm8sBdftm+wWYVSqeKOI0T+5SHcV53lPwpbfnF8we/p
c/nqDyFt6ozRFY/xqwlZ1E7uswzq1t5Jd/2cMv0v2Z9zuW3rVOHdaD+zdEwN
97yGtT4yBWXHPc6zVKtIhl0+iRN7v6ndXl5lRWOJ5HzBs5PoeQrD9Mu4/Czu
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
emHEcUhe9rjnTPoYEIt87QSTe7NtQ/f7DvWM9s6ofhYvW0NC8PlX/P2uhs+g
i+hnCaqzottF8ercTuYw7jOv3Fd2R9zX7Odnycrs1kvxu9w6hyDUNNaWoE+S
L7yXr6U6zmfja2z9kt/2jfF1KeeTfc51tuKvJ2H9yBF7iPoVjs0V/BSDGUiP
TbrKMjIn3ysJzYrgY/7MePfiziGcbRjrx2POPbOg7b+YcN2n988zVh+uOeNA
GkqVA9ia1vWlsK8XlX8ktwqZUXddyssv6vMe556jo7K2HiDTMSOzq3B8GSCH
4eW+a+1Cq//ZTagW5+XtyOtUku8+XaxCzViTd7d9E5bH3Xa8Fr8T+nmHUHLl
vrXl1y2TAMc7KzAkG1sGUpAtOff1qMvaPqm4876ZdZZedcyTUJyDz/md1j2B
++WpGFNmXIm5CivjtiGfM8J6lniOgmzecSr97v7pVWjUVo1nuuN/a/l51z2C
/IeV0ygyKSOsXPmdHYTiy9z114T1afc8rXd0Cao76roTaUGtuCBt/88G07Be
c8Q2eOioIOcgcc4qRff8aHAGyicXUDZ0WSIvyaV4eQBZaT+YRGuBOtwecL0D
13sEHY335XjGCIXq97ysq5KxbhKyaxUoJSW63QPffnHF40Jlc/sp9j7v/KhW
eZEdvlhakZz3MKXVo5wWVPM56fy4J5GBdZ846TC6kBNa1nxk2Euuwo7RkeuR
2e8j6Leuc1M6HKNtu1Yl5zx/07x0LEzMbrp1ZEC94ETV37zHlJY1f+mVxHPa
z5xRrDvLvtn2l7jXltHcc1S23+4QlpOys9zYGDe+BLUjp34NPw4pyx73nMkk
hjlgTYh9MNprrADHV4eWf0jwH4bs9x3rGZWMdTReywk+/4q331nxfgPuGCT8
/ct78j25veM5SEjmAkrdH9EuilPnanQwh2kfbcOE7NytYR5j5I4D9dYraG+8
0A9b1rivlYP8LERoruHspM5sqAN21a2zRZS/PWK/PTqF47rfb2NG6G+6/6V9
wuPVTlEcpRc878E+1PbYdwb6vX2f9s11/bvF+1rsmQd63R0F0+EYrfxHhwHK
c629p8YuVZ23L0+NNjyQlDMY/Dtre/sB5EC8R3tniDptNw/1+mT3aLF+HT2v
Zd+jldud/8H1flbvZl0dn/jE5HuUFa4umOwd2OVV5arcM8bCAPEsNsH7Zfvo
wG43j3yZYdC+23y387tVXDW13/P6wvk5hOeGlNMoMql6Tlg5jQyvO63MTL4U
9RCE4HLqpaOC0tTKXIuiy3i71+02VdPSxg1ezuMT+dkV0XR0MML0e60s9YN4
yhKgX+h1yP6djwcRxhKRa+05x/x7PdsDE16PCgTVhRodyJoUL7nqZIwOU48X
Rp+vK2UljjHaG70etPLehJ67z4SS1/jGIfNZcc6ZrN90Kl+Xh8Y3hhi3QtZj
x3rmxghjF91evxP8T3v6vrYzLiNaWYLo/qhjbtw6t7M5jN4/uD3FytMMkoMx
PGa8EcWzEA+WiLGuBHG7HEB6mOSWIAiCIAiCiIcw+WeI6LTrq47zNQjiAUJ+
FuK+Ud9EMZQzkjMLCIIgCIIgCCIc5GfpPo01lBt4zPvsP4K415CfhbhvnGzq
e3cH56EW9dxUgiAIgiAIgkCQn6X7mGdJ9iVleYcI4gFxWbFyL/VOk5+FuB+0
L7uzV5QgCIIgCIL4NGnvLNj5lMnP0jVoHk98Glxrsq5dQfNyEgRBEARBEARB
PChatl1020UhCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCKI7XB5CdacM
5Ur9tktC3DDto30os7av1Zu3XZQHwDUc71WoPgmCIAiCIAiCILrA8cYS9A2M
Q+/wDGwdXd92cTxowXJiHD77gl0DC3CG/uUufsNdLNO95aoK/V/obd8zXb6R
Vz7o9rusQO8N1ydBEARBEARBEMSnQRMyg4bvgl296cptF8iDC8gOG2UdXoK2
9ffb+oYWtJtNVA7MfarXe8BlBfqMuuy7kbp84O13VbH8VjdTnwRBEARBEARB
EJ8K11Aas+3JkdLhbRfIgwtYNP0sg9jPcjvf0N5ZMGJrMtBw/et9qtd7wI37
BR54+5GfhSAIgiAIgiAIootcQKNSgVrtrtuSKj+L/m83/Q3typJhh09B+VL2
i/tSr/eAW/ELPOD2Iz8LQRAEQRAEQRAE4elnuXnO1uYNP0sKardclgcP+QVi
AOeYqVJ9EgRBEARBEARB+HIN1VwOhsbSkEivKvwQdciOz0CC/Sad39f/dFKG
NPvvobEc1K7EX9fWCjA0bO+f+GxgEoaSBaidtNCvDmE5OQNDozNQql243ni2
s8LeNyN9PvedVEsFSCSm7Hfw3JzD81A+arl+q/SzSL+hBevTM9q7R8YzkstZ
pmBlade3IZ2ch36Uv6N/TH9mAteBR71qNPdhmZWvdwDlARlOw2KpKvkxwPFO
kZUtBZlSXa/z6TT0oHL2jRegIXtPSBo7q6zcKeHZnw2kYHlHFteht33/6IK2
d+qYtbUgL19MweKG/Gyodr0Ci47v1/bo5Mpu2ZX5WVj9Tozpcrdec8qKztlO
Qfv3oVHWBmbMEav3xXGx7sx695cp47l7mzDhkJO+0XlYr5x61q3JTdUx1wm1
4pIgqz2DM7BcLITKdyPI3tUB0yEp9P5JmJgz26wF1XxOaNO+MS+5bMIW01l9
QvmmYGJ2VchzbWG0SWJ6k72vCSXWB6xyjBaFnE1bc/NaHmP7uSnIFuV9iyAI
giAIgiAIQk4Llkdt20u2l8Xe62LnnKimJ6X3VGdTgh3pvJb3DNsW5SjN7LjP
iK2mp+Rlqq9a96mu9Tpeg1f7WeTfcAGZAe/ncxtR+32IsrR3cp6/Sxt1oKpX
7Rl7K6KN7bxGCw478wKypi3K7MV+1XcNLsjt00DUIT3oXQcjJdGet3LUcF/T
6JTyPlEuWrCeVP9Ws4nHV8WiyfwsrM2s3ye3Jd+Dzqf6wsihc2k/R3olbFtd
1X5nO0ueZe/P7d+BOuY0kT5QX/5+FiR7A1PKfjI0uwqLY4r3DOTccnm5DyOe
/TMNVccnWW0ykIaRhPh769ykK+/n9iY3fb6XIAiCIAiCIAjC5gzZZLLcnVvT
pu2Ystboa5Y/ZQqqpj15VbXtqcEZ2No7hHbzFKrFBd0/MLxk203IBpb5WaTP
5yA7uT9ZgK3KATTqVVgeR7bkGLa31X4W+TtaUCutwHLevkqlVUhg28y0ucKU
5aSiPSuNbNj0HHu29o5NOPaqV6Nusa3fnyxCrVaHGo9TwLEtwnm76NvNa3ge
1nf2tZijXvR3y/8VmgOrbnoS81DaqLI6OICtXAa9V8z5i/125jUxtwq1vQqz
uSftvyeK8rzFzF5eLG6z97Dv3ygINnwJn6Us3TeE/Shp996ty7IdszFbNdrE
bs/EHGuryws4q5UhY7RldseOR5G3H26HSciu7cPZZVOLT9HbLgVldxe4hTpm
5Z8TY04yxTI0alVYn5sX46AC+FmcsteTyMHWDnvW7IzElzEF2VKZtWdRaM9s
5UL9TCbLWp/b27baQu/not+w5vL9su/Kr8J6vghbWhzZBZIJ9m3JFagdncJZ
vQLphKosBEEQBEEQBEEQXth2nNPuEmw85L+Q2pP1VcsWy+w47Parprg2HdXP
wvc0lFah6tofhM/UTQv7esL5WSQI8QwzyJ4NWxZsx8rzs6jKVE7btn7/nMPG
vdpHfqBJ2DqRfDu/Ly3Gb2D/WqKo2kPiz1mF2aySvSvlabvM2I8j+gDSsIV9
I0LdOc5kalahVKq49gfh7xjCcSGK/CxnG3ZsUXpD3LNj588Zh5IWi4T8O8x+
d737RLS95e13ACOmH8zln2jBWfMa/LiROm6WkY9jEtaPHOVi/btXUp9yRNlL
OGR2K4l8PcM5YY9Qu1KQ+nNwO3+WcMZutWAZxcVMbMh8X3KfFn5uX7os/iMc
2rFEoyu3nt+JIAiCIAiCIIj7gx2zIu53wDYP9odI7cnLsh0jMZiR5EpBRPaz
yLiG9lWTfYNsr1GnfpamYC8u+q5pe5XF/53yfz9FdvGM5Dxo0T8wlD/w/XYN
1AZu+78TeB20oLGWk8oO9gFkdtz1ietAfiYT/oYWnNVW5XlDlHlwkV+R2c42
aA8diomw9wIp8sAoym63H/ZrTCnyqYQl/joW9hrNSXKSXIXJg+ste220jypb
cfpk5e8pT9vtsFyX+KZONm39g3wi2M8ii9eznjswD8eSLzkuZazviL6/jiAI
giAIgiCIT432XlFqi9j+F9G+V+2PcOZ26B2dh9LOgaeNH8nPclmHrfySln/W
nbNEsWcjgp+lkbf3OIh7cqKUJaKfBeWyUZbhqiLxNaBvH/b2s3R+fswF1DZW
YMKZp9XXBxC27a+hUdmEbHJGyIMqi3/w+r7qrO0H22q6f4/zpeC+YcZ68Jyr
jRO3H1FV9louLT5jMA3ZYhnOQuUg7m4d23/DMVGIUPLiLXue5ZO+5wKyVj9W
5RPCv7F9IsK3SnJqZ5EfdWR2CTLpBeFKm/l7ZX2IIAiCIAiCIAhCySFMmHk+
rL1D9rp/ryNnqNoWbsJ6Ou2yAXm8/jLKYyH6WbzX2537hrYk+R16h3Guz5j8
LEf2Pii+1u2OIwlbloh+liD2rcI2DRrP0omf5XhjScj1or9vSvhbLH6Wo20h
F43pE8D+lqB+Fty2CSP+B+8nWnf4Gc72ViXv5nlyVhS5QNztWystSP0jE/kA
Z/fcQB379oeofhZZPEsEP4unz9Djnd7fJclhpLoGOskXTRAEQRAEQRDEp4id
O8RY992z9wwtOvKkBoo3yS24zhlZNvfdIFtqYs0dy696Po4v0c60XavC2eW1
u/wd+1nwXh1WbskZwOHL0nk8i5mb1YV0r0X3/Szt2oroM8htQsPMWbIn33MW
yc8i5KAx8gDXTb/dvvw7PL8P5cM16mZr3M+O12NpMmOO83tQTiP/GKkm1NaK
kHDY9kM59dnBN1XHdr7flCTuw68+ncTvZ8mG9LNI41kkfhY7nmUKSjtlKG9s
w5bs2jlw3kwQBEEQBEEQBOENWuNP75zadpckb0Hw/CktKM9J9t742Gwqn4l9
VmzGFV/ie9ZLCD8LPnelb1ZmU0YpS9T8LHX7zFlFjgi8t8X2xXTfz2Lb5pNQ
cviiVLZ0FB+AcLZ40WHvqr7D5/vs+JVJ2KrvW7lqg+QEbh+VIWHFt0xaOU7C
5BU63inY8S0eZ2vfVB1jv2FWEmMWa36W0H6Wa1g3/WCqvD2sfENmfQ4XAvq+
2HOt/LnufkwQBEEQBEEQBNEZTWttt3csByPDaj+D3Ha5huOazEa1fRKW3YRi
NHrGN8WfX1aRDSue22LGNLjjOrgdNim5R70OrrS/cPyA0v6NUhb8zpRwDpF3
ma6hhPLeuO1m8VxaO/Ymup/lrF6FrbVNqNW98v627LN4kF1r0ijNS8vcmQ9A
ck7TkeIcnEtZzhoMOksL+Uy2nEW6PITGiTvvqp031n/vTbt+IJWjqnmOlDJG
4+bquF1DeWhc546B1i96POsTE7efRfQDuc8F4r5Re7/iUM72xfn5vvBz+6U+
VQnNA61/VGueB3ITBEEQBEEQBEFAo+jONyI720NmuxwbZ5/0jC5AtW7bH40N
26ayz7U5EPaBZNa4XdSC48oqOkPZI56Fn1Vr+ADaJ/uQHVXdg9arB3NCXI7c
/kJ5atg1UdqHs6M6NOridXYVpSyOs0/yun+GP9/Mh6q0CeurQpssbvDcwtfQ
vqzD8jg6I1ewjyP6WY7Ed5VkZ7sYVNF509kNw8d2derKW9OxDwCdT9M/u218
Swtqa0tCzhPnuULWecrJTdd7tPLPqvcA6RxC2pCHdLFi+0qu6pBN2G3sGc9y
ZJyDM5CG0o7th2zXt+34C494lpuqY6fs946vwPEVb/sLn3qWEb+fhcd1YZ2R
mNtm/eZaOzO+ms+gunCcpe4bYyTqov70qp2fmNdzbh56B3F+JvH3sj2FBEEQ
BEEQBEEQFs2ymFNFYf+5bZeWEFOhXQOT0CvkDp2ErSPbZnfZuNJL3CNQTge7
R/Rt4HtmrHgIaY4K57kwimuC2YZRyuL0l1g2o7FXxXMvU87tAxOvFJQFk9XH
z6KI98Dn+6rsdJMzx29VVxgfAD4LyKqDZtmdB1ZyiXY59oWNC2f9WuBcx1+4
z/0VYjxM/8PgpPDfPciHI43FkchUr+OsJFmOohuvY+1dhUDvivNc5+B+FtnZ
T+4ri/NtQ7C9XO29FVeO4h5H3mPrDKpLUUemPfoHQRAEQRAEQRCEsE/hC/ss
Fid4/4ttu7SgVlyAPsm5LPwc2/Wacw/KqRiLYb5zrgLtk23Dlplx5Ezg97j9
G/3Tq9CorRr3pMQ9Gw4byh17kJLs+/C6JmFd8xeFL4v2jvy86x5zb5a8Xm0a
O0Xol9Rv39gSNLzOUpHuSzmw8r4Ie8Ou9mEC+QG8/Cw8Xqiay7jK05PIQbW+
D+lB0/aV+wCykmc3ihlpHZyxb3fmVdZiRCoHsDU95f4Ora5x2XISnyGrIxSX
Iqvz9knFnfvWuIbSq4q9aI6yV1ZduW9NWcqU/PKr3lwda/furUpkbBKyaxUo
JeX17MbnXGdrD5LZlxDIzzKEzte27j3ahglZXQ7PwJZLx/j3KYujMqQTbn3E
r5HZVTi+NMtZF+J+XOUnCIIgCIIgCILoAu2TQ2jUDrTr+MQrxwe3mw6gtrfP
fmvvn/F9ftN8fl3fO+DH5SF7B/t9/dT/tyEJXRbOVVP7vbYHqRl238G1vpfp
6BSO+f2X3bDzWlYsiLefxUD7HqO9Q39PuHIdG+9pHAWLI9Dl68A+o0fg1NoX
9NnoqveDri5YfRvvrh9CO6CsCmW5PLXqibefPCeL6v03Vceca+1b9T5zGK6c
N4TW71jZjllfOG5665hQzw3SRrwt6vUbaAeCIAiCIAiCIAjiIdAomWfxKM52
eSDYZw4F9CcRBEEQBEEQBEEQBEEEpmXtwdH3jbn3bdx7Lk/h7LIFxzsrds4X
ydnlBEEQBEEQBEEQBEEQnbKV1H0PE8UH6GNxnJHtlcOEIAiCIAiCIAiCIAii
c1rQ7krOl7uA4wyiL6ZgeSf+nD0EQRAEQRAEQRAEQRCfBJdNOLu8gLMTimEh
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCILolPPTD3D+McAPP57Dh9PzrpfnrvHx/BROA1XQ3eT85AjOW44/Xv8X
3m79AGsbZfjpxPmPBBEnLfi/xn/g7vWgj3D64TRCuaLed0do/Rc+nPzX9efz
f/8I36+8gb+//df9/TYiEvd9jFOVv777Bl69eg279dNbKBVB3HM+0Tm/xXkd
3rx+Ba/f7MLp/VWP9x7S40Q3+fjxo3B1/LzT97C7W0fz6HNIfv45PN/116Xn
u0n4/PMkWL/8eMqe9fD1z27yc/j8+W78D77+n/LvH1uyf+N/D+sT+Rm++t0C
/OEHbFf9B/78+wX4xe/0q/cv/wj5zC5zrX+ned0txLLd3XLeIc7/ocnZ3+/a
dO18l+mzz+FN2HJFvS8IKp2gki8ue6p7FJy/LbH2KAEu/vkPq5Y+4Nfbu9ZW
RFfp2hjngWo6E2WeIyv/buqJ1k/1Kwl3TaTjnNfFjTjvvO3SBMc9vyVknL7f
DWSzuub8DxWZLcPG+SeW/ghmIxHxc9f1OHG/Od99geTLvh49fQ6v30eRtnN4
8ehzh42g/y0ZxM/yLsXuTVlyvpt6/LD0z/kHeF//4PrzO/adj5Jxz0F/hq9/
vwC/Wqo5/v4/WHux4LKDtOK95bbQt1ALZdL/DLPMbvrqre1n+bi3ptlSpX8b
9tl1hOJ3i+sa/BbZe+b1qz+twtt//xztmedHUKsdxVC4FixPu8tmXqIvi7Bo
/Qi//N3i3bPdP+7C488fg5f6+lB/Dx+c/x7gvkjF0fol69/O/th4o8nXVy75
+i/8+XcyHeLN+T+5HllF+oXpogkmw396o/9nSL9Nt/mp8O3d8wXfW86h/r7u
Glu6M8adQ/bx5/Ak+971L6+esXnII/ec+XyXzzGewvuQhrKr/B/faTZS4mU9
fLG7zntISOZ1TxIpZvtGVSrydg3PRygMu8vGr+HneajfaQeGbH7Lp3V1qLuU
+CeMNn4Fs1mdc/6HisyWeZ/l9v0zuIsa5CaQzn1umjutx4mHgK7jnkP9/BxO
T0/Z9QHe776C50/0seSl2yXgS/11Fp4lC2Dfeg6piH6Wj/XX8PxZEnYfSCjX
+e5z6diz25U5KMD33J8yven4a93yM/y9Kf7Lj39dhF9MfBdyreZnzRbDfhbd
zipCBPHpPufcJl+Atdp/4PzkP/Dh3/+Ctytr8GujTv68Fd5fcv72b1K/VXj0
uvxypabtxfrQEC/X3ixC5976WfRYv2fOH3TJzwInuj9l+d+iIP20UtTjzuYd
vgZWr79if/96L5zgyfws3Bf725U4fJHx8za7yL79x9suxsNAEYvVrTHuNfen
DL90/LVu+Bkeucrx7gWzd57kQ8cjuMpv2JKv7uIgd87L9ghe1U/hnM3rPtTr
sPsqC08Nf0bqTYRCxxZjp88Hn716D+d8L5ZWvvfwOv8cHvHyPXlxp21u9/yW
ycbzm4/Vutucw+sXzyGZ96+TT8XPIrNlNN9L4tWtlel2Ucx9bpq7rMeJB4Fa
x32A50z2Hr+IY+wI7mf5+NB17nv2fY9euOZ43ZqDftDsJ4e/498bdnzE1n/Q
P7Tgm4kF+OVf90O+xe1ngT1uZ61FL3g3MW1yl+n4H/haiyX5Nry9bnxv50tx
Zl1GjKv5VLmrfhbw95fw9dHUO4fkdMvPwuzPL13+jv9ByYqhKsH/4WIY8S8/
hvTvuf0s/9P8LH/+5910FJKfJU7e6bLr+GvXxrhXz7Q1YWGMqxfsWPw3eJHm
I+Sf8HnNu9DvcZdf/87wT7oBTP3hGpBOIavFkjyJoFvk7Roe9Xzw47us5hu7
bdMrLO9fMNlI3UlJuPM8+Dm/B5+63EjnPjfOHdbjxINA7WfRfY2PUvaoWn+V
gpQrtuojvE49g9Qr++8f66/gefKVkJ9FOq6e1yGfTOhrGOx6+rwAb14+h88f
ofJ8rEPqWUqIJd3NF4Dvjn1XSMITI4bz8XAKZNuc3r96AU8fGzGzw88gmUzC
8+fP4Bkrn0qvn9ffQDJh7Nd79BiepV7CB6cZVH8JL17XtTWe5LD929RLd/yy
WU9vskkYfspjBx9D4vlzeJZ4Bi+NGF4+h+M+rdP3L2H4ySN979bjYXgp+Sit
fOY72bOe53fV9n1jU7Ofvj+x/8Rj5H8x/R18z2yLX7z4wf6H63/Bb7gtJNj4
P8PfCyVtTZs/55d/LMLyW+eatOhn+WlrDX77R/ZsZvf+9i9/g9/+aVXbh/Sx
tglfb9ThfG/Tih35Zu9nPV/uinmP7uf484q4T4HfO8vu/dgowx+M3/VOFGFt
Ty/rjyurVhl/85cNwVZ04WWTG+v3vy78C9WLV/la8PelEvwGfe+XfypCqaaX
i+f9/Hq+qMXP6HuT1qDmOaGQ+KxcZazB7F/LcH6+D18ZZfpNoXZj9fjT1nfw
mwnDLv/9t/DND3bf/8Da3vlOOPkH/OFPf4PvnTEUG2vwZfaNLbvn/4JvUF39
mu/jaoj3KGVI1qbXdfj6RZGV518g51xb4008fWz03ydMj4n9N1w/P4c3eaST
nibh9W5B6S/R17cS2lrK4+GErpdShl7S7CRmC51+gFcpU0c+guGUTG853/sc
3iiD7w2fyl/KqJ5qWl1+88MbPc4L64piQfMfCu8M0E6Cn4W3w1/03/9yugh/
sNrkf/C2sAE/nf8HSn/5VpdFppf4Pf79xri39TO8Xfqb9bvfMnnSftbchz//
6VtDRgtMZ/0HvAjkZ2Hj1Rrr67828k7p/Ubsp2b/guaP8NW08X4ml64+wR+3
9wa+NPvqRAH+MF+CP2B9+e837G9vXLpd7zc/CH8PqmdqPG7PKP+vWFt8pb2z
CF/Ov7Ha+LxWFsr+h8I/AvuPtbX+xFN9PH/2XJNvc27QtTHuw0utb7xG7pR6
npVhOM/mJqxvP3uNSwjDPJ7D0SHrb/KQePLYKNNTSBXc78N+lo+sfM/Rd1pj
+cf38OIFq8vzd5A09MpwnuuK4Lrm4wf2bON3j54k4JVRP+9epqw+PszmSp4h
vl5+2o96ToineTyX8y6fV7vyfvGKzW2ePn7kKrMcr3W391rZcPv4yQKfb75g
ZTn/sAvP0e+eZd19x60rn0Fh172Qrc8bbRnNvnpnPUuc39Yhy/S2Nsdkv+M6
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
LF/+jK3RZS0HX/rMOAuvN0xrMKh39ny9kq9yW5zlJfjIcp+0PXgXfawG0Oet
8l2Z2/LFl+I8iqzvI3IovvO5ZR0nzq78g0c+C6/9yWuE/E7UFvrEUVNCnn3P
tHPsuv25Js6ysxu05XnY2BeU7/nFWfiZiNWTeGazLP72A/ghXXv/veq3s/X4
3/+I3XGu3Lt11zj5xll89eZl4yzsfA3Nl9LO6lG9vynOIvR1/kdjLmo9K64v
+p1fn4taULwNfzvD35u3+a/8biTZ3qf/7p0HtoS74iw3z3H8O3FZMp9FUQm2
XxTAvsqta8F5Lr5CL81Tn83Vt8ZZ7rM1zxBn6Y9szSPPcPjTZ7bJfawQ9FKa
1M+5Js5yqY13yUPylQW3D8u/GR/7qc2t9S4Qfg7JVRN1aCu23+jeS3fHWbza
W1mr8Roa1O/me/1m7dHZl714caHPFmfx5REfH55DVu3M+I+iL1f4/EwnZ3Lg
A32M1Ab4OibUx3dlbua8TIy7as778FnjLDfbo6Xf74mzXHoEVRqqNqCrmO2o
BpFHGNppt75v833Eb2suzUvEWR6huwgEBb9vyB5nkTUWpWlmNkA/Y9SfmA27
rg4ut/lBYp5/Y/saK3Vw/eIs5LknRy6/C8L/MPVLnNeb2b9b4yy89pZ5TsvH
B6W8pjbolnvDZH1I6rerJuwPrFYqv2PiRwpd7PwHrRegLau4P05rmH49fUPP
ffGNs0jfXl9LfPZtnxz6O+Ms+nLx61/B331T7bMvfTznf1675A/iHJZWI2T4
TNyd/dg4y0vw8Xei7sl3frm2r83r7/7p33+frL2/e+GzyDn5y3/6rkbDb1jc
Tpc/Ci63372Mx+K5oXn9XVHn5q/tdSy4jxgbPpRuf3z1nO0PW85V8/syluvg
blktuFviLACndOOMDS/iq59Pd1bp9VHGWQxAHet7xsk3zuKrNy8bZ/lU5P+o
+D2X8/31cZZ5nhetp2ID12ndTomaw9+83Ifmxy8ea/8befbH1uaX/8lk4i+s
sXV/jOw+EnPv+rnnuDqT967rejiwmq78Tgh1HSDvLSn0tesg7z6+0HFrnOU+
W3Pn2kFX1LGFVNw5MtWa86TPNq61tUYE57f7LhdHn2o+FvmVsuCy0Z2oTS6P
NZxobZ5Zvy/t8rtLZPxiHEymzteQZnuj6K9aE8O3vbW1Go+DbaEsYuUM0T28
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
IBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAI
BAKBQCAQHyDGoYd+GF+bjGfGCH3Xw+v28i3QgFAwDtD1wyuT8DHo30vDX9eG
voP3wv63RuvQ1nCsKjjV7VV27a31g+HBtgD12g9tfYKqOkLd9q9NCuKF4KX/
QwunYwXHUw09qhHiBfHebbddvwaoT0eojidoUaEQHwvGHur69eeQOn2Cp6R+
XSKeG0MNT09PcHrNJbUHDWN/JjJx3ZrldoxwJvJ3vc299b23h6FOyZikMA3J
K+jkR6F/Lw1vfR8gJc8l9evG2vzwtmgd6ozxmP8F4E/W4/oxjnZFnf/en2uv
NbxhC+4E6vU66iycydDjeI94y/DQf2K/w0ku3o7NQ3wceA3b7ZjKnHOcGzb9
6iHbXPQpwHkJ8QbRtWfoHmzq62zzJuaQhtARpNfr3XPw5Nkw1rB52lyxFngN
GgbIg6cXiwdN66S5zR06OLfd9e+9UwwN7Us2+fc366QH31y4Vf8+BgxdC+0t
RsZb37nOpe/Cj39LtA6wD4kNiKqb3r2mH+c9WYuHhRF77qqY6OrGtJVkjRYQ
Hd6fRyEH+hp+gPbcGmt63Rbci3c5r95hx67G2LC1dHRoX6a9F4ddzhDr+s90
/imGD1UyEG8EDnv3PD4ZmTM3TxDuz8a/VDGZowIzzsx97S2crwq1mPo1nvfM
r/1gTS3iAwCPD8YP9m/H9ghJnEL9yumy9U025Xl48mx4F3EWgPa4hzgt4UU8
3bGFfRJDMRPAoU7W9xUt771X6GurW3XSi28O3KZ/Hwfq5MZ43hVxluzNxC7W
8JZo5b5cVN1iqa7rR3ek8ZTIWHNVEY9Jp5qyDk0+800HOOYJpMU8lmzPdXp0
nOU9zqv32LGrIWJgN4nQe8BbyKF9k1jXf7bfcVMMF4Hwh8vePZdPdqTxlN1B
+7WFSOSE6raiyTfWPYZlmPrF57b4ZdYVCMSNoD5l1rz/cxI23Bq7fV88eR9x
llfHmdjjIP9oasiMj1pb3cE3jLO4cSZ+RpA117/4QcZZxjeUz3KP/b+S513F
1qvqelz6pjQH+qQ8zvbCN/sFnW64bOhUvZF8lledV1/U/vNxuEG73wnscoZY
t2M3230E4ho47N1z+WQ8B1OLd7Tl5Xzcab5nMEIRPsEmv1YPLPOr6CcC8aoY
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
yYA1RtcpMRn/OAvvm73fKuz2yZQpCtWH1mRUyEpuqY/B8iKuOLNt0ORp3/le
mln3FdbqGlwVZyG252jPcaNthJYz4aOSh2TR7WeMs/A1nNzvn/mmIMZF1Bbk
eQGJku+m65dJj/zdZsOW66zcO68OMj7eqPJ39by64sN42UlYsGNkfVo5zpBq
DV3pFy3b2rvmFQtofjK1RfM8I3stBm0vQayB5jkYLjla/vee8VvRL7E+yRQb
tG67fOaXZV33gyGjz23HwD4mbB6LjuZvXnOb+KZe82Ww85qtswN3raZ3K5dr
dqLhuYdHSyoPz7XdTfXFveMslnGT+RDOGtg+8/Daus0DLn/Xh/e+NlWHrB/G
p7Kc8VR4RoynO+Gn1tQPnPJipJ9ny5PhOTIXP9/tn88p8q2Na5PNR8s/4uPA
+ZCAzIOkOVmKS2HzfRZ9BC132fWsK85itV1qPgvVq91B3XcrF/JGuF7Y7xGw
2ZSha5RaFvIsgU+cpWuOl7Od8m8lzrL6jtOH1+IsgeNOXo87lW28t68J7es/
vz5s4dQcpnOqug/ijLMs9hsmH7ZUPnjWchTX+3xvnMXgk5WnjjiL1qh1faPJ
nVznhHEMsfLHY/+XOItZy91Kt4OWtbG18U3mnkaJRhs7t79xxlnkWE4+SH+0
jO0yj+dYqunGYgHBRX/u0QF3HVE1JvOIOIuffbLru+pD63GWRpyPonVH1HHj
+3nudfMqTZ72nfml1juWVuITV8Q5Doms17CF/FDP4hLyTEBo9D+iOctLsvKM
cRYZWymoDtC9uZnt5P7ujvmLjeWekmvjLH4+9/wd/3mV5gsci8vZ9ekMhRbn
u2VeXfJhvOwkOOw/8bMTcW4p2MZw0PMdlP49wC+aN33PvCKebY6z+iDiL/RY
z+oySv2ruWyd6NkM4+6QNXrkevWyvulPieoLeNouv/llSdcdWJPR57ZjYB8T
398k1LnNpY8O32PFD3rPcrlsJxZqgSvnWPzjLNb1xVrNcc95eHHd5oFr4yzz
PvvaVKNrZ34fHp/KNspYsdgpPQ9L1nOZcp/fss6o52qviLNYY4nrsnm//CM+
WgwtHPJk8pOnnPOlOIs1fVaLZz48znLJxcuPDXRdC1XGz5TuHWf3mS/qiM/r
NqWthO3a8HogLI+P5dDoa2PdHxyhEnM6P497Bv5qumBTPd/xjLM4bdGzxll8
+9BM5/aDkNfu0veNb46z0LVsyM8YH5sWuraBbMvPyrjKObxEnMXOU784i9sv
MuMstCZNsS9gr/2x2osLurrOb7+xdcdZtlCUc5r2sC/If4tq8rPNfvL5Su4f
cL/cddeqp8/qyAlh/XiNOIvFFvnGWfzt0y1xFi5fYbqHolBlqSBjdzBqzl1B
k6d9d4/Xo+Is4ve2hjzZTn5qwQyFiLPQOmKFKrdFQf4OtZr79FJxFkFXdGyh
LUJ1HTHljw/snNlOy1t71jjLFfMqEZLZ2fcjnNseXPJ387zq8GG87CQs2/+2
PkCyFb53EC/sl9/pF83fuGdeISuZRMQKaK22+szPUdL98Pm4+K5n5f41/4nv
dSW2ouxOeqYPKWPM1slG/Q7fOMv6/MKatOq6BT4y+tx2DK6Ms3jNbS8TZ3kP
cslfctkJtz1T57MHxFkW8oWumodd6zYPPCLOsmZTXX2ruh6KjTpfTTkmAz+r
c9lbW9YZVXauyWfRx8BPNu+TfwSCYoAqDS+yMVh8H/FbYasTKnL5jDzQB8ZZ
zns5Z8q/Dav/7OwRs8W2HE4tv3nk+h3qc5d+7sbCE3n2ONPvIVmIXXu/c0Wc
ZWfb+Pc9N3TDGvOaPvBacfzMZS/qasxzJ++JsxThkyoTwc5Rx9bd53cXZ1mQ
60uD/B27WCzz23dsnfn2C/tKS/2UZ1p7evYrWKq7xHm8Ldwc4HskhfU8IcvB
neh+rjgL38eORTIyfy4x9lXP4qz0YpzF1z4trFVY7v0sH1fps5AV+9lqB3xp
umJ9Ypcbn3NDZs433z9bsH3Ep0tDmasic5fXGOCKs/i0f9td2nVK9CQpId/q
tQe4nETFgcmZPic/e5zFZ14V9Q6fwlyTe21MHzSv6j6Ml50EP/s/kLV46Mrt
eoRfNH/ljnmF+0gh6OVM9fNcvuvZ6fwjFXCxJ710E9XS+oKf/6E2iO/b7+c1
hT1tl+/8ohI113UdnjL63HYMrouz+M1tbyfO8tpyqX/PtBM76/s8rnuJs9Ax
NM8HNuoZOEc/ZDvu0oE3zMP6us0Dd8VZPG2qjU76nbgsmd+g9JGtEQLYV7nG
H+nnWUeGxa8vftLtcRZf2cQ4C+J6jGCWdZPzHxUO7kdnjWrbWK1ri43ndSO3
l9rcD4+zOGp9L0GcsU0MuziwenqXu4TstWR4XW21Xp/OE1lzTV8/NXu9HiRc
/45nvIHX4DPP65r0G5TcvMa8rg/qPUUsByW81OK4Oc4y8DPZtrMxbph9lvUm
1+rgvpU4C/Qn9v93zho0rFds/RUk5tnWNTnzHVsb3+Q9HYXrXo7Ffja89li5
t9d2muFIz/E6fKNFOkRNuaVzvezXO+MsnRZP5DzV97xFnUzlfOEobNMs58vX
PgldM/S9qxgtF/9Q73PP7bpes3wJ3jbTz77zui6WM/Jr9SPlGr3R4wxbUM9U
DWbfpH9O/uGUbhblydkX3/ZvjLPIWhPTvUdz8qd9hx3oYq7r1yjreurqcEOc
xXteFX2ODCHRx/TWeXXFh/Gyk3Y7Ng7mOLF899C2vn2AXzTDPfNKbakLYY7L
NetZEQsOMyiU2gl2uOSM/RuLnW2hLGIw69Q6+KLZLq/5ZUXXVfjK6DPbMfCP
s/jPbW8nzvK6crlmJ3itZXM9L+qDzGq50TiLXu+ml/WAVuIssh23PfKZh9fW
betw+btevPe0qTbIuwWeAn2twuWA/ZtmQ0/SzzNEnfP8Equ9Pc7iK5sYZ0Fc
C16zO2BncJjejr2Ii8r7VWV91RJ6Mm+155bJl6wrvYlLaIkvMgw9nPb8bJ5S
w9nl8xu/O2otWOIsbH2+TeHUnOF8PkPTNOS/LXTOewAu9/7uT4R+Qm/f1tO5
68teLPfzgqgQfeqgysU9eZqvrPOkPxcg8/bo92m9glzeN+2ozzL6vuPgoZ47
PYraFsFuD23Px6QuYgv9OhxnCx01QNm5jimf5Zo+aPZGuzPAHmdZ77fMldmm
NNePyASRByYTbWuZi9x9lnXQyqYnatBC21mjY473PO2uXGevrImtc51lv7cR
ayx6P0NPOzvS86U5bMJ0msPkPejR/kSeIWNE+lbEm1U58x1bO9/kWS56Bw8f
h5Ho05HoUziL+bC5zeIb1amgL7Tdz2jy5GmTQN3SDJgR2rpk8rATd7IodDDd
P/J7BbS7Gm/VAc4DcR/kLoeG0EHbaSruAygxrkHmBB/4+YeZHdLtBM+Np/Xr
R0JzO+XTrtqnqfZ9BFXD+9w1Fb9vNkhnvo25LyfvatzEBbMh1HZ25wqizRZs
5T2vsple9v0s7rOM4CT42NYFyLte3euTgd05R+8BaQhjx6GFUtZmmOjgtbHp
t4/njtfi6xu+xx1e7tPkfIpZ+/Q3LvchpM74lG/7Np5L39L0IdXunURuuJkL
xde0T9a1v1HnSdbFLhsYyVx/bjkd7jhL4I6zeM+ro+hjBHU3CN3Ip1z3+Rr2
lnl13Yfxs5OmHfu/4q5EotNiLujPB34HniPHztsvGh4cZ9HmlXPB7+Hgtpfr
v7xreZ57Zq9z7IglDKdJD533q0s45IyD3w/J6x5olTSn88W7Vdu1PL946Lra
sL+MPqsdc9fBtY2T39y2VO/NvsfzsDjLG5JLLzsh7smOy1r4SmfYR9zezPPU
eH3sEA7EVlBbUpeyVopZB9dmP+V9z9QeDeN8vuB5HGvz8GpfRiF/m9RZ69Xl
7/ry3semWtutxZ3SFr+PxX5s9lXOy8LPo7J+Pu25firxKItPY/HhrPksnrJ5
l7+P+DhB9LtI9HM4xG+anQGczt+Lf5My0532k32Tf0lp2vLQtj9o/E791MDM
ubXMBcdYOyMy+9vtXT5hR+zlRnk2TAq23tzNzh10p1yt5Uj97Zr6VmqOnI0n
p2l9wf8CYiNr8lzguAeJwusdFw+pf63lynS1PiYhFAf629IerZ33I72b0RIj
ovyfrzHv6QO/h5HHtZlNuqnfPHfUJRP6nb/uPreQbmb9sK4vzPcMujnxLA/Z
8KfYvtxGWxObfaQ236yByvupf7Pex0afo6xSY/XC15/+yHx1KKLVMfKTaRff
OqJfWu1K0vesurQg52ojP607aHcQuzFS31KrW7iJ97O6cKbuP4VkvlYWrPfp
gIyzbHdqO9u0Mt5tD4nKU7KubE4ZBFqe+TjVC+B/dA73sk9sHENIU3XsnrYZ
qFtd0k9Xc8G62Xpg4meUg2ubzM9m+tt36GtjPJOihDiwvD/vTXtQ6aZ1NM5H
4p/N6sbSOMBWrXFH41GKLHQ1xBu1fVp7ppoYwNdkhk/l0b7Jc3mH+1IcnDGF
7XFu0pPl37hPHep3yALfO1TP1V3qnfC/TOyb2GwYNbU70ubSmX+/eZUIyeSz
SjtQ1DWxG+qY3jSvevgwjBerdtK0Y3RtvNVkke5jLK0jvPwiFp9cHvO75hVC
4RSPEn9xcSJrMXVcTPlgLTvPtlQx/abPeQG7nEm0Is/PMO8iPhPstPE0bBfv
49L84qXryud8ZPT57Vhrmfvt48R5sD63Od5nNJsyyHIwl+4beq9y6WUnRtNX
IjwqdYaOl/rY8jtF3UAebqBU4jGucRuJXTPbofHqiVNL8/BaX0RO8PIa3+63
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
WVfr/GzYPqAei+Mo6b7jtlD2eVf1xJN233wWJV4pfsstNLD8KCZPKzLrq8cL
NNriCC5aY2fBWk5nmJu6Mi7dea3L/xX9sdJpo6xx1Tvq2DjKteR1/FnXFYq1
OAvPAbHYOmdfcsXu6HSu1a0YxFpvsqEWW+14k8e/rqxjZsx9Dt6Nuh4zvkQW
HVyus3LrexxmH9fml+nra/Zs1saj7I7M01quIS3iLLQ9Mn/SsQ6zy56Gtw1y
xUrHZuXckKeuXBFn8Z2Trfks85iTF/9MeOuQruvec9OCP/GitX0QCAQCgfDD
Wj5LruSz8N+a4+yMt/gLPeIsQ9ew2gLB0zxmspZbG8Dh3LG7hppDouQvS8i8
7IieAY5nf+wM+UaJs9jm4nHusyzWcuS5BPIb54O8lylgZ1H09Z5/nMXBf7YH
eaGFr4vsz5Zb1d870TNDu4Ptq1baaM0Xmce8jXOo2+VFmrPm3qjuLb2VOMtS
zcPDbiGWuCAPbG9NjIefDNrpXdYnHTwutFOSI0Y2/sp4avxcqpHI1nyTXHnq
iSftfnEWjT9sjUL96wiSWOUnz/ES66klmb1Cj6+OIyi0rtW7lOcVQ6MvEdVZ
Vz6f/t0r+uNbj9Y9NiKPMa0Xn/Piz/SsmpexFme5tk4up9Ees7J+a+zgWGRT
TY3p/IzCQ3ucpWuOl1pa8m8lzrI69znX05Z4qfUutWUbd+17a310x1mWbUJb
5RAR2U+ShOvDrO7No+yOX51XUQ/mVIvzv1qMzssG8W9Y7yde00FfXbk2zuIx
J/vFWTzq5N6qQ1foujo3uf2Jl62hjEAgEAiEH5bnVO6/X/b6W57D+yTO/55b
ts9A93eU3AhLnKWtRExiw8+es/xTtjd/zZ4P8f/1HHmQa9wtFGUB+73828O+
IP8tKrFPcmWcxZqbzu8pVL4xtHDIk8l/nufMe8dZXGstjT/LNYuzmd/O1+LJ
wsWJLn+lPuSixi7xJaPC6Wt9SHEWVX71/lwTZ1mTQR0++uRol/qzxwa6roUq
42fb940mV3qcxZFjxupvXB1n8aP9tjgL15Mw3UNRzPlZQEF4elBqFztk9go9
dungVXEW5wEdmXeTQlmoslEU5O9g1nq0tnWNXXqOOMut/JmevSHO4pETOVFc
u+2o0VZbzWp8HOHM4nOa3FvXiCNUCY+n8honZ+DTWLoo415zn2ecxc2XFRvn
/Z5fH+1xlnWbQGvoJmnK6nanaQJZUTvouOBau7M4p876vd/Iejghtx/hXpPl
NRu0wPP3HmdZ49/NOmT2yX9uwjgLAoFAIN4XltZB/Uk9p39mdfRCOGnLdzUv
27LOHfn56VCfS31za+f/Ls/ylupZ/6XcDUmXay7uWA53otRdKax3EPHzOfZc
8gGqNFR8H8MnGCxxFhYf2YHt1Ar3bf3iLFOuPz2AdM7Zmn/pFoy1/eK24nVn
F/122/ssB+dyDortoxrndUat7s/LxFnsZ4P4GtV5zm3BH2b53aJvfjKowk+f
XO/N9xA3kB+X75Rg9M3yr+dgefATX/30xJf2m+IsQk9sZ0CWoMjsFXrMaUxA
j0qeRT2gxTjCUjv8AcbP3bWdcZwb8rJLd8dZeHw9Fkp8F38E5rpC4RNnoefg
fMHtqO1cjC6TI6vf9BTmWn+08zMWW83vuKO/aW8uybjv3HdFnMVuZ5bP//i+
59tH2zr/VnsmvvgwuyPn1OWb3sSeDfkWE/Oen62Zzv952SCh26WlpVt8GwFF
V0ROr36ueDxfEWfR5uTVOMsq/27XIVvf/ecmjLMgEAgE4n3B5WvTuzxZLUXt
bOxTpK+ZB1Yj77JOHcX/n50TttaMBVHT/npfpE43Ss51f+Lrq+Ls3FQGua9s
zsWi5tu0BhD3CFnm/ToLefyCF82HwWiO5xrvz65cDu5zZ/M7IXpe986MAYiz
3zM61tasbN0TZlDQunfWWiTzvmjrYbMzvK6E424PGj8JLHnovCbo5aw1kxm9
BkR/Yny4ug4uqx25VgfXIn9Az1EFMK91M7Vb87Poe5fsCD/XEBtx5l3Wy/CT
QRV++qTDvBvC+pTGTyd9oq7jRf5cufCqnvjSflOchXjvTAfX6rguyqyvHksZ
0HNFRH3ZzVocgd/JtkTridkreyzVCaMt//7cG2fpRG3Py5LzGv6s6wqneTnO
ImvxeuuTiL+bd3vpMinrJ+uTkV4P1rTVnA+xEW9q9gv13H3nPs84C6/rYqnn
tVIH1/c93z6Osuapdq/w9fbs8tzD7I6YU213mevtxTOGyBqrnAQ/G8RrU5u1
RW71bQxdkbEKrU5MnW1BP3PtOyevxVnW+Xe7Dtn67j83YZwFgUAgEO8L0q+q
2xZa8tfQexzl3bj0bov5flXB72Yp6haGcYCuqab7Hef7dbKGYUPWQT35Zjfw
+Zbm9LfDQNZHHVS5bGOtPovFFxkb/r0pliD3pjaCNmD3Eh1JG2Eye0bkCedV
Az2lo2sg2/L35v6nrHO/iUtBbw+nfQTzu374HT8BO7vBlntjL/JZttN9II3h
E8i6eSX0hH/tuRVnTnh+QlzWnK7+DPuInz2f71+vrllFPT+lFp0Dc9rkHuYu
P5KxYp2Bs8gNcMUf5NmVKK8uYyrOr8zXOjKOkR4a8tUR2rqcaFyPs5B1wcyB
lTWDy6Yn7Cby2tn7aMofI4TXVN4krI7HQGg+n/b8vNeSLy3vbgkiqJqWvUfl
nn0rSNX7PVdlUIWvPqkQ7WxTODVnOJ/P0DQN+W8rxm7Oq8RNH+lH3x75XVfK
/eHyOS7bLj3xpd2kw+SvbW0u7xXdxMRm9PQfR+jOFUSbLZMJH5n10WPxoDgj
cOBnJNoaEnmmwCOOIGWc0UovPCL8qEseJyjn9zEHMZyI7LF7twlP810IqevO
78G0fd79ccU79Cbk3ay7HBqhE03F+xLMZfYK/vjpilgvz2PBBs38Dq1JXmHW
rjXPZeQ1M8k39icp3xc6Q20fgN3L0g2iz/l07vOyRjRtdX8uQJ4NHYRe5PJO
dWd9Fs+5zylb+pmks9CziMkSpaOti8mmuuv2+r03+vZRnAmJSmLXydx3brsb
7dnU04faHXn/L73PZxjJzDO0UCabWZ6GbW0uYzoVf2LFBjE2iBrUwW7PnqE6
WRexOb46xFkeSs/avML0IEyh6ef9ML/vPSdb5gZ9D2qZf7fr0DDJzlzWfecm
m09lGUvCWyYTO3uODAKBQCAQLwXpV6n17raQFkdjT4vuqU4+l/iLixNU6QZ2
xSXLdJzO7vI/Ov91p1ytAUjXHPWB+Br2XG/+Ife+LN9zVfd7i1ir20f+PavU
fXrat43yzFa7I1B8jazBNxpfknJ+BqiFItHPbxAfv57v2YawLdTeTWf1xfOc
/hFqsV6a10gstdxttp7bLu+vVXEArvz5OVTayLqwSLQajcRf27t944a8v4lS
2AVq/9NKb3mAw+QXiu8SPp7I+/N8a6NvIpam1rZsId1cvuPKRbfJH0N3Ij6y
2scw0e/51j9G145kPTzFHsXfNoOzITZrMmg+76NPOo6xpq+zv50Ys1GsEdTa
lx3sI3UsnsJEuweU6EkYQJTq8qDriactsNKh89ee69HN1oHybxPlgu9+Mruq
xwLtIVGeCcjaoDllZP00O2uxQGtL7JveTrw/XWS3qyHWZI/W66hMIRKg63Nz
nebVnwU655Bxlu1OlYltWhkxA3/++OlKI86+TfkLNprHlsiYJq8bGqty8cyU
7zApiE5q+kTswE7hIV3f1cS2BEpc22arT7nat4CswWvyXLBgl73mPteY0bwR
PVemryHSao8mRQlxECycX/N/z6+Plzou/I/SeJs943is3aH0nXJzTqUxONle
tjH5JWOZMpdr2QbJZ3SdDKE40N8WdFDEqYKd5kNYdIXe46N8n8hPfT4S+6DO
875zsmmTbbxY4d8dOmSXdZ+5ye5TGXEiGe+98g4wBAKBQCDeAtg+F/1b3CwY
+J6U8tAwvfuMxLF2+15vQ9wbeeZ7333XQWc8o2OEoRc0Ox/hbQ1977934uLf
KHl2O38W785Zxcj6QffklsdWxSQPS8+Q7/b0u1d0bXTwQo7JClUW+dPovZbN
03srzHHKoOtxH33ikHkcpbE+H6BmeVGXc/WuPo6Drx6Oq8/50H4Tr+fvC/2y
f8NHZj30mDfEdfka4be1Q+lxNSHyUPq7bKBnf1bAa8fyc3gjoakjNnGx69fw
Z1VXRm/6R6lPnjzjtmadTtY+6c/yNGaRb187oH7o4XPfLbba+z3PPrLvDCoP
r7FndjzG7vBPyfl5ZZxXsGyD2BPsTkTvdlicJYRG0Eh1r18ekOn7XvSuzMne
NnmFfzfrkLO5x+jJeJf8IRAIBAKBuA4fwRlecba7XNrTRLxrzNfG5r+lsF7/
EYHg8L6/FYFAPBaeNZQQCAQCgUAg3j5cdXDfP1gNkvbEzzOvnCtCvG/Isx75
STuPVhcs3z5w1IJBIHRgnAWBeCVgnAWBQCAQCMQHA35/b+6sh/BecRZ1TJ5Y
rTxMZfnQMcIx0+sCyboaB1wzI7zB8p+CPcZlEYiXxlBDQM8NofIhEAgEAoH4
ADB+oAd2R3ofwPhh9g3hwNBBU9fQnBuomzN4HttHIGYYMcaCQLwScMpGIBAI
BAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKB
QCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQ
CAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQC
gUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAgEAgEAoFAIBAIBAKBQCAQCAQCgUAg
EAjES+P/A6jEBWQ=
    "], {{0, 500}, {1114, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
rvi8hKSEh8RuiVaJj5JcktaSKZJnJF9KEaUMpWKkqqWeSGOltaTDpCul+2Vg
GXWZEJkKmUeysKyGLFW2UvaxHEZOWy5SrlrumTyDvLF8gvwZ+bcKHAp2CtkK
rQrfFMUUvRUPKd5VXFFSVwpXqlF6oUxStlHOVm5XnlGRUQlQqVB5okpUtVDN
UL2iOq0mq0ZRq1IbVmdVt1ffrd6lvqyhqUHTOKfxSVNM00/zqOYzLTYtR619
Wj3aGG0T7QztDu0FHQ2dOJ2LOn/pyuuG6TboftST1KPo1eiN6Yvok/VP6I8a
CBn4GRw3GDUUNiQbVhu+MxI1CjSqNZowljYONW40/maiZEIzaTaZN9UxTTO9
aYYyszTba9ZnTjJ3My83f20hYhFsccZiylLdMtXyphXGytbqkNUza37rAOt6
6ykbTZs0m25bBlsX23Lbd3YydjS7dnvY3sa+yP6lg7hDpEPrFrDFekvRlleO
ko4xjledsE6OThVOH5yVnXc433VhdfF1aXCZczVxPeD6wk3KLd6ty53JfZt7
vfu8h5lHoceop6JnmucDLx4vqtcVb5y3u3et9+xW861Hto5vU9+Wu23IR9In
yefedp7t4duv+TL5kn0v+WH8PPwa/JbIW8jV5Fl/a/+j/lMBpgElAV8CjQIP
B36i6FMKKRNB+kGFQR+D9YOLgj+FGIYUh0xSTanl1OlQq9BjofNhW8JOh62G
e4Q3ReAj/CLaIkmRYZHdUQJRSVGPo2Wjc6NHY3RijsRM0WxptbFQrE/slTg2
5JjTGy8Vvyv+bYJBQkXCz0T3xEtJLEmRSb3JMsl5yRMpFimnUtGpAaldO4R3
ZO14m2acdiIdSvdP78oQzcjJGM+0zKzLos8Ky3qYrZRdmP1jp8fO9hz+nMyc
sV2Wu87kMubScp/t1t19bA96D3VPX55qXlneyt7AvffzlfKL85f2Bey7v195
f+n+1YKggr4DGgeqDmIPRh4cOmR4qK6QpTClcKzIvqjlsNDhvYd/HPE9cq9Y
rfhYCX1JfMloqV3plTKxsoNlS+Uh5U8rTCqajvIdzTs6XxlYOVBlVHXuGP+x
/GO/jlOPD5+wPNFSLVFdfBJ7MuHkhxr3mruntE7V1/LU5tcun448PVrnXNdd
r1lf38DXcOAMfCb+zKfGbY39Z83OXjknf+5EE0dT/nlwPv785wt+F4Yu2l7s
uqR16dxl8ctHm1mb97ZALcktU60hraNXvK48brNp62rXbW++qnD1dIdwR8U1
9msHrtNfz7m+eiPlxuzN6JuTncGdY12+XS9ued560u3U3Xfb9nbPHYs7t+4a
373Ro9/TcU/nXtt9rfutDzQetPSq9zY/VH/Y3KfR1/JI89GVfu3+9sd6j68P
GA50DpoN3nli/eTBU4enj4fchoafbXs2Ohw4/HEkfGT6ecLzxReZLzEv975i
flX8mu919RvpN02jGqPX3pq97X3n8u7FWMDYl/ex75fGcz4QPxRPCE7Uf1T5
2PHJ4lP/562fx79Ef1mczP3K8vXoN6lvl/8y+qt3ynNqfJo2vTqz7zv399M/
1H50zTrOvp6LmFuc3/uT+2fdgtbC3V8evyYWE5dwS6XL0svtK7YrL1cjVlej
yTTy+lEAhVxwUBAAM6cBIHoBwNoPAD3jRu61WVDQWsqxpktEzjB6yEmrCPRB
JMgTqoNhOAIeQ1FQM+h8jBJmFFuJC8Wb0UnQMxJgBhSRhVGWyZqZxnKC9IpN
gN2f4yIXmtuP5yafIH+ewLSQj/ADUR2xUxJskplSEzIOsk3yjAoBipeUFlV0
VWPVjql3a7zVXNBm0OHRldHT0jczcDD0NgoxTjDJNS02qzNvt7hv+dzqo/W8
LdqO2Z7PQXKLsqOOk4mztYuDq7Obm7uHh6enl5e3t/dW723ePt7bPX3d/ZzJ
9v4WAQaB6hSZIMFg1hBcyCL1W+jbsCfhd5FVeSaqMnp/TDKNHGscxx33Lb4z
oSQxKskmWTR5OeVZatOOPWl+6ZoZjMjauppVmB2yUz+HNefjruu5RbtD9ujl
ceQt56P3Gew/e0Dr4MVDy0WCh2WPKBQrlSiXqpaplatXqB/VqNSpsjhGOV56
Yvgke43xKZ/ayNMpdbn1hxoqzpxqbDrbdu5W08D5rxeFL0Vf7m+Rbg2/UtrW
0v7o6kTHynWOG8o33TsLuz52W92uuPPw7tueqfvYB+K9lg8D+2Ifhfe7PdYc
EBikH1x4Mvb04dCNZ+3DHSM3nne+uP6y6dWh1+FvTEa5R2fe9r9rG6t7XzF+
8MOuieSPEZ/8Ptt/UZ0kTX75eudbzV+5U6HTDjNq30V+SM/6zF3/qbRw+Neb
Je5lz5Wa1dW1eQIIgBc5JTojeU4j+ABJQlHQTZgXzoZnUNGon+g9GGHMbWwc
TgH3Hd9FV0mfRghk8CS6MHoy+TPHs+ST6lj72X5ySHL6cBVxP+Il8tnx7xPo
EyIKO4kcEu0XJ0iYSyZI1Uo/lvkhxywvpaCmqK2krayqIq0qoMasDqn/0BhH
dqse7Tadet1yvXz9VINQw61GDsYmJpqmCmZi5jwWzJZYy0WrKetxm2HbXrvr
9ucdqrcUOeY4xTqTXRxdDdxk3bk8MB7Tni+9erwvbT22Lc8ndruPr7mfHJmV
/NP/VUBnYA1lT1BYsH2IIpWF+j30aVhLeGlEcqRnlEY0KfpTzA1aUWxgnHo8
Jn4o4VRifJJ5MlvyWMrF1MwdDml8aZ/T2zP2Z4ZmOWebITNDZ5dGrtJu2T3i
eYJ7ufNJ+wj70fuXC+YOTB+cObRQhDvMdUSqWLPErNSxbGt5cAXtaFrl7qrC
Y0ePnz5xpXrg5MIp6dptp/PrmuufN6w0Cp81PxfStP9864Vvl9Qv72p+3Eq8
ot9GbS+7+qBj9br6jfCbNZ0vb7F0G92m3sm/29DTc+/TA2Kv6kPvvuxHjf3P
BrCDak98n+YM1TzrHv7wnP6F4kvXV8mvq97cHZ1/pzxGe39pfGZC7mPwp5Of
30zyfvX8dvSvqemE7/KzpHn6BfjXl6WrK9RN/9MDTiAHrJBspwTch7CQJXQI
GoP14RMoImoXGocuxEhgbmIDcSTcPfweOgd6QfoFwhOGK8RTjGVMhcwHWApJ
5ayn2FrYezhecy5wk3jkeS34yPw7BEoEzwl1CT8RGRf9KjYjPoWcmoaluqRP
yeyU9ZZTlIfkBxRqFBOVbJSFlOdV+lRr1dLV3TTkNGHNYa2z2tk67royust6
/fonDRINbYwEjWaNe01OmaabuZsrWGAsXlpettpr7WejYUuwHbVrts9z8EEi
BcZxxKnROdPFxVXcdc6tx73cI8xT14vg9cL7zNaUbVY+HD7vt1/wzfCzJXOS
x/zPBaQEWlBYKC+CaoNjQnSpaGpfaEmYX7h0+HTElcjMKItouujemH00m1h8
7O247HiD+MWE1sTYJIWkT8k1Kb6pPKlPdhSkWaXD6dcz0jOtsvizFrNHd/bk
XNhVkZuzO2KPe57BXol8Yv7svpf7bxU0HDh8MOtQYiGtKPowciwojimJKY0u
iyynVvgddam0qbI75nM8+URl9e2T306x12qetqtzrndq2HomtfHy2cUmy/NF
F95ckr2c0NzZSrji0lba/qJD+Fr49Ws3WTtDu251896Ou9PXI3Ev7f6TXpmH
2X1j/e6PhwYDnswO7RnmGTn7wujl0OvMUft3Lu8Pfpj/dHjy9rTr/Mia/zf+
g1srWA0ATlkA4H4YABdtBBcAIF6H7B96ADgSAXDVBjB3GYCuRQNom9Sf/UMA
GCN7x05QA24j0QOLxA9rKAzaDzUhud4PmBPWhX3hnXAd3Ad/R/GgjFEhqINI
9v0OTUBroMno/eg29ASGHWOOiUeyrmEsA9YYm4g9h/2IE8H54qpwr/Ei+BD8
efwynR3dcbo5ekf6swQiIZIwwKDFcIJIICYQxxidGDuZVJhqmLmZD7LQsewi
waRsVgxrHhszWxm7OPslDjOOYc4oLjxXDbcp93ue3bzyvE/5Mvjl+F8KFAia
CS4LtQuniBiIYkQfiR0VD5PQlyRJfpbqlq6WyZalyNnJaysoKCoqGSi7qYSr
7kRCfrPGoOacNr+OpW6CXr3+G0NuIw/jMpM3ZlLm8RZ3rHisg22O2JbYJdgb
2a86dG7Z5xjqRHXOcTnv+t6dx8PFs8Crdytxm5NP8fZhPyayqr9lgFtgICUj
6EzwR6pyaFbYYIQUMvOex2jSimN/xnskNCZ+TeZMUUo12eGVlpHelkmXFZL9
MEdjV/Vupj3peRP5xvty9jcXjB5kPORQeP6w2pHbJQ6lD8utKu5UOlX9PN5T
fb3mYm1JXUoDtXHrOePz7BfeXjrbnNG6vc376o5rrTcWurS7I+7s7Sm7X9Pb
1He9//HAxFP8M/2R/S9+vPYebR4jjJMn2j/jJyW/gb8qpwVmSn/wzbbMRyyo
/1paalnxXY8fYsAWxIBi0AHeQXhIAXKFUqBqJNOfhrlhEzgMPgLfhL8gObsp
sptUonpRi2hZ9DZ0AboTPYuRwZAxpZjHWALWErsL243D4mxwB3DDeDF8LP42
HR9dIt0QvTb9cQI9IZEwweDJ8JBoSuxg1GJsYdJgamM2ZL6D5KgjJApphjWb
jY2tjt2QfYQjnpONs4XLmxvmbuTx4qXj7eCLRXz9UeC0IFVIQWhOuFPkgKiv
mKo4vfh7iS7JGqk86VgZP1knOXN5PQVNRXUlDWUdFRNVe7Wt6pEauZq1Wo+0
V3TV9KL0zxnMGGkb55gMmkmaZ1i8sNK1rrRZtnO0L3K4v2XJScE50KXK9Tni
422eJ7w+b1XfttNn0FfcL5bc4b8SqE9JC+oMoaO6h54Km4+wizwZtRTjRbsS
xx2/I+F5klJyasq11F9pOulZGX1ZItnJOwd3KeUW7P6W57C3IX9xv1HBjgPN
B2cLzYqqj9AV00qGywzKTx7FV0ZVDR3XP1F7kq0mrxZ7uqBeoOFyo/3Zsaak
C4SLxy6rNd9v9bsy276ng+9a8w2PTriruZt6h+9u373MB2q9n/tO9m8dYBm8
8TTgGRiueK794tWr3W9URt+82/ded3xyouqTw+fZyT1fF/6ynto1fWGm7/vH
H6tzXPOqP10XdvxqWPy8rLVyZN3/0sAVZIB6MAhWIGnE+5lQIzQMY2E12B8+
BHcipwhRlDsqD3UN9R0tjfZDl6EHMUwYO0w+5gGWiHXGlmHf4eRxabhHeAl8
Fv4tnSXdRXox+goCB+EIAwdDOVGQWMuoxNjBZMf0BjlvMLE0kuxJ06xlbGZs
M+wnOdw5CZydXCncGtxzPG28GXzW/JyIr68JHhGiIScQNVEeMTSy94xJjEgO
SD1CMvOnsq/lvsgvKZKU5JRtkBVdpHZd/aumkJaHdqHOgB67vo9Bg+GisaNJ
gxmdeYTFMysb6zu2dnbDDlRH4FThouf6zr3A09BrdusFH5qvht+Mf0WgLOVs
sExIbahEWH2EYmRbtGXMcGxEPDahOsk4+U1qUho2vSCTLatsp0jO2Vzd3Q/z
AvKhfWcKth3EHqooEjh8pBhXklg6Ue5dMVjpWfXjeH01pQZ3am/tXJ1nffMZ
tsa4s0NN2uerLmIuRV4eabFsbWtTam/oELtWcYPxZlrn51se3d13VO6euEe6
n/Ng/mF43/t+n8cjgx5Png25Prs3ovK88MWXVwavC968eiv/Ln2sf1z0Q9LE
w0+inxO+3Jxc+ab8l82U17TXjMN3vR+is7jZd3Pt85k/9X9OLWT9Iv06vki3
GLM4smSyVLb0cVlzedfykxXRFerK2ZWpVbXVpNWra/6PDVJVWd8+IAYTADCv
V1e/SwCAKwRg+dDq6mL16urySSTJeAnAzfCN7zrrew0zAEdvraE7KWOZ//6+
8l8EM9HV
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1114, 500},
  PlotRange->{{0, 1114}, {0, 500}}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{
  3.7257312968622007`*^9},ExpressionUUID->"169f9175-97b1-421e-9d65-\
178f47c733c9"],

Cell["You can also search from within the notebook:", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.725371327772749*^9, 3.7253713344285297`*^9}, {
   3.725731233627708*^9, 3.72573123843364*^9}, 3.7257312968619432`*^9, {
   3.823027361409998*^9, 3.823027364265196*^9}, {3.823027622486191*^9, 
   3.823027633544389*^9}},ExpressionUUID->"fd0376cf-2570-44bd-a853-\
8930949b2f58"],

Cell[BoxData[
 RowBox[{"ResourceSearch", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<ResourceType\>\"", "\[Rule]", "\"\<DataResource\>\""}], ",", 
    "\"\<Statistics\>\""}], "}"}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{
  3.725371071659958*^9, {3.72537113818742*^9, 3.72537113852073*^9}, 
   3.725371309150419*^9, 3.8230273878376837`*^9, {3.823027432204299*^9, 
   3.823027441337948*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"b2a0b64e-63b0-4ab8-9583-092df72d1831"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Getting the Data", "Subsection",
 CellChangeTimes->{{3.726102114176458*^9, 
  3.726102117799192*^9}},ExpressionUUID->"37225925-9465-43d4-a0f2-\
d44ac871850f"],

Cell[CellGroupData[{

Cell[TextData[{
 "To import the data on ",
 ButtonBox["Meteorite Landings",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://datarepository.wolframcloud.com/resources/Meteorite-\
Landings"], None},
  ButtonNote->
   "https://datarepository.wolframcloud.com/resources/Meteorite-Landings"],
 " (a collection of known meteorite landings) from the data repository:"
}], "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.713182125665742*^9, 3.713182144554206*^9}, 
   3.7131821932538357`*^9, {3.714763856308475*^9, 3.7147638728639708`*^9}, {
   3.7165084107875834`*^9, 3.7165084614560747`*^9}, 3.7165086487298403`*^9, {
   3.823027641036931*^9, 
   3.823027645210991*^9}},ExpressionUUID->"c4f7445c-188b-4160-aa10-\
07901b9104cc"],

Cell[BoxData[
 RowBox[{"meteoriteData", " ", "=", " ", 
  RowBox[{"ResourceData", "[", "\"\<Meteorite Landings\>\"", "]"}]}]], "Input",\

 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.713182147229536*^9, 3.71318215537001*^9}, {
   3.714763592422427*^9, 3.714763596141621*^9}, {3.7147636400084553`*^9, 
   3.714763644936178*^9}, 3.7165086487303*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"5beca4b6-405a-4a31-ad66-562a6923b6d6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analyzing the Data", "Subsection",
 CellChangeTimes->{{3.726102123574079*^9, 3.726102129165387*^9}, {
  3.8231054015447493`*^9, 
  3.8231054043663893`*^9}},ExpressionUUID->"81b777c9-9b92-4337-88ed-\
7f65cee1bbe2"],

Cell[CellGroupData[{

Cell["Find the most common classes of meteorites:", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.716508538230503*^9, 3.7165085815880404`*^9}, {
   3.716508633575732*^9, 3.716508655474105*^9}, {3.725731596998715*^9, 
   3.725731598158927*^9}, 
   3.823270154037119*^9},ExpressionUUID->"2d6bf5ac-691b-45c5-9761-\
1ed21f2f4bdf"],

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"SortBy", "[", 
   RowBox[{
    RowBox[{"Tally", "[", 
     RowBox[{"meteoriteData", "[", 
      RowBox[{"All", ",", "\"\<Classification\>\""}], "]"}], "]"}], ",", 
    "Last"}], "]"}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.725731496879966*^9, 3.725731588303393*^9}, {
   3.725731619556381*^9, 3.7257316894415483`*^9}, 
   3.725731755851554*^9},ExpressionUUID->"78fbd64d-135b-4541-bb57-\
dfa9409e6106"],

Cell["A visual representation of the same information:", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7257317181791687`*^9, 
  3.725731755851717*^9}},ExpressionUUID->"57a6dcef-1e51-4b91-8f84-\
b7f42d99deb0"],

Cell[BoxData[
 RowBox[{"WordCloud", "[", 
  RowBox[{
   RowBox[{"meteoriteData", "[", 
    RowBox[{"All", ",", "\"\<Classification\>\""}], "]"}], "//", "Normal"}], 
  "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.714763530193321*^9, 3.7147635445112*^9}, {
   3.714763673311851*^9, 3.714763750400311*^9}, 3.71650865547439*^9, {
   3.725731707674737*^9, 
   3.725731708202344*^9}},ExpressionUUID->"dce966cf-c364-459e-baf0-\
dc8317980a66"]
}, Open  ]],

Cell["", "EndOfSlide",ExpressionUUID->"748a8b66-a3a0-4828-910f-8cb248e7d6f0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"d5341a78-09db-46db-bf51-a1a299411b99"],

Cell[CellGroupData[{

Cell["Restructuring Data", "Section",
 CellChangeTimes->{{3.823103283352667*^9, 
  3.823103286524453*^9}},ExpressionUUID->"ae46dcc2-5757-4786-98db-\
64d3d980ea1c"],

Cell[CellGroupData[{

Cell["Lists", "Subsection",
 CellChangeTimes->{{3.823103331301922*^9, 
  3.823103331941936*^9}},ExpressionUUID->"8557c5cc-be44-4cdf-8a62-\
05ec936e1559"],

Cell["\<\
Lists are the most basic data structures in the Wolfram Language for easy \
manipulation of data.\
\>", "Text",
 CellChangeTimes->{{3.709990423803499*^9, 3.7099904373446712`*^9}, {
   3.716512743167952*^9, 3.716512767715868*^9}, {3.725371482118367*^9, 
   3.725371485363735*^9}, 
   3.823270168995956*^9},ExpressionUUID->"731d53ca-e6a1-4130-8a0d-\
f1a17a00de02"],

Cell[CellGroupData[{

Cell["Import the \[OpenCurlyDoubleQuote]RetailSales.tsv\
\[CloseCurlyDoubleQuote] data file:", "CodeText",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7257335499267263`*^9, 
  3.725733576084993*^9}},ExpressionUUID->"dcc7e929-a4b9-4b5d-8887-\
d70a90a29796"],

Cell[BoxData[
 RowBox[{
  RowBox[{"rawData", " ", "=", 
   RowBox[{"Import", "[", 
    RowBox[{"\"\<ExampleData/RetailSales.tsv\>\"", ",", "\"\<TSV\>\""}], 
    "]"}]}], ";"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.713183212944642*^9, 3.7131832530609827`*^9}, {
   3.714822487123502*^9, 3.714822516416505*^9}, {3.714823039507061*^9, 
   3.714823047073111*^9}, 3.716555395646541*^9, 
   3.717181556650783*^9},ExpressionUUID->"58243122-4a46-4a39-9270-\
acbe1e1462a5"]
}, Open  ]],

Cell["\<\
Take a peek at the data\[LongDash]the first few rows at the beginning of the \
list:\
\>", "CodeText",
 CellChangeTimes->{{3.716512844814125*^9, 3.71651286786051*^9}, {
   3.7165481791070843`*^9, 3.716548193935816*^9}, {3.716555423526814*^9, 
   3.716555467633696*^9}, {3.7171815686719933`*^9, 3.717181570104134*^9}, 
   3.725379853441732*^9, 3.726102276069272*^9, {3.823270175242804*^9, 
   3.8232701821237392`*^9}},ExpressionUUID->"afa9a073-9402-4ad9-be97-\
c75716601e4f"],

Cell[BoxData[
 RowBox[{"rawData", " ", "//", "Shallow"}]], "Input",
 CellChangeTimes->{{3.714825976821967*^9, 3.7148259817626038`*^9}, {
   3.716555423527184*^9, 3.716555467634075*^9}, 3.725379853443619*^9, 
   3.726102276069675*^9},ExpressionUUID->"25a0ef6d-b8a3-42af-bb6b-\
6ca2819312b9"],

Cell["Check how many rows and columns:", "CodeText",
 CellChangeTimes->{{3.716512873821849*^9, 3.716512879383009*^9}, {
   3.7165481978983717`*^9, 3.716548201695369*^9}, {3.7165554235273333`*^9, 
   3.716555467634272*^9}, 3.72537985344528*^9, 3.726102276069829*^9, 
   3.8232701846517572`*^9},ExpressionUUID->"3c617c5d-9ae5-4677-8307-\
a4f97db19e0c"],

Cell[BoxData[
 RowBox[{"rawData", " ", "//", "Dimensions"}]], "Input",
 CellChangeTimes->{{3.714825987654039*^9, 3.714825992049851*^9}, {
   3.716555423527813*^9, 3.7165554676345463`*^9}, 3.7253798534476147`*^9, 
   3.726102276070305*^9},ExpressionUUID->"77402f11-2fa4-406a-896d-\
1a7b1232dcb0"],

Cell["\<\
If there is a header row, extract it for labeling purposes later:\
\>", "CodeText",
 CellChangeTimes->{{3.7165128869249973`*^9, 3.71651289866707*^9}, {
   3.716548212635559*^9, 3.716548241325313*^9}, 3.71654901177536*^9, {
   3.716555423528305*^9, 3.7165554676350393`*^9}, 3.725379853448873*^9, 
   3.7257602569790707`*^9, 
   3.726102276070513*^9},ExpressionUUID->"5cfed994-843b-4ae6-9902-\
d77e0932b45e"],

Cell[BoxData[
 RowBox[{"columnHeaders", " ", "=", " ", 
  RowBox[{"First", "@", "rawData"}]}]], "Input",
 CellChangeTimes->{{3.7148230125094957`*^9, 3.7148230513289022`*^9}, {
   3.716555423528575*^9, 3.716555467635282*^9}, 3.725379853450732*^9, 
   3.726102276071024*^9},ExpressionUUID->"ded610c7-17a7-42c1-b12d-\
b56143dffed1"],

Cell["Extract the data without the header rows:", "CodeText",
 CellChangeTimes->{{3.716512905485745*^9, 3.716512910873382*^9}, {
   3.7165482441979637`*^9, 3.716548248093446*^9}, {3.716555423529063*^9, 
   3.716555467635777*^9}, 3.7253798534518633`*^9, 3.7257602627867327`*^9, 
   3.726102276071226*^9},ExpressionUUID->"22273ae8-c17e-49a9-9681-\
0a11205c921b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"salesData", " ", "=", " ", 
   RowBox[{"Rest", "@", "rawData"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.714823034924561*^9, 3.714823061034189*^9}, {
   3.7165554235293503`*^9, 3.716555467636046*^9}, 3.717152277768529*^9, 
   3.725379853453212*^9, 
   3.72610227607174*^9},ExpressionUUID->"6e8c0a7b-0328-438f-a802-\
5b29517d3789"],

Cell["Extract specific columns of data:", "CodeText",
 CellChangeTimes->{{3.716513041664543*^9, 3.7165130550450363`*^9}, {
   3.716513088609428*^9, 3.7165131052564907`*^9}, {3.716549064439039*^9, 
   3.716549090474872*^9}, {3.716555423529491*^9, 3.7165554676362343`*^9}, 
   3.7253798534542513`*^9, 3.726102276071887*^9, 
   3.823270189459878*^9},ExpressionUUID->"b7324975-653e-43aa-a11b-\
695525a878ae"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"salesByDate", " ", "=", 
   RowBox[{"salesData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"salesByCity", " ", "=", 
   RowBox[{"salesData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.714826713818122*^9, 3.714826721468878*^9}, {
   3.714826897735046*^9, 3.71482689898053*^9}, {3.7165130205417833`*^9, 
   3.716513028708406*^9}, {3.7165490340868177`*^9, 3.7165490665748377`*^9}, {
   3.716549122335388*^9, 3.716549122702402*^9}, {3.716555423529726*^9, 
   3.7165554676365*^9}, {3.7171522858886747`*^9, 3.717152289244014*^9}, {
   3.7253717088383512`*^9, 3.725371734867166*^9}, 3.7253798534556026`*^9, {
   3.725760145503026*^9, 3.725760170956505*^9}, {3.7257602691799927`*^9, 
   3.7257603377092323`*^9}, 
   3.726102276072159*^9},ExpressionUUID->"5ef17af7-04e2-4804-b859-\
5d2b04a354b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Association", "Subsection",
 CellChangeTimes->{{3.823103384211557*^9, 
  3.823103385932086*^9}},ExpressionUUID->"0f1428e0-eac8-435a-9e94-\
94e3d374b14a"],

Cell[TextData[{
 "An ",
 StyleBox[ButtonBox["Association",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Association"],
  FontWeight->"Bold"],
 " represents data as key-value pairs. "
}], "Text",
 CellChangeTimes->{{3.619437710765749*^9, 3.619437776952045*^9}, {
   3.619437809844825*^9, 3.6194378457377243`*^9}, 3.619440244896798*^9, {
   3.619440280492786*^9, 3.6194403498246326`*^9}, {3.6197822193542747`*^9, 
   3.619782239744755*^9}, {3.621258771798959*^9, 3.621258771864337*^9}, 
   3.680608745957323*^9, 
   3.7165498749927998`*^9},ExpressionUUID->"99ecc8c1-2f75-45c9-8741-\
d365fce8640a"],

Cell["\<\
Associations provide the dictionary data structure, where each value is \
labeled with and accessed by its key. This removes the need to remember \
separately the meaning of each entry in a list and strictly adhere to the \
sequence.\
\>", "Text",
 CellChangeTimes->{{3.717152377717637*^9, 3.717152504903263*^9}, {
  3.717181742303638*^9, 3.717181751860368*^9}, {3.8232702097167673`*^9, 
  3.823270209955728*^9}},ExpressionUUID->"75ff2b73-b9d2-40d0-85cb-\
b25701789d0a"],

Cell["Here is a simple association:", "CodeText",
 CellChangeTimes->{{3.823103530657187*^9, 
  3.823103535876*^9}},ExpressionUUID->"a3330a3d-dbff-4ee4-ad89-14dcc76eaf14"],

Cell[BoxData[
 RowBox[{"assoc", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"a", "\[Rule]", "4"}], ",", 
    RowBox[{"b", "\[Rule]", "2"}], ",", 
    RowBox[{"c", "\[Rule]", "1"}], ",", 
    RowBox[{"d", "\[Rule]", "5"}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.619437928034724*^9, 3.6194379363783903`*^9}, {
  3.619437986627963*^9, 
  3.619437989194017*^9}},ExpressionUUID->"fce372da-0c41-4ec7-988b-\
eae0fa33da2e"],

Cell["You can look up a value by key:", "CodeText",
 CellChangeTimes->{{3.619438072396846*^9, 3.619438079796438*^9}, 
   3.680608748294738*^9, {3.725800789503187*^9, 3.725800789867407*^9}, {
   3.823103540735984*^9, 
   3.823103542828211*^9}},ExpressionUUID->"85dd3861-870b-4292-97ac-\
b8af6b18762e"],

Cell[BoxData[
 RowBox[{"assoc", "[", "b", "]"}]], "Input",
 CellChangeTimes->{{3.619437940017036*^9, 3.619437942962775*^9}, 
   3.6857245300199413`*^9},ExpressionUUID->"bdd8b6c2-c17d-47fb-93be-\
751fa2cfa7af"],

Cell[BoxData[
 RowBox[{"assoc", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.619438245032156*^9, 
  3.6194382582935553`*^9}},ExpressionUUID->"af71a99a-78b7-4722-b28e-\
d2e81693b1c2"],

Cell[BoxData[
 RowBox[{"assoc", "[", 
  RowBox[{"[", 
   RowBox[{"Key", "[", "b", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.685751015106077*^9, 
  3.6857510225785418`*^9}},ExpressionUUID->"d342f49f-ff0d-49b0-a41c-\
208cab01d01b"],

Cell["\<\
Many common list operations work transparently on associations:\
\>", "CodeText",
 CellChangeTimes->{{3.619438083923483*^9, 3.6194381258881083`*^9}, 
   3.6806087515461516`*^9, {3.725800795910369*^9, 
   3.725800796851512*^9}},ExpressionUUID->"01c1d103-c558-4693-9d42-\
b3f6674132f0"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", "assoc"}], "]"}]], "Input",
 CellChangeTimes->{{3.685751669786703*^9, 
  3.685751675691868*^9}},ExpressionUUID->"b76c15d8-eda7-4eda-bc3d-\
9b8bb565ef0e"],

Cell[BoxData[
 RowBox[{"Sort", "@", "assoc"}]], "Input",
 CellChangeTimes->{{3.619437999196361*^9, 
  3.619438003934044*^9}},ExpressionUUID->"22e173a3-3fb5-4d6b-b4b5-\
5c19ecfe232f"],

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{"assoc", ",", 
   RowBox[{
    RowBox[{"#", ">", "3"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.619438008807323*^9, 
  3.6194380216107492`*^9}},ExpressionUUID->"e42e6c70-f258-4fce-a029-\
92dda1d9112a"],

Cell[BoxData[
 RowBox[{"Total", "[", "assoc", "]"}]], "Input",
 CellChangeTimes->{{3.6194381418325453`*^9, 
  3.619438145583832*^9}},ExpressionUUID->"2e3ca7c4-34ee-4ed4-ac73-\
f2c45bf5afa2"],

Cell["Some functions apply to keys:", "CodeText",
 CellChangeTimes->{{3.685752025490437*^9, 3.685752041093617*^9}, {
  3.6857521044915667`*^9, 3.685752105371441*^9}, {3.725800801166581*^9, 
  3.725800803915608*^9}},ExpressionUUID->"e567115c-3250-4645-98bd-\
2d30b029a6f9"],

Cell[BoxData[
 RowBox[{"KeyMap", "[", 
  RowBox[{"f", ",", "assoc"}], "]"}]], "Input",
 CellChangeTimes->{{3.6857520442081623`*^9, 
  3.685752054614959*^9}},ExpressionUUID->"eb955e89-26b0-45e8-b6fa-\
381d0daa8188"],

Cell[BoxData[
 RowBox[{"KeySort", "[", "assoc", "]"}]], "Input",
 CellChangeTimes->{{3.685752066272255*^9, 
  3.685752074627562*^9}},ExpressionUUID->"6b513e82-3c5f-4fbf-bc2a-\
b82520f52ea9"],

Cell["Extract keys or values from an association:", "CodeText",
 CellChangeTimes->{{3.619438180044606*^9, 3.619438194929821*^9}, 
   3.6806087552363577`*^9, {3.7258008062757597`*^9, 
   3.725800807059561*^9}},ExpressionUUID->"a79b8e4f-b173-4fbd-b6d1-\
19bad572b00d"],

Cell[BoxData[
 RowBox[{"Keys", "[", "assoc", "]"}]], "Input",
 CellChangeTimes->{{3.619438198219534*^9, 
  3.6194382015550127`*^9}},ExpressionUUID->"871bde9c-dfba-4fab-b1c6-\
978069c3be86"],

Cell[BoxData[
 RowBox[{"Values", "[", "assoc", "]"}]], "Input",
 CellChangeTimes->{{3.6194382035811663`*^9, 
  3.619438208473506*^9}},ExpressionUUID->"dcf74fea-5aba-44d3-9789-\
cfd236706c9b"],

Cell[TextData[{
 "Functions such as ",
 StyleBox[ButtonBox["AssociationMap",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociationMap"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["AssociationThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AssociationThread"],
  FontWeight->"Bold"],
 " can construct associations from lists:"
}], "CodeText",
 CellChangeTimes->{{3.619437710765749*^9, 3.619437776952045*^9}, {
   3.619437809844825*^9, 3.6194378457377243`*^9}, {3.619438450306679*^9, 
   3.61943848100808*^9}, {3.6194385282356787`*^9, 3.619438529043589*^9}, {
   3.621258787649001*^9, 3.62125879784138*^9}, 3.6806087593866653`*^9, {
   3.725800815196176*^9, 
   3.7258008166275663`*^9}},ExpressionUUID->"f029bef7-272f-4aa5-89ff-\
248d4cde89fe"],

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], "]"}]], "Input",Expr\
essionUUID->"6ce89fae-f1b7-4ee0-a47d-29bf9180473a"],

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6194390105243263`*^9, 
  3.619439027439542*^9}},ExpressionUUID->"103d43ee-9173-4916-9b1c-\
d2d73b80aaf0"],

Cell[TextData[{
 "Associations are also returned by using functions like ",
 StyleBox[ButtonBox["GroupBy",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/GroupBy"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Counts",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Counts"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["CountsBy",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/CountsBy"],
  FontWeight->"Bold"],
 ", etc. to process data:"
}], "Text",
 CellChangeTimes->{{3.7165499842459803`*^9, 3.7165500468329973`*^9}, {
   3.717152582479829*^9, 3.717152587156151*^9}, {3.717152876209139*^9, 
   3.717152876975586*^9}, {3.7258008272201567`*^9, 3.72580084050917*^9}, 
   3.823270231748601*^9, {3.8232724456163893`*^9, 
   3.823272459399219*^9}},ExpressionUUID->"9b55c704-91af-4e93-a726-\
e4748d5c1baa"],

Cell[BoxData[
 RowBox[{"salesData", " ", "=", 
  RowBox[{"Rest", "[", 
   RowBox[{"Import", "[", "\"\<ExampleData/RetailSales.tsv\>\"", "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.823103686405805*^9, 3.823103737693493*^9}, {
  3.823103918250494*^9, 3.8231039381313543`*^9}},
 CellLabel->
  "In[128]:=",ExpressionUUID->"0c8d9eb3-4b34-4ee6-9492-3aad57bbf90b"],

Cell["Total sales for each city:", "CodeText",
 CellChangeTimes->{{3.8231040889609537`*^9, 
  3.8231040908939447`*^9}},ExpressionUUID->"2a26daa5-415d-4fa0-a9f9-\
d291729b1bac"],

Cell[BoxData[
 RowBox[{"GroupBy", "[", 
  RowBox[{
   RowBox[{"salesData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;", "3"}]}], "]"}], "]"}], ",", 
   RowBox[{"First", "\[Rule]", " ", "Last"}], ",", " ", "Total"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.823103958058346*^9, 3.8231039711137*^9}, {
  3.823104013236672*^9, 3.823104069305257*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"9bd2783f-5d6a-4d13-8d76-82a3bafe9607"],

Cell["Number of sales for each city:", "CodeText",
 CellChangeTimes->{
  3.823104102888938*^9},ExpressionUUID->"4142192d-8cb1-47d3-aaeb-\
72830e17e5ce"],

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"salesData", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.823104105718152*^9, 3.823104114868346*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"d7f3fee0-5286-4869-89fd-53513f3f4cc8"],

Cell[BoxData[
 RowBox[{"CountsBy", "[", 
  RowBox[{"salesData", ",", 
   RowBox[{
    RowBox[{"#", "[", 
     RowBox[{"[", "2", "]"}], "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.82310412943299*^9, 3.8231041604013367`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"2f8160c3-ab20-4a10-9ed9-d81441051c99"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dataset", "Subsection",
 CellChangeTimes->{{3.823104559038314*^9, 
  3.823104560016307*^9}},ExpressionUUID->"ee61a916-9004-4fce-81ae-\
c7f41b67f1f8"],

Cell[TextData[{
 "A ",
 StyleBox[ButtonBox["Dataset",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Dataset"],
  FontWeight->"Bold"],
 " is a general way of representing a hierarchy of lists and associations, \
constructed from tabular data."
}], "Text",
 CellChangeTimes->{
  3.716550888382307*^9, {3.716550965459799*^9, 
   3.7165509726171427`*^9}},ExpressionUUID->"f91f4d74-a18a-43bf-a1b8-\
353e73894bb5"],

Cell["\<\
It provides a flexible framework for sophisticated data queries and \
manipulations on data given a defined regular structure at arbitrary \
complexity:\
\>", "Text",
 CellChangeTimes->{
  3.717152926749411*^9, {3.717152960134717*^9, 3.717152970951189*^9}, {
   3.823270249564055*^9, 
   3.823270250724133*^9}},ExpressionUUID->"daba02ef-4ab6-43b2-bdc2-\
285a8c0c6874"],

Cell[BoxData[
 RowBox[{
  RowBox[{"d", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<a\>\"", "\[Rule]", "1"}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<x\>\""}], ",", 
        RowBox[{"\"\<c\>\"", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<a\>\"", "\[Rule]", "2"}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<y\>\""}], ",", 
        RowBox[{"\"\<c\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}]}]}], "|>"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<a\>\"", "\[Rule]", "3"}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<z\>\""}], ",", 
        RowBox[{"\"\<c\>\"", "\[Rule]", 
         RowBox[{"{", "3", "}"}]}]}], "|>"}], ",", "\[IndentingNewLine]", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<a\>\"", "\[Rule]", "4"}], ",", 
        RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<x\>\""}], ",", 
        RowBox[{"\"\<c\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"4", ",", "5"}], "}"}]}]}], "|>"}]}], "\[IndentingNewLine]",
      "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.619440503962021*^9, 3.619440518471898*^9}, 
   3.620648363926331*^9},ExpressionUUID->"d86ae101-34ee-4568-813c-\
2c49d8046e6a"],

Cell["\<\
Create a Dataset from the Association created in the preceding example:\
\>", "CodeText",
 CellChangeTimes->{{3.823183614284986*^9, 3.8231836464945927`*^9}, {
  3.823270256820284*^9, 
  3.823270261267926*^9}},ExpressionUUID->"25b87448-f1bf-468e-9d98-\
081f775ac60d"],

Cell[BoxData[
 RowBox[{"Dataset", "[", "salesData", "]"}]], "Input",
 CellChangeTimes->{{3.82310461477837*^9, 3.823104626158396*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"2dc50525-a3e9-4cfb-8b83-899fbeab2520"],

Cell[TextData[{
 StyleBox[ButtonBox["SemanticImport",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SemanticImport"],
  FontWeight->"Bold"],
 " attempts to import data from a file directly into a Dataset:"
}], "CodeText",
 CellChangeTimes->{{3.823183667512156*^9, 
  3.82318369128305*^9}},ExpressionUUID->"f35b9f59-2220-4e2c-8cf8-\
fbbc77e63762"],

Cell[BoxData[
 RowBox[{"semanticSalesData", " ", "=", 
  RowBox[{
  "SemanticImport", "[", "\"\<ExampleData/RetailSales.tsv\>\"", 
   "]"}]}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"f883157f-48b7-484e-ac87-16fbcb1a6ee3"],

Cell["The first row in the Dataset:", "CodeText",
 CellChangeTimes->{{3.82318377397232*^9, 3.823183778561575*^9}, 
   3.823183989577073*^9},ExpressionUUID->"86817ac1-5e2c-4d0d-a4c4-\
db43c6bdc6e3"],

Cell[BoxData[
 RowBox[{"semanticSalesData", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.8231047013702297`*^9, 3.8231047075961237`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"f18bf91d-4248-4261-9d5e-54a898c72721"],

Cell[TextData[{
 "The element from the ",
 Cell[BoxData[
 "\"\<City\>\""], "Input",ExpressionUUID->
  "a900c584-0dfa-4897-9fcd-7011925c488a"],
 " column in the first row:"
}], "CodeText",
 CellChangeTimes->{{3.823183999770095*^9, 3.823184011472443*^9}, 
   3.823270279438747*^9},ExpressionUUID->"fc5fd087-e9d7-4fc3-8088-\
bc7aae300df6"],

Cell[BoxData[
 RowBox[{"semanticSalesData", "[", 
  RowBox[{"1", ",", "\"\<City\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.823104669554627*^9, 3.823104677761351*^9}, 
   3.823104718422323*^9},
 CellLabel->
  "In[139]:=",ExpressionUUID->"7b0bdfe4-7a33-4fc8-bb80-93b358c40875"],

Cell[TextData[{
 "Elements from all rows in the ",
 Cell[BoxData[
 "\"\<City\>\""], "Input",ExpressionUUID->
  "291752cb-4128-45dd-96e1-f6fccfe9ad5e"],
 " column:"
}], "CodeText",
 CellChangeTimes->{{3.823184023432087*^9, 3.823184035041668*^9}, 
   3.823270284411318*^9},ExpressionUUID->"4b5415c1-f0b5-4956-88bc-\
a815e2fc57a0"],

Cell[BoxData[
 RowBox[{"semanticSalesData", "[", 
  RowBox[{"All", ",", "\"\<City\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.823104669554627*^9, 3.823104677761351*^9}, {
  3.823104718422323*^9, 3.823104735419466*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"9f4fef07-2b4e-4fd2-829c-6861657c74f7"],

Cell["Number of sales for each city:", "CodeText",
 CellChangeTimes->{{3.8231840598269463`*^9, 
  3.823184065248376*^9}},ExpressionUUID->"61b2c12c-692f-4029-a9c8-\
cfdf1b745fbf"],

Cell[BoxData[
 RowBox[{"semanticSalesData", "[", 
  RowBox[{"Counts", ",", "\"\<City\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.823104669554627*^9, 3.823104677761351*^9}, {
  3.823104718422323*^9, 3.823104756231544*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"7a64bd2e-8e62-482e-8ac2-11dc2e9703b0"],

Cell["Sales that occurred before January 31, 2014:", "CodeText",
 CellChangeTimes->{{3.823184089717955*^9, 3.8231841207504*^9}, {
  3.8232725039026012`*^9, 
  3.823272504291853*^9}},ExpressionUUID->"dc6d9434-a0b8-48f7-bea4-\
29780a003484"],

Cell[BoxData[
 RowBox[{"semanticSalesData", "[", 
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"#Date", "<", 
      RowBox[{"DateObject", "[", "\"\<Jan 31 2014\>\"", "]"}]}], "&"}], "]"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\"\<City\>\"", ",", "\"\<Sales\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823104669554627*^9, 3.823104677761351*^9}, {
  3.823104718422323*^9, 3.82310486008211*^9}, {3.8231049290003*^9, 
  3.823104954010215*^9}, {3.823104988484003*^9, 3.823104990912011*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"2325c8b4-3d37-457f-bdf6-ff7973565538"],

Cell["\<\
Select sales for dates prior to January 31, 2014, then group sales by city \
and aggregate total sales in each group:\
\>", "CodeText",
 CellChangeTimes->{{3.823184135167948*^9, 3.8231841579166727`*^9}, {
  3.8231846412980957`*^9, 
  3.823184665795394*^9}},ExpressionUUID->"0ead8d93-dd23-4537-9a5e-\
3aa0ce510098"],

Cell[BoxData[
 RowBox[{"semanticSalesData", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"#Date", "<", 
       RowBox[{"DateObject", "[", "\"\<Jan 31 2014\>\"", "]"}]}], "&"}], 
     "]"}], "/*", 
    RowBox[{"GroupBy", "[", 
     RowBox[{"#City", "&"}], "]"}]}], ",", "Total", ",", "\"\<Sales\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.823184269348501*^9, 3.823184377686495*^9}, {
  3.8231845202067003`*^9, 3.8231845253264637`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"a332c33a-8505-4f14-82f8-032d6e8c071e"],

Cell["\<\

\
\>", "EndOfSlide",
 CellChangeTimes->{{3.823104519079515*^9, 
  3.8231045359310102`*^9}},ExpressionUUID->"d47bff74-2c4a-4ecc-8fc7-\
16410ea5e5d5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"70d7f987-e588-47af-8288-eaa02537f973"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Dealing with Messy Data", "Color7",
 FontSlant->"Plain"]], "Section",
 CellChangeTimes->{{3.8210107655952578`*^9, 3.821010771604701*^9}, {
   3.822767609290431*^9, 3.8227676157248917`*^9}, 3.823025834581312*^9, {
   3.823027776563504*^9, 3.8230277838306627`*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"add81027-00bc-49ae-9f40-0c2cfb4f1b92"],

Cell["\<\
Real-world data can be messy. It is not sufficient to simply obtain the data: \
it may be incomplete, inaccurate or contain items that are irrelevant. Data \
cleaning is the process of replacing, modifying or removing errors in the \
data.\
\>", "Text",
 CellChangeTimes->{{3.713183382804882*^9, 3.713183454282346*^9}, 
   3.714835204511387*^9, {3.716569580175723*^9, 3.716569592861158*^9}, {
   3.71672537800704*^9, 3.716725386259717*^9}, {3.71672551336937*^9, 
   3.7167256031135683`*^9}, {3.7171835297323847`*^9, 3.717183530616308*^9}, {
   3.725808081285576*^9, 3.7258081133628273`*^9}, {3.725808278631744*^9, 
   3.725808279163872*^9}, {3.8232703127718477`*^9, 
   3.8232703272440863`*^9}},ExpressionUUID->"9ae835e3-0eef-44e7-864e-\
9356c434b913"],

Cell[CellGroupData[{

Cell["Data Cleaning Checklist", "Subsection",
 CellChangeTimes->{{3.71672451328046*^9, 3.716724534241609*^9}, {
  3.716725614954558*^9, 3.71672564120324*^9}, {3.716725908876238*^9, 
  3.71672591526563*^9}, {3.71673702380142*^9, 3.7167370293737907`*^9}, {
  3.717183544475108*^9, 3.717183544704136*^9}, {3.823270329451208*^9, 
  3.823270330187364*^9}, {3.8232725231433992`*^9, 
  3.823272523941481*^9}},ExpressionUUID->"dacf5772-0d93-4046-a33a-\
9d1987916547"],

Cell[CellGroupData[{

Cell["\<\
Does each row (data sample) and each column (the set of different feature \
values across data samples) have consistent formatting?\
\>", "Item",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
  3.7131020618269377`*^9, 3.713102061830443*^9}, {3.713195688227643*^9, 
  3.713195732907255*^9}, {3.714835269887847*^9, 3.714835289647069*^9}, {
  3.7167245475390587`*^9, 3.716724561589354*^9}, {3.7167246096321173`*^9, 
  3.716724609632971*^9}, {3.717183554650717*^9, 3.717183579230501*^9}, {
  3.725808201485194*^9, 3.725808212232973*^9}, {3.725808293458267*^9, 
  3.725808352400979*^9}},ExpressionUUID->"42a2512c-3107-4317-b8eb-\
05228f46c800"],

Cell["Escape characters can often mess up data formatting", "Subitem",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
  3.7131020618269377`*^9, 3.713102061830443*^9}, {3.713195688227643*^9, 
  3.713195732907255*^9}, {3.714835269887847*^9, 3.714835289647069*^9}, {
  3.7167245475390587`*^9, 3.716724561589354*^9}, {3.71672461531861*^9, 
  3.7167246329764023`*^9}},ExpressionUUID->"cdfce180-ab59-4f96-998d-\
30a8bf48f430"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Are the feature values reasonable and informative\[LongDash]free of obvious \
errors?\
\>", "Item",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
   3.7131020618269377`*^9, 3.713102061830443*^9}, {3.713195688227643*^9, 
   3.713195732907255*^9}, {3.714835269887847*^9, 3.714835289647069*^9}, {
   3.7167245475390587`*^9, 3.716724585171505*^9}, {3.7167246364876204`*^9, 
   3.716724636487955*^9}, {3.716725029491748*^9, 3.7167250311627483`*^9}, {
   3.725808229121174*^9, 3.725808245230382*^9}, {3.823270340011364*^9, 
   3.823270341509008*^9}, 
   3.823270891843183*^9},ExpressionUUID->"8831e397-e48e-4845-a968-\
cdaa7c4611bb"],

Cell["\<\
A row of zeros or a column of constant feature values may not be helpful in \
the analysis.\
\>", "Subitem",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
   3.7131020618269377`*^9, 3.713102061830443*^9}, {3.713195688227643*^9, 
   3.713195732907255*^9}, {3.714835269887847*^9, 3.714835289647069*^9}, {
   3.7167245475390587`*^9, 3.716724585171505*^9}, {3.716724638704163*^9, 
   3.7167246550008583`*^9}, {3.7167370087936993`*^9, 3.716737017910676*^9}, 
   3.823270347068342*^9},ExpressionUUID->"ebc10d55-28b6-4c71-b1bd-\
54b7af8c31d9"],

Cell["\<\
Unreasonable feature values (for example, negative integers for counts or \
implausible dates) can throw the analysis off track.\
\>", "Subitem",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
  3.7131020618269377`*^9, 3.713102061830443*^9}, {3.713195688227643*^9, 
  3.713195732907255*^9}, {3.714835269887847*^9, 3.714835289647069*^9}, {
  3.7167245475390587`*^9, 3.716724585171505*^9}, {3.716724638704163*^9, 
  3.7167246542157516`*^9}, {3.716724696267729*^9, 3.716724720107676*^9}, {
  3.716724949810281*^9, 3.7167250134317093`*^9}, {3.716725803632889*^9, 
  3.7167258036333313`*^9}, {3.823270351124029*^9, 
  3.823270356259612*^9}},ExpressionUUID->"796e6e7a-3b04-48c8-a6fb-\
b1d76b4ac63e"],

Cell["\<\
Permissible range of the feature values (which may require input from experts \
in the field).\
\>", "Subitem",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
   3.7131020618269377`*^9, 3.713102061830443*^9}, {3.713195688227643*^9, 
   3.713195732907255*^9}, {3.714835269887847*^9, 3.714835289647069*^9}, {
   3.7167245475390587`*^9, 3.716724585171505*^9}, {3.716724638704163*^9, 
   3.7167246542157516`*^9}, {3.716724696267729*^9, 3.716724720107676*^9}, {
   3.716724949810281*^9, 3.7167250134317093`*^9}, {3.716725811337502*^9, 
   3.716725819185205*^9}, {3.716725856350789*^9, 3.716725884498753*^9}, {
   3.717183604000971*^9, 3.71718360557341*^9}, {3.717183909212617*^9, 
   3.717183911714113*^9}, {3.725808387993598*^9, 3.7258083968783283`*^9}, 
   3.82327037265245*^9},ExpressionUUID->"08387c92-63af-4688-9e87-\
e1b1768c6788"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Is there missing data?", "Item",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
  3.713102057378069*^9, 3.7131020573814917`*^9}, {3.713183467096054*^9, 
  3.71318347928782*^9}},ExpressionUUID->"cc1cdd2b-a5e8-4008-ab46-\
61dea361a548"],

Cell["\<\
How exactly is the missing data represented? Is the representation consistent \
or perhaps variants of standard notation like \[OpenCurlyDoubleQuote]NA\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]N/A\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]None\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]--\[CloseCurlyDoubleQuote], etc.?\
\>", "Subitem",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
   3.713102057378069*^9, 3.7131020573814917`*^9}, {3.713183485917935*^9, 
   3.7131834859183407`*^9}, {3.7167250416116037`*^9, 3.716725150798608*^9}, 
   3.823270385452302*^9, 
   3.823272551868976*^9},ExpressionUUID->"fc79956b-9b57-433c-830e-\
b2d24811abd6"],

Cell["How can you deal with missing data?", "Subitem",
 CellChangeTimes->{{3.713102016908255*^9, 3.713102023261602*^9}, {
  3.713102057378069*^9, 3.7131020573814917`*^9}, {3.713183486919722*^9, 
  3.713183499467568*^9}},ExpressionUUID->"0947e2a3-6c4d-4d29-9147-\
69b727198c29"]
}, Open  ]],

Cell["", "EndOfSlide",ExpressionUUID->"2371a889-5bf9-4f2f-a9bc-d8d10f37d7cf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"91e2996e-f0bb-43cb-85cb-e9eddd746d10"],

Cell[CellGroupData[{

Cell["Variable-by-Variable Data Cleaning", "Section",
 CellChangeTimes->{{3.7165760718622704`*^9, 3.7165760766956463`*^9}, {
  3.716576562012171*^9, 3.7165765645845537`*^9}, {3.7167260167306547`*^9, 
  3.7167260200652437`*^9}, {3.716727496916999*^9, 3.716727497993658*^9}, {
  3.7168135838034697`*^9, 3.71681359788935*^9}, {3.823270391508295*^9, 
  3.8232703934995747`*^9}},ExpressionUUID->"5f5da008-dc19-4646-b90a-\
a0bfe5162d83"],

Cell[TextData[{
 "You may want to look at each variable/feature in the dataset to identify \
erroneous values. Here are some suggestions that can help point out the red \
flags (Reference: ",
 ButtonBox["Data Preprocessing for Supervised Leaning, Kotsiantis",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.132.5127&\
rep=rep1&type=pdf"], None},
  ButtonNote->
   "http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.132.5127&rep=\
rep1&type=pdf"],
 " et. al., 2006 (sic))."
}], "Text",
 CellChangeTimes->{{3.725817463572844*^9, 3.725817524414977*^9}, {
  3.7258175730693493`*^9, 3.725817583077059*^9}, {3.7258179215613194`*^9, 
  3.725817922576914*^9}, {3.823028478646925*^9, 3.823028487791473*^9}, {
  3.823272595549756*^9, 
  3.823272638341579*^9}},ExpressionUUID->"28a382be-26f2-4c25-ae74-\
cba62cb54cc8"],

Cell[BoxData[
 TagBox[
  ButtonBox["\<\"Create Sample Data\"\>",
   Appearance->"Frameless",
   Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
   BaseStyle->{"GenericButton", 16, "Text"},
   ButtonFunction:>($CellContext`numericData = {
      1, 1, 2, 3, "3", 4, 5, 6}; $CellContext`housePriceDataWithUnits = {{"1", 
        Quantity[102.193344, "Meters"^2], 
        Quantity[2.586534305957542*^6, "Yen"], 3}, {"2", 
        Quantity[185.80608, "Meters"^2], 
        Quantity[5.096673083891021*^6, "Yen"], 3}, {"3", 
        Quantity[69.67728, "Meters"^2], 
        Quantity[2.0190246692073636`*^6, "Yen"], 3}, {"4", 
        Quantity[167.225472, "Meters"^2], 
        Quantity[3.5360215828280314`*^6, "Yen"], 3}, {"5", 
        Quantity[46.45152, "Meters"^2], 
        Quantity[1.615219735365891*^6, "Yen"], 
        3}}; $CellContext`housePriceDataRaw = Map[{
        Part[#, 1], 
        QuantityMagnitude[
         Part[#, 2]], 
        QuantityMagnitude[
         Part[#, 3]], 
        Part[#, 
         4]}& , $CellContext`housePriceDataWithUnits]; \
$CellContext`housePriceDataHeaders = {
      "houseID", "area in squaremeters", "price in Japanese Yen", 
       "Number of Rooms"}; $CellContext`scotlandPopulationData = {{
        Entity[
        "AdministrativeDivision", {
         "AberdeenCity", "Scotland", "UnitedKingdom"}], 
        Quantity[222793, "People"]}, {
        Entity[
        "AdministrativeDivision", {
         "Aberdeenshire", "Scotland", "UnitedKingdom"}], 
        Quantity[5529730, "People"]}, {
        Entity[
        "AdministrativeDivision", {"Angus", "Scotland", "UnitedKingdom"}], 
        Quantity[115978, "People"]}, {
        Entity[
        "AdministrativeDivision", {
         "ArgyllAndBute", "Scotland", "UnitedKingdom"}], 
        Quantity[88166, "People"]}, {
        Entity[
        "AdministrativeDivision", {
         "Clackmannanshire", "Scotland", "UnitedKingdom"}], 
        Quantity[51442, "People"]}, {
        Entity[
        "AdministrativeDivision", {
         "DumfriesAndGalloway", "Scotland", "UnitedKingdom"}], 
        Quantity[151324, "People"]}, {
        Entity[
        "AdministrativeDivision", {
         "DundeeCity", "Scotland", "UnitedKingdom"}], 
        Quantity[-147268, "People"]}}; $CellContext`membershipData = {
      "A" -> True, "B" -> False, "C" -> "False", "D" -> True, "E" -> 
       False}; $CellContext`normalDistributionData = Map[SetPrecision[#, 3]& , 
       RandomVariate[
        NormalDistribution[5, 2], 
        100]]; $CellContext`supposedlyNormalDistributionData = 
     Join[$CellContext`normalDistributionData, {12, 
       11}]; $CellContext`classRoomData = {{
       "Classroom", "Girls", "Boys", "Students"}, {1, 15, 13, 28}, {2, 6, 7, 
       13}, {3, 6, 9, 15}, {4, 5, 8, 13}, {5, 10, 10, 2}, {6, 8, 8, 16}, {7, 
       9, 8, 17}, {8, 13, 13, 26}, {9, 15, 10, 25}, {10, 12, 9, 
       10}}; $CellContext`residentData = {{1, "Urbana", 
        Entity["ZIPCode", "61803"]}, {2, "Urbana", 
        Entity["ZIPCode", "61803"]}, {3, "Urbana", 
        Entity["ZIPCode", "61802"]}, {4, "Urbana", 
        Entity["ZIPCode", "61802"]}, {5, "Urbana", 
        Entity["ZIPCode", "61802"]}, {6, "Champaign", 
        Entity["ZIPCode", "61821"]}, {7, "Champign", 
        Entity["ZIPCode", "61821"]}, {8, "Champaign", 
        Entity["ZIPCode", "61820"]}, {9, "Champaign", 
        Entity["ZIPCode", "61825"]}, {10, "Urbana", 
        Entity["ZIPCode", "61802"]}}; $CellContext`missingData = {{
       2, 4, 0.986, 
        RGBColor[
        0.7931811599535044, 0.9794035526034883, 0.1736111262263147]}, {
       1, 5, 0.0701, 
        RGBColor[
        0.4966346762097671, 0.42506700252493146`, 0.6020480735371379]}, {
       2, 3, 0.356, 
        RGBColor[
        0.17005048612802431`, 0.32340985960079616`, 0.5088057001465967]}, {
       1, 5, 0.859, 
        RGBColor[
        0.26079904402442433`, 0.6645405387012917, 0.626762001873512]}, {
       1, 7, 0.87, 
        RGBColor[
        0.35006141637857935`, 0.241784130785629, 0.8287210560502678]}, {
       1, 5, 0.372, 
        RGBColor[
        0.6040242604212316, 0.2495041618176539, 0.1612746936530718]}, {
       2, "NA", 0.356, 
        RGBColor[
        0.5812714623512671, 0.2969407447142949, 0.49572510310649687`]}, {
       1, 3, 0.751, 
        RGBColor[0.6124614477104853, 0.378535780066783, 0.878636444824388]}, {
       1, 1, 0.157, 
        RGBColor[
        0.664181976745267, 0.25405278277799814`, 0.12343422551954197`]}, {
       1, 1, "NA", 
        RGBColor[
        0.5918739987770754, 0.7079781022288523, 0.7994674398394699]}, {
       2, 3, 0.685, "NA"}, {2, 5, 0.458, 
        RGBColor[
        0.8929266436889802, 0.6764412122657568, 0.1876179631453354]}, {
       2, 4, 0.0106, 
        RGBColor[
        0.5746966560731546, 0.5532290683267522, 0.6433151858365447]}, {
       1, 0, 0.697, 
        RGBColor[
        0.4036028221713692, 0.6499596806079162, 0.1976339227708881]}, {
       2, 6, 0.0239, 
        RGBColor[
        0.2242880379356622, 0.11173047800711289`, 0.0796914387814045]}}; 
    CellPrint[
      Cell["Sample data ready for use!", 
       Darker[Green], "Text"]]),
   Evaluator->Automatic,
   FrameMargins->Medium,
   Method->"Queued"],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 Editable->False,
 Deployed->True,
 CellChangeTimes->{
  3.8231058010217867`*^9, 3.8231060573058434`*^9, 3.823106088114538*^9, {
   3.823106153465283*^9, 3.823106167676105*^9}, {3.823106234466061*^9, 
   3.823106245074443*^9}},
 CellLabel->"Out[5]=",ExpressionUUID->"1e174d81-8b8f-4450-b67c-f816a520b42b"],

Cell[CellGroupData[{

Cell["Is the Data of the Right Type?", "Subsection",
 CellChangeTimes->{{3.7258198772477293`*^9, 3.725819880178547*^9}, {
  3.823185694472031*^9, 
  3.8231857031447353`*^9}},ExpressionUUID->"2fa3c357-4a58-4096-813c-\
d2af486e3cc6"],

Cell["\<\
If you are expecting only numeric values, then there should not be strings in \
a feature column.\
\>", "Text",
 CellChangeTimes->{{3.725819886802849*^9, 
  3.725819922720285*^9}},ExpressionUUID->"29727b3b-a159-4581-be6d-\
902091f23c80"],

Cell["Here is some sample data:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 
  3.823184769791551*^9}},ExpressionUUID->"4e3a15b4-3218-4d77-b557-\
a188ebcbe0e9"],

Cell[BoxData["numericData"], "Input",
 CellChangeTimes->{{3.7258203756134872`*^9, 3.725820415095327*^9}, {
   3.725820497390214*^9, 3.725820500058119*^9}, 3.725977111069339*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"69d1cf35-2a25-41a0-88e7-6edfd287e3d4"],

Cell[TextData[{
 "Map ",
 StyleBox[ButtonBox["Head",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Head"],
  FontWeight->"Bold"],
 " over the list of items to check if all elements have the same Head:"
}], "CodeText",
 CellChangeTimes->{{3.823028528336934*^9, 3.823028558157507*^9}, 
   3.823272666277533*^9},ExpressionUUID->"7a7edd2d-4130-4752-afb9-\
be46a6d99a10"],

Cell[BoxData[
 RowBox[{"Head", "/@", "numericData"}]], "Input",
 CellChangeTimes->{{3.7258205041666803`*^9, 3.725820508673278*^9}, 
   3.725977112434041*^9},ExpressionUUID->"211a8db4-2fbc-4330-8b61-\
2bd1a1f62b97"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Are the Data Values Reasonable?", "Subsection",
 CellChangeTimes->{{3.7258182430687113`*^9, 3.725818252697194*^9}, {
  3.823185726073398*^9, 
  3.823185741203909*^9}},ExpressionUUID->"c04e55dc-46a0-474b-9b6b-\
8a27150e5a06"],

Cell["Informative features usually span a range of values.", "Text",
 CellChangeTimes->{
  3.823106345196555*^9},ExpressionUUID->"dce762b6-cc2f-4fb4-afae-\
0941534c35be"],

Cell["\<\
If all values in a column are the same, the feature is unlikely to be \
discriminatory or useful. \
\>", "Item",
 CellChangeTimes->{{3.725820009052711*^9, 3.7258200140512342`*^9}, {
   3.725820049038796*^9, 3.725820076772826*^9}, {3.725820157613626*^9, 
   3.7258201755147676`*^9}, {3.725974144874983*^9, 3.72597414941696*^9}, {
   3.7259771295107193`*^9, 3.725977184858878*^9}, 
   3.8231063426839113`*^9},ExpressionUUID->"09b6f237-8612-4847-a744-\
c7f0bf566009"],

Cell["\<\
If the observed range of values appears less than expected, an unexpected \
cutoff may have been applied across the data.\
\>", "Item",
 CellChangeTimes->{{3.725818203817775*^9, 3.725818203820015*^9}, {
  3.725818255072269*^9, 3.725818325388665*^9}, {3.725819974251046*^9, 
  3.725819975737342*^9}},ExpressionUUID->"8a5b6a09-64b5-499e-bb58-\
49bfaba1286c"],

Cell["\<\
If the range of values is different from what is expected, some form of unit \
conversion may be required (metric vs. imperial).\
\>", "Item",
 CellChangeTimes->{{3.725818203817775*^9, 3.725818203820015*^9}, {
   3.725818255072269*^9, 3.725818421257881*^9}, {3.725819315089513*^9, 
   3.725819336093066*^9}, 
   3.823105530954693*^9},ExpressionUUID->"bfa56dab-b451-46e4-8f2b-\
0f22ea9a42aa"],

Cell["Here is some sample data:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 
  3.823184769791551*^9}},ExpressionUUID->"c97a216d-9410-4a32-bb44-\
df03f60c5328"],

Cell[BoxData[
 RowBox[{"housePriceDataRaw", " "}]], "Input",
 CellChangeTimes->{{3.72582069886789*^9, 3.725820705182866*^9}, {
   3.725821143682032*^9, 3.725821145054408*^9}, 3.725822096100583*^9, 
   3.725822127203237*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"4baa0a11-1324-45b6-9974-7a8aba241ae7"],

Cell[TextData[{
 "Find the ",
 StyleBox[ButtonBox["Min",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Min"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Max",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Max"],
  FontWeight->"Bold"],
 " values for columns 2, 3 and 4:"
}], "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 
  3.823184815565922*^9}},ExpressionUUID->"e7b9154e-9b6d-4568-a605-\
ec4be26ad0d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Min", "[", 
      RowBox[{"housePriceDataRaw", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}], ",", 
     RowBox[{"Max", "[", 
      RowBox[{"housePriceDataRaw", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@", 
  " ", 
  RowBox[{"{", 
   RowBox[{"2", ",", "3", ",", "4"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.725822285671859*^9, 3.72582233815166*^9}, {
  3.725822376438386*^9, 
  3.72582244350992*^9}},ExpressionUUID->"5f261553-a98a-4d87-8cd2-\
592ca9ee9781"],

Cell["Here is same data with units:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.8231848765911493`*^9, 
  3.823184883090705*^9}},ExpressionUUID->"ea274f27-eb41-4094-a1d3-\
5884ef1ce2a5"],

Cell[BoxData[
 RowBox[{"housePriceDataWithUnits", " "}]], "Input",
 CellChangeTimes->{{3.725821161703485*^9, 3.725821190700377*^9}, 
   3.725821250840805*^9, {3.7258212989460993`*^9, 3.725821365937504*^9}, {
   3.725821405151615*^9, 3.725821432827042*^9}, {3.725821484641822*^9, 
   3.725821492751231*^9}, {3.725821573130978*^9, 3.72582157354311*^9}, {
   3.725821620945121*^9, 3.725821634989254*^9}, 
   3.725822453301978*^9},ExpressionUUID->"00ac3560-397f-4910-b03e-\
0ad45c123519"],

Cell["\<\
The maximum and minimum for a numeric feature should not be outside the \
permissible range of values. \
\>", "Item",
 CellChangeTimes->{{3.7171838706850243`*^9, 3.717183883378871*^9}, {
   3.725818000554653*^9, 3.725818019095195*^9}, 
   3.725818146856598*^9},ExpressionUUID->"528e464f-fbcc-4c94-8b0f-\
9df0dd3a22a1"],

Cell["Here is some sample data:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 
  3.823184769791551*^9}},ExpressionUUID->"31a182cf-9712-4e73-8b61-\
9a08bd718a0e"],

Cell[BoxData["scotlandPopulationData"], "Input",
 CellChangeTimes->{{3.725824157208044*^9, 3.7258241594688873`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"f70c8eaa-4725-44c5-bc5f-761d3a2a2a12"],

Cell["\<\
Find the minimum and maximum values of the population of the regions:\
\>", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.823184968907873*^9, 
  3.823184992329815*^9}},ExpressionUUID->"579bb5ff-1828-4fb7-88bf-\
90ff1d19e33b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Min", "[", 
    RowBox[{"scotlandPopulationData", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], ",", 
   RowBox[{"Max", "[", 
    RowBox[{"scotlandPopulationData", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.725824163773409*^9, 
  3.725824195367053*^9}},ExpressionUUID->"72233d26-97f3-4399-b92c-\
8cf1eddf0072"],

Cell["The population of the entire country:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.823185233015637*^9, 
  3.823185238493598*^9}},ExpressionUUID->"4c5ff6b0-c433-4715-b125-\
1ac9a7278850"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"Scotland, United Kingdom\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"AdministrativeDivision\"", ",", 
        RowBox[{"{", 
          RowBox[{"\"Scotland\"", ",", "\"UnitedKingdom\""}], "}"}]}], "]"}], 
    "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Scotland\\\", \
\\\"UnitedKingdom\\\"}]\"", "\"administrative division\""},
   "Entity"], "[", "\"\<Population\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.725824273924382*^9, 
  3.7258242792596083`*^9}},ExpressionUUID->"bbd5e7dd-cd80-4750-8fcc-\
5efea7aa887a"],

Cell["\<\
Any \[OpenCurlyDoubleQuote]known\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]common sense\[CloseCurlyDoubleQuote] relationship \
between features of the data can be verified with numerical/logical \
consistency checks.\
\>", "Item",
 CellChangeTimes->{{3.823185715030923*^9, 3.823185715408393*^9}, {
  3.8232704385725946`*^9, 
  3.823270442668659*^9}},ExpressionUUID->"bacc4034-e7ef-48e7-a9cc-\
408fa2c3b587"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Is the Cardinality of a Feature as Expected?", "Subsection",
 CellChangeTimes->{{3.717183828486261*^9, 3.7171838323831663`*^9}, {
  3.8231857570797653`*^9, 
  3.823185772175501*^9}},ExpressionUUID->"ec31c7b1-e74b-470a-b03f-\
2050b5e2d225"],

Cell["Cardinality of a feature should conform to expectations.", "Text",
 CellChangeTimes->{{3.717183836668335*^9, 3.717183857979287*^9}, {
   3.725808705923746*^9, 3.7258087268726254`*^9}, {3.725817807617702*^9, 
   3.725817832677471*^9}, {3.7259768731166477`*^9, 3.725976876739275*^9}, {
   3.725977215541665*^9, 3.725977275797101*^9}, 
   3.8231064133434362`*^9},ExpressionUUID->"6de4d386-3409-4ff1-8aea-\
74d00932da6c"],

Cell["\<\
 For example, a Boolean feature (with True/False values) with a number of \
unique feature values greater than 2 indicates a problem\[LongDash]some \
samples may have values other than True or False.\
\>", "Text",
 CellChangeTimes->{{3.717183836668335*^9, 3.717183857979287*^9}, {
  3.725808705923746*^9, 3.7258087268726254`*^9}, {3.725817807617702*^9, 
  3.725817832677471*^9}, {3.7259768731166477`*^9, 3.725976876739275*^9}, {
  3.725977215541665*^9, 3.725977275797101*^9}, {3.8231064225112143`*^9, 
  3.8231064238048983`*^9}, {3.823185306939436*^9, 3.823185307299158*^9}, {
  3.823270455499949*^9, 3.823270462636611*^9}, {3.8232727100706463`*^9, 
  3.823272710317925*^9}},ExpressionUUID->"7408a366-4bd4-41be-90cf-\
1a59a48605cc"],

Cell["Here is some sample data:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 
  3.823184769791551*^9}},ExpressionUUID->"e34f3c32-63c4-474f-bde4-\
42225a07a036"],

Cell[BoxData[
 RowBox[{"membershipData", " "}]], "Input",
 CellChangeTimes->{{3.725824359932962*^9, 3.725824433013496*^9}, {
  3.725824488015774*^9, 3.725824513728668*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"9e4396f5-f222-4fbe-abb2-57eedb8eb674"],

Cell["Find the unique feature values:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.8231853305199947`*^9, 
  3.8231853522431307`*^9}},ExpressionUUID->"4d1c7d2b-57be-47c0-ba0e-\
5cc1808c99fd"],

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "[", 
  RowBox[{"Values", "[", "membershipData", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.725824437612775*^9, 3.725824462923201*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"6f4ff8eb-399b-4e7e-90e4-48c064a6a5bd"],

Cell["\<\
Find the Head of each expression representing the feature values:\
\>", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.8231853305199947`*^9, 3.8231853522431307`*^9}, {3.823185425471116*^9, 
  3.8231854420186768`*^9}},ExpressionUUID->"0e168c30-078d-4a24-8b16-\
d6a3eb5cea7c"],

Cell[BoxData[
 RowBox[{"Head", " ", "/@", " ", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{"Values", "[", "membershipData", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.725824437612775*^9, 3.725824472819203*^9}, {
   3.725824531048193*^9, 3.725824533364789*^9}, 3.8231854010034227`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"dbaa7043-7d76-4ca1-aab1-acbe0b7f92c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Do Numeric Feature Values Show Variance and Outliers?", "Subsection",
 CellChangeTimes->{{3.7171839333335667`*^9, 3.7171839387429028`*^9}, {
  3.725844438000176*^9, 3.725844453565978*^9}, {3.725845046383934*^9, 
  3.725845051237966*^9}, {3.8231857787452517`*^9, 3.823185797825946*^9}, {
  3.8231990322601967`*^9, 3.8231990334519787`*^9}, {3.8232704698682337`*^9, 
  3.823270470508781*^9}},ExpressionUUID->"e07cd7fb-b0f2-4297-ac71-\
11827ce937db"],

Cell["\<\
If the data points come from known statistical distributions, then they \
should conform to the parameters of those distributions. \
\>", "Text",
 CellChangeTimes->{{3.7171839462992973`*^9, 3.717183964356378*^9}, 
   3.7258087349006*^9, {3.72581817170393*^9, 3.725818178863648*^9}, {
   3.725844456229207*^9, 3.725844520739938*^9}, {3.725845029966921*^9, 
   3.7258450344286003`*^9}, 3.725886318281486*^9, {3.725886654405486*^9, 
   3.72588667908069*^9}, {3.725977310433516*^9, 3.725977328924732*^9}, 
   3.8231064420134153`*^9},ExpressionUUID->"014ea171-38cc-43ca-81f0-\
965ef21b44d4"],

Cell["\<\
For a normal distribution of mean value 5 and standard deviation of 2, 12 \
would be a suspicious value.\
\>", "Text",
 CellChangeTimes->{{3.7171839462992973`*^9, 3.717183964356378*^9}, 
   3.7258087349006*^9, {3.72581817170393*^9, 3.725818178863648*^9}, {
   3.725844456229207*^9, 3.725844520739938*^9}, {3.725845029966921*^9, 
   3.7258450344286003`*^9}, 3.725886318281486*^9, {3.725886654405486*^9, 
   3.72588667908069*^9}, {3.725977310433516*^9, 3.725977328924732*^9}, {
   3.823106488988969*^9, 3.823106501106933*^9}, {3.823185459649798*^9, 
   3.823185459996174*^9}},ExpressionUUID->"7a5dc4ce-dce0-4f4d-8226-\
d797510bf4b9"],

Cell["Here is some sample data:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.8231853305199947`*^9, 3.8231853522431307`*^9}, {3.8231854670739393`*^9, 
  3.823185470133162*^9}},ExpressionUUID->"a4e0b829-66a5-4d5d-b9f3-\
1d7a87024678"],

Cell[BoxData["supposedlyNormalDistributionData"], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"60f6a7e6-ad4d-4765-8fd6-4837d9d35872"],

Cell[TextData[{
 "Create a ",
 StyleBox[ButtonBox["Histogram",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Histogram"],
  FontWeight->"Bold"],
 " of the data values to see if there are any outliers:"
}], "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.8231853305199947`*^9, 3.8231853522431307`*^9}, {3.8231854670739393`*^9, 
  3.823185506986087*^9}},ExpressionUUID->"a9efb721-5f16-41e7-a668-\
9aa2e78eae9c"],

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"supposedlyNormalDistributionData", ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.725885487128125*^9, 3.7258855104670753`*^9}, 
   3.7258860021119537`*^9, {3.72588650894532*^9, 3.725886509399166*^9}, {
   3.725886555132861*^9, 3.7258865785205173`*^9}, 3.7258866140431633`*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"c3e40fe3-2704-42bf-9ec6-8607bc5a7ca7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Are Nominal Features Misspelled?", "Subsection",
 CellChangeTimes->{{3.7171839716427383`*^9, 3.717184001720635*^9}, 
   3.7171841544966393`*^9, {3.725887581046047*^9, 3.7258875814362087`*^9}, {
   3.8231858106063557`*^9, 
   3.823185821654461*^9}},ExpressionUUID->"71821bec-d5c9-4733-b530-\
9c87e73bfb87"],

Cell["\<\
Sorting nominal features can bring misspelled values next to correctly \
spelled values and draw attention to errors.\
\>", "Text",
 CellChangeTimes->{{3.717184015162838*^9, 3.7171840364785233`*^9}, 
   3.725819383512815*^9, {3.725887799752398*^9, 
   3.7258878096788*^9}},ExpressionUUID->"e4a94d96-1ddc-4431-91e8-\
9387bd8eb790"],

Cell["Here is some sample data:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.8231853305199947`*^9, 3.8231853522431307`*^9}, {3.8231854670739393`*^9, 
  3.823185470133162*^9}},ExpressionUUID->"09975b1a-e67f-4d85-9a23-\
de9cd1fef0ac"],

Cell[BoxData["residentData"], "Input",ExpressionUUID->"5405d4af-7256-4005-a13e-c2abce996978"],

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{"residentData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.823185852226488*^9, 3.823185879838915*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"2db4c4bb-595c-440d-b436-f49789d5f39b"],

Cell["Sort the unique feature values alphabetically:", "CodeText",
 CellChangeTimes->{{3.823184764898107*^9, 3.823184769791551*^9}, {
  3.8231853305199947`*^9, 3.8231853522431307`*^9}, {3.8231854670739393`*^9, 
  3.823185470133162*^9}, {3.823185914230999*^9, 
  3.823185952458843*^9}},ExpressionUUID->"92ab2856-b80a-474a-a2e0-\
ec4cf75488f1"],

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"residentData", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.725887513632599*^9, 3.725887523465341*^9}, {
  3.8231858836423807`*^9, 
  3.823185889098967*^9}},ExpressionUUID->"0a43cfbd-440a-404b-8036-\
d6b44902f441"],

Cell["", "EndOfSlide",ExpressionUUID->"eb266762-3d5d-4bfa-93ba-f999075c8b9a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"8e6cf2e3-8dbb-42ea-bd73-db3c389cf392"],

Cell[CellGroupData[{

Cell["Dealing with Missing Data", "Section",
 CellChangeTimes->{{3.823026011282647*^9, 
  3.823026014915791*^9}},ExpressionUUID->"06c59956-740d-453a-aa86-\
7567f2195fdb"],

Cell["Here is a sample dataset with missing data:", "CodeText",
 CellChangeTimes->{{3.823196556353252*^9, 3.823196563484424*^9}, {
   3.823197617285136*^9, 3.823197620703886*^9}, 
   3.823199048596345*^9},ExpressionUUID->"bc76f270-0bc3-4440-a6b1-\
20a4eae36305"],

Cell[BoxData[
 RowBox[{
  RowBox[{"missingData", " ", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "0.986`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.7931811599535044, 0.9794035526034883, 0.1736111262263147], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.5287874399690029, 0.652935701735659, 0.11574075081754313`],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.7931811599535044`", ",", "0.9794035526034883`", ",", 
               "0.1736111262263147`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.7931811599535044, 0.9794035526034883, 0.1736111262263147]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.7931811599535044, 0.9794035526034883, 0.1736111262263147],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "0.0701`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.4966346762097671, 0.42506700252493146`, 0.6020480735371379], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.33108978413984474`, 0.28337800168328764`, 0.40136538235809194`],
           
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.4966346762097671`", ",", "0.42506700252493146`", ",", 
               "0.6020480735371379`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.4966346762097671, 0.42506700252493146`, 0.6020480735371379]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.4966346762097671, 0.42506700252493146`, 0.6020480735371379],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "0.356`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.17005048612802431`, 0.32340985960079616`, 0.5088057001465967], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.11336699075201621`, 0.21560657306719744`, 0.3392038000977311],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.17005048612802431`", ",", "0.32340985960079616`", ",",
                "0.5088057001465967`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.17005048612802431`, 0.32340985960079616`, 0.5088057001465967]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[
        0.17005048612802431`, 0.32340985960079616`, 0.5088057001465967],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "0.859`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.26079904402442433`, 0.6645405387012917, 0.626762001873512], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.17386602934961623`, 0.4430270258008612, 0.4178413345823414],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.26079904402442433`", ",", "0.6645405387012917`", ",", 
               "0.626762001873512`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.26079904402442433`, 0.6645405387012917, 0.626762001873512]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.26079904402442433`, 0.6645405387012917, 0.626762001873512],
        
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "7", ",", "0.87`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.35006141637857935`, 0.241784130785629, 0.8287210560502678], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.23337427758571958`, 0.16118942052375268`, 0.5524807040335119],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.35006141637857935`", ",", "0.241784130785629`", ",", 
               "0.8287210560502678`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.35006141637857935`, 0.241784130785629, 0.8287210560502678]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.35006141637857935`, 0.241784130785629, 0.8287210560502678],
        
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "0.372`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.6040242604212316, 0.2495041618176539, 0.1612746936530718], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.4026828402808211, 0.16633610787843595`, 0.1075164624353812],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.6040242604212316`", ",", "0.2495041618176539`", ",", 
               "0.1612746936530718`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.6040242604212316, 0.2495041618176539, 0.1612746936530718]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.6040242604212316, 0.2495041618176539, 0.1612746936530718],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "\"\<NA\>\"", ",", "0.356`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.5812714623512671, 0.2969407447142949, 0.49572510310649687`], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.3875143082341781, 0.1979604964761966, 0.3304834020709979],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.5812714623512671`", ",", "0.2969407447142949`", ",", 
               "0.49572510310649687`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.5812714623512671, 0.2969407447142949, 0.49572510310649687`]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.5812714623512671, 0.2969407447142949, 0.49572510310649687`],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3", ",", "0.751`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.6124614477104853, 0.378535780066783, 0.878636444824388], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.4083076318069902, 0.2523571867111887, 0.5857576298829253],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.6124614477104853`", ",", "0.378535780066783`", ",", 
               "0.878636444824388`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.6124614477104853, 0.378535780066783, 0.878636444824388]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.6124614477104853, 0.378535780066783, 0.878636444824388],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "0.157`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.664181976745267, 0.25405278277799814`, 0.12343422551954197`], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.4427879844968447, 0.16936852185199877`, 0.08228948367969466],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.664181976745267`", ",", "0.25405278277799814`", ",", 
               "0.12343422551954197`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.664181976745267, 0.25405278277799814`, 0.12343422551954197`]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[
        0.664181976745267, 0.25405278277799814`, 0.12343422551954197`],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "\"\<NA\>\"", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.5918739987770754, 0.7079781022288523, 0.7994674398394699], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.3945826658513836, 0.4719854014859015, 0.5329782932263133],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.5918739987770754`", ",", "0.7079781022288523`", ",", 
               "0.7994674398394699`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.5918739987770754, 0.7079781022288523, 0.7994674398394699]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.5918739987770754, 0.7079781022288523, 0.7994674398394699],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "0.685`", ",", "\"\<NA\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5", ",", "0.458`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.8929266436889802, 0.6764412122657568, 0.1876179631453354], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.5952844291259869, 0.4509608081771712, 0.1250786420968903],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.8929266436889802`", ",", "0.6764412122657568`", ",", 
               "0.1876179631453354`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.8929266436889802, 0.6764412122657568, 0.1876179631453354]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.8929266436889802, 0.6764412122657568, 0.1876179631453354],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "0.0106`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.5746966560731546, 0.5532290683267522, 0.6433151858365447], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.3831311040487697, 0.3688193788845015, 0.42887679055769645`],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.5746966560731546`", ",", "0.5532290683267522`", ",", 
               "0.6433151858365447`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.5746966560731546, 0.5532290683267522, 0.6433151858365447]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.5746966560731546, 0.5532290683267522, 0.6433151858365447],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0.697`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.4036028221713692, 0.6499596806079162, 0.1976339227708881], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.2690685481142462, 0.4333064537386108, 0.1317559485139254],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.4036028221713692`", ",", "0.6499596806079162`", ",", 
               "0.1976339227708881`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.4036028221713692, 0.6499596806079162, 0.1976339227708881]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.4036028221713692, 0.6499596806079162, 0.1976339227708881],
        Editable->False,
        Selectable->False]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "6", ",", "0.0239`", ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
             0.2242880379356622, 0.11173047800711289`, 0.0796914387814045], 
             RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           DefaultBaseStyle->"ColorSwatchGraphics",
           Frame->True,
           
           FrameStyle->RGBColor[
            0.1495253586237748, 0.07448698533807527, 0.05312762585426967],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 
              1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
               Magnification])}],
           PlotRangePadding->None],
          StyleBox[
           RowBox[{"RGBColor", "[", 
             
             RowBox[{"0.2242880379356622`", ",", "0.11173047800711289`", ",", 
               "0.0796914387814045`"}], "]"}], NumberMarks -> False]],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = 
             RGBColor[
              0.2242880379356622, 0.11173047800711289`, 0.0796914387814045]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0.2242880379356622, 0.11173047800711289`, 0.0796914387814045],
        Editable->False,
        Selectable->False]}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82319653621629*^9, 3.823196538128989*^9}, 
   3.823196625338574*^9, {3.823197624735911*^9, 3.8231976261744556`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"a3e4f30a-ebb0-468f-992b-0ab5dd63e1fd"],

Cell[BoxData[
 RowBox[{"Grid", "[", "missingData", "]"}]], "Input",
 CellChangeTimes->{{3.823196632982287*^9, 3.823196636296167*^9}, {
  3.8231975985551023`*^9, 3.823197630223127*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"9e1a6687-4524-4982-8b62-2f1620bd2e1b"],

Cell[CellGroupData[{

Cell["Ignore Missing Data", "Subsection",
 CellChangeTimes->{{3.8231965884153357`*^9, 
  3.823196591587172*^9}},ExpressionUUID->"d79e7a6b-86a2-437f-a3e7-\
909295bb636e"],

Cell["\<\
Use pattern-matching to delete samples with missing data elements:\
\>", "CodeText",
 CellChangeTimes->{{3.8231966088121977`*^9, 
  3.823196619329793*^9}},ExpressionUUID->"6f13bd10-4bad-4228-9bec-\
9b255b21f0b3"],

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{"missingData", ",", 
   RowBox[{"{", 
    RowBox[{"___", ",", "\"\<NA\>\"", ",", "___"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823196640891062*^9, 3.823196677883224*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"97ba3a85-87b2-4091-a3a5-d6fa5103771d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Replace with Most Common Feature Value", "Subsection",
 CellChangeTimes->{{3.823196690801853*^9, 
  3.823196699137507*^9}},ExpressionUUID->"b474e1f7-c1e9-4861-b1bd-\
b2c5ad8428a5"],

Cell["List elements from the second column:", "CodeText",
 CellChangeTimes->{{3.823196720001532*^9, 
  3.823196735294834*^9}},ExpressionUUID->"0f443150-2bbe-4524-95ee-\
feefa4f7b66a"],

Cell[BoxData[
 RowBox[{"missingData", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.823196736773497*^9, 3.8231967404925823`*^9}, {
  3.823197605777371*^9, 3.8231976063601217`*^9}, {3.8231976400888033`*^9, 
  3.823197641080621*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"0cb5071c-4192-4b56-a72a-17d2acfdd146"],

Cell["\<\
Replace \[OpenCurlyDoubleQuote]NA\[CloseCurlyDoubleQuote] with the most \
frequently occurring value from the list:\
\>", "CodeText",
 CellChangeTimes->{
  3.8231967204967117`*^9, {3.823196751055684*^9, 3.823196766542412*^9}, 
   3.823196802867728*^9},ExpressionUUID->"bf62d293-e4b9-4ce3-a61b-\
58152071bb46"],

Cell[BoxData[
 RowBox[{"mostCommon", " ", "=", 
  RowBox[{"First", "[", 
   RowBox[{"Commonest", "[", 
    RowBox[{"missingData", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823197575076188*^9, 3.8231975830254993`*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"605026f8-20eb-499b-bb27-ac689c2a266f"],

Cell[BoxData[
 RowBox[{"missingData", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a_", ",", "\"\<NA\>\"", ",", "c_", ",", "d_"}], "}"}], 
   "\[RuleDelayed]", "  ", 
   RowBox[{"{", 
    RowBox[{"a", ",", "mostCommon", ",", "c", ",", "d"}], "}"}]}]}]], "Input",\

 CellChangeTimes->{{3.823196736773497*^9, 3.8231967404925823`*^9}, {
   3.823196772579474*^9, 3.823196824946751*^9}, 3.8231975924238567`*^9, {
   3.823197649167687*^9, 3.8231976816605663`*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"8ba1780b-c39a-493b-a16c-2e145456dc78"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Replace with the Mean Feature Value", "Subsection",
 CellChangeTimes->{{3.823196839156845*^9, 
  3.823196854263836*^9}},ExpressionUUID->"fb27d666-a53c-48f3-a236-\
5b56033257b9"],

Cell["List the feature values in the third column:", "CodeText",
 CellChangeTimes->{{3.8231968679886637`*^9, 
  3.823196878367841*^9}},ExpressionUUID->"94d9658a-cfa6-475d-a67a-\
157738fb816f"],

Cell[BoxData[
 RowBox[{"missingData", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.823196880850007*^9, 3.82319688489727*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"7065ec11-4d69-4f4c-b882-459ee0e14ab0"],

Cell["List only the numeric feature values:", "CodeText",
 CellChangeTimes->{{3.823196948562175*^9, 
  3.8231969567963953`*^9}},ExpressionUUID->"64263a67-52d2-4176-a374-\
2727dc5e5e01"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"missingData", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "3"}], "]"}], "]"}], ",", 
   RowBox[{"_", "?", "NumberQ"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823196880850007*^9, 3.823196923732435*^9}, {
  3.823196961870969*^9, 3.82319698041051*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"ae3e7ac5-1d90-4bdc-b69c-3918fd16f6ef"],

Cell["\<\
Find the mean of the numeric values and use it to replace the \
\[OpenCurlyDoubleQuote]NA\[CloseCurlyDoubleQuote]:\
\>", "CodeText",
 CellChangeTimes->{{3.823196992594615*^9, 
  3.823197007117682*^9}},ExpressionUUID->"184d8ad3-4369-4926-9915-\
96ccd377fc82"],

Cell[BoxData[
 RowBox[{"meanValue", " ", "=", " ", 
  RowBox[{"Mean", "[", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"missingData", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "3"}], "]"}], "]"}], ",", 
     RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823197696512003*^9, 3.823197701310794*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"ffc234cd-67f5-400e-96b0-06df630de770"],

Cell[BoxData[
 RowBox[{"missingData", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a_", ",", "b_", ",", "\"\<NA\>\"", ",", "d_"}], "}"}], 
   "\[RuleDelayed]", " ", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "meanValue", ",", "d"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.823196880850007*^9, 3.823196923732435*^9}, {
  3.823196961870969*^9, 3.823197026287731*^9}, {3.823197694574802*^9, 
  3.823197754962956*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"7c58f797-4873-4370-b99f-c13813d2650a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Replace with a Representative Value from the Same Class", "Subsection",
 CellChangeTimes->{{3.823197076890459*^9, 
  3.823197089872429*^9}},ExpressionUUID->"c60b4300-43ab-4f4a-8c54-\
5276b2b73517"],

Cell["\<\
The first column in the dataset seems to represent binary values for two \
classes of samples:\
\>", "CodeText",
 CellChangeTimes->{{3.8231971923823957`*^9, 
  3.823197218414678*^9}},ExpressionUUID->"a54cc53c-76c7-486e-8306-\
3775d257e6ff"],

Cell[BoxData[
 RowBox[{"missingData", "//", "Grid"}]], "Input",
 CellChangeTimes->{{3.8231972265299892`*^9, 3.823197231768765*^9}, {
  3.82319776322122*^9, 3.823197764357006*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"f8cf2da1-55e4-46e5-b6bd-eea9d1430590"],

Cell["\<\
Here is the sample with the missing data in the third column:\
\>", "CodeText",
 CellChangeTimes->{{3.8231971219246807`*^9, 
  3.823197153165201*^9}},ExpressionUUID->"1f239948-acd2-4019-8596-\
cb985a2f73f0"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"missingData", ",", 
   RowBox[{"{", 
    RowBox[{"_", ",", "_", ",", "\"\<NA\>\"", ",", "_"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.823197128869481*^9, 3.82319716937644*^9}, {
  3.823197768124611*^9, 3.8231977691618147`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"eee95797-7624-43b3-a105-656b79554da9"],

Cell["Here are other samples of class \[OpenCurlyDoubleQuote]1\
\[CloseCurlyDoubleQuote]:", "CodeText",
 CellChangeTimes->{{3.8231972433465147`*^9, 
  3.823197250017914*^9}},ExpressionUUID->"1276b2f7-5ce3-46ff-ad97-\
e42aac35acc5"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"missingData", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "___"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823197253384824*^9, 3.823197260580155*^9}, {
  3.8231977736388617`*^9, 3.823197775291744*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"89bf1a31-79f2-4f7c-b7d6-719e104a5792"],

Cell["\<\
Mean feature value for the third column for samples of class \
\[OpenCurlyDoubleQuote]1\[CloseCurlyDoubleQuote]:\
\>", "CodeText",
 CellChangeTimes->{{3.8231973084946632`*^9, 
  3.823197327517577*^9}},ExpressionUUID->"9b17698c-f3c2-41ca-bc33-\
67061b00aa15"],

Cell[BoxData[
 RowBox[{"meanClass1", " ", "=", 
  RowBox[{"Mean", "[", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{"missingData", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "___"}], "}"}]}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "3"}], "]"}], "]"}], ",", "\"\<NA\>\""}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.823197253384824*^9, 3.823197260580155*^9}, {
  3.8231973299367743`*^9, 3.823197370335781*^9}, {3.8231974531598988`*^9, 
  3.823197456409086*^9}, {3.823197780231254*^9, 3.823197781244061*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"420787f7-65a6-40d8-814a-78e1067c445a"],

Cell["Replace the missing value with this mean:", "CodeText",
 CellChangeTimes->{{3.823197397954821*^9, 
  3.823197407943252*^9}},ExpressionUUID->"e3f8da66-8df2-4604-a051-\
c21fa414774b"],

Cell[BoxData[
 RowBox[{"missingData", " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "a_", ",", "\"\<NA\>\"", ",", "c_"}], "}"}], 
   "\[RuleDelayed]", " ", 
   RowBox[{"{", 
    RowBox[{"1", ",", "a", ",", "meanClass1", ",", "c"}], "}"}]}]}]], "Input",\

 CellChangeTimes->{{3.8231974119430532`*^9, 3.8231974141789083`*^9}, {
  3.823197461044191*^9, 3.823197508923621*^9}, {3.8231977847311993`*^9, 
  3.823197786092717*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"0c3d1592-1d1b-4736-bf1f-0634c91efea7"],

Cell["\<\
You can use the mean, median or the most common value as a representative \
replacement .\
\>", "Text",
 CellChangeTimes->{{3.8231977956585693`*^9, 3.823197828818729*^9}, 
   3.8232708960681763`*^9},ExpressionUUID->"75df22ba-cd1c-4250-bbd9-\
6bfd58a40c8e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Hot Deck Imputation", "Subsection",
 CellChangeTimes->{{3.823197842542218*^9, 
  3.823197845973693*^9}},ExpressionUUID->"427001b2-d9b2-49fe-9164-\
07c203df59f7"],

Cell["List the samples with missing data in the last column:", "CodeText",
 CellChangeTimes->{{3.7619233992833*^9, 3.761923406554564*^9}, {
  3.7619234557361593`*^9, 
  3.761923458591547*^9}},ExpressionUUID->"c66b8eee-ee20-401b-a97d-\
eb24504ac2d8"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"missingData", ",", 
   RowBox[{"{", 
    RowBox[{"_", ",", "_", ",", "_", ",", "\"\<NA\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.823197868840682*^9, 3.8231978900632133`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"e99446ce-605b-486c-9a14-1867c0e141e5"],

Cell["\<\
List the samples that do NOT have missing data in any column:\
\>", "CodeText",
 CellChangeTimes->{{3.7619233992833*^9, 3.761923406554564*^9}, {
  3.7619234557361593`*^9, 3.761923458591547*^9}, {3.823197915398985*^9, 
  3.823197918885354*^9}, {3.823197998355338*^9, 
  3.8231979986704493`*^9}},ExpressionUUID->"43fa2843-3fcf-41d3-840b-\
21c5c646c463"],

Cell[BoxData[
 RowBox[{"goodSamples", " ", "=", 
  RowBox[{"DeleteCases", "[", 
   RowBox[{"missingData", ",", 
    RowBox[{"{", 
     RowBox[{"___", ",", "\"\<NA\>\"", ",", "___"}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.823197868840682*^9, 3.8231978900632133`*^9}, {
  3.8231979264683847`*^9, 3.823197929629107*^9}, {3.823198015626728*^9, 
  3.823198078219391*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"8c449c19-09f3-45d4-bd4f-3af31a2615d4"],

Cell["\<\
Find the sample that is nearest to the sample \[OpenCurlyDoubleQuote]missing,\
\[CloseCurlyDoubleQuote] based on feature values in columns 1, 2 and 3:\
\>", "CodeText",
 CellChangeTimes->{{3.7619235967791367`*^9, 3.761923616305287*^9}, {
  3.7627968379743223`*^9, 3.762796855166637*^9}, {3.76760819312792*^9, 
  3.7676081939599657`*^9}},ExpressionUUID->"676564f7-e4fe-4e5b-9268-\
2ef2747998c4"],

Cell[BoxData[
 RowBox[{"closest", " ", "=", 
  RowBox[{"First", "@", 
   RowBox[{"Nearest", "[", 
    RowBox[{
     RowBox[{"goodSamples", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"1", ";;", "3"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3", ",", "0.685`"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.823197959065503*^9, 3.823197981492529*^9}, {
  3.8231980850623503`*^9, 3.823198097163611*^9}, {3.8231981413392057`*^9, 
  3.823198152424555*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"029e9c54-8b7a-4e5d-8736-28ffea982fe9"],

Cell[BoxData[
 RowBox[{"replacementColor", " ", "=", 
  RowBox[{"Last", "@", 
   RowBox[{"First", "@", 
    RowBox[{"Cases", "[", 
     RowBox[{"missingData", ",", 
      RowBox[{"Append", "[", 
       RowBox[{"closest", ",", "_"}], "]"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.823198126230946*^9, 3.8231981308780327`*^9}, {
  3.8231981659156647`*^9, 3.823198218769652*^9}, {3.823198317130856*^9, 
  3.8231983226521606`*^9}, {3.82319835682001*^9, 3.823198371386941*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"cfba1a40-bd8d-45ed-bec4-34c22a06cfe5"],

Cell["Use it to replace the missing color:", "CodeText",
 CellChangeTimes->{{3.823198383245125*^9, 
  3.8231984034378443`*^9}},ExpressionUUID->"d5acc04a-0166-4329-91c2-\
ccb2277b4f78"],

Cell[BoxData[
 RowBox[{"missingData", " ", "/.", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a_", ",", "b_", ",", "c_", ",", "\"\<NA\>\""}], "}"}], 
   "\[RuleDelayed]", " ", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "replacementColor"}], 
    "}"}]}]}]], "Input",
 CellChangeTimes->{{3.823198408596652*^9, 3.823198432779216*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"bc4169ca-d130-4db6-9b14-2540717b3394"],

Cell["\<\
You can use machine learning algorithms for regression or classification to \
predict a replacement for the missing value based on other feature values in \
the dataset.\
\>", "Text",
 CellChangeTimes->{{3.823198503123802*^9, 
  3.823198553738491*^9}},ExpressionUUID->"3fee5913-ade6-454c-b83f-\
49b31860256d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Replace with a Special Symbol", "Subsection",
 CellChangeTimes->{{3.823198464954031*^9, 3.823198492658003*^9}, {
  3.8231985699053373`*^9, 
  3.823198607825782*^9}},ExpressionUUID->"0cbf22a7-c9b1-4e06-a9b6-\
cfc6b64ef767"],

Cell[TextData[{
 "Replace \[OpenCurlyDoubleQuote]NA\[CloseCurlyDoubleQuote] with ",
 StyleBox[ButtonBox["Missing",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Missing"],
  FontWeight->"Bold"],
 ": "
}], "CodeText",
 CellChangeTimes->{{3.823197182932925*^9, 3.823197188130307*^9}, {
  3.8231984054853277`*^9, 3.823198405980508*^9}, {3.823198561310725*^9, 
  3.823198566406115*^9}, {3.82319861070883*^9, 
  3.8231986187641087`*^9}},ExpressionUUID->"54e372e6-947b-4867-92bc-\
9731ab80f5b3"],

Cell[BoxData[
 RowBox[{"missingData", "/.", " ", 
  RowBox[{"\"\<NA\>\"", "\[Rule]", " ", 
   RowBox[{"Missing", "[", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.823198623125937*^9, 3.823198636191136*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"c212a988-36ad-4d3c-a124-7613ee63ff72"],

Cell["\<\
Missing is handled seamlessly by most Wolfram Language functions:\
\>", "CodeText",
 CellChangeTimes->{{3.823198667330793*^9, 
  3.823198683957995*^9}},ExpressionUUID->"1ca04d89-0300-4d2e-94e9-\
03c947e0f3b4"],

Cell[BoxData[
 RowBox[{"FeatureSpacePlot", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.823198647167704*^9, 3.8231986541234293`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"7b9a7a25-ed5a-4017-8e15-8bae448ff18b"],

Cell["", "EndOfSlide",ExpressionUUID->"ac528fd2-b42b-4349-bddb-1d5dc7e203df"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"8636fa35-9052-4d77-94fc-9506baaaa6df"],

Cell[CellGroupData[{

Cell["Examples", "Section",
 CellTags->"Examples",ExpressionUUID->"cd6654d9-e024-4629-b678-1a18a46be463"],

Cell["\<\
This section highlights applied examples involving importing data, cleaning \
and restructuring data, filtering and extracting parts, analysis and \
visualization.\
\>", "Text",
 CellChangeTimes->{
  3.8225652784554977`*^9, {3.823011654962142*^9, 3.82301169244814*^9}, {
   3.8231944705172653`*^9, 3.8231944901695147`*^9}, 3.8232727980650043`*^9},
 CellTags->"Examples",ExpressionUUID->"7b829f00-5e4c-407e-8b33-522e30589031"],

Cell["\<\
Importing and augmenting data with information from the knowledgebase\
\>", "Item",
 CellChangeTimes->{
  3.8210094727862372`*^9, {3.822565298042568*^9, 3.822565298954864*^9}, {
   3.8227673114089727`*^9, 3.822767314525014*^9}, {3.823186008382719*^9, 
   3.8231860251217318`*^9}},
 CellTags->"Examples",ExpressionUUID->"9bb6fb0c-5926-43dd-8181-3d661fa3bb96"],

Cell["Postprocessing and visualization using bubble charts", "Item",
 CellChangeTimes->{3.8210094767386665`*^9},
 CellTags->"Examples",ExpressionUUID->"2b1cdb10-7174-4cc7-8618-d3bfb2fa96f0"],

Cell["Filtering data and statistical analysis", "Item",
 CellChangeTimes->{3.8210094785703955`*^9},
 CellTags->"Examples",ExpressionUUID->"e2adeb68-3516-44be-8a4c-34bb38f5e5f7"],

Cell["", "EndOfSlide",ExpressionUUID->"da86ffb7-ee7d-4a0d-af1a-fdd24ae66db7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"89fe6192-e2c0-4a2d-abbe-9fd41f195003"],

Cell[CellGroupData[{

Cell["Example: Importing Data from an XLS File", "Section",
 CellChangeTimes->{{3.821009361070648*^9, 3.8210093639838953`*^9}, {
   3.822766982072093*^9, 3.822766989675714*^9}, {3.822857450731943*^9, 
   3.822857459133913*^9}, {3.822858248956699*^9, 3.822858264311006*^9}, {
   3.822862820473394*^9, 3.822862821967894*^9}, 3.823188244215131*^9},
 CellTags->
  "Data Collections",ExpressionUUID->"a1e070e7-87ab-434b-85f8-1ec5c442a065"],

Cell["\<\
This example shows how you can import data from an XLS file and visualize it.\
\
\>", "Text",
 CellChangeTimes->{{3.823188224518074*^9, 
  3.823188254035893*^9}},ExpressionUUID->"c981b1d5-1698-413b-8017-\
eaccf3b37bb3"],

Cell["List the elements that can be imported from the file:", "CodeText",
 CellChangeTimes->{{3.8231882641172867`*^9, 
  3.823188274224908*^9}},ExpressionUUID->"dc232ab9-eaa3-404c-8371-\
1180f64c45b5"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<elements.xls\>\"", ",", "\"\<Elements\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8228594199860497`*^9, 3.8228594298114367`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"903d9b2a-47f5-4401-8cb1-6d4c7d2a90d8"],

Cell["List the sheets in the XLS file:", "CodeText",
 CellChangeTimes->{{3.8231882641172867`*^9, 
  3.823188301151433*^9}},ExpressionUUID->"6cfffb9b-3bfb-4593-9724-\
b1c025a61137"],

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{"\"\<elements.xls\>\"", ",", "\"\<Sheets\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8228594199860497`*^9, 3.822859441609963*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"cb6ec408-3df9-4e49-83fd-577c6077eb22"],

Cell["Import the data in the default format:", "CodeText",
 CellChangeTimes->{{3.8231882641172867`*^9, 3.823188272542448*^9}, {
  3.8231883149323893`*^9, 3.8231883220556192`*^9}, {3.823188962339278*^9, 
  3.8231889842982817`*^9}},ExpressionUUID->"865a541c-ff47-45a1-9460-\
b48c6dc6b600"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"Import", "[", "\"\<elements.xls\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.822859514388916*^9, 3.8228595562625723`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"564dc92b-ed6f-4116-8a62-37adebb1f7f0"],

Cell[TextData[{
 "Import the data in the ",
 Cell[BoxData[
 "\"\<Data\>\""], "Input",ExpressionUUID->
  "c728a7be-5154-4b20-9efe-7535c54068b3"],
 " format, as a list of full arrays, from only the first sheet:"
}], "CodeText",
 CellChangeTimes->{{3.8231882641172867`*^9, 3.823188272542448*^9}, {
   3.8231889897315893`*^9, 3.823189002928534*^9}, {3.82318904765933*^9, 
   3.823189064072296*^9}, 
   3.823270616939231*^9},ExpressionUUID->"7c3e2109-4f44-46ba-8169-\
0649a9c30ada"],

Cell[BoxData[
 RowBox[{"radioactive", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{"\"\<elements.xls\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Data\>\"", ",", "1"}], "}"}], ",", 
    RowBox[{"\"\<HeaderLines\>\"", "\[Rule]", " ", "1"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.822859449121622*^9, 3.82285946995179*^9}, {
   3.822859629410138*^9, 3.822859660403824*^9}, {3.8228616333148947`*^9, 
   3.822861634190421*^9}, 3.8228617552443323`*^9},
 CellLabel->"In[96]:=",ExpressionUUID->"9c38a328-cdc9-48f8-8cc2-517641e4762e"],

Cell[TextData[{
 "Convert the names of elements to ",
 StyleBox[ButtonBox["Element",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/entity/Element"],
  FontWeight->"Bold"],
 " entities:"
}], "CodeText",
 CellChangeTimes->{{3.823189071359971*^9, 3.823189096730966*^9}, {
  3.823189130161695*^9, 
  3.823189143222034*^9}},ExpressionUUID->"558cf653-2093-45b1-83b2-\
b0a3aea72512"],

Cell[BoxData[
 RowBox[{
  RowBox[{"radioactive", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1"}], "]"}], "]"}], "=", 
  RowBox[{
   RowBox[{"Interpreter", "[", "\"\<Element\>\"", "]"}], "/@", " ", 
   RowBox[{"radioactive", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}], " "}]}]], "Input",
 CellChangeTimes->{{3.822859449121622*^9, 3.82285946995179*^9}, {
   3.822859570314053*^9, 3.822859595825521*^9}, {3.822859673150714*^9, 
   3.822859692262383*^9}, {3.822859740943822*^9, 3.822859783804172*^9}, {
   3.822859883200634*^9, 3.8228598870587397`*^9}, {3.8228599240841703`*^9, 
   3.8228599285360403`*^9}, {3.822860001753446*^9, 3.8228600517346478`*^9}, 
   3.822860102576005*^9, {3.8228601806842203`*^9, 3.822860256407365*^9}, {
   3.822861460210265*^9, 3.8228615143900833`*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"af2c73b6-5b81-4939-a081-d7d82b718320"],

Cell["\<\
Check the head of all expressions in the first column to ensure they are all \
entities:\
\>", "CodeText",
 CellChangeTimes->{{3.8231891675929327`*^9, 
  3.823189192097398*^9}},ExpressionUUID->"1e14d19d-a85b-4686-a310-\
8cbe55971c62"],

Cell[BoxData[
 RowBox[{"Head", " ", "/@", " ", 
  RowBox[{"radioactive", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822861769590054*^9, 3.822861778753339*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"7b1601e6-3ff8-4d4f-bd88-94bccb2dabb0"],

Cell["\<\
Check the head of all expressions in the second column; that is supposed to \
be the year of discovery:\
\>", "CodeText",
 CellChangeTimes->{{3.8231891675929327`*^9, 3.823189224970325*^9}, {
  3.82327063470895*^9, 
  3.823270634812586*^9}},ExpressionUUID->"cb3ef489-868b-4336-8bb9-\
ef19108c4e96"],

Cell[BoxData[
 RowBox[{"Head", "/@", 
  RowBox[{"radioactive", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "2"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8228597329776*^9, 3.822859734339871*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"9aa492f4-c5b6-48c4-975e-2b3807474197"],

Cell[TextData[{
 "Convert each date represented as a String into ",
 StyleBox[ButtonBox["DateObject",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DateObject"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8231891675929327`*^9, 3.823189286674344*^9}, {
  3.8232728324716883`*^9, 
  3.823272833742619*^9}},ExpressionUUID->"286acb50-60a2-4adb-af31-\
dd433799d445"],

Cell[BoxData[
 RowBox[{
  RowBox[{"radioactive", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "2"}], "]"}], "]"}], "=", 
  RowBox[{
   RowBox[{
    RowBox[{"DateObject", "[", 
     RowBox[{"#", ",", "\"\<Year\>\""}], "]"}], "&"}], "/@", 
   RowBox[{"radioactive", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}], " "}]}]], "Input",
 CellChangeTimes->{{3.822859449121622*^9, 3.82285946995179*^9}, {
   3.822859570314053*^9, 3.822859595825521*^9}, {3.822859673150714*^9, 
   3.822859692262383*^9}, {3.822859740943822*^9, 3.822859783804172*^9}, {
   3.822859883200634*^9, 3.8228598870587397`*^9}, {3.8228599240841703`*^9, 
   3.8228599285360403`*^9}, {3.822860001753446*^9, 3.8228600517346478`*^9}, 
   3.822860102576005*^9, {3.8228601806842203`*^9, 3.822860256407365*^9}, {
   3.822861605910084*^9, 3.822861627758287*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"c2de4215-2ad3-4af1-b548-ac891df6caf8"],

Cell[TextData[{
 "Create a ",
 StyleBox[ButtonBox["TimeLinePlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TimeLinePlot"],
  FontWeight->"Bold"],
 " of the elements according to their year of discovery:"
}], "CodeText",
 CellChangeTimes->{{3.8231896344729967`*^9, 
  3.82318965738028*^9}},ExpressionUUID->"13c82aad-7f3c-41eb-8740-\
24b4dafd42ce"],

Cell[BoxData[
 RowBox[{"TimelinePlot", "[", 
  RowBox[{"AssociationThread", "[", 
   RowBox[{
    RowBox[{"radioactive", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
    RowBox[{"radioactive", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822860285266316*^9, 3.8228603518627157`*^9}, 
   3.8228605266219463`*^9, {3.822860596896832*^9, 3.8228606723979197`*^9}, {
   3.822861687716951*^9, 3.822861704953578*^9}, {3.822861806179161*^9, 
   3.8228618938411617`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"497ba242-dd8f-4dde-80e9-334ef6a0631a"],

Cell[TextData[{
 "Create a ",
 StyleBox[ButtonBox["DateListPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/DateListPlot"],
  FontWeight->"Bold"],
 " of the atomic numbers of the elements against the year of discovery:"
}], "CodeText",
 CellChangeTimes->{{3.82242609732323*^9, 3.822426118686345*^9}, {
  3.823189667141224*^9, 3.823189673947914*^9}, {3.82318972436407*^9, 
  3.8231897342841682`*^9}},ExpressionUUID->"1dbad9ca-d9d1-4d8f-b251-\
ca99531ae82c"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{
   RowBox[{"radioactive", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;", "3"}]}], "]"}], "]"}], ",", 
   RowBox[{"Joined", "\[Rule]", "False"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.672688048688241*^9, 3.672688109070054*^9}, {
   3.6726881629817095`*^9, 3.6726881758118277`*^9}, {3.672688237314034*^9, 
   3.672688237704032*^9}, {3.6726882986702414`*^9, 3.6726883085957775`*^9}, {
   3.6726888970468035`*^9, 3.6726889094139247`*^9}, 3.822425146051024*^9, 
   3.8224252071163692`*^9, {3.822425286596147*^9, 3.8224253064232683`*^9}, {
   3.8224253970435047`*^9, 3.8224254016436996`*^9}, {3.822425437693026*^9, 
   3.822425437913896*^9}, {3.822425471184154*^9, 3.822425536733965*^9}, {
   3.822425992587413*^9, 3.822425998806939*^9}, {3.822859837012494*^9, 
   3.822859857063437*^9}, {3.822860263314657*^9, 3.822860271020509*^9}},
 CellTags->"Data Collections",
 CellLabel->
  "In[106]:=",ExpressionUUID->"19ff8d91-2aae-461c-b169-96bb8cc3f154"],

Cell[TextData[{
 "You can also create a more customized ",
 StyleBox[ButtonBox["Tooltip",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Tooltip"],
  FontWeight->"Bold"],
 " for each element."
}], "Text",
 CellChangeTimes->{
  3.8219074662232304`*^9, {3.822054924333791*^9, 3.8220549246006746`*^9}, {
   3.822424813906508*^9, 3.8224248305214157`*^9}, {3.822426128361224*^9, 
   3.822426143087479*^9}, {3.823189742825448*^9, 3.823189743196804*^9}, 
   3.823189832779914*^9},
 CellTags->
  "Data Collections",ExpressionUUID->"18bb26b9-cd28-4d22-9d0c-f02d4f53d8a9"],

Cell["Create the tooltip prototype for a sample element:", "CodeText",
 CellChangeTimes->{{3.8231891675929327`*^9, 3.823189224970325*^9}, {
  3.823189800329126*^9, 
  3.823189824234746*^9}},ExpressionUUID->"cff4e67f-c3e0-453c-ad43-\
9299b5445503"],

Cell[BoxData[
 RowBox[{"element", " ", "=", " ", 
  RowBox[{"First", "@", "radioactive"}]}]], "Input",
 CellChangeTimes->{{3.82286194979313*^9, 3.8228619585200033`*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"c5d3e40e-327b-4061-90dc-4fc566564b96"],

Cell[BoxData[
 RowBox[{"Tooltip", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"element", "[", 
    RowBox[{"[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], "]"}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Grid", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<Name: \>\"", ",", 
         RowBox[{
          RowBox[{"element", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}]}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<Symbol:\>\"", ",", 
         RowBox[{
          RowBox[{"element", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<AtomicSymbol\>\"", 
          "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Alignment", "\[Rule]", "Left"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Frame", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
     RowBox[{"FrameStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Thick", ",", "Red"}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"ItemStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"None", ",", "Red"}], "}"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"BaseStyle", "\[Rule]", "14"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Background", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "LightGray", "}"}], ",", "None"}], "}"}]}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{{3.822861964886455*^9, 3.822861989512884*^9}, {
  3.822862078139492*^9, 3.822862153066012*^9}, {3.8228628493558283`*^9, 
  3.8228628541786423`*^9}},ExpressionUUID->"fe9e6587-7ed9-42bb-b9a1-\
0c8468590d1b"],

Cell["\<\
Use the tooltip code to create tooltips for each element in the dataset:\
\>", "CodeText",
 CellChangeTimes->{{3.8231891675929327`*^9, 3.823189224970325*^9}, {
  3.8231898754477167`*^9, 3.823189892376367*^9}, {3.82319006449676*^9, 
  3.823190076269668*^9}},ExpressionUUID->"41508c5b-bacf-492a-9461-\
0fa5d4faa111"],

Cell[BoxData[
 RowBox[{"labeledData", " ", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"Tooltip", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", 
        RowBox[{"{", 
         RowBox[{"2", ",", "3"}], "}"}], "]"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Grid", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Name: \>\"", ",", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}]}], 
           "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"\"\<Symbol:\>\"", ",", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<AtomicSymbol\>\"", 
             "]"}]}], "}"}]}], "\[IndentingNewLine]", "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Alignment", "\[Rule]", "Left"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"Frame", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
        RowBox[{"FrameStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Thick", ",", "Orange"}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"ItemStyle", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"None", ",", "Red"}], "}"}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"BaseStyle", "\[Rule]", "14"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "LightGray", "}"}], ",", "None"}], "}"}]}]}], "]"}]}],
      "]"}], "&"}], "/@", " ", "radioactive"}]}]], "Input",
 CellChangeTimes->{{3.822425068640235*^9, 3.82242510307626*^9}, 
   3.8224251376598263`*^9, {3.822426154703246*^9, 3.822426166140924*^9}, {
   3.822426237150234*^9, 3.822426418230068*^9}, {3.82242656089375*^9, 
   3.822426746688909*^9}, {3.822426786378148*^9, 3.82242683982614*^9}, {
   3.822860746933361*^9, 3.8228608222393637`*^9}, {3.8228608860856543`*^9, 
   3.822860892213725*^9}, {3.8228609724049883`*^9, 3.822860978275936*^9}, {
   3.822862172891658*^9, 3.822862178624859*^9}, {3.822862212152176*^9, 
   3.822862214647653*^9}, {3.8228625234630547`*^9, 3.8228625511809177`*^9}, {
   3.8228625854508247`*^9, 3.8228625915133266`*^9}, {3.822862705274893*^9, 
   3.82286272914596*^9}, {3.822862790370586*^9, 3.82286279451975*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"7c1a1ca9-0903-40c0-aa79-5d859843c589"],

Cell["\<\
Create a DateListPlot with a custom tooltip for each element:\
\>", "CodeText",
 CellChangeTimes->{{3.8231891675929327`*^9, 3.823189224970325*^9}, {
  3.823190106678877*^9, 
  3.823190125308921*^9}},ExpressionUUID->"dbc4f999-27bc-4e18-9dfd-\
a122e87f6f7e"],

Cell[BoxData[
 RowBox[{"DateListPlot", "[", 
  RowBox[{"labeledData", ",", "\[IndentingNewLine]", 
   RowBox[{"Joined", "\[Rule]", "False"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Scientific\>\""}], ",", " ", 
   "\[IndentingNewLine]", 
   RowBox[{"GridLines", " ", "\[Rule]", " ", "True"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Year of Discovery\>\"", ",", "\"\<Atomic Number\>\""}], 
     "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Radioactive Elements\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822426501570435*^9, 3.8224265327890997`*^9}, {
  3.822862219835911*^9, 3.8228622718057756`*^9}, {3.8228623974170523`*^9, 
  3.822862495109812*^9}, {3.823190085136444*^9, 
  3.823190093641313*^9}},ExpressionUUID->"1f1c5726-d633-4d7c-923d-\
db430da8bd4b"],

Cell["", "EndOfSlide",ExpressionUUID->"3541b615-cf8d-44a2-aef6-d61be6e32636"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"83869712-651a-4190-97ea-74c8800921a9"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Example: ", "Color7",
  FontSlant->"Plain"],
 "Visualizing Demographic Data with Bubble Charts"
}], "Section",
 CellChangeTimes->{{3.8210107655952578`*^9, 3.821010771604701*^9}, 
   3.822767622700021*^9},
 CellTags->
  "Data Collections",ExpressionUUID->"081cc3f5-4819-464b-9a62-6c38e595a170"],

Cell[TextData[{
 "This example is inspired by the famous visualizations created by ",
 ButtonBox["Hans Rosling",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Hans_Rosling"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Hans_Rosling"],
 " at ",
 ButtonBox["gapminder.org",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.gapminder.org/"], "https://www.gapminder.org/"},
  ButtonNote->"https://www.gapminder.org/"],
 ", specifically the ",
 ButtonBox["World Health Chart",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.gapminder.org/whc/"], None},
  ButtonNote->"https://www.gapminder.org/whc/"],
 ". Use the data from the built-in knowledgebase to visualize the GDP per \
capita, life expectancy and population of the countries of the world:"
}], "Text",
 CellChangeTimes->{
  3.8227677675144672`*^9, {3.823000489064784*^9, 3.8230005204802427`*^9}, {
   3.8231065528551207`*^9, 
   3.823106598834221*^9}},ExpressionUUID->"836f4e64-9485-4a92-8a7a-\
391e4467fd5b"],

Cell[BoxData[
 RowBox[{"?", "BubbleChart"}]], "Input",
 CellChangeTimes->{{3.822767773935604*^9, 
  3.822767776141425*^9}},ExpressionUUID->"e4235233-cf9c-4297-9663-\
5c706aff951f"],

Cell["Prototype with a small dataset:", "CodeText",
 CellChangeTimes->{{3.822055007522914*^9, 
  3.822055007807999*^9}},ExpressionUUID->"4914a0d4-c680-4fc2-bd47-\
a5c44b9bec97"],

Cell[BoxData[
 RowBox[{"data", " ", "=", "  ", 
  RowBox[{
   TemplateBox[{"\"Group of 7\"", 
     RowBox[{"EntityClass", "[", 
       RowBox[{"\"Country\"", ",", "\"GroupOf7\""}], "]"}], 
     "\"EntityClass[\\\"Country\\\", \\\"GroupOf7\\\"]\"", "\"countries\""},
    "EntityClass"], "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", "\"nominal\""}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                RowBox[{" ", "\"PerCapita\""}], "\":\"", "\"per capita\""}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", {\\\"CurrencyUnit\\\
\" -> \\\"CurrentUSDollar\\\", \\\"PerCapita\\\" -> \\\"PerCapita\\\"}]\"", 
          
          TemplateBox[{"\"nominal\"", "\"per capita\""}, 
           "ImplicitEntityPropertySequence"]},
         "ImplicitEntityPropertyToggle"]],
       EntityProperty[
       "Country", "GDP", {
        "CurrencyUnit" -> "CurrentUSDollar", "PerCapita" -> "PerCapita"}],
       SelectWithContents->True], ",", "\[IndentingNewLine]", 
      TemplateBox[{"\"life expectancy\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"Country\"", ",", "\"LifeExpectancy\""}], "]"}], 
        "\"EntityProperty[\\\"Country\\\", \\\"LifeExpectancy\\\"]\""},
       "EntityProperty"], ",", "\[IndentingNewLine]", 
      TemplateBox[{"\"population\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
        "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
       "EntityProperty"]}], "}"}], ",", "\[IndentingNewLine]", 
    "\"\<EntityAssociation\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.765799024095703*^9, 3.7657991075284767`*^9}, {
   3.765799193136397*^9, 3.76579924285182*^9}, {3.765799344141027*^9, 
   3.76579934828526*^9}, {3.7670320130003433`*^9, 3.767032025815358*^9}, 
   3.767444391954281*^9, 3.8231065387060823`*^9, {3.8231066030764437`*^9, 
   3.8231066811435633`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"02ff01f7-4126-44fe-9660-4c548c62a410"],

Cell[TextData[{
 "Visualize the data in a ",
 StyleBox[ButtonBox["BubbleChart",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/BubbleChart"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.76581356877731*^9, 3.765813577025868*^9}, {
  3.767031900355743*^9, 3.767031915210079*^9}, {3.767031957200069*^9, 
  3.767031975639864*^9}},ExpressionUUID->"7067deab-873f-46c1-b4d9-\
9743824cfae7"],

Cell[BoxData[
 RowBox[{"BubbleChart", "[", "\[IndentingNewLine]", 
  RowBox[{"data", ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Callout", "[", 
     RowBox[{"Keys", "@", "data"}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<GDPPerCapita\>\"", ",", "\"\<LifeExpectancy\>\""}], "}"}]}],
    ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<IslandColors\>\""}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"BarLegend", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<IslandColors\>\"", ",", 
       RowBox[{"QuantityMagnitude", "[", 
        RowBox[{"MinMax", "[", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "3"}], "]"}], "]"}], "]"}], "]"}]}], "}"}], 
     "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.765799445856538*^9, 3.765799693459017*^9}, {
  3.7674444047148647`*^9, 3.7674444133198757`*^9}, {3.8231066992765512`*^9, 
  3.823106713499341*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"5b07ce07-4189-4fa2-b08d-3ca772719b33"],

Cell[TextData[{
 "Write a function to create a ",
 StyleBox[ButtonBox["Grid",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Grid"],
  FontWeight->"Bold"],
 " of information to present as a Tooltip for each data point in the chart:"
}], "CodeText",
 CellChangeTimes->{{3.76581356877731*^9, 3.765813577025868*^9}, {
  3.767031900355743*^9, 3.767031915210079*^9}, {3.767031957200069*^9, 
  3.767031975639864*^9}, {3.7670321295848618`*^9, 3.7670321331055727`*^9}, {
  3.7670322098660727`*^9, 3.767032218129183*^9}, {3.767032426693944*^9, 
  3.76703247904606*^9}, {3.823272896505381*^9, 
  3.82327289796684*^9}},ExpressionUUID->"4f101df6-fd2b-41b8-83e1-\
49066625ad9e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeToolTip", "[", "c_", "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Grid", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Join", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{
           RowBox[{"c", "[", "\"\<Name\>\"", "]"}], ",", "\"\<Text\>\"", ",", 
           "Bold", ",", "18"}], "]"}], ",", "SpanFromLeft"}], "}"}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<LifeExpectancy\>\"", ",", "\"\<GDPPerCapita\>\"", ",", 
           "\"\<Population\>\""}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"c", "[", 
          RowBox[{"{", 
           RowBox[{
            TemplateBox[{"\"life expectancy\"", 
              RowBox[{"EntityProperty", "[", 
                RowBox[{"\"Country\"", ",", "\"LifeExpectancy\""}], "]"}], 
              "\"EntityProperty[\\\"Country\\\", \\\"LifeExpectancy\\\"]\""},
             "EntityProperty"], ",", 
            InterpretationBox[
             
             DynamicModuleBox[{EntityFramework`Formatting`Private`open = 
              False}, 
              TemplateBox[{
                TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
                TagBox[
                 GridBox[{{
                    TemplateBox[{
                    RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", 
                    "\"nominal\""}, "ImplicitEntityInfoRow"]}, {
                    TemplateBox[{
                    RowBox[{" ", "\"PerCapita\""}], "\":\"", 
                    "\"per capita\""}, "ImplicitEntityInfoRow"]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "GeneralizedEntityInfoGrid", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], 
                Dynamic[EntityFramework`Formatting`Private`open], 
                "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", \
{\\\"CurrencyUnit\\\" -> \\\"CurrentUSDollar\\\", \\\"PerCapita\\\" -> \
\\\"PerCapita\\\"}]\"", 
                
                TemplateBox[{"\"nominal\"", "\"per capita\""}, 
                 "ImplicitEntityPropertySequence"]},
               "ImplicitEntityPropertyToggle"]],
             EntityProperty[
             "Country", "GDP", {
              "CurrencyUnit" -> "CurrentUSDollar", "PerCapita" -> 
               "PerCapita"}],
             SelectWithContents->True], ",", 
            TemplateBox[{"\"population\"", 
              RowBox[{"EntityProperty", "[", 
                RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
              "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
             "EntityProperty"]}], "}"}], "\[IndentingNewLine]", "]"}]}], 
        "}"}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Alignment", "\[Rule]", "Left"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Frame", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Background", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"None", ",", 
       RowBox[{"{", 
        RowBox[{"LightGray", ",", "None"}], "}"}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.765800135995598*^9, 3.76580015477028*^9}, {
  3.765800207844336*^9, 3.765800223219427*^9}, {3.765800255993424*^9, 
  3.765800470446685*^9}, {3.7670324927502527`*^9, 3.767032540046899*^9}, {
  3.823106762446219*^9, 3.823106854741466*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d226c232-c9fe-4bcf-9896-f6217bc55457"],

Cell[BoxData[
 RowBox[{"makeToolTip", "[", 
  TemplateBox[{"\"United States\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], 
    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", "\"country\""},
   "Entity"], "]"}]], "Input",
 CellChangeTimes->{{3.765800230820673*^9, 3.765800234328858*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"fa566803-6f2c-45ed-b017-efccab247031"],

Cell["\<\
Add the custom tooltip to the chart and also add a legend to interpret the \
colors for the bubbles:\
\>", "CodeText",
 CellChangeTimes->{{3.76581356877731*^9, 3.765813577025868*^9}, {
  3.767031900355743*^9, 3.767031915210079*^9}, {3.767031957200069*^9, 
  3.767031975639864*^9}, {3.7670321295848618`*^9, 3.7670321331055727`*^9}, {
  3.7670322098660727`*^9, 3.767032218129183*^9}, {3.767032426693944*^9, 
  3.76703247904606*^9}, {3.767032591886236*^9, 
  3.7670326245809*^9}},ExpressionUUID->"84dee4e0-b1d4-4aa6-9554-5ddc8adaf76b"],

Cell[BoxData[
 RowBox[{"BubbleChart", "[", "\[IndentingNewLine]", 
  RowBox[{"data", ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"makeToolTip", "[", "#", "]"}], "&"}], "/@", 
       RowBox[{"Keys", "@", "data"}]}], ",", "Tooltip"}], "]"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<GDPPerCapita\>\"", ",", "\"\<LifeExpectancy\>\""}], "}"}]}],
    ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<IslandColors\>\""}], ",", 
   RowBox[{"ChartLegends", "\[Rule]", 
    RowBox[{"BarLegend", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<IslandColors\>\"", ",", 
       RowBox[{"QuantityMagnitude", "[", 
        RowBox[{"MinMax", "[", 
         RowBox[{"data", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "3"}], "]"}], "]"}], "]"}], "]"}]}], "}"}], 
     "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.765799445856538*^9, 3.765799693459017*^9}, {
   3.76580002401337*^9, 3.7658001021622458`*^9}, 3.7658001326195993`*^9, {
   3.7658004839680357`*^9, 3.765800502452979*^9}, 3.765800643626935*^9, {
   3.7658007346733093`*^9, 3.765800777173349*^9}, {3.767032627965358*^9, 
   3.7670326469321423`*^9}, {3.8231068739894953`*^9, 3.823106901011959*^9}, 
   3.823190224650181*^9},ExpressionUUID->"0a678385-1079-41c6-9d56-\
83cf6f43501c"],

Cell["\<\
Download the data for GDP per capita, life expectancy and population for all \
the member countries of the United Nations:\
\>", "CodeText",
 CellChangeTimes->{{3.767099675400383*^9, 3.767099711167849*^9}, {
  3.767442202584289*^9, 
  3.767442203015936*^9}},ExpressionUUID->"d1d98182-a138-43d7-a6e1-\
dd78ea7875b2"],

Cell[BoxData[
 RowBox[{"unData", " ", "=", 
  RowBox[{
   TemplateBox[{"\"United Nations\"", 
     RowBox[{"EntityClass", "[", 
       RowBox[{"\"Country\"", ",", "\"UnitedNations\""}], "]"}], 
     "\"EntityClass[\\\"Country\\\", \\\"UnitedNations\\\"]\"", 
     "\"countries\""},
    "EntityClass"], "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          TemplateBox[{"\"GDP\""}, "ImplicitEntityPropertyBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                RowBox[{" ", "\"CurrencyUnit\""}], "\":\"", "\"nominal\""}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                RowBox[{" ", "\"PerCapita\""}], "\":\"", "\"per capita\""}, 
               "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"EntityProperty[\\\"Country\\\", \\\"GDP\\\", {\\\"CurrencyUnit\\\
\" -> \\\"CurrentUSDollar\\\", \\\"PerCapita\\\" -> \\\"PerCapita\\\"}]\"", 
          
          TemplateBox[{"\"nominal\"", "\"per capita\""}, 
           "ImplicitEntityPropertySequence"]},
         "ImplicitEntityPropertyToggle"]],
       EntityProperty[
       "Country", "GDP", {
        "CurrencyUnit" -> "CurrentUSDollar", "PerCapita" -> "PerCapita"}],
       SelectWithContents->True], ",", "\[IndentingNewLine]", 
      TemplateBox[{"\"life expectancy\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"Country\"", ",", "\"LifeExpectancy\""}], "]"}], 
        "\"EntityProperty[\\\"Country\\\", \\\"LifeExpectancy\\\"]\""},
       "EntityProperty"], ",", "\[IndentingNewLine]", 
      TemplateBox[{"\"population\"", 
        RowBox[{"EntityProperty", "[", 
          RowBox[{"\"Country\"", ",", "\"Population\""}], "]"}], 
        "\"EntityProperty[\\\"Country\\\", \\\"Population\\\"]\""},
       "EntityProperty"]}], "}"}], ",", "\[IndentingNewLine]", 
    "\"\<EntityAssociation\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8231069786834717`*^9, 3.823106979660303*^9}, {
  3.8231070227627907`*^9, 3.823107025214925*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"53b73662-1a0a-424b-88f2-2b0c4b978a61"],

Cell["Create the BubbleChart:", "CodeText",
 CellChangeTimes->{{3.767099675400383*^9, 
  3.76709973175139*^9}},ExpressionUUID->"0aae4b1f-6215-4c4a-8707-\
4e11340a98c2"],

Cell[BoxData[
 RowBox[{"BubbleChart", "[", "\[IndentingNewLine]", 
  RowBox[{"unData", ",", "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "\[Rule]", "450"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelStyle", "\[Rule]", "14"}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<GDP per capita\>\"", ",", "\"\<Life Expectancy\>\""}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<DarkRainbow\>\""}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.7658149782560673`*^9, 3.7658150442746267`*^9}, {
   3.765815083641407*^9, 3.765815133337974*^9}, {3.765815166883255*^9, 
   3.7658152195551*^9}, 3.765815282955573*^9, {3.765815337601308*^9, 
   3.765815371302725*^9}, {3.765887269392008*^9, 3.7658873195861063`*^9}, {
   3.7658878130011787`*^9, 3.7658878139016*^9}, {3.7658878538130713`*^9, 
   3.7658878612293663`*^9}, 3.765887896121479*^9, {3.76588793321647*^9, 
   3.76588794125495*^9}, {3.76588801921618*^9, 3.765888020757597*^9}, {
   3.765888333627071*^9, 3.7658883831074657`*^9}, {3.7670999883723717`*^9, 
   3.7671000008352423`*^9}, {3.823107034642453*^9, 3.823107059357016*^9}, 
   3.823107099519086*^9, {3.8231150227025642`*^9, 3.823115023677408*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"96456550-48af-49b3-a4c3-1d98b2b12461"],

Cell[TextData[{
 StyleBox["Add ",
  FontWeight->"Plain"],
 StyleBox[ButtonBox["Callout",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Callout"],
  FontWeight->"Bold"],
 " labels for each country:"
}], "CodeText",
 CellChangeTimes->{{3.8231891675929327`*^9, 3.823189224970325*^9}, {
  3.8231902539540462`*^9, 3.8231902700146847`*^9}, {3.823190330228952*^9, 
  3.823190344010048*^9}},ExpressionUUID->"453716a8-b867-4f5c-93c1-\
47a8003141fe"],

Cell[BoxData[
 RowBox[{"BubbleChart", "[", "\[IndentingNewLine]", 
  RowBox[{"unData", ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Callout", "[", 
     RowBox[{"Keys", "@", "unData"}], "]"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "\[Rule]", "450"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelStyle", "\[Rule]", "14"}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<GDP per capita\>\"", ",", "\"\<Life Expectancy\>\""}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<DarkRainbow\>\""}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.7658149782560673`*^9, 3.7658150442746267`*^9}, {
   3.765815083641407*^9, 3.765815133337974*^9}, {3.765815166883255*^9, 
   3.7658152195551*^9}, 3.765815282955573*^9, {3.765815337601308*^9, 
   3.765815371302725*^9}, {3.765887269392008*^9, 3.7658873195861063`*^9}, {
   3.7658878130011787`*^9, 3.7658878139016*^9}, {3.7658878538130713`*^9, 
   3.7658878612293663`*^9}, 3.765887896121479*^9, {3.76588793321647*^9, 
   3.76588794125495*^9}, {3.76588801921618*^9, 3.765888020757597*^9}, {
   3.765888333627071*^9, 3.7658883831074657`*^9}, {3.7670999883723717`*^9, 
   3.7671000008352423`*^9}, {3.823107034642453*^9, 3.823107059357016*^9}, 
   3.823107099519086*^9, {3.8231150184270678`*^9, 3.823115047610517*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"3d1697a6-93aa-46de-86fc-12e7c573d50f"],

Cell[TextData[{
 "Use log of GDP per capita instead for the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "0ffa8a83-00ff-42d0-a59c-1da07e6f90ab"],
 " axis:"
}], "CodeText",
 CellChangeTimes->{{3.767348522764575*^9, 3.7673485371735888`*^9}, {
  3.767442224625342*^9, 3.767442224712802*^9}, {3.8231902958209753`*^9, 
  3.82319030196832*^9}, {3.8232707031433477`*^9, 
  3.823270708955316*^9}},ExpressionUUID->"62215bbc-df40-4312-9c3d-\
687304d405fa"],

Cell[BoxData[
 RowBox[{"unDataLogGDP", "=", " ", 
  RowBox[{"MapAt", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"N", "[", 
      RowBox[{"Log10", "[", 
       RowBox[{"QuantityMagnitude", "[", "#", "]"}], "]"}], "]"}], "&"}], ",",
     "unData", ",", 
    RowBox[{"{", 
     RowBox[{"All", ",", "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823107129038554*^9, 3.823107197294156*^9}, {
   3.823107234195818*^9, 3.823107271027431*^9}, {3.823107310034626*^9, 
   3.823107380741952*^9}, {3.823107418563219*^9, 3.823107422768585*^9}, {
   3.82311455640044*^9, 3.823114558346278*^9}, 3.823114900303155*^9},
 CellLabel->"In[53]:=",ExpressionUUID->"d8d2dc85-18e0-4aaf-86c0-2e97e60881ff"],

Cell[TextData[{
 "Recreate the chart with the GDP per capita on the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "4f55b211-3e14-4430-a2a6-4f84fa4db597"],
 " axis in log scale and the customized tooltip created earlier:"
}], "CodeText",
 CellChangeTimes->{{3.767099675400383*^9, 3.76709973175139*^9}, {
  3.767099895031155*^9, 3.767099935996396*^9}, {3.7671000444736023`*^9, 
  3.76710006308005*^9}, {3.7673485108914433`*^9, 3.767348516154991*^9}, {
  3.767442230057323*^9, 3.767442255553218*^9}, {3.8231903724950943`*^9, 
  3.823190391211849*^9}},ExpressionUUID->"d0d7c72f-c236-4bb2-9ada-\
561fbb4afa0e"],

Cell[BoxData[
 RowBox[{"BubbleChart", "[", "\[IndentingNewLine]", 
  RowBox[{"unDataLogGDP", ",", "\[IndentingNewLine]", 
   RowBox[{"ChartLabels", "\[Rule]", 
    RowBox[{"Placed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"makeToolTip", "[", "#", "]"}], "&"}], "/@", 
       RowBox[{"Keys", "@", "unDataLogGDP"}]}], ",", "Tooltip"}], "]"}]}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"ImageSize", "\[Rule]", "450"}], ",", "\[IndentingNewLine]", 
   RowBox[{"LabelStyle", "\[Rule]", "14"}], ",", "\[IndentingNewLine]", 
   RowBox[{"FrameLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<GDP per capita\>\"", ",", "\"\<Life Expectancy\>\""}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"ColorData", "[", "\"\<IslandColors\>\"", "]"}], "[", 
       RowBox[{"#", " ", "#2"}], "]"}], "&"}], ")"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"FrameTicks", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Automatic", ",", " ", "None"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{"10", "^", "#"}]}], "}"}], "&"}], "/@", 
         RowBox[{"Range", "[", "5", "]"}]}], ",", "None"}], "}"}]}], "}"}]}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"AspectRatio", "\[Rule]", 
    RowBox[{"2", "/", "3"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7658149782560673`*^9, 3.7658150442746267`*^9}, {
   3.765815083641407*^9, 3.765815133337974*^9}, {3.765815166883255*^9, 
   3.7658152195551*^9}, 3.765815282955573*^9, {3.765815337601308*^9, 
   3.765815371302725*^9}, {3.765815498700238*^9, 3.765815517173153*^9}, {
   3.7658168269738493`*^9, 3.765816827538205*^9}, 3.765889007849139*^9, {
   3.767099809327714*^9, 3.7670998126784678`*^9}, {3.767100006436351*^9, 
   3.767100020866755*^9}, {3.7671001316807547`*^9, 3.767100150752931*^9}, {
   3.767348297204564*^9, 3.7673483517357473`*^9}, {3.767348464590396*^9, 
   3.767348479050446*^9}, {3.82310744635114*^9, 3.823107455534827*^9}, {
   3.823107495593334*^9, 3.823107558076256*^9}, {3.823114257603812*^9, 
   3.8231142605371237`*^9}, {3.8231145864741173`*^9, 3.823114618534198*^9}, 
   3.823114914973259*^9, 3.8231149454691963`*^9, {3.823115063609869*^9, 
   3.8231150761733913`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"ef1d146b-6b85-4e3d-82df-db2e53dcabb9"],

Cell["", "EndOfSlide",ExpressionUUID->"77f35575-229c-4e8e-9829-ec02e0e3d990"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"07b594fe-4313-43c9-b8f3-64cf631de409"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Example: Statistical Analysis Using ANOVA", "Color7",
 FontSlant->"Plain"]], "Section",
 CellChangeTimes->{{3.672690972955653*^9, 3.672690973361251*^9}, {
  3.822565682260684*^9, 3.822565682804364*^9}, {3.822767949022273*^9, 
  3.8227679654934473`*^9}, {3.823194506538458*^9, 3.823194564115122*^9}, {
  3.823270722933064*^9, 3.823270723628528*^9}},
 CellTags->
  "Data Collections",ExpressionUUID->"a0d0e878-1f41-4b71-b9b6-649ecaa7bb07"],

Cell[CellGroupData[{

Cell["Extracting Data", "Subsection",
 CellChangeTimes->{{3.822767970869541*^9, 
  3.822767973918165*^9}},ExpressionUUID->"cb5fbfd5-e379-40f3-8755-\
eb433de8c6cc"],

Cell["\<\
This example examines the correlation between state unemployment data and \
party affiliation of the governor for the 50 states of the United States.\
\>", "Text",
 ShowGroupOpener->
  False,ExpressionUUID->"4da3e7cf-dff0-403a-8c3e-6f1f352e4ac8"],

Cell["\<\
Start by getting the unemployment rates for the latest month:\
\>", "CodeText",
 CellChangeTimes->{{3.672690900965914*^9, 3.672690901121913*^9}, {
  3.82205507202324*^9, 
  3.8220550723113103`*^9}},ExpressionUUID->"ce0d296b-60f3-4012-a231-\
aba0f3c0ba25"],

Cell[BoxData[
 RowBox[{"rates", " ", "=", 
  RowBox[{"KeyDrop", "[", 
   RowBox[{
    RowBox[{
     TemplateBox[{"\"all US states with District of Columbia\"", 
       RowBox[{"EntityClass", "[", 
         RowBox[{"\"AdministrativeDivision\"", ",", "\"AllUSStatesPlusDC\""}],
          "]"}], "\"EntityClass[\\\"AdministrativeDivision\\\", \
\\\"AllUSStatesPlusDC\\\"]\"", "\"administrative divisions\""},
      "EntityClass"], "[", 
     RowBox[{
      InterpretationBox[
       DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
        TemplateBox[{
          
          TemplateBox[{"\"civilian unemployment rate\""}, 
           "ImplicitEntityPropertyBase"], 
          TagBox[
           GridBox[{{
              TemplateBox[{
                RowBox[{" ", "\"Frequency\""}], "\":\"", "\"monthly\""}, 
               "ImplicitEntityInfoRow"]}, {
              TemplateBox[{
                RowBox[{" ", "\"SeasonalAdjustment\""}], "\":\"", 
                "\"seasonally adjusted\""}, "ImplicitEntityInfoRow"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "GeneralizedEntityInfoGrid", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"], 
          Dynamic[EntityFramework`Formatting`Private`open], 
          "\"EntityProperty[\\\"AdministrativeDivision\\\", \
\\\"CivilianUnemploymentRate\\\", {\\\"Frequency\\\" -> \\\"Monthly\\\", \
\\\"SeasonalAdjustment\\\" -> \\\"SeasonallyAdjusted\\\"}]\"", 
          
          TemplateBox[{"\"monthly\"", "\"seasonally adjusted\""}, 
           "ImplicitEntityPropertySequence"]},
         "ImplicitEntityPropertyToggle"]],
       EntityProperty[
       "AdministrativeDivision", "CivilianUnemploymentRate", {
        "Frequency" -> "Monthly", "SeasonalAdjustment" -> 
         "SeasonallyAdjusted"}],
       SelectWithContents->True], ",", "\"\<EntityAssociation\>\""}], "]"}], 
    ",", 
    TemplateBox[{"\"District of Columbia, United States\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"AdministrativeDivision\"", ",", 
          RowBox[{"{", 
            RowBox[{"\"DistrictOfColumbia\"", ",", "\"UnitedStates\""}], 
            "}"}]}], "]"}], 
      "\"Entity[\\\"AdministrativeDivision\\\", {\\\"DistrictOfColumbia\\\", \
\\\"UnitedStates\\\"}]\"", "\:f3b5administrative division\:f3b5"},
     "Entity"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.823028860617013*^9, 3.823028868073861*^9}, {
  3.8230296089776077`*^9, 3.8230296374226303`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"c96d4988-fbb6-4310-b96c-08d4858084de"],

Cell[BoxData[
 RowBox[{"%", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.823028888126687*^9, 3.823028890101645*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"88ca4a3e-b08f-429e-af25-8ffe3f301557"],

Cell["\<\
Next get a list of governors and their party affiliation from an HTML page:\
\>", "CodeText",
 CellChangeTimes->{{3.822055078844558*^9, 
  3.8220550791452303`*^9}},ExpressionUUID->"8dcdc1cf-9ae2-4f56-8659-\
34133cbbf4a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"govData", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<http://en.wikipedia.org/wiki/List_of_current_United_States_governors\
\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Data\>\"", ",", "1"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.6727500010796576`*^9, 3.823028960213999*^9, 
  3.823115372921926*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"d3369869-07e6-4589-bcd0-5a183013e11b"],

Cell[TextData[{
 "Extract only those rows that end with ",
 Cell[BoxData[
 "\"\<List\>\""], "Input",ExpressionUUID->
  "a257065c-0daf-4cf1-a3cc-5ae76a67e7d6"],
 ", as these correspond to the governor data:"
}], "CodeText",
 CellChangeTimes->{{3.6727500093754053`*^9, 3.672750024046313*^9}, {
  3.822055081634013*^9, 3.8220550819892087`*^9}, {3.822565705020647*^9, 
  3.822565709888112*^9}},ExpressionUUID->"1b7b82f4-cee9-4f21-bd46-\
842090d7aa38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gdata", "=", 
   RowBox[{"Cases", "[", 
    RowBox[{"govData", ",", 
     RowBox[{"{", 
      RowBox[{"___", ",", "\"\<List \>\""}], "}"}], ",", "Infinity"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6727499582613277`*^9, 3.672749971249446*^9}, 
   3.6727500367656336`*^9, 3.8210607335237885`*^9, 3.82106079940741*^9, 
   3.8231153772858953`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"3ee6c757-4b39-4728-84f9-ca53faa8096d"],

Cell["\<\
Then extract only 50 states and the governor\[CloseCurlyQuote]s party \
(columns 1 and 3) for each state:\
\>", "CodeText",
 CellChangeTimes->{{3.8220550838913717`*^9, 
  3.822055084234766*^9}},ExpressionUUID->"ea628f00-e02e-4fcf-9977-\
5936ee6abb05"],

Cell[BoxData[
 RowBox[{
  RowBox[{"govs", "=", 
   RowBox[{"gdata", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"1", ";;", "50"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.672750081828348*^9, 3.672750091345689*^9}, {
   3.6727501230000887`*^9, 3.672750156455678*^9}, 3.823029343085306*^9, 
   3.8231906735032187`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"93859b52-1b20-43a5-82c9-868f91a23868"],

Cell["Convert the state string to uppercase letters:", "CodeText",
 CellChangeTimes->{{3.8220550865001*^9, 
  3.822055086809698*^9}},ExpressionUUID->"5fd458f3-32d1-45b5-8e08-\
7f9a44ac2ba1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"govs", "=", 
   RowBox[{"Association", "[", 
    RowBox[{"govs", "/.", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"state_", ",", "affil_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"Rule", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Interpreter", "[", "\"\<AdministrativeDivision\>\"", "]"}], 
         "[", "state", "]"}], ",", 
        RowBox[{"StringTrim", "[", "affil", "]"}]}], "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.823029355176485*^9, 3.823029378453635*^9}, {
   3.823029415027842*^9, 3.8230294212248363`*^9}, {3.823029466890316*^9, 
   3.82302951473538*^9}, 3.823190677631579*^9},
 CellLabel->"In[16]:=",ExpressionUUID->"9bc3db24-ae43-496d-bb4e-045097f2e6a5"],

Cell["\<\
Look at the different labels available for the governor\[CloseCurlyQuote]s \
party affiliation:\
\>", "CodeText",
 CellChangeTimes->{{3.8220550865001*^9, 3.822055086809698*^9}, {
  3.823190436294783*^9, 
  3.823190460132655*^9}},ExpressionUUID->"7b39f96f-f8aa-4799-9c2f-\
507ff907bb36"],

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "[", 
  RowBox[{"Values", "[", "govs", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822501492206723*^9, 3.822501503689699*^9}, {
  3.823029554257256*^9, 3.823029558316526*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"311ba98e-4f8f-4b59-aafa-59630748c17e"],

Cell["\<\
Replace special instances of labels with one of the two labels \
\[OpenCurlyDoubleQuote]Republican\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]Democratic\[CloseCurlyDoubleQuote]:\
\>", "CodeText",
 CellChangeTimes->{{3.8220550865001*^9, 3.822055086809698*^9}, {
  3.823190436294783*^9, 
  3.823190523922031*^9}},ExpressionUUID->"636c0d9e-dba9-4871-9e88-\
f9a8437b41c4"],

Cell[BoxData[
 RowBox[{"data", " ", "=", 
  RowBox[{
   RowBox[{"Merge", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"govs", ",", "rates"}], "}"}], ",", "Join"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "\"\<Democratic\[Dash]Farmer\[Dash]Labor\>\"", "\[Rule]", 
      "\"\<Democratic\>\""}], ",", 
     RowBox[{"\"\<Republican [note 1]\>\"", "->", "\"\<Republican\>\""}]}], 
    "}"}]}]}]], "Input",
 CellChangeTimes->{{3.823029586960363*^9, 3.823029591412465*^9}, {
   3.8230296627621107`*^9, 3.823029800710291*^9}, {3.823034161615102*^9, 
   3.823034163267222*^9}, 3.823034309928156*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"806b9356-3f5d-41d9-9162-b8ee836c9a9a"],

Cell["View the data as a Dataset:", "CodeText",
 CellChangeTimes->{{3.8220550865001*^9, 3.822055086809698*^9}, {
  3.823190436294783*^9, 3.823190460132655*^9}, {3.823190541235944*^9, 
  3.8231905495711946`*^9}},ExpressionUUID->"ccff91f8-f545-497f-8b06-\
2e0b6dd0215b"],

Cell[BoxData[
 RowBox[{"data", " ", "//", "Dataset"}]], "Input",
 CellChangeTimes->{{3.823029831609599*^9, 3.823029860821659*^9}, {
  3.823034149116232*^9, 3.8230341710754633`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"2b3deaf5-d2c9-44ee-8fbd-3a241d994a44"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistical Analysis", "Subsection",
 CellChangeTimes->{{3.822565726308825*^9, 
  3.822565726821055*^9}},ExpressionUUID->"4fd8eee9-e548-4f8a-8df9-\
f033f107786f"],

Cell["\<\
Compute (naively) the correlation for data in the first (party affiliation of \
governor) and second (unemployment rate) columns from the Association\
\[CloseCurlyQuote]s values:\
\>", "CodeText",
 CellChangeTimes->{{3.822055102659677*^9, 3.822055102942157*^9}, {
  3.8231905829606*^9, 
  3.823190600679905*^9}},ExpressionUUID->"2082445e-733e-4ff1-8ca0-\
e2304bbaf24b"],

Cell[BoxData[
 RowBox[{"Correlation", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Republican\>\"", "\[Rule]", "0"}], ",", 
      RowBox[{"\"\<Democratic\>\"", "\[Rule]", "1"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"Values", "[", "data", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.823034267250422*^9, 3.823034277265399*^9}, {
  3.82303432904906*^9, 3.823034346737117*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"6cb0cd59-cf8f-4b65-be54-b9f9d7fe08b7"],

Cell["\<\
An analysis of variance is called for here. You are really looking at \
differences in a finite number of possible predictor values (two parties in \
this case). The question of interest is whether there is a significant \
difference between unemployment in Democratic and Republican states.\
\>", "Text",
 CellChangeTimes->{{3.82190782270228*^9, 3.8219078272884636`*^9}, {
  3.821907881176852*^9, 3.821907881176852*^9}, {3.8219097136766143`*^9, 
  3.8219097243786144`*^9}},ExpressionUUID->"035aafd6-6d45-4399-9988-\
d7aee9c8319f"],

Cell[TextData[{
 "This can be done with a ",
 StyleBox[ButtonBox["LinearModelFit",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/LinearModelFit"],
  FontWeight->"Bold"],
 " with ",
 StyleBox[ButtonBox["NominalVariables",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NominalVariables"],
  FontWeight->"Bold"],
 " or using the ",
 Cell[BoxData[
  ButtonBox["ANOVA",
   BaseStyle->"Link",
   ButtonData->"paclet:ANOVA/guide/AnalysisOfVariancePackage"]],
  FontWeight->"Bold",ExpressionUUID->"033711a5-c596-4083-9c86-611d4f20268f"],
 " package:"
}], "CodeText",
 CellChangeTimes->{{3.821909726297778*^9, 3.821909728357235*^9}, {
  3.822055107176858*^9, 
  3.8220551075118504`*^9}},ExpressionUUID->"d0210702-0c9e-40d5-92b0-\
7f3d22f19ced"],

Cell[BoxData[
 RowBox[{"dataMatrix", " ", "=", 
  RowBox[{
   RowBox[{"Flatten", "/@", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Keys", "[", "data", "]"}], ",", 
       RowBox[{"Values", "[", "data", "]"}]}], "}"}], "]"}]}], "/.", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"e_Entity", "\[RuleDelayed]", " ", 
      RowBox[{"e", "[", "\"\<Name\>\"", "]"}]}], ",", 
     RowBox[{"q_Quantity", " ", "\[RuleDelayed]", " ", 
      RowBox[{"QuantityMagnitude", "[", "q", "]"}]}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.823115761383522*^9, 3.8231158718719597`*^9}, {
  3.823115940340477*^9, 3.82311597404478*^9}, {3.8231909227519083`*^9, 
  3.8231909320677147`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"3eac4020-adb2-432d-b43f-c6c8a6765465"],

Cell[BoxData[
 RowBox[{"Dimensions", "[", "dataMatrix", "]"}]], "Input",
 CellChangeTimes->{{3.823115911313878*^9, 3.823115917086328*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"09378d20-5ac6-4ef2-9c8c-d9159fd92859"],

Cell[BoxData[
 RowBox[{"lm", "=", 
  RowBox[{"LinearModelFit", "[", 
   RowBox[{"dataMatrix", ",", "party", ",", 
    RowBox[{"{", 
     RowBox[{"state", ",", "party"}], "}"}], ",", 
    RowBox[{"NominalVariables", "\[Rule]", "party"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.457357679275461*^9, 3.457357732024111*^9}, {
   3.457360972451609*^9, 3.4573609731859937`*^9}, 3.823115881235478*^9, 
   3.823190716613495*^9, 3.823190863160535*^9, {3.8231909509202623`*^9, 
   3.823190951809853*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"f59a6c38-a8c8-46d8-b204-ccd65649f2d0"],

Cell[BoxData[
 RowBox[{"lm", "[", "\"\<ParameterTable\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.457357832865279*^9, 3.457357839193242*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"0253d26f-4a5b-40f7-bc09-a6e429624fb1"],

Cell[TextData[{
 "Basically, the Republican effect gets incorporated into the constant, so ",
 Cell[BoxData[
  RowBox[{"party", "[", "Democratic", "]"}]], "Input",ExpressionUUID->
  "bf5b6bd9-7496-4afa-8625-1e13cd03dbc6"],
 " is really the difference between Republican and Democratic. The large ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "4f6249d2-2acd-4cdf-a9fe-b80cb34891a4"],
 "-value says that the difference between Republican and Democratic is not \
statistically significant (e.g. it would be pretty easy to see a difference \
at least that large purely by chance):"
}], "Text",
 CellChangeTimes->{{3.822565752654296*^9, 
  3.822565785621984*^9}},ExpressionUUID->"794ce673-94d3-473b-892a-\
3265d186f678"],

Cell["\<\
Leaving the constant term out gives a different interpretation:\
\>", "CodeText",
 CellChangeTimes->{{3.8220551106905336`*^9, 
  3.822055110982667*^9}},ExpressionUUID->"a4f41b3a-b3db-4d0f-af9d-\
a7e44b5e76b9"],

Cell[BoxData[
 RowBox[{"lm2", "=", 
  RowBox[{"LinearModelFit", "[", 
   RowBox[{"dataMatrix", ",", "party", ",", 
    RowBox[{"{", 
     RowBox[{"state", ",", "party"}], "}"}], ",", 
    RowBox[{"NominalVariables", "\[Rule]", "All"}], ",", 
    RowBox[{"IncludeConstantBasis", "\[Rule]", "False"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.457357773898039*^9, 3.4573577866008387`*^9}, {
  3.8231162032738953`*^9, 3.82311620481749*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"4c8fce7a-5167-41eb-98b2-d4ba1bdb3e88"],

Cell[BoxData[
 RowBox[{"lm2", "[", "\"\<ParameterTable\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.4573577404770193`*^9, 3.4573577410238805`*^9}, {
  3.4573578693643446`*^9, 3.4573578710986757`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"84b794be-e1a0-44c6-b0e3-0dc559b90ef8"],

Cell["\<\
Now the terms show whether or not the effects are significantly different \
from an unemployment of 0 (the constant term is forced to be 0, so effects \
are compared with that).\
\>", "Text",
 CellChangeTimes->{{3.821910093357785*^9, 
  3.821910094386194*^9}},ExpressionUUID->"bd584a63-586b-4239-a1e0-\
35217ca5b0e8"],

Cell["\<\
Both Republican and Democratic groups have unemployment significantly \
different from 0, but the table does not show anything about whether the \
difference between parties is significant.\
\>", "Text",
 CellChangeTimes->{
  3.8219100966624517`*^9, {3.8220551135515594`*^9, 3.822055113847899*^9}, {
   3.82319104795054*^9, 
   3.823191048962201*^9}},ExpressionUUID->"33354afd-b111-40c2-9a13-\
7fe7aaa73c42"],

Cell["\<\
This is really an analysis of variance, and you could use post tests to \
determine if there is a significant difference between the Democratic and \
Republican unemployment rates:\
\>", "CodeText",
 CellChangeTimes->{{3.822565821022081*^9, 
  3.822565821532297*^9}},ExpressionUUID->"7a158ec8-3717-4792-9d9f-\
e34b6e6ec536"],

Cell[BoxData[
 RowBox[{"<<", "ANOVA`"}]], "Input",
 CellChangeTimes->{{3.4573627198906217`*^9, 3.4573627212031384`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"694f18ac-36b1-4732-9f6a-f3bb0a5154ca"],

Cell[TextData[{
 "The post tests use different criteria for making multiple comparisons and \
return lists of groups that are significantly different (at a .05 level by \
default). None of them detect a significant difference at the default level \
(not surprising based on the previous results and the 0.8\[Ellipsis] ",
 Cell[BoxData[
  FormBox["p", TraditionalForm]],ExpressionUUID->
  "f49fcc42-4a5b-4546-8426-63909fe74d74"],
 "-value):"
}], "Text",
 CellChangeTimes->{{3.822565836559072*^9, 
  3.822565837101675*^9}},ExpressionUUID->"a1b304ed-b6ac-4d19-8f60-\
44f6c5b6c291"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ANOVA", "[", 
   RowBox[{"dataMatrix", ",", 
    RowBox[{"{", "party", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"state", ",", "party"}], "}"}], ",", 
    RowBox[{"PostTests", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "Bonferroni", ",", "Tukey", ",", "Dunnett", ",", "Duncan", ",", 
       "StudentNewmanKeuls"}], "}"}]}], ",", 
    RowBox[{"CellMeans", "\[Rule]", "False"}]}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.823116216381927*^9, 3.823116220026805*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"ee9334e1-3038-4260-8fb7-42112bcd29ac"],

Cell["\<\
There is no significant difference. Deviation from the mean unemployment is \
not much. \
\>", "Text",
 CellChangeTimes->{
  3.82190793145835*^9, {3.8225658428710747`*^9, 3.8225658438927097`*^9}, 
   3.8231913570499687`*^9},ExpressionUUID->"6e83c1ac-c53e-4beb-bba3-\
247f62d8c8e9"],

Cell["", "EndOfSlide",ExpressionUUID->"eade411d-6e66-4e3f-9fbc-5e02ac90b2e8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",ExpressionUUID->"6d96e334-3f16-4a40-95ec-e3c8e3e42366"],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CounterAssignments->{{"Chapter", 7}, {"ExerciseNumber", 0}},
 CellTags->"Exercises",ExpressionUUID->"9f266981-a22f-4f0f-87b2-d3ea74fb47dc"],

Cell[CellGroupData[{

Cell["7.1 Writing Data to a File", "Subsection",
 CellChangeTimes->{
  3.4814605393832397`*^9, {3.821010450996967*^9, 3.821010467035083*^9}, 
   3.821010499100441*^9, 3.8210106037864647`*^9, {3.821010644282208*^9, 
   3.8210106869155436`*^9}},
 CellTags->{
  "Exercises", 
   "Writing Data"},ExpressionUUID->"93f13363-17b4-4c84-84da-4712a9f1a1a0"],

Cell[CellGroupData[{

Cell[TextData[{
 "Use Export to write the following matrix of numbers to a file in XLS \
format. You can check your result by using ",
 StyleBox[ButtonBox["FilePrint",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FilePrint"],
  FontWeight->"Bold"],
 " to display the file in the notebook or by looking at the file with an \
ordinary text editor:"
}], "Item",
 CellChangeTimes->{{3.4935594545578213`*^9, 3.493559460645748*^9}, {
  3.8219079816800575`*^9, 3.821907985909235*^9}, {3.822501750036572*^9, 
  3.82250175214684*^9}, {3.822567133584832*^9, 3.822567140752491*^9}},
 CellTags->{
  "Exercises", 
   "Writing Data"},ExpressionUUID->"e5c3f47a-9096-4204-8df1-93101c70709b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1.5", ",", 
       RowBox[{"2.8", " ", 
        RowBox[{"10", "^", "6"}]}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.1", ",", 
       RowBox[{"5.3", " ", 
        RowBox[{"10", "^", "6"}]}], ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.3", ",", 
       RowBox[{"1.25", " ", 
        RowBox[{"10", "^", "7"}]}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.1", ",", 
       RowBox[{"2.71", " ", 
        RowBox[{"10", "^", "7"}]}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9.5", ",", 
       RowBox[{"3.11", " ", 
        RowBox[{"10", "^", "7"}]}], ",", "3"}], "}"}]}], "}"}]}], 
  ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Writing Data"},ExpressionUUID->"79fe9011-08b0-4d42-953f-846915ac4898"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"data", "=", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"1.5", ",", 
                   RowBox[{"2.8", " ", 
                    RowBox[{"10", "^", "6"}]}], ",", "1"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"4.1", ",", 
                   RowBox[{"5.3", " ", 
                    RowBox[{"10", "^", "6"}]}], ",", "3"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"7.3", ",", 
                   RowBox[{"1.25", " ", 
                    RowBox[{"10", "^", "7"}]}], ",", "7"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"8.1", ",", 
                   RowBox[{"2.71", " ", 
                    RowBox[{"10", "^", "7"}]}], ",", "6"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"9.5", ",", 
                   RowBox[{"3.11", " ", 
                    RowBox[{"10", "^", "7"}]}], ",", "3"}], "}"}]}], "}"}]}], 
         ";"}]], "Input", CellTags -> {"Exercises", "Writing Data"}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Export", "[", 
            RowBox[{"\"data.dat\"", ",", "data", ",", "\"Table\""}], "]"}]], 
         "Input", 
         CellChangeTimes -> {{3.493559438614702*^9, 3.493559516826318*^9}}], 
        Cell[
         BoxData["\"data.dat\""], "Output", 
         CellChangeTimes -> {{3.493559474501997*^9, 
          3.4935595246224813`*^9}}]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"FilePrint", "[", "\"data.dat\"", "]"}]], "Input", 
         CellChangeTimes -> {{3.4935594792828827`*^9, 3.493559500164474*^9}}], 
        Cell[
        "1.5\t2.8e6\t1\n4.1\t5.3e6\t3\n7.3\t1.25e7\t7\n8.1\t2.71e7\t6\n9.5\t\
3.11e7\t3", "Print", 
         CellChangeTimes -> {{3.493559487942379*^9, 3.493559526390017*^9}}]}, 
       Open]]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"f9f4aa5c-6f38-4629-b5e7-52d88667033f"],

Cell["\<\
Use Import to read the data from the exported file as a table of numbers.\
\>", "Item",
 CellChangeTimes->{
  3.821907994190404*^9, {3.82250176125202*^9, 3.822501768079966*^9}},
 CellTags->{
  "Exercises", 
   "Writing Data"},ExpressionUUID->"c4d27e3a-5c36-4c6c-95a4-1c5a390d7991"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     CellGroupData[{
       Cell[
        BoxData[
         RowBox[{"Import", "[", 
           RowBox[{"\"data.dat\"", ",", "\"Table\""}], "]"}]], "Input", 
        CellChangeTimes -> {{3.493559550725853*^9, 3.4935595627150803`*^9}}], 
       
       Cell[
        BoxData[
         RowBox[{"{", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"1.5`", ",", "2.8`*^6", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"4.1`", ",", "5.3`*^6", ",", "3"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"7.3`", ",", "1.25`*^7", ",", "7"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"8.1`", ",", "2.71`*^7", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"9.5`", ",", "3.11`*^7", ",", "3"}], "}"}]}], "}"}]], 
        "Output", 
        CellChangeTimes -> {{3.4935595585817223`*^9, 3.493559563069942*^9}}]},
       Open]], WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"5161be83-e362-4aca-856e-ba0d5daceb8d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.2 Exporting and Importing Graphical Images", "Subsection",
 CellChangeTimes->{{3.8210106990925975`*^9, 3.8210107007052865`*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"7cb51b71-07d2-415f-b9ed-92e3412785b9"],

Cell["\<\
Evaluate the following two inputs (the global variables $ExportFormats and \
$ImportFormats) to get a list of the file formats that are supported by \
Export and Import in this version of the Wolfram Language. Many of these \
formats are graphics formats:\
\>", "CodeText",
 CellChangeTimes->{{3.378482832921875*^9, 3.3784828335625*^9}, {
   3.8219080055546613`*^9, 3.821908024256279*^9}, 3.8220528925082226`*^9, {
   3.822055138961746*^9, 3.82205513926901*^9}, 3.822501789071669*^9, 
   3.822501854613779*^9, {3.822566419864079*^9, 3.822566434789863*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"33a4ee94-f3c8-4dc0-8a59-94751c769378"],

Cell[BoxData["$ExportFormats"], "Input",
 PageBreakWithin->True,
 CellChangeTimes->{{3.481460124174897*^9, 
  3.481460124501072*^9}},ExpressionUUID->"e0d5a946-7730-4e28-b7f4-\
ed0998ec91d3"],

Cell[BoxData["$ImportFormats"], "Input",
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"744a4291-12ec-4b41-b65a-e49ffd556472"],

Cell[CellGroupData[{

Cell[TextData[{
 "Evaluate the following input to define ",
 Cell[BoxData[
 "gr"], "Input",ExpressionUUID->"37a49b54-438f-4752-8441-ea682bdfa410"],
 " to be the graphics expressions generated for a simple plot:"
}], "Item",
 CellChangeTimes->{
  3.37848283921875*^9, {3.822566448223559*^9, 3.822566455533359*^9}, {
   3.8225671513672943`*^9, 3.8225671518153763`*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"71b96c67-521f-4ec8-97bc-6a3ef10aa1ce"],

Cell[BoxData[
 RowBox[{"gr", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", 
      RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4814601403424892`*^9, 3.481460140718301*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"3db0d9c3-c29a-4aa8-a05e-99422af64b42"]
}, Open  ]],

Cell["\<\
Use Export to write this image to a file in GIF format and use Import to read \
that file back into the Wolfram Language session. Display the resulting \
graphics expression and compare that display with the original image.\
\>", "Item",
 CellChangeTimes->{{3.821908038304593*^9, 3.821908050184823*^9}, {
   3.8220529102506504`*^9, 3.822052929741152*^9}, 3.822501794652828*^9, 
   3.822501858726718*^9, {3.8225664612789497`*^9, 3.822566462422958*^9}, {
   3.8225683166822023`*^9, 3.822568321192071*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"8b87449c-3da9-439a-ae2d-33c23dba57de"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"gr", "=", 
            RowBox[{"Plot", "[", 
              RowBox[{
                RowBox[{"Sin", "[", "x", "]"}], ",", 
                RowBox[{"{", 
                  RowBox[{"x", ",", "0", ",", 
                    RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}]], "Input", 
         CellChangeTimes -> {{3.4814601403424892`*^9, 3.481460140718301*^9}}, 
         CellTags -> {"Exercises", "Exporting and Importing Images"}], 
        Cell[
         BoxData[
          GraphicsBox[{{}, {}, {
             Hue[0.67, 0.6, 0.6], 
             LineBox[CompressedData["
1:eJwlmXk4lN/7x61ZEjPPjJAU7SsppYXuUwlFSokWIWkhSURIKpWQZK9kS4X4
RHZJTpSikKiEopAsYx7rmJksv/O9fn+d63Vd82zv9/u+73Ou0bA/u/e4mIiI
SJaoiMj/VnEsW9ux9upmXun/rwt7SjfNibSFu/mNw7PJKnyu5dAUcRbORecZ
fCHrH/YpfkHEZbjytMwnmazNhtfLn0TcAbWrSdX7yPrVNmJxfEQirNs+w2J/
eCLsdVZpvheRBWux8JX37SwIH7LOjYnAsF7xqYGaH4ZNFTtlt7rXwY2SV9tl
t9eBq4/Z0VzX71B44Y1OSVMjnCk6Hio2/xcsypjzyZjTCl+6d8ik2ndCZ1fT
wQrpDgjW4okUHOwGDal00Z3MLji3vDL69RMOCNzfr83gd0Pn8c4rSQUcOOdZ
NH+teA9YJok4X3nPgedXZqgVzeiBjYobtqIeDtTb6Sx6Oq8HxKaecvGKftja
M3OLrmkPRNTfMsK5/WB/MpktmtADOd67Ba/KuGDW1Oihq9cLwmOnM3+6DEDG
zO7au/Z9YMcc9irxHICSqcNzXzj1QUWpz7YHfgMQ4RBZ0+DWB2Eqwd8PhA5A
kYnnplH/Plj8KU3sy7MBWGcWvKg7uQ8sNnZZfuAMQPaxhbdCfvdBJuPoVIHT
IKjEWJwpP8gBdml3VbTbIKSUiVVNP8oB79OuUed9BsHkR7Oh2SkOGLy7vHR1
8CC4N4gnl3pyoOViwr5nTwfhTo7bE9NIDkj/bUl91D0IHw3k7WZ/5ID9K8s9
YSeGIGA/5vmt7YfVBcqUytkhcOPND3bX6wexrOaGhxeGwHveqmrbbf2QnGRj
lRs4BJoP7SzmmvdD+7UTNt/Sh0A3OXzzRmei005P59n0ELxe71vzM4lwY3Rg
2oVhYJze2F8rzoXVdVY7ta8Mw5HOxpx8GS6IVanIFQcOQ6BDISdSgQvJxfF3
Pt4fhp7D4QXrVLnQHv8khvtyGA7k3TqvuJoL9g75j3VERuDXG9dV62y4cGzw
y+vXgSPg6O/YJsjigp1PmFVR2Ai05sw+5pPHBWtxU27WvRHw1K3ZMVzEBUvF
N6qJaSMQGle0qZb4aLwh2/NS5Qi0Gc2PXNLABc2rt1dslB4FmYnPGi4jXFgm
u+ONNmMU1GKdLc7zubA4UuLQUuVReFu0tMltnAvqTy7eVF4yCrdB6esBCRpY
VY7tPKNR2Bzme7GSRQOfYXgv9+YorMuIy1yrTcPIfVGtjDuj0PYxN+y1Dg2D
815VJN8dBX9RYf629TT06ugMh6eOQlHd/XergYafB+aZub4fBdFg/e5cUxrK
kybFV0rxgMtRPr/lBA2lS4tjFyjwoMrjy4I9jjS8zPHQnq3Eg/6ygulWzjTk
veXYTF/MA1py0GuXGw2p3c0vegx5cG9+TsmPSzSErCo8mxLAg8NaZ02uR9Lw
YXVjl0coDwZ3JC+XiaFBeu3Yke0xPDDmiNwIuEfD9Q26pp1PyP1ZHUlO8TRc
3Fq4ZF4FD0avKJz5nkJDkUFj4mA1D/a2npim8ZQGnuHYzLIvPJghfYRtn0GD
m4mupF0nD5pviIbUZNHgZFH4O158DN7tjGjZUURDmmXjgTPTx2BlzMbplsU0
dB0Y+6THGoNSkVMZh0poOHpEt7Rl3hjUR5zctOs1DQdOFMaqbB0DB92RkMb3
NBh5Fe6LvjIGOnPFo658Je/r0/jBIXAMlp/aGMNqJPr5jm3RCRuDwkg1scTv
NGy+qruqIXEMnvu4Kia20LAuuFCOicfg9VJndYPfNJwPabz2690YPLmqciK2
nYac0DFhVu0YrIrOpXo6aFgZqdtj1joGnFLXxLNdNCyIK6wImRiDvHWVfhp9
NNgnNOpZS/LhWtPN4Y0cGpKSxnKXz+DDzIHuatN+GmY/0U3+MJsPOVtD/jtI
03Ao1UoldgEf1J3NcywGaLj39EKY4wo+bOx8pWo8SPKVWegnrceHptspysrD
NOx53jjauI0PA5p5GSOEQ3PGnFNN+DA8ceth1QgNsoW6hw0P86FWUJdnzaPB
+IVVveIxPkyf1fp51hgNAS8v7PjjRN5n9+iez4TFXhfqXvfhg/nX6POLBTSk
z6BSJvz5ECLxe88XwnsPO7Mv3OLDz7RGHS8hDcK0d/4DkXwIrzRRZ/2j4RFP
fdAxjg9aXCbrCWFTg4u2HY/5ELBEdIbmOMl/+Nca62d8yJcdnpFJ2GBlcPru
Uj5MpJkviJyggePTqVz1jg9mGn4b+ISjKjff3PqJD+MvVuy3mKRBb+b90ZeN
fLCK23YhlfCfY8PH1v7iwzrPjMRBwqHZu+ozu/kw5b27dvUU8XMqFS0Z5MMz
GzXx04RbTcWyHgr40GAruTmWcECstZqqmACe6Av9XhPW7C64FSUrgDG9wYqf
hL+tZQpnsASwbXE7NUTY79rpUzdVBZC+8/3xCcKLP1d8E1kggBHv+NIpwnVz
1Lf7rBBAtJyDmoCwl7NP7rCOADJaZ/v3EFYv/qJxRl8A43uqOXWEK6W0wrq2
C4Bn7H0ki7Dr/qBJWzMBZK1a+eU6YeVHHc5NlgJo4w3vMSf8ekC/Za8tYfkf
DWzCjpvv7ag+KYBHrjzrT+T7qZChwu2uAnhxz5JzhXBxk+ki7CWAzYGU/1LC
9otTo9ZfFcCPt1vnVBF9ZT1ExXOCBFB+QKzMlnBO+eFzyyMEkFDv4tRP/DnE
KGh7HCuAO9vTZrkRFrNhmM15JID5Oz5/7if+ZmQ4ldzNEICJQD7MjrCF4O0y
Zp4AdvEC938g+Rg3nHs/uEQArxwc5y0nbNre4HGpRgDnX1ENn/kkD1qanbyv
5Ptv6BUqEY67FLjXtVUAyDf0kQXJY7+yvtYxWgCXDwdG544Sf3endBszhbDy
ocsfySHib7yIVbmKEDLG7JkSpD5aew9VbJonhKM5F40EpJ60AhSSNdcIgdYx
bqgk9VZX4nWYvV8ItSaqbuPdxB/ZhqrbR4SgLk2P5fwl/hxYuV7qhBC09K8H
25F6dh3+zRZ6CkHc4lxjEql35jKT2rZ7QtgdZala8JP0J6lEZmWSEPrOuGmh
H0TvP0MWz9OEkBDpe7G8mQaHh7EtV4qEkBNeX5JF+k+Rcm+3xnchHD6qRa/4
TMNtnv4K2V9CYFgeqvH6RPz5En526K8QFsdEdJXU0DA9bAOvfEwI3KDWjys/
0GAjFSTuoPQPOOd0XXLKaVjz54eh6dx/4JlOab8m/VD6zapgncX/oDYhcvW7
UuKn33eGpO4/aBnxHC4m/VSSt3hOiuU/kBos9THKoeG/znfru6P/QZHwuGJ/
Ig1Xy2f51sX/g89+mSKXSX+3THLBRU/+QY3shjUyD2gQsZ5pGJT/D8pPXHKd
RubDvobj+5Z9/QcfB+SOPL5F+kGZhIszexySeOWhLh6k3yRufTQQMQ7vAuU2
bdlGw83Kup/+D8ahSNVjYRSZb+8GbZQVH5Pfb1+l3LqJhu0GF29vyB+HuVc7
ZlmR+bi1J/eCf+M4/LyenftzAan/NQtN2bMnICNoTHMzmber3kuN6j6ZgKsx
HTkWJVw4OxCt9eHZBKDnN3qCC7mQqbLAybpgAt5aXd9dlMOFlc6o7cr7CZCR
nZ/FTyPzneldVdUzAQW3t3cqRHNhweHe+MOak+CccdTx/mkuKNHVhpcLJ6Fc
st13PsWFe+H4aA+ehNCrxko2clxQ1snx3Vc5CS9Tl9qHTSPsfTdncdMknO6o
Uvgh7IdZ4vZz6oSTsFJLgq/Q0Q9zlMZG1TdPwWj78Nm+7H5YBBpPyt9OQYrX
GPPSjn6IfV8sKu4ogg6zfy10t+PAwK/n3rSzCLJ/HpemSfZ/RsKUwRZXEXQi
PfZghzkHRlZE/s7zEkEL1I7uWr+NA2YRp8tOBIogReekZ2ELOSB2ZPbVD6ki
qLg+oH28uw9OD10SiegSQb6NIiJ1ZH+qp7ZlSt1BFNXdDDxYc6gXjK2/uNmf
EkXf2950aZj3gsWDk12PnEXRIcEN0bNGvXBaJbRmkYcoavsX2zu0phdiFVse
rAgQRZ+Kjn9/KNcL/Bke69eniSLfUsOohJIeyJtMO7ebI4puRhgGLlbqgeW/
GJ2XzouhQ7rDnWqFf+FZGnUq300cyfGkPrm2dYJv65GG5QES6Ofe40uvufyG
c3rrTRKiJJFvnVHUGr8WECYa2PeFTUPNXaYPKzW/QJ1rrN2FZCmkJue9xO3L
e9hgNG/y50Np9Pmb3IlJkedQtX1DGoqTQRvqbOZkhWTiJ9n3N7RnyKLPLHW9
JxcqseL8FU42T6cji8U5Cwz/NOB6UWl/lRI5JPEh8alOcwvOl3ZPqauagaK8
V+W/ifmNVygynOwr5NGKsEcHrF92YjqUx17zTQGtus3sWFT1F3MG5pSvbFZA
holviqsa/uLevUZnl7QqoLf0vmcnWv/izpn3qtS6CI/f+R46/Bc3J2zwk+Yp
oI0RppN31bqxvVXpMFeWgdSX2W+95dqNd50UPfJ2GQNti3do7GD24Pk3b2qd
dWIg6SpL/4Ytvdjtm46fvTMDrSsQj325sxe/Xthevd+FgZa0njgXv68X27zV
c9JzY6DwllZLs+O9OFZ06LGMDwOd7vtc5hDYiylf61mPgxjIyyzM0L6mF4ud
05ZsSmMgx6PjdeF7+7D569Z91ekMtDJI8c+zQ304SSEkGf/HQL4xel5v7Pvw
5swuSHnOQD+yJdktbn3Yp++Bj3sRAwX9ZXFeRvThoePTBmZUMlDdp+ILWz/3
4fZDLc1b/zKQ9vYtsy13cLCcvlWqXQ8DJbxq+aRnzsFr5za4+/UxEFdeIUb1
IAcHdnyQK6YZaJalm3nZKQ7Wci7erM1nIKfCaUbPbnKw76X7yXNlmCjdLtJE
8i0HKyZZOY0vY6K90iEaqev68Wb/hnWzVjJRycl6+RD9fnzKYbf4ei0mMlwS
XH3KoB+XLDGKc1/DRHq9Sdkye/uxffa62t5NTPSmTru/27kfZ5Yrrm4yZSIN
9eSbqg/7sfGfBkG+CxN1zjfNNhDn4kvLQy9muTKRUUnU8EtpLs45ZzyR5sZE
l8LVO5fLc7HqZIlInCcTvW8r+DCqzMXcmSlS/n5MNBmmE6StycVRxl6KZqFM
VL9S+j8jKy7+lTFbu+sZE9UkKnD+POJixaFvOW1ZTLT6uWGgaxoX71wfrtOU
zUSp579mDP/HxblvJddX5zNR5p/o6x35XBzwk7s55xUTLWeY2Di+J0dZhTJT
vxomEuRWVcj1cLGX2/FTM/uZaF+yvW3GIhoHmnBPbqSZaEvVqmkRy2h8d8GF
kzaDTHSSI/b6rCaNC74FnkgZZaLgPqNTjHU0Ht74n8O6SSbqcB917jKgsYv4
sJ2lAoVCHE2tO+1ofOnHRTsfJoUWjc3M2+RA45B8CbsEFoUM/x6VDz5J44yT
M227lChE8bLfTXehcffHDUc81SnUb3JoxSMfGh+LunIwRptCDDmQ1IigsdsZ
mYPFayjUc1dRpTuKxv6GEQda11Jo/8RFjZS7NE7iP7JatJFCkbnf5KTiadxq
/X5/wVYKzQ9xXG+dSuP+tXv2NxtQKNF/b0vzUxqPyzdZTBpSaNPFj857/qOx
alnvPkMTCp39lnBAPZvGBxbK7/22j0Ka7gVoXzGNT03GmAv3Uyg4hG8QVELj
C41zzeccoNBSyXOrC0ppHBOkveeENYWWPw96N1JO44Z+CzOeA4UcZULKJT7S
2Kzgwc6ZnhTaqDp862wTud+w/ZSiF4W2yj3Yw2+m8bVVy/IUfSikN9qi7v2D
xkXpRWqKfhRyM01vt2+j8bzErwOsAAotfOL++1snjfV+xD1hBRK9xOv4c7to
bKXicIgVTCG7rePKR/8SvSOH3lChFHp5/4bbxx4a824q3GXGUIiFWf6IS2NG
xTcT5j1y/ab7jTtoGi8XSxBhxhI/ah6vMRmgsZ3vCidGAoUeq+yeXDtEY58X
w3MYSRTyMHR3njtM42hecYNCMmGnJb9ERmj8wXWHvkIKhRIcTjRmjNK48xlj
SD6NQhZx1w958Gg81duYIp9O9A21aV83RmOd4ycY8pkUmm0eMPWQT/RJXlkx
4zl5vod3lImAxo5tI94zcihkJHRb2U844eC1DrkCCp181eSk/I/oE7PznlwR
hYa3jMsnE25oYO6SK6YQO/9OwfxxGnMZTaJyJRRyKXA/Gk9Y2iypYHophdZ2
BikoTBA9b508Pf01hTa35L/2Iqxfqak+vZxC4ro/zzcTPiDJ+yL7lkKp4X+X
60yS/G19FST7jkIT10r/3CAccvn6ZtlKCkU82ZVM9ts4tcRkWOYDhf4L8T/K
nKJxuYBKk6mm0N5a0/kmhH+sa7aWqaXQnsn4v76Eee4PmTJ1FNqQ5ZiZQpiZ
feqddD2FzriRaUR4BVfrovQXCil9N97WTthw+ZiW9DcKrTm7izlC2O5UaafU
dwqFVWT+JucPfPHJjftSzRSqPemUR84fOKbd1EzqB8nD78tB5PyBn89li0u1
kvosGbDrI/zBuqVw2i/yPP/XG78S/nM/2XlaO8lD8cjMQsIijY4a0zopVMWJ
Gg0jPIut/U2yi1wfn/7NnrCOOT9YsptCt823FK8gvDsUg2Qvuf7WiSQu0cPp
Y8CIBIfoU7s0KI3wdWmzpxJcCi2OjTt/iHDCdkUbiQEKMV3q7SUIv/D/QUkM
Uehc5a99KUR/7riTrziPQqFifzfXE/8OHjBZKhij0Gl7kXgbwm9zl3/jCijU
WFGyq4P4f9+Jo9U8QSGR+pjUr0IaS7yr/vFpiuRnzeiebYRdNJ4FVYiykIaM
166nJE8G3890PJdkIZ/3V5ANyV/WGrOwFCkWslhoqfuM5HPWHU39OBkWsmvn
Xh0h+R3YTsfcnMFC01PVWM4k3w9yXXfaKBLOebVsapDG0xTMx/YpsdBBX+5b
BmFXJ+3HO1RYaOynV94sUk+GGkMTOmos9OxiYJQSqb+hUPfs6QtZyLPA1zaf
1OeR3n02ootZ6D3XMiOom8aV23Wmjy1hoYTiGDNLUs/x4yMO7SvI9cKzcd9J
/Rs7eSq/0GGhrBvyNldJf8itsKzIXMdC/Z23zyi30niOhq7b4/UsFOo18i2V
9JPhxrGPd/RYSH+ouSir6X/6e18+YcBChT0r3xxroLHMw4MrrA1ZqPujMOPV
ZxqfH9/QZG7MQldEUwYV6mi8I1e4Wt+UhUxq10bHV9N4RN23i2XBQrNseMZH
Kmhs62sdKWPJQnkeDgt83pB8NeqhKSui5x41uztlNE4Mnbjfe5iFdu02Fia/
ovHOcb9dZcdYaMmf7+9c8mn8sPFqnos7C8XMuqN9/xGNuypWtYV6sJAQFRRK
PyT1kNcmk3WBhWaAwe6zCWQehenb0hdZ6AYnIF/jPo2rdwhkXK+z0AabBnfV
UBrzX7ranosm9zfXdDzmSePN6XODw++ykFbNoWMG7qTf3qvNy75P/K1rvjjb
lcbyHitkh+JZyCvo1PQcRxrP1+zOc0thoUt9pqVu1qQ/JdnKni9kIba4qLEJ
onFUqPzaqBcs1GxWfzdBj8ZNvq9s816yUE3jccWe9TR2OKiaP4JZaCpzWsIx
bRp7U422HpUsFLBaXZzWoPHj62b5nk0s1MWxZduJ0lh4St/O+x8L1dcER+S+
IPP95TLkMcFCb7LTryIyzx/MUFY/N8VCzmckOyqec7FezlDbKXE2avD7KlKc
ysV+/1JtD0xnI84lzUqjaC4WD6VsdVXZ6FmWSYDQhYvlcv8eGd3IRmX/7V9Y
MZuLrSW/6g/qsdG26jnJ9kpc/MyqXK1/MxvVUPxCPpOLzcbjfnZuZaPYiFV5
8lJcHLZ975EvO9koNcGD3T7Qj9nfS6xzD7FRd+XCtMVv+rHaRPjhcz6E/8aq
rLcn+6P2XS/u+rJRe22ulsPhfnz+vYxSqR8bFQzUf7hp0Y8/hF+tl73GRvIN
rHv5hv3Yc9G5HY9vsdHPa0XvMpb147rde3Qb49joqoS5vsQgB/sny7P0MRs1
FynuP3+Bg7uMbn2QllBE1rb9az6d7sP2JnbqC6cpois7fLSVjvXhn2ZrPbdI
K6Jxwe9QK7Jf/bK/TcNHThF1aYm5lxn34fJja7z72IrojxJauHFhH46/3LK4
dqEiMh9xsSn70YstCpffiDRSRA/rDo+tN+zFbxZVw5xbiqjx2FsNe/Ee7CSd
IqEhMxN5bpfdWWPbhQuTFui/CZ+JpF6tdCrR6MC1m/Qq9jKVUIBbccWbu22Y
7/Rgn12oEtIqtCh+H/kdV+5J3D9jpjKaaP3+Xj20Dttv0EtNjVJGcZ7WaWpx
Zdixv2b0R4wyKpG001SzLMOuD20NqPvKqLrn42klRhm+LHPtt2+8MmJN22Q/
fu01jmuqUt2booyCz79dpNhYir95W4WNFyqjhu6ZntHuxXhnsZu3eYsyqndO
mPErJRubu0hUBvxURhu/N7a0qWTjA/NiZpa0KaP51766N4c8xyeDX+Qu6lRG
x/ypQ1f/ZOLrh0S4/zjK6L2P5kCGbzouFd62T5lURh5PoxdFPn2IKzLnZreI
qCCe01lT9p0kXG2fPcUQV0EtYXnV6j0JuOXDl7iLUiros9H9+FG/WMyPVW3c
w1BBv7clFm9LD8dTZs8WBlAqyGHRzk2M3lA8TRzOv2SroNXD9tF3Lgdj9ml7
5iIVFVT39e/JC+lXsercEdvDqipoAdU2r+KyD57XcCMzTE0FvUjxsI9MP4eX
3VSaqJirgtbHnblclH4Ua296avJPQwUt1L79v/+3Sv8Ph2LZdw==
              "]]}}, 
           AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> 
           True, AxesOrigin -> {0, 0}, PlotRange -> 
           NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
              0, 6.283185307179586}, {-0.9999998592131705, 
              0.9999998782112116}}], PlotRangeClipping -> True, 
           PlotRangePadding -> {
             Scaled[0.02], 
             Scaled[0.02]}]], "Output", 
         CellChangeTimes -> {3.4935595933765707`*^9}, 
         CellTags -> {"Exercises", "Exporting and Importing Images"}]}, 
       Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Export", "[", 
            RowBox[{"\"sincurve.gif\"", ",", "gr", ",", "\"GIF\""}], "]"}]], 
         "Input", 
         CellChangeTimes -> {{3.49355960401899*^9, 3.493559618565297*^9}}], 
        Cell[
         BoxData["\"sincurve.gif\""], "Output", 
         CellChangeTimes -> {3.493559621262022*^9}]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Import", "[", "\"sincurve.gif\"", "]"}]], "Input", 
         CellChangeTimes -> {{3.4935596224348917`*^9, 
          3.4935596310702333`*^9}}], 
        Cell[
         BoxData[
          GraphicsBox[
           TagBox[
            RasterBox[CompressedData["
1:eJzt3V9MU9m+B3DvvS/3wYf77tNNeOLBl3k49+lwbjIzibFD9PAn4kRl0JHL
nzA3dMLBgIFI5I72CAk1kAMRFGgdpIpgewBRGakCQkMRGcEME1ECEgo4xZpa
nRPvb9gTTilQ2rL3Wmvv/f1khtTdfz9a+u1ae6+91n9mfPPnk/+6a9cu47/T
jz9/9Zf/zs//6lTSf9A/UvKMWZl5X5/Yl/ft15lf5/9Xxr/Rxkn6/3/+Zdeu
3y5/BABQUiAQ2LgR4QMAxOVyxcfHh2w0m802m62srMztdgdvR24AgCQuLi74
n16vNyEhQbpgMBiCr0JuAIAkJDecTueRI0c2vQq5AQCSkHCwWCw5OTnS5T17
9iwvL69dtWs9plWyNTfrHeh/0dH+1GpxX25wNdS7mpvcDsfk8NAMXcW7OgD+
QnJjYmJirb1BuRF8lbazYmpqsalxxJjv2L+vITXZkp1182zZvZrqAQqN+kvD
F6v6vyvvpWvpKroBXaAb//TTIu+qAfgIyQ2SkpJCP6mloYf9GwsLPkqGQ6nW
w2lXKRwGB1+urLwLfxe6AbVGKFLoLnRHuvv8/Bs21QKIwOVy7d692+l0Sv9M
SEjweDxms5l6K8XFxdT2CL6xxnJjcnKh5HRPouGKueohXY75Qeju9CDFRd0x
PwiAqvn9fumCtsdvTD9fLizoTE5qbrsxvulvGi16EHooekB6WHReAIJpIDeo
i1FZ8eBAYuN125MPH/4h74O/f/8rPeznn14yne/btrMDoBNqz42urmdJB5sq
K5yKfqh9vgD1XCia6OmUexYAtVBvblBQnCm9k5psYbYLgp6Iui0lp3vQ8ACd
U2lujI29osSg7gn1I1g+Lz1dTfUAPfX4+DzL5wUQihpzo+3G+OefXhrof8Gr
AHpq6rPcbPuRVwEAfKlrpCh93dfVPko/1sp9hOf8/Jsv0743Vz3kWwYAF2pJ
jI+rOzRKS3qKTnX7fDIcZt05KsOY76D/sLsD9EYtubG09ParY62VFU7ehYSq
rHiQdLBpYcHHuxAAdlSRG9QrSU22WC2jvAvZXFPjCJXHvesEwIz4uTHz8hf6
VHa0P+VdSDgOxyS1OtBhAZ0QPDd8vsCf/vg3YVsawUpO91CpaHWAHoicG/Pz
bxINV77Ju8W7kEhJ57PgRFrQPGFzY2np7eG0q1etKmhpBLtue3Io1UrF8y4E
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
AAAAAAAD/w8JH1V8
             "], {{0, 216}, {360, 0}}, {0, 255}, 
             ColorFunction -> RGBColor], 
            BoxForm`ImageTag[
            "Byte", ColorSpace -> "RGB", Interleaving -> True], Selectable -> 
            False], BaseStyle -> "ImageGraphics", ImageSizeRaw -> {360, 216}, 
           PlotRange -> {{0, 360}, {0, 216}}]], "Output", 
         CellChangeTimes -> {3.493559631465567*^9}]}, Open]]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"582a8374-2ac1-4965-96c9-edf760b322da"],

Cell[CellGroupData[{

Cell["\<\
Evaluate the following input to create an animation. Then export the \
animation to a QuickTime file (extension.mov) and open it in your browser:\
\>", "Item",
 CellChangeTimes->{{3.4935598285895147`*^9, 3.4935598353244143`*^9}, 
   3.821908063708393*^9, {3.822568329897924*^9, 3.822568337095067*^9}, 
   3.822597777688632*^9},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"5a735791-5388-4b3b-9c5f-8adc17bdab21"],

Cell[BoxData[
 RowBox[{"animSin", "=", 
  RowBox[{"Animate", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"n", " ", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "4"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4814601614560947`*^9, 3.481460161857394*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Images"},ExpressionUUID->"f69867e0-77f9-465d-9281-8ff9e204f0d2"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"animSin", "=", 
         RowBox[{"Animate", "[", 
           RowBox[{
             RowBox[{"Plot", "[", 
               RowBox[{
                 RowBox[{"Sin", "[", 
                   RowBox[{"n", " ", "x"}], "]"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"x", ",", "0", ",", 
                    RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], ",", 
             RowBox[{"{", 
               RowBox[{"n", ",", "1", ",", "4"}], "}"}]}], "]"}]}]], "Input", 
      CellChangeTimes -> {{3.4814601614560947`*^9, 3.481460161857394*^9}}, 
      CellTags -> {"Exercises", "Exporting and Importing Images"}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Export", "[", 
            
            RowBox[{"\"animatedSin.mov\"", ",", "animSin", ",", 
              "\"QuickTime\""}], "]"}]], "Input", 
         CellChangeTimes -> {{3.4935596704081383`*^9, 3.493559698187834*^9}, {
          3.493559751661518*^9, 3.493559758039027*^9}}], 
        Cell[
         BoxData["\"animatedSin.mov\""], "Output", 
         CellChangeTimes -> {3.493559728245985*^9, 3.4935597804158087`*^9}]}, 
       Open]], 
     Cell[
     "This will open the file in whatever application is associated with \
QuickTime movies on your computer:", "CodeText", 
      CellChangeTimes -> {{3.493559803634281*^9, 3.4935598237260017`*^9}, {
       3.822053130615234*^9, 3.8220531308333793`*^9}, {3.822055151062682*^9, 
       3.8220551514640512`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"SystemOpen", "[", "\"animatedSin.mov\"", "]"}]], "Input", 
      CellChangeTimes -> {{3.493559730191394*^9, 3.493559764303047*^9}}]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"72fcf17a-d4b6-4a92-b19f-513b2d65419f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.3 Importing and Exporting Data", "Subsection",
 CellChangeTimes->{{3.821010704869186*^9, 3.8210107069655437`*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"b83845f1-b3ad-4afa-b581-c2f18daf91ab"],

Cell["\<\
Working with the various graphics formats for Import results in a graphical \
expression in the Wolfram Language. \
\>", "Text",
 CellChangeTimes->{3.37848287009375*^9, 3.8210116070518537`*^9, 
  3.8219080797438965`*^9, 3.82250186229958*^9},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"d77e3ff8-0113-4f86-84a8-1038e0b10cf6"],

Cell[TextData[{
 "When importing graphical images, there are occasions when you will want to \
work with the pixel data. First create a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"50", "\[Times]", "50"}], TraditionalForm]],ExpressionUUID->
  "15910e7c-f599-4544-a7a3-36bb6285b4f4"],
 " array of 8-bit gray values:"
}], "CodeText",
 CellChangeTimes->{{3.8220551735886354`*^9, 3.8220551738843822`*^9}, {
  3.822566484344471*^9, 3.822566490487299*^9}, {3.822651857443285*^9, 
  3.8226518582331753`*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"b08d88fd-e38a-420d-bce7-7478da33723a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "50"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "255"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "n"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.481460173135498*^9, 3.481460173303568*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"188af498-810f-4e3c-85a9-fc665e29d6d0"],

Cell[TextData[{
 "Then, use the data to create a graphic with ",
 StyleBox[ButtonBox["Raster",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Raster"],
  FontWeight->"Bold"],
 ". Note that Raster takes the first row of the data and makes it the bottom \
row of the image:"
}], "CodeText",
 CellChangeTimes->{{3.8219080887242513`*^9, 3.821908094373773*^9}, {
  3.822055176342903*^9, 3.8220551766773195`*^9}, {3.822501901176859*^9, 
  3.8225019033802032`*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"005701df-8063-430f-9564-0abdbce319c2"],

Cell[BoxData[
 RowBox[{"ex", "=", 
  RowBox[{"Graphics", "[", 
   RowBox[{
    RowBox[{"Raster", "[", 
     RowBox[{"data", ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"n", ",", "n"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "255"}], "}"}]}], "]"}], ",", " ", 
    RowBox[{"ImageSize", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "n"}], ",", 
       RowBox[{"4", "n"}]}], "}"}]}], ",", " ", 
    RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.4814601756669607`*^9, 3.481460175869506*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"302b0df1-c31d-499a-86a4-9506895437c1"],

Cell["Now export the image:", "CodeText",
 CellChangeTimes->{{3.822055178984295*^9, 3.822055179264103*^9}, 
   3.822566503504052*^9},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"475cf7a7-ca18-4778-8563-927a572851d4"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<test.tif\>\"", ",", " ", "ex", ",", "\"\<TIFF\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.481460183012217*^9, 3.481460183382681*^9}, {
  3.6727506565425224`*^9, 3.672750659837901*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"c7e41146-5d9d-4ed8-854c-c873af632506"],

Cell["\<\
Now do the reverse. Import the file and extract the data. Verify that the \
expression created by Import has the same form as the expression taken by \
Export.\
\>", "CodeText",
 CellChangeTimes->{{3.8219081033697615`*^9, 3.8219081079868917`*^9}, {
   3.822055183019283*^9, 3.8220551833040524`*^9}, 3.82250180333286*^9, 
   3.8225018677376223`*^9, {3.822566505214973*^9, 3.822566527302341*^9}},
 CellTags->{
  "Exercises", 
   "Exporting and Importing \
Data"},ExpressionUUID->"e3a03c50-0d64-415a-a5aa-feebe16789a7"],

Cell[TextData[{
 "THERE IS SOME ERROR HERE. Because of Raster and ",
 StyleBox[ButtonBox["ImageSize",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ImageSize"],
  FontWeight->"Bold"],
 ", the imported image has four times as many pixels as seen when using ",
 StyleBox[ButtonBox["ImageDimensions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ImageDimensions"],
  FontWeight->"Bold"],
 " on the image."
}], "Text",
 CellChangeTimes->{{3.6727509618749948`*^9, 3.672751063642353*^9}, {
  3.6727511373626876`*^9, 3.672751139673873*^9}, {3.822566532367885*^9, 
  3.822566545465279*^9}},ExpressionUUID->"d6793f1c-00d6-49c1-9be8-\
e9871b6fd163"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     BoxData[
      RowBox[{"Import", "[", 
        RowBox[{"\"test.tif\"", ",", 
          RowBox[{"{", 
            RowBox[{"\"TIFF\"", ",", "\"Data\""}], "}"}]}], "]"}]], "Input", 
     CellChangeTimes -> {{3.4935599064384947`*^9, 3.4935599417718487`*^9}}], 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"72ae9250-ff19-4b69-bd48-406e113ba09e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.4 Using Data Collections", "Subsection",
 CellChangeTimes->{{3.8210107084431767`*^9, 3.821010711280121*^9}},
 CellTags->{
  "Exercises", 
   "Using Data \
Collections"},ExpressionUUID->"80212623-4378-4cb3-bbbc-6a20c168b7d0"],

Cell[TextData[{
 "Using ",
 StyleBox[ButtonBox["Country",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/entity/Country"],
  FontWeight->"Bold"],
 " entities, choose one country from each continent and compare AIDS \
population per capita; that is, compute the ratio of the HIV AIDS population \
to total population for each country."
}], "Text",
 CellChangeTimes->{
  3.8219081287546387`*^9, {3.8225019142929373`*^9, 3.82250192042448*^9}, 
   3.8225671941017847`*^9},
 CellTags->{
  "Exercises", 
   "Using Data \
Collections"},ExpressionUUID->"5168f1d5-25d0-49c3-ae02-84567ad3fb7a"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "Choose one country at random:", "CodeText", 
      CellChangeTimes -> {{3.493560726361382*^9, 3.493560733616003*^9}, {
       3.822055203757557*^9, 3.822055204079214*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"country", "=", 
            RowBox[{"RandomEntity", "[", 
              TemplateBox[{"\"all countries, dependencies, and territories\"", 
                RowBox[{"EntityClass", "[", 
                  RowBox[{"\"Country\"", ",", "\"Countries\""}], "]"}], 
                "\"EntityClass[\\\"Country\\\", \\\"Countries\\\"]\"", 
                "\"countries\""}, "EntityClass"], "]"}]}]], "Input", 
         CellChangeTimes -> {{3.493560735878374*^9, 3.493560753124848*^9}, {
          3.822596154524194*^9, 3.822596156599185*^9}, {
          3.8225962275020037`*^9, 3.8225962310209703`*^9}, {
          3.8225962706529617`*^9, 3.822596282134317*^9}}, CellLabel -> 
         "In[95]:="], 
        Cell[
         BoxData[
          TemplateBox[{"\"Iraq\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Country\"", ",", "\"Iraq\""}], "]"}], 
            "\"Entity[\\\"Country\\\", \\\"Iraq\\\"]\"", "\"country\""}, 
           "Entity"]], "Output", 
         CellChangeTimes -> {{3.8210623028108025`*^9, 3.821062313898323*^9}, {
          3.822596292635005*^9, 3.822596302365191*^9}}, CellLabel -> 
         "Out[95]="]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          FractionBox[
           RowBox[{"country", "[", "\"HIVAIDSPopulation\"", "]"}], 
           RowBox[{"country", "[", "\"Population\"", "]"}]]], "Input", 
         CellChangeTimes -> {{3.49356076111622*^9, 3.4935608297405777`*^9}, {
          3.8225963160593977`*^9, 3.8225963263743153`*^9}}, CellLabel -> 
         "In[96]:="], 
        Cell[
         BoxData["0.000012719478092339797`"], "Output", 
         CellChangeTimes -> {{3.82106230415604*^9, 3.8210623149030256`*^9}, 
           3.8225963288789797`*^9}, CellLabel -> "Out[96]="]}, Open]], 
     Cell[
     "Now choose a country at random from each continent. You need to exclude \
Antarctica, since there are no countries there:", "CodeText", 
      CellChangeTimes -> {{3.493560926173765*^9, 3.4935609497176*^9}, {
       3.8220552067115407`*^9, 3.822055207111597*^9}, {3.82256890657686*^9, 
       3.82256891155229*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"DeleteCases", "[", 
            RowBox[{
              RowBox[{"EntityList", "[", 
                TemplateBox[{"\"continents\"", 
                  RowBox[{"EntityClass", "[", 
                    RowBox[{"\"GeographicRegion\"", ",", "\"Continents\""}], 
                    "]"}], "\"EntityClass[\\\"GeographicRegion\\\", \
\\\"Continents\\\"]\"", "\"geographic regions\""}, "EntityClass"], "]"}], ",", 
              TemplateBox[{"\"Antarctica\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"GeographicRegion\"", ",", "\"Antarctica\""}], 
                  "]"}], "\"Entity[\\\"GeographicRegion\\\", \\\"Antarctica\\\
\"]\"", "\"geographic region\""}, "Entity"]}], "]"}]], "Input", 
         CellChangeTimes -> {{3.822596947267749*^9, 3.8225969748954363`*^9}}, 
         CellLabel -> "In[125]:="], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              TemplateBox[{"\"Africa\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"GeographicRegion\"", ",", "\"Africa\""}], "]"}], 
                "\"Entity[\\\"GeographicRegion\\\", \\\"Africa\\\"]\"", 
                "\"geographic region\""}, "Entity"], ",", 
              TemplateBox[{"\"Asia\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"GeographicRegion\"", ",", "\"Asia\""}], "]"}], 
                "\"Entity[\\\"GeographicRegion\\\", \\\"Asia\\\"]\"", 
                "\"geographic region\""}, "Entity"], ",", 
              TemplateBox[{"\"Australia\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"GeographicRegion\"", ",", "\"Australia\""}], 
                  "]"}], "\"Entity[\\\"GeographicRegion\\\", \
\\\"Australia\\\"]\"", "\"geographic region\""}, "Entity"], ",", 
              TemplateBox[{"\"Europe\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"GeographicRegion\"", ",", "\"Europe\""}], "]"}], 
                "\"Entity[\\\"GeographicRegion\\\", \\\"Europe\\\"]\"", 
                "\"geographic region\""}, "Entity"], ",", 
              TemplateBox[{"\"North America\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"GeographicRegion\"", ",", "\"NorthAmerica\""}], 
                  "]"}], "\"Entity[\\\"GeographicRegion\\\", \\\"NorthAmerica\
\\\"]\"", "\"geographic region\""}, "Entity"], ",", 
              TemplateBox[{"\"South America\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"GeographicRegion\"", ",", "\"SouthAmerica\""}], 
                  "]"}], "\"Entity[\\\"GeographicRegion\\\", \\\"SouthAmerica\
\\\"]\"", "\"geographic region\""}, "Entity"]}], "}"}]], "Output", 
         CellChangeTimes -> {{3.8225969338568907`*^9, 
          3.8225969789052353`*^9}}, CellLabel -> "Out[125]="]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"countries", "=", 
            RowBox[{
              RowBox[{
                RowBox[{"RandomEntity", "[", 
                  RowBox[{"#", "[", "\"Countries\"", "]"}], "]"}], "&"}], 
              "/@", 
              RowBox[{"DeleteCases", "[", 
                RowBox[{
                  RowBox[{"EntityList", "[", 
                    TemplateBox[{"\"continents\"", 
                    RowBox[{"EntityClass", "[", 
                    RowBox[{"\"GeographicRegion\"", ",", "\"Continents\""}], 
                    "]"}], 
                    "\"EntityClass[\\\"GeographicRegion\\\", \\\"Continents\\\
\"]\"", "\"geographic regions\""}, "EntityClass"], "]"}], ",", 
                  TemplateBox[{"\"Antarctica\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"GeographicRegion\"", ",", "\"Antarctica\""}], 
                    "]"}], "\"Entity[\\\"GeographicRegion\\\", \\\"Antarctica\
\\\"]\"", "\"geographic region\""}, "Entity"]}], "]"}]}]}]], "Input", 
         CellChangeTimes -> {
          3.822596339675486*^9, {3.822596389678502*^9, 
           3.822596400983934*^9}, {3.822596504451461*^9, 
           3.822596628360133*^9}, 3.822597431648582*^9}, CellLabel -> 
         "In[129]:="], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              TemplateBox[{"\"Uganda\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Country\"", ",", "\"Uganda\""}], "]"}], 
                "\"Entity[\\\"Country\\\", \\\"Uganda\\\"]\"", "\"country\""},
                "Entity"], ",", 
              TemplateBox[{"\"Syria\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Country\"", ",", "\"Syria\""}], "]"}], 
                "\"Entity[\\\"Country\\\", \\\"Syria\\\"]\"", "\"country\""}, 
               "Entity"], ",", 
              TemplateBox[{"\"Australia\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Country\"", ",", "\"Australia\""}], "]"}], 
                "\"Entity[\\\"Country\\\", \\\"Australia\\\"]\"", 
                "\"country\""}, "Entity"], ",", 
              TemplateBox[{"\"Spain\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Country\"", ",", "\"Spain\""}], "]"}], 
                "\"Entity[\\\"Country\\\", \\\"Spain\\\"]\"", "\"country\""}, 
               "Entity"], ",", 
              TemplateBox[{"\"Dominican Republic\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Country\"", ",", "\"DominicanRepublic\""}], 
                  "]"}], "\"Entity[\\\"Country\\\", \
\\\"DominicanRepublic\\\"]\"", "\"country\""}, "Entity"], ",", 
              TemplateBox[{"\"Ecuador\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Country\"", ",", "\"Ecuador\""}], "]"}], 
                "\"Entity[\\\"Country\\\", \\\"Ecuador\\\"]\"", 
                "\"country\""}, "Entity"]}], "}"}]], "Output", 
         CellChangeTimes -> {
          3.821062318261286*^9, {3.822596535846962*^9, 3.822596630082522*^9}, 
           3.822596759912784*^9, 3.822596834401195*^9, 
           3.8225974327197857`*^9}, CellLabel -> "Out[129]="]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{"{", 
                RowBox[{"#", ",", 
                  FractionBox[
                   RowBox[{"#", "[", "\"HIVAIDSPopulation\"", "]"}], 
                   RowBox[{"#", "[", "\"Population\"", "]"}]]}], "}"}], "&"}],
             "/@", "countries"}]], "Input", 
         CellChangeTimes -> {{3.49356076111622*^9, 3.4935608297405777`*^9}, {
          3.4935610965670633`*^9, 3.493561113442553*^9}, {
          3.822596719914114*^9, 3.822596731916052*^9}, {3.822597011864616*^9, 
          3.822597018524765*^9}}, CellLabel -> "In[130]:="], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  TemplateBox[{"\"Uganda\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Uganda\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Uganda\\\"]\"", 
                    "\"country\""}, "Entity"], ",", "0.029365532594645617`"}],
                 "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  TemplateBox[{"\"Syria\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Syria\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Syria\\\"]\"", 
                    "\"country\""}, "Entity"], ",", 
                  "0.000029290927568691326`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  TemplateBox[{"\"Australia\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Australia\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Australia\\\"]\"", 
                    "\"country\""}, "Entity"], ",", 
                  "0.0010316150330116811`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  TemplateBox[{"\"Spain\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Spain\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Spain\\\"]\"", 
                    "\"country\""}, "Entity"], ",", 
                  "0.0032094635869452885`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  TemplateBox[{"\"Dominican Republic\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"DominicanRepublic\""}], 
                    "]"}], "\"Entity[\\\"Country\\\", \\\"DominicanRepublic\\\
\"]\"", "\"country\""}, "Entity"], ",", "0.006238967154817735`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  TemplateBox[{"\"Ecuador\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"Ecuador\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"Ecuador\\\"]\"", 
                    "\"country\""}, "Entity"], ",", "0.002072102609139803`"}],
                 "}"}]}], "}"}]], "Output", 
         CellChangeTimes -> {{3.8210623315705404`*^9, 3.821062344014451*^9}, {
           3.822596742779929*^9, 3.822596766783558*^9}, {3.822596840627087*^9,
            3.822596850250127*^9}, 3.822596887771481*^9, {
           3.822596994523014*^9, 3.822597019140818*^9}, 3.822597445031642*^9},
          CellLabel -> "Out[130]="]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"19e03b4d-9170-4512-bfec-ce2905d8dfc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.5 Working with Data", "Subsection",
 CellChangeTimes->{{3.821010713741539*^9, 3.8210107155137987`*^9}},
 CellTags->{
  "Exercises", 
   "Working with \
Data"},ExpressionUUID->"e5f11a98-7658-4aba-8369-bb48a3a9fdf9"],

Cell["\<\
In this exercise, you will walk through the process of importing a data file \
into the Wolfram Language session, extracting the information you need from \
that file and then visualizing that data. The file you will work with \
contains monthly rainfall measurements (in mm) collected at Gatwick airport \
in the United Kingdom, averaged from 1961 through 1990.\
\>", "Text",
 CellChangeTimes->{{3.822052365802929*^9, 3.822052378700223*^9}, {
  3.822566562161559*^9, 3.822566570095428*^9}},
 CellTags->{
  "Exercises", 
   "Working with \
Data"},ExpressionUUID->"09736e18-3694-453a-9608-b46c90adc08a"],

Cell["\<\
The weather data file is available in the following directory:\
\>", "CodeText",
 CellChangeTimes->{{3.822055230199777*^9, 3.8220552305160575`*^9}},
 CellTags->{
  "Exercises", 
   "Working with \
Data"},ExpressionUUID->"f42bca1c-1b29-4986-a05b-c1e0a171c4ae"],

Cell[BoxData[
 RowBox[{"dataDirectory", "=", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\""}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.4814602029602613`*^9, 3.481460203273693*^9}, {
  3.822052399849704*^9, 3.8220524125337906`*^9}, {3.822501941429553*^9, 
  3.8225019479324417`*^9}},
 CellTags->{
  "Exercises", 
   "Working with \
Data"},ExpressionUUID->"cf3ac2c2-a527-4969-82f0-21cf7c93ff00"],

Cell[TextData[{
 "This gives a listing of the files in ",
 Cell[BoxData[
 "dataDirectory"], "Input",ExpressionUUID->
  "2f28899d-cfb5-460b-9f17-7efd430e09bf"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8220552332518263`*^9, 3.8220552335471973`*^9}, 
   3.8225019776527843`*^9, {3.822566582679891*^9, 3.82256658933097*^9}},
 CellTags->
  "Working with Data",ExpressionUUID->"c5487e84-bcea-4f90-b337-2406e7f3514f"],

Cell[BoxData[
 RowBox[{"FileNames", "[", 
  RowBox[{"\"\<*\>\"", ",", "dataDirectory"}], "]"}]], "Input",
 CellChangeTimes->{{3.481460209473452*^9, 3.481460209775793*^9}, 
   3.822501979467857*^9},
 CellTags->
  "Working with Data",ExpressionUUID->"4640cc4d-40fc-4792-a10c-6ac4e55e7f00"],

Cell[TextData[{
 "Use Import to read the data from ",
 StyleBox["weather.dat", "Text"],
 " into the Wolfram Language session. You can set the path, move the file to \
a location on the path or change the working directory."
}], "Item",
 CellChangeTimes->{{3.378484322640625*^9, 3.378484358046875*^9}, {
   3.822052533473317*^9, 3.8220525801338725`*^9}, 3.82250187368405*^9, {
   3.822566598624645*^9, 3.822566602231946*^9}},
 CellTags->{
  "Exercises", 
   "Working with \
Data"},ExpressionUUID->"353a1149-0f69-4345-9f74-e68e7c661a47"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"weatherdata", "=", 
            RowBox[{"Import", "[", 
              RowBox[{
                RowBox[{"FileNameJoin", "[", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"data\"", 
                    ",", "\"weather.dat\""}], "}"}], "]"}], ",", 
                "\"Table\""}], "]"}]}]], "Input", 
         CellChangeTimes -> {{3.493561516047659*^9, 3.493561531300179*^9}, {
          3.822597500498845*^9, 3.82259750903549*^9}}, CellTags -> 
         "Exercises"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                
                RowBox[{
                 "\"#\"", ",", "\"London/Gatwick\"", ",", "\"Airport,\"", ",",
                   "\"United\"", ",", "\"Kingdom\""}], "}"}], ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"#\"", ",", "\"Weather\"", ",", "\"station\"", ",", 
                  "\"is\"", ",", "\"at\"", ",", "\"51.15N\"", ",", 
                  "\"0.10W.\"", ",", "\"Height\"", ",", "\"about\"", ",", 
                  "\"62m\"", ",", "\"above\"", ",", "\"sea\"", ",", 
                  "\"level.\""}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jan\"", ",", "77.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Feb\"", ",", "51.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Mar\"", ",", "60.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Apr\"", ",", "54.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"May\"", ",", "55.3`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jun\"", ",", "56.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jul\"", ",", "44.8`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Aug\"", ",", "55.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Sep\"", ",", "67.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Oct\"", ",", "73.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Nov\"", ",", "77.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Dec\"", ",", "78.9`"}], "}"}]}], "}"}]], "Output", 
         CellChangeTimes -> {{3.49356152056678*^9, 3.493561533230297*^9}}, 
         CellTags -> "Exercises"]}, Open]], 
     Cell[
     "Alternatively, you could set the working directory and then use \
Import:", "CodeText", 
      CellChangeTimes -> {{3.8220552420007315`*^9, 3.8220552423466268`*^9}, {
       3.8225689354574738`*^9, 3.822568940438937*^9}, {3.822651142826028*^9, 
       3.8226511433118668`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"SetDirectory", "[", 
         RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"data\""}], 
             "}"}], "]"}], "]"}]], "Input", 
      CellChangeTimes -> {{3.822597522323154*^9, 3.822597544687516*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"weatherdata", "=", 
            RowBox[{"Import", "[", 
              RowBox[{"\"weather.dat\"", ",", "\"Table\""}], "]"}]}]], 
         "Input", 
         CellChangeTimes -> {{3.493561552236883*^9, 3.493561553125578*^9}}], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                
                RowBox[{
                 "\"#\"", ",", "\"London/Gatwick\"", ",", "\"Airport,\"", ",",
                   "\"United\"", ",", "\"Kingdom\""}], "}"}], ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"#\"", ",", "\"Weather\"", ",", "\"station\"", ",", 
                  "\"is\"", ",", "\"at\"", ",", "\"51.15N\"", ",", 
                  "\"0.10W.\"", ",", "\"Height\"", ",", "\"about\"", ",", 
                  "\"62m\"", ",", "\"above\"", ",", "\"sea\"", ",", 
                  "\"level.\""}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jan\"", ",", "77.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Feb\"", ",", "51.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Mar\"", ",", "60.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Apr\"", ",", "54.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"May\"", ",", "55.3`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jun\"", ",", "56.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jul\"", ",", "44.8`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Aug\"", ",", "55.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Sep\"", ",", "67.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Oct\"", ",", "73.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Nov\"", ",", "77.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Dec\"", ",", "78.9`"}], "}"}]}], "}"}]], "Output", 
         CellChangeTimes -> {3.49356155492684*^9}]}, Open]]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"11e01b03-4410-4452-ac53-3f1a7f7d5cb6"],

Cell["\<\
Extract the raw data from the imported file; that is, extract the average \
monthly rainfall numbers.\
\>", "Item",
 CellTags->{
  "Exercises", 
   "Working with \
Data"},ExpressionUUID->"9bd003e5-5ee7-44df-95f4-4f80ed33046b"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"Looking at the ", 
        StyleBox[
         ButtonBox[
         "FullForm", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/FullForm"], FontWeight -> "Bold"], 
        " of this data, you can see that the months are stored as strings and \
the data representing rainfall is real numbers:"}], "CodeText", 
      CellChangeTimes -> {{3.822053323973101*^9, 3.822053333724972*^9}, {
       3.822055281522171*^9, 3.8220552819078455`*^9}, {3.8225689825699787`*^9,
        3.822568982680807*^9}}, CellTags -> "Exercises"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"weatherdata", "=", 
            RowBox[{"Import", "[", 
              RowBox[{
                RowBox[{"FileNameJoin", "[", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"data\"", 
                    ",", "\"weather.dat\""}], "}"}], "]"}], ",", 
                "\"Table\""}], "]"}]}]], "Input", 
         CellChangeTimes -> {{3.4935615865511503`*^9, 3.493561593862609*^9}, {
          3.8225975898803587`*^9, 3.8225975961451607`*^9}}], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                
                RowBox[{
                 "\"#\"", ",", "\"London/Gatwick\"", ",", "\"Airport,\"", ",",
                   "\"United\"", ",", "\"Kingdom\""}], "}"}], ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"#\"", ",", "\"Weather\"", ",", "\"station\"", ",", 
                  "\"is\"", ",", "\"at\"", ",", "\"51.15N\"", ",", 
                  "\"0.10W.\"", ",", "\"Height\"", ",", "\"about\"", ",", 
                  "\"62m\"", ",", "\"above\"", ",", "\"sea\"", ",", 
                  "\"level.\""}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jan\"", ",", "77.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Feb\"", ",", "51.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Mar\"", ",", "60.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Apr\"", ",", "54.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"May\"", ",", "55.3`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jun\"", ",", "56.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jul\"", ",", "44.8`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Aug\"", ",", "55.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Sep\"", ",", "67.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Oct\"", ",", "73.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Nov\"", ",", "77.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Dec\"", ",", "78.9`"}], "}"}]}], "}"}]], "Output", 
         CellChangeTimes -> {{3.4935615942959146`*^9, 
          3.493561597482435*^9}}]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"FullForm", "[", "weatherdata", "]"}]], "Input", CellTags -> 
         "Exercises"], 
        Cell[
         BoxData[
          TagBox[
           StyleBox[
            RowBox[{"List", "[", 
              RowBox[{
                RowBox[{"List", "[", 
                  
                  RowBox[{
                   "\"#\"", ",", "\"London/Gatwick\"", ",", "\"Airport,\"", 
                    ",", "\"United\"", ",", "\"Kingdom\""}], "]"}], ",", 
                RowBox[{"List", "[", 
                  
                  RowBox[{
                   "\"#\"", ",", "\"Weather\"", ",", "\"station\"", ",", 
                    "\"is\"", ",", "\"at\"", ",", "\"51.15N\"", ",", 
                    "\"0.10W.\"", ",", "\"Height\"", ",", "\"about\"", ",", 
                    "\"62m\"", ",", "\"above\"", ",", "\"sea\"", ",", 
                    "\"level.\""}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Jan\"", ",", "77.7`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Feb\"", ",", "51.1`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Mar\"", ",", "60.2`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Apr\"", ",", "54.1`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"May\"", ",", "55.3`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Jun\"", ",", "56.6`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Jul\"", ",", "44.8`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Aug\"", ",", "55.6`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Sep\"", ",", "67.7`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Oct\"", ",", "73.2`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Nov\"", ",", "77.6`"}], "]"}], ",", 
                RowBox[{"List", "[", 
                  RowBox[{"\"Dec\"", ",", "78.9`"}], "]"}]}], "]"}], 
            ShowSpecialCharacters -> False, ShowStringCharacters -> True, 
            NumberMarks -> True], FullForm]], "Output", 
         CellChangeTimes -> {3.493561597548403*^9}, CellTags -> "Exercises"]},
        Open]], 
     Cell[
     "The month/rainfall information is contained in the third through \
fourteenth rows:", "CodeText", 
      CellChangeTimes -> {{3.8220552848518734`*^9, 3.8220552852287498`*^9}, {
       3.822568994809688*^9, 3.822569001400838*^9}}, CellTags -> "Exercises"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"weatherdata", "//", "TableForm"}]], "Input", CellTags -> 
         "Exercises"], 
        Cell[
         BoxData[
          InterpretationBox[
           
           GridBox[{{
             "\"#\"", "\"London/Gatwick\"", "\"Airport,\"", "\"United\"", 
              "\"Kingdom\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\""}, {
             "\"#\"", "\"Weather\"", "\"station\"", "\"is\"", "\"at\"", 
              "\"51.15N\"", "\"0.10W.\"", "\"Height\"", "\"about\"", 
              "\"62m\"", "\"above\"", "\"sea\"", "\"level.\""}, {
             "\"Jan\"", "77.7`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Feb\"", "51.1`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Mar\"", "60.2`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Apr\"", "54.1`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"May\"", "55.3`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Jun\"", "56.6`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Jul\"", "44.8`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Aug\"", "55.6`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Sep\"", "67.7`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Oct\"", "73.2`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Nov\"", "77.6`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}, {
             "\"Dec\"", "78.9`", "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", 
              "\"\"", "\"\"", "\"\"", "\"\"", "\"\"", "\"\""}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[2.0999999999999996`]}, 
                Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}], 
           
           TableForm[{{
             "#", "London/Gatwick", "Airport,", "United", "Kingdom"}, {
             "#", "Weather", "station", "is", "at", "51.15N", "0.10W.", 
              "Height", "about", "62m", "above", "sea", "level."}, {
             "Jan", 77.7}, {"Feb", 51.1}, {"Mar", 60.2}, {"Apr", 54.1}, {
             "May", 55.3}, {"Jun", 56.6}, {"Jul", 44.8}, {"Aug", 55.6}, {
             "Sep", 67.7}, {"Oct", 73.2}, {"Nov", 77.6}, {"Dec", 78.9}}]]], 
         "Output", CellChangeTimes -> {3.4935615975881357`*^9}, CellTags -> 
         "Exercises"]}, Open]], 
     Cell[
      TextData[{
       "This extracts the last 12 rows and assigns them to the symbol ", 
        Cell[
         BoxData["data"], "Input"], ":"}], "CodeText", 
      CellChangeTimes -> {{3.822055288957959*^9, 3.8220552892934375`*^9}, {
       3.8225690117211733`*^9, 3.822569018642187*^9}}, CellTags -> 
      "Exercises"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"data", "=", 
            RowBox[{"Take", "[", 
              RowBox[{"weatherdata", ",", 
                RowBox[{"-", "12"}]}], "]"}]}]], "Input", 
         CellChangeTimes -> {{3.4935616346563787`*^9, 3.49356163514921*^9}}, 
         CellTags -> "Exercises"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"\"Jan\"", ",", "77.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Feb\"", ",", "51.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Mar\"", ",", "60.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Apr\"", ",", "54.1`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"May\"", ",", "55.3`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jun\"", ",", "56.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Jul\"", ",", "44.8`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Aug\"", ",", "55.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Sep\"", ",", "67.7`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Oct\"", ",", "73.2`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Nov\"", ",", "77.6`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Dec\"", ",", "78.9`"}], "}"}]}], "}"}]], "Output", 
         CellChangeTimes -> {3.493561597614171*^9, 3.493561636330043*^9}, 
         CellTags -> "Exercises"]}, Open]], 
     Cell[
     "Here are the months:", "CodeText", 
      CellChangeTimes -> {{3.822055297605514*^9, 3.822055297929515*^9}}, 
      CellTags -> "Exercises"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"months", "=", 
            RowBox[{"Map", "[", 
              RowBox[{"First", ",", "data"}], "]"}]}]], "Input", CellTags -> 
         "Exercises"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            
            RowBox[{"\"Jan\"", ",", "\"Feb\"", ",", "\"Mar\"", ",", "\"Apr\"",
               ",", "\"May\"", ",", "\"Jun\"", ",", "\"Jul\"", ",", "\"Aug\"",
               ",", "\"Sep\"", ",", "\"Oct\"", ",", "\"Nov\"", ",", 
              "\"Dec\""}], "}"}]], "Output", 
         CellChangeTimes -> {3.493561597646118*^9}, CellTags -> "Exercises"]},
        Open]], 
     Cell[
     "And here are the numbers representing the rainfall data:", "CodeText", 
      CellChangeTimes -> {{3.822055300225877*^9, 3.8220553005420303`*^9}}, 
      CellTags -> "Exercises"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"rainfall", "=", 
            RowBox[{"Map", "[", 
              RowBox[{"Last", ",", "data"}], "]"}]}]], "Input", CellTags -> 
         "Exercises"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            
            RowBox[{"77.7`", ",", "51.1`", ",", "60.2`", ",", "54.1`", ",", 
              "55.3`", ",", "56.6`", ",", "44.8`", ",", "55.6`", ",", "67.7`",
               ",", "73.2`", ",", "77.6`", ",", "78.9`"}], "}"}]], "Output", 
         CellChangeTimes -> {3.4935615976953697`*^9}, CellTags -> 
         "Exercises"]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"5469cbae-854e-4ec0-9f5d-ed4599afd22e"],

Cell["\<\
Create a bar chart of the rainfall, labeling the bins with the month names.\
\>", "Item",
 CellTags->{
  "Exercises", 
   "Working with \
Data"},ExpressionUUID->"e1315c58-1319-438b-92a2-dbafb7c23167"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{
        StyleBox[
         ButtonBox[
         "BarChart", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/BarChart"], FontWeight -> "Bold"], 
        " will automatically bin the data. Hovering your mouse over any of \
the bars displays the value (height) in a tooltip:"}], "CodeText", 
      CellChangeTimes -> {
       3.8220533812924795`*^9, {3.822055343739444*^9, 3.822055344148166*^9}}, 
      CellTags -> "Exercises"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"BarChart", "[", "rainfall", "]"}]], "Input", CellTags -> 
         "Exercises"], 
        Cell[
         BoxData[
          GraphicsBox[{{
             RGBColor[
             0.798413061722744, 0.824719615472648, 0.968322270542458], 
             EdgeForm[
              Opacity[0.7]], {}, {
              RGBColor[
              0.798413061722744, 0.824719615472648, 0.968322270542458], 
              EdgeForm[
               Opacity[0.7]], {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5454545454545454, 0.}, {
                    1.4545454545454546`, 77.7}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{16.056586270871982`, 
                    42.62244897959184}, {-102.920084041456, 
                    103.47533768848734`}}], StatusArea[#, 77.7]& , TagBoxNote -> 
                  "77.7"], 
                 StyleBox["77.7`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[77.7, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5454545454545454`, 0.}, {
                    2.4545454545454546`, 51.1}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{44.17903525046382, 
                    70.74489795918367}, {-32.604534260033944`, 
                    103.47533768848734`}}], StatusArea[#, 51.1]& , TagBoxNote -> 
                  "51.1"], 
                 StyleBox["51.1`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[51.1, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{2.5454545454545454`, 0.}, {
                    3.4545454545454546`, 60.2}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{72.30148423005566, 
                    98.86734693877553}, {-56.65985392209939, 
                    103.47533768848734`}}], StatusArea[#, 60.2]& , TagBoxNote -> 
                  "60.2"], 
                 StyleBox["60.2`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[60.2, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{3.5454545454545454`, 0.}, {
                    4.454545454545454, 54.1}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{100.4239332096475, 
                    126.98979591836735`}, {-40.53485942335223, 
                    103.47533768848734`}}], StatusArea[#, 54.1]& , TagBoxNote -> 
                  "54.1"], 
                 StyleBox["54.1`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[54.1, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{4.545454545454545, 0.}, {5.454545454545454, 
                    55.3}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{128.54638218923935`, 
                    155.1122448979592}, {-43.70698948867954, 
                    103.47533768848734`}}], StatusArea[#, 55.3]& , TagBoxNote -> 
                  "55.3"], 
                 StyleBox["55.3`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[55.3, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{5.545454545454545, 0.}, {6.454545454545454, 
                    56.6}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{156.66883116883116`, 
                    183.23469387755102`}, {-47.14346372611746, 
                    103.47533768848734`}}], StatusArea[#, 56.6]& , TagBoxNote -> 
                  "56.6"], 
                 StyleBox["56.6`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[56.6, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{6.545454545454545, 0.}, {7.454545454545454, 
                    44.8}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{184.79128014842303`, 
                    211.35714285714286`}, {-15.950851417065564`, 
                    103.47533768848734`}}], StatusArea[#, 44.8]& , TagBoxNote -> 
                  "44.8"], 
                 StyleBox["44.8`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[44.8, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{7.545454545454545, 0.}, {8.454545454545453, 
                    55.6}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{212.91372912801486`, 
                    239.4795918367347}, {-44.500022005011374`, 
                    103.47533768848734`}}], StatusArea[#, 55.6]& , TagBoxNote -> 
                  "55.6"], 
                 StyleBox["55.6`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[55.6, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{8.545454545454545, 0.}, {9.454545454545453, 
                    67.7}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{241.0361781076067, 
                    267.60204081632656`}, {-76.48566683039508, 
                    103.47533768848734`}}], StatusArea[#, 67.7]& , TagBoxNote -> 
                  "67.7"], 
                 StyleBox["67.7`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[67.7, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{9.545454545454545, 0.}, {
                    10.454545454545453`, 73.2}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{269.15862708719857`, 
                    295.7244897959184}, {-91.02459629647859, 
                    103.47533768848734`}}], StatusArea[#, 73.2]& , TagBoxNote -> 
                  "73.2"], 
                 StyleBox["73.2`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[73.2, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{10.545454545454545`, 0.}, {
                    11.454545454545453`, 77.6}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{297.28107606679043`, 
                    323.84693877551024`}, {-102.65573986934538`, 
                    103.47533768848734`}}], StatusArea[#, 77.6]& , TagBoxNote -> 
                  "77.6"], 
                 StyleBox["77.6`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[77.6, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{11.545454545454545`, 0.}, {
                    12.454545454545453`, 78.9}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{325.40352504638224`, 
                    351.9693877551021}, {-106.09221410678333`, 
                    103.47533768848734`}}], StatusArea[#, 78.9]& , TagBoxNote -> 
                  "78.9"], 
                 StyleBox["78.9`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[78.9, {
                   GrayLevel[0]}], 
                 "Tooltip"]& ]}}, {}, {}}, {}, {{{{{{{}, {}}, {}}, {{{}, {}}, \
{}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, \
{}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, \
{{{}, {}}, {}}}, {}}, {}}, {}}, 
            GraphicsGroupBox[{
              GrayLevel[0], 
              StyleBox[
               LineBox[{{{0.5454545454545454, 0.}, 
                  Offset[{0, -4}, {0.5454545454545454, 0.}]}, {{
                  12.454545454545453`, 0.}, 
                  Offset[{0, -4}, {12.454545454545453`, 0.}]}}], Antialiasing -> 
               False]}]}, AspectRatio -> 
           NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True},
            AxesOrigin -> {0.4545454545454546, Automatic}, 
           FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
           PlotRangePadding -> Scaled[0.02], Ticks -> {None, Automatic}]], 
         "Output", CellChangeTimes -> {3.493561667749704*^9}, CellTags -> 
         "Exercises"]}, Open]], 
     Cell[
     "To get tick marks along the bottom axis containing the month text, use \
the ChartLabels option:", "CodeText", 
      CellChangeTimes -> {
       3.8220533896130276`*^9, {3.8220553468577003`*^9, 
        3.8220553472054443`*^9}, {3.822569081011137*^9, 
        3.822569083336816*^9}}, CellTags -> "Exercises"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"BarChart", "[", 
            RowBox[{"rainfall", ",", 
              RowBox[{"ChartLabels", "\[Rule]", "months"}]}], "]"}]], "Input",
          CellTags -> "Exercises"], 
        Cell[
         BoxData[
          GraphicsBox[{{
             RGBColor[
             0.798413061722744, 0.824719615472648, 0.968322270542458], 
             EdgeForm[
              Opacity[0.7]], {}, {
              RGBColor[
              0.798413061722744, 0.824719615472648, 0.968322270542458], 
              EdgeForm[
               Opacity[0.7]], {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5454545454545454, 0.}, {
                    1.4545454545454546`, 77.7}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{16.056586270871982`, 
                    42.62244897959184}, {-107.92008404145601`, 
                    98.47533768848733}}], StatusArea[#, 77.7]& , TagBoxNote -> 
                  "77.7"], 
                 StyleBox["77.7`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[77.7, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5454545454545454`, 0.}, {
                    2.4545454545454546`, 51.1}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{44.17903525046382, 
                    70.74489795918367}, {-37.60453426003396, 
                    98.47533768848733}}], StatusArea[#, 51.1]& , TagBoxNote -> 
                  "51.1"], 
                 StyleBox["51.1`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[51.1, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{2.5454545454545454`, 0.}, {
                    3.4545454545454546`, 60.2}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{72.30148423005566, 
                    98.86734693877553}, {-61.6598539220994, 
                    98.47533768848733}}], StatusArea[#, 60.2]& , TagBoxNote -> 
                  "60.2"], 
                 StyleBox["60.2`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[60.2, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{3.5454545454545454`, 0.}, {
                    4.454545454545454, 54.1}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{100.4239332096475, 
                    126.98979591836735`}, {-45.534859423352245`, 
                    98.47533768848733}}], StatusArea[#, 54.1]& , TagBoxNote -> 
                  "54.1"], 
                 StyleBox["54.1`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[54.1, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{4.545454545454545, 0.}, {5.454545454545454, 
                    55.3}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{128.54638218923935`, 
                    155.1122448979592}, {-48.706989488679554`, 
                    98.47533768848733}}], StatusArea[#, 55.3]& , TagBoxNote -> 
                  "55.3"], 
                 StyleBox["55.3`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[55.3, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{5.545454545454545, 0.}, {6.454545454545454, 
                    56.6}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{156.66883116883116`, 
                    183.23469387755102`}, {-52.143463726117474`, 
                    98.47533768848733}}], StatusArea[#, 56.6]& , TagBoxNote -> 
                  "56.6"], 
                 StyleBox["56.6`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[56.6, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{6.545454545454545, 0.}, {7.454545454545454, 
                    44.8}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{184.79128014842303`, 
                    211.35714285714286`}, {-20.95085141706558, 
                    98.47533768848733}}], StatusArea[#, 44.8]& , TagBoxNote -> 
                  "44.8"], 
                 StyleBox["44.8`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[44.8, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{7.545454545454545, 0.}, {8.454545454545453, 
                    55.6}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{212.91372912801486`, 
                    239.4795918367347}, {-49.50002200501139, 
                    98.47533768848733}}], StatusArea[#, 55.6]& , TagBoxNote -> 
                  "55.6"], 
                 StyleBox["55.6`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[55.6, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{8.545454545454545, 0.}, {9.454545454545453, 
                    67.7}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{241.0361781076067, 
                    267.60204081632656`}, {-81.48566683039509, 
                    98.47533768848733}}], StatusArea[#, 67.7]& , TagBoxNote -> 
                  "67.7"], 
                 StyleBox["67.7`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[67.7, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{9.545454545454545, 0.}, {
                    10.454545454545453`, 73.2}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{269.15862708719857`, 
                    295.7244897959184}, {-96.0245962964786, 
                    98.47533768848733}}], StatusArea[#, 73.2]& , TagBoxNote -> 
                  "73.2"], 
                 StyleBox["73.2`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[73.2, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{10.545454545454545`, 0.}, {
                    11.454545454545453`, 77.6}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{297.28107606679043`, 
                    323.84693877551024`}, {-107.6557398693454, 
                    98.47533768848733}}], StatusArea[#, 77.6]& , TagBoxNote -> 
                  "77.6"], 
                 StyleBox["77.6`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[77.6, {
                   GrayLevel[0]}], "Tooltip"]& ]}, {
               RGBColor[
               0.798413061722744, 0.824719615472648, 0.968322270542458], 
               EdgeForm[
                Opacity[0.7]], 
               TagBox[
                TooltipBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{11.545454545454545`, 0.}, {
                    12.454545454545453`, 78.9}, "RoundingRadius" -> 0]}, 
                   ImageSizeCache -> {{325.40352504638224`, 
                    351.9693877551021}, {-111.09221410678335`, 
                    98.47533768848733}}], StatusArea[#, 78.9]& , TagBoxNote -> 
                  "78.9"], 
                 StyleBox["78.9`", {
                   GrayLevel[0]}, StripOnInput -> False]], Annotation[#, 
                 Style[78.9, {
                   GrayLevel[0]}], 
                 "Tooltip"]& ]}}, {}, {}}, {}, {{{{{{{}, {}}, {}}, {{{}, {}}, \
{}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, \
{}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, {{{}, {}}, {}}, \
{{{}, {}}, {}}}, {}}, {}}, {}}, 
            GraphicsGroupBox[{
              GrayLevel[0], 
              StyleBox[
               GraphicsGroupBox[{
                 LineBox[{{{0.5454545454545454, 0.}, 
                    Offset[{0, -4}, {0.5454545454545454, 0.}]}, {{
                    12.454545454545453`, 0.}, 
                    Offset[{0, -4}, {12.454545454545453`, 0.}]}}], 
                 InsetBox[
                  PaneBox["\"Jan\""], 
                  Offset[{0, -2}, {1., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Feb\""], 
                  Offset[{0, -2}, {2., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Mar\""], 
                  Offset[{0, -2}, {3., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Apr\""], 
                  Offset[{0, -2}, {4., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"May\""], 
                  Offset[{0, -2}, {5., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Jun\""], 
                  Offset[{0, -2}, {6., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Jul\""], 
                  Offset[{0, -2}, {7., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Aug\""], 
                  Offset[{0, -2}, {7.999999999999999, 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Sep\""], 
                  Offset[{0, -2}, {9., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Oct\""], 
                  Offset[{0, -2}, {10., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Nov\""], 
                  Offset[{0, -2}, {11., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]], 
                 InsetBox[
                  PaneBox["\"Dec\""], 
                  Offset[{0, -2}, {12., 0.}], 
                  ImageScaled[{
                    Rational[1, 2], 1}]]}], Antialiasing -> False]}]}, 
           AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
           Axes -> {True, True}, 
           AxesOrigin -> {0.4545454545454546, Automatic}, 
           FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
           PlotRangePadding -> Scaled[0.02], Ticks -> {None, Automatic}]], 
         "Output", CellChangeTimes -> {3.4935616679972763`*^9}, CellTags -> 
         "Exercises"]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"7815b396-7e46-4946-9a7d-d0be6f1bfc49"]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.6 Saving Results from a Differential Equation", "Subsection",
 CellChangeTimes->{{3.8210107168582053`*^9, 3.8210107187601566`*^9}},
 CellTags->{
  "Exercises", 
   "Saving Results from \
DE"},ExpressionUUID->"df63b8e3-5c02-46c7-8848-f81550485505"],

Cell[TextData[{
 "Evaluate the following input to define ",
 Cell[BoxData[
 "sol"], "Input",ExpressionUUID->"d1edb272-1e16-41ac-b992-a92d82acc767"],
 " as a result from ",
 StyleBox[ButtonBox["NDSolve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NDSolve"],
  FontWeight->"Bold"],
 ". The result is returned using an ",
 StyleBox[ButtonBox["InterpolatingFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/InterpolatingFunction"],
  FontWeight->"Bold"],
 " expression:"
}], "Text",
 CellChangeTimes->{{3.8219081500566483`*^9, 3.8219081569341693`*^9}, {
  3.822566619378376*^9, 3.822566648378088*^9}},
 CellTags->{
  "Exercises", 
   "Saving Results from \
DE"},ExpressionUUID->"313c463f-737a-40e1-833e-afc40f55efbe"],

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"f", "'"}], "[", "x", "]"}], "\[Equal]", 
       RowBox[{"f", "[", "x", "]"}]}], ",", 
      RowBox[{
       RowBox[{"f", "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], ",", "f", 
    ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Saving Results from \
DE"},ExpressionUUID->"f04ff86e-2c34-4ae7-bd36-f3031f8fb7f9"],

Cell["\<\
If this result is to be exported to another program, it is often convenient \
to have the result in the form of a table of numbers, rather than in the form \
of an InterpolatingFunction expression. Evaluate the following input to \
demonstrate one way of constructing such a table of numbers:\
\>", "Text",
 CellChangeTimes->{
  3.821908164020053*^9, {3.8225019945305157`*^9, 3.8225019996369534`*^9}, {
   3.822566645426015*^9, 3.822566645904608*^9}},
 CellTags->{
  "Exercises", 
   "Saving Results from \
DE"},ExpressionUUID->"5a5845d1-cca9-4af2-a5dd-a8bafc6f61cf"],

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"f", "[", "x", "]"}], "/.", 
       RowBox[{"sol", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Saving Results from \
DE"},ExpressionUUID->"f7ba58f0-8da9-46c9-80ac-17f005b363aa"],

Cell[TextData[{
 "Write this table to a file. The contents of the file should be similar or \
identical to the table produced by the preceding ",
 StyleBox[ButtonBox["TableForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableForm"],
  FontWeight->"Bold"],
 " input. You can check the contents of the file by evaluating ",
 Cell[BoxData[
  RowBox[{"FilePrint", "[", "\"\<file\>\"", "]"}]], "Input",ExpressionUUID->
  "88d7a631-9d6a-4ed3-ab96-5183cef98fd3"],
 "."
}], "Text",
 CellChangeTimes->{
  3.8219081724755836`*^9, {3.8225666600419903`*^9, 3.822566697058206*^9}},
 CellTags->{
  "Exercises", 
   "Saving Results from \
DE"},ExpressionUUID->"7590e953-bf9c-41a1-9b2f-d4637a233f21"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The desired file can be produced using ", 
         StyleBox[
          ButtonBox[
          "Export", BaseStyle -> "Link", ButtonData -> "paclet:ref/Export"], 
          FontWeight -> "Bold"], " or ", 
         StyleBox[
          ButtonBox[
          "Write", BaseStyle -> "Link", ButtonData -> "paclet:ref/Write"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {{3.822053431582264*^9, 3.8220534358439393`*^9}}], 
      Cell[
       TextData[{"If you use ", 
         StyleBox[
          ButtonBox[
          "Export", BaseStyle -> "Link", ButtonData -> "paclet:ref/Export"], 
          FontWeight -> "Bold"], ", then ", 
         StyleBox[
          ButtonBox[
          "TableForm", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/TableForm"], FontWeight -> "Bold"], 
         " is not necessary if you write the file in ", 
         StyleBox["\"Table\"", "Input"], " format."}], "Text", 
       CellChangeTimes -> {{3.822053441611247*^9, 3.8220534493398*^9}}], 
      Cell[
       TextData[{"If you use ", 
         StyleBox[
          ButtonBox[
          "Write", BaseStyle -> "Link", ButtonData -> "paclet:ref/Write"], 
          FontWeight -> "Bold"], ", then write the output in ", 
         StyleBox[
          ButtonBox[
          "OutputForm", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/OutputForm"], FontWeight -> "Bold"], 
         ". You can use the ", 
         StyleBox[
          ButtonBox[
          "TableSpacing", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/TableSpacing"], FontWeight -> "Bold"], " option of ", 
         StyleBox[
          ButtonBox[
          "TableForm", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/TableForm"], FontWeight -> "Bold"], 
         " to control spacing between rows and columns in the table. For \
example, ", 
         StyleBox["TableSpacing\[Rule]{0,3}", "Input"], 
         " gives a table with no blank lines between rows and three spaces \
between columns."}], "Text", 
       CellChangeTimes -> {{3.8220534577788677`*^9, 
        3.8220534734023046`*^9}}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"ed8b5e01-3bac-4719-965d-aa68a122b552"],

Cell[TextData[{
 "The desired file can be produced using Export or ",
 StyleBox[ButtonBox["Write",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Write"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.822053431582264*^9, 3.8220534358439393`*^9}, {
  3.822566704515009*^9, 
  3.822566706401659*^9}},ExpressionUUID->"e2948bec-f7cc-441f-bd60-\
e028c4334b45"],

Cell[TextData[{
 "If you use Export, then TableForm is not necessary if you write the file in \
",
 Cell[BoxData[
 "\"\<Table\>\""], "Input",ExpressionUUID->
  "1bf21f24-4da0-4b92-b0fe-c2fc664b4cc2"],
 " format."
}], "Text",
 CellChangeTimes->{{3.822053441611247*^9, 3.8220534493398*^9}, {
  3.822566711163088*^9, 
  3.822566735797204*^9}},ExpressionUUID->"7c2f8ab8-5fbf-43a5-9c91-\
19b6f986b0b1"],

Cell[TextData[{
 "If you use Write, then write the output in ",
 StyleBox[ButtonBox["OutputForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OutputForm"],
  FontWeight->"Bold"],
 ". You can use the ",
 StyleBox[ButtonBox["TableSpacing",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableSpacing"],
  FontWeight->"Bold"],
 " option of TableForm to control spacing between rows and columns in the \
table. For example, ",
 Cell[BoxData[
  RowBox[{"TableSpacing", "\[RightArrow]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "3"}], "}"}]}]], "Input",ExpressionUUID->
  "56464afa-f79d-4c9b-a6ba-d349b4781a7a"],
 " gives a table with no blank lines between rows and three spaces between \
columns."
}], "Text",
 CellChangeTimes->{{3.8220534577788677`*^9, 3.8220534734023046`*^9}, {
  3.822566744883525*^9, 3.822566788955317*^9}, {3.8225672286509666`*^9, 
  3.822567230000723*^9}},ExpressionUUID->"85258830-1c28-4587-9231-\
cf946a27e6a0"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"sol", "=", 
            RowBox[{"NDSolve", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"f", "'"}], "[", "x", "]"}], "\[Equal]", 
                    RowBox[{"f", "[", "x", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"f", "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}], 
                ",", "f", ",", 
                RowBox[{"{", 
                  RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]}]], 
         "Input", CellTags -> {"Exercises", "Saving Results from DE"}], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"{", 
              RowBox[{"f", "\[Rule]", 
                TagBox[
                 RowBox[{"InterpolatingFunction", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "5.`"}], "}"}], "}"}], ",", 
                    "\"<>\""}], "]"}], False, Editable -> False]}], "}"}], 
            "}"}]], "Output", CellChangeTimes -> {3.4935617680390043`*^9}, 
         CellTags -> {"Exercises", "Saving Results from DE"}]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Table", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"x", ",", 
                  RowBox[{
                    RowBox[{"f", "[", "x", "]"}], "/.", 
                    RowBox[{"sol", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"x", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], 
            "]"}]], "Input", 
         CellChangeTimes -> {{3.49356177622364*^9, 3.493561796418741*^9}}], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"0.`", ",", "1.`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"0.5`", ",", "1.6487212485902292`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"1.`", ",", "2.7182815795163635`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"1.5`", ",", "4.481685716164685`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"2.`", ",", "7.389052124881019`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"2.5`", ",", "12.182494694056874`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"3.`", ",", "20.08552111066759`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"3.5`", ",", "33.115405603496164`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"4.`", ",", "54.59810628274599`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"4.5`", ",", "90.0171380579719`"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"5.`", ",", "148.4131732695485`"}], "}"}]}], "}"}]], 
         "Output", 
         CellChangeTimes -> {{3.493561780466907*^9, 
          3.4935617970966787`*^9}}]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Export", "[", 
            RowBox[{"\"soln.dat\"", ",", 
              RowBox[{"Table", "[", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"x", ",", 
                    RowBox[{
                    RowBox[{"f", "[", "x", "]"}], "/.", 
                    RowBox[{"sol", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"x", ",", "0", ",", "5", ",", "0.5"}], "}"}]}], 
                "]"}], ",", "\"Table\""}], "]"}]], "Input", 
         CellChangeTimes -> {{3.493561814292232*^9, 3.493561881062911*^9}}], 
        Cell[
         BoxData["\"soln.dat\""], "Output", 
         CellChangeTimes -> {{3.493561848305637*^9, 
          3.4935618814639807`*^9}}]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"FilePrint", "[", "\"soln.dat\"", "]"}]], "Input", 
         CellChangeTimes -> {{3.493561851757057*^9, 3.4935618585292664`*^9}}], 
        Cell[
        "0.\t1.\n0.5\t1.6487212485902292\n1.\t2.7182815795163635\n1.5\t\
4.481685716164685\n2.\t7.389052124881019\n2.5\t12.182494694056874\n3.\t\
20.08552111066759\n3.5\t33.115405603496164\n4.\t54.59810628274599\n4.5\t\
90.0171380579719\n5.\t148.4131732695485", "Print", 
         CellChangeTimes -> {{3.4935618589331293`*^9, 
          3.493561883351324*^9}}]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"680ae903-c1e1-4a7b-a3f4-45eab8a7b3d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.7 Saving a Notebook in Package Format", "Subsection",
 CellChangeTimes->{{3.821010720162429*^9, 3.8210107223756905`*^9}},
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"f13d250e-74ba-4bad-9ae8-4f7259c95831"],

Cell["\<\
Open a new notebook and copy the following four input cells into that \
notebook:\
\>", "CodeText",
 CellChangeTimes->{{3.8220553889003925`*^9, 3.8220553892483206`*^9}},
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"d24483e3-750c-479b-a414-5df6c72c5920"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "::", "usage"}], "=", 
  "\"\<fib[n] gives the nth Fibonacci number.\>\""}]], "Input",
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"c220cb43-5de0-49d6-8b7f-632125dfbd22"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fib", "[", 
   RowBox[{"n_Integer", "/;", 
    RowBox[{"n", ">", "1"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"fib", "[", 
    RowBox[{"n", "-", "1"}], "]"}], "+", 
   RowBox[{"fib", "[", 
    RowBox[{"n", "-", "2"}], "]"}]}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"8bf33170-7429-4bfc-b7a5-bc35108b13e0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fib", "[", "0", "]"}], "=", "0"}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"4cf0d87c-2253-4ae1-a92e-300bd6f60f88"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fib", "[", "1", "]"}], "=", "1"}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"a3214aff-5cef-4a05-9ef0-6aa50695f993"],

Cell["\<\
Set the cells in the new notebook to be initialization cells. You can set the \
cells to be initialization cells by selecting the cell brackets and choosing \
Initialization Cell from the Cell Properties submenu of the Cell menu.\
\>", "Text",
 CellChangeTimes->{{3.822566808412561*^9, 3.8225668316598454`*^9}},
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"937dedd8-2f12-4c00-a1c4-dcd3c05ec0cb"],

Cell[TextData[{
 "Save the notebook in package format, which you can do by choosing Package \
Format from the Save As submenu of the File menu. Be careful to save the \
package in a directory where it can be easily found. The Wolfram Language \
looks for packages in the directories listed in the value of the global \
variable ",
 StyleBox[ButtonBox["$Path",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/$Path"],
  FontWeight->"Bold"],
 ". If you save the package in a directory not listed in the value of $Path, \
you should plan to enter the full path name when you want to load the package \
file."
}], "Text",
 CellChangeTimes->{{3.821908204019702*^9, 3.8219082100663013`*^9}, {
  3.822052715049882*^9, 3.8220527407274427`*^9}, {3.822502011292755*^9, 
  3.822502019235291*^9}, {3.822566836003636*^9, 3.822566867844275*^9}},
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"f8519804-20dc-4caa-a8f6-3d474feeb5e3"],

Cell[BoxData["$Path"], "Input",
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"ab6345b9-2cf5-4579-a0ca-22cb5f1f9ead"],

Cell["\<\
The contents of the file that you saved should appear as shown here. If you \
want to verify that the package has been saved as expected, try opening the \
file with an ordinary text editor.\
\>", "Text",
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"dfa1f12c-b519-409b-a944-a8318f40d6e8"],

Cell["\<\
fib::usage = \"fib[n] gives the nth Fibonacci number.\"
fib[n_Integer /; n > 1] := fib[n - 1] + fib[n - 2]
fib[0] = 0
fib[1] = 1\
\>", "Program",
 TextAlignment->Center,
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"dfa7d3f6-b9f1-434a-b184-4da057f19a16"],

Cell[TextData[{
 "Evaluate ",
 Cell[BoxData[
  RowBox[{"Clear", "[", "fib", "]"}]], "Input",ExpressionUUID->
  "69c9f95e-8a0d-4cae-9939-3e42e993bf96"],
 " and load your package to introduce the rules for the function ",
 Cell[BoxData[
 "fib"], "Input",ExpressionUUID->"ed706b08-92e3-42a1-ba85-08c6542ff117"],
 ". You can check that the rules have been loaded correctly by evaluating ",
 Cell[BoxData[
  RowBox[{"?", "fib"}]], "Input",ExpressionUUID->
  "bf7df3b6-d17a-47f6-8a92-92a941b8916a"],
 " or by evaluating ",
 Cell[BoxData[
  RowBox[{"fib", "[", "n", "]"}]], "Input",ExpressionUUID->
  "3513ab7b-2bcf-43f9-bf50-dc75b620c879"],
 " for a few small positive integers ",
 Cell[BoxData[
 "n"], "Input",ExpressionUUID->"01628e0a-add9-40d3-9287-7e75e0f04f84"],
 "."
}], "Text",
 CellChangeTimes->{{3.822566895582013*^9, 3.822566978881225*^9}},
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"1b74546a-14a6-4630-bf48-e0755b4ceac9"],

Cell[TextData[{
 "For additional confirmation that a package that you intended to load is \
being loaded, you can try including a statement like ",
 Cell[BoxData[
  RowBox[{"Print", "[", "\"\<...package loaded.\>\"", "]"}]], "Input",
  ExpressionUUID->"f0bd8c4e-c6d4-4c49-b6f3-d8716b16530b"],
 " at the end of the package."
}], "Text",
 CellChangeTimes->{{3.8225669957428923`*^9, 3.822567029565671*^9}},
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"54580671-a5f5-4f00-9cef-9327a5b7df41"],

Cell["\<\
Note that the same package could have been created by typing these \
definitions into a file using an ordinary text editor.\
\>", "Text",
 CellTags->{
  "Exercises", 
   "Saving Notebooks"},ExpressionUUID->"12501498-5646-470c-911c-47cefc40c2ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell["7.8 Creating Tables of File Information", "Subsection",
 CellChangeTimes->{{3.82101072417589*^9, 3.8210107262473354`*^9}},
 CellTags->{
  "Exercises", 
   "Tables of File \
Info"},ExpressionUUID->"60984a9c-f454-4aa0-9d49-7cf4faf2b86f"],

Cell[TextData[{
 "Create a two-column table containing the names and associated sizes of a \
list of files in the data directory that is part of this course\
\[CloseCurlyQuote]s materials. Using TableForm with the ",
 StyleBox[ButtonBox["TableHeadings",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableHeadings"],
  FontWeight->"Bold"],
 " option, you should be able to get your table to look like the following."
}], "Text",
 CellChangeTimes->{{3.821908265337885*^9, 3.8219082758181334`*^9}, {
  3.8220528012990093`*^9, 3.8220528022725058`*^9}, {3.822502054021891*^9, 
  3.8225020568328667`*^9}, {3.82256727640331*^9, 3.822567276473105*^9}},
 CellTags->{
  "Exercises", 
   "Tables of File \
Info"},ExpressionUUID->"a36e6031-edd0-40ce-a2db-4fe324926ac8"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["\<\"Filename\"\>",
       HoldForm], 
      TagBox["\<\"Byte count\"\>",
       HoldForm]},
     {"\<\"co2_annmean_mlo.csv\"\>", "3789"},
     {"\<\"data1D2.dat\"\>", "451"},
     {"\<\"data1D.dat\"\>", "566"},
     {"\<\"data2D.dat\"\>", "413"},
     {"\<\"data2D.xlsx\"\>", "3603"},
     {"\<\"elements.xls\"\>", "10752"},
     {"\<\"mat.txt\"\>", "41"},
     {"\<\"sampledata.xls\"\>", "5120"},
     {"\<\"USLifeExpectancy.dat\"\>", "1399"},
     {"\<\"Weierstrass.jpg\"\>", "5521"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {None, {"Filename", "Byte count"}}]]]], "Output",
 CellChangeTimes->{
  3.823191707645582*^9, 3.823191754959462*^9, 3.823199179669663*^9, {
   3.8231992805238943`*^9, 3.823199290595141*^9}},
 CellLabel->
  "Out[120]//TableForm=",ExpressionUUID->"939cedd3-abcd-4412-b039-\
e8b525a90a47"],

Cell["\<\
If you use Grid to create your table, you can use various options to Grid to \
get a table like the following.\
\>", "Text",
 CellChangeTimes->{{3.821908285301927*^9, 3.8219082915512176`*^9}, {
  3.822502044615592*^9, 3.822502046077572*^9}, {3.822567054233429*^9, 
  3.8225670560059147`*^9}},
 CellTags->{
  "Exercises", 
   "Tables of File \
Info"},ExpressionUUID->"6c19b73c-aa2a-4548-8203-a1e4cdec8f62"],

Cell["Here is a platform-independent path to the data directory:", "Text",
 CellChangeTimes->{{3.8220527683575754`*^9, 3.822052769556967*^9}, {
  3.822567060958681*^9, 3.8225670614060993`*^9}, {3.8225672845777893`*^9, 
  3.822567284681138*^9}},
 CellTags->{
  "Exercises", 
   "Tables of File \
Info"},ExpressionUUID->"b8fb78c5-1797-4e3c-a157-539f97d37513"],

Cell[BoxData[
 RowBox[{"FileNameJoin", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<data\>\""}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8220527755647726`*^9, 3.822052790172429*^9}, 
   3.822502062920219*^9},
 CellTags->{
  "Exercises", 
   "Tables of File \
Info"},ExpressionUUID->"f510eb70-b512-4088-85ac-4c03cbd85714"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "Here is a platform-independent path to the DataFiles directory:", 
      "CodeText", 
      CellChangeTimes -> {{3.822054266190521*^9, 3.822054266564819*^9}}], 
     Cell[
      BoxData[
       RowBox[{"dataDirectory", "=", 
         RowBox[{"FileNameJoin", "[", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"data\""}], 
             "}"}], "]"}]}]], "Input", 
      CellChangeTimes -> {{3.493562098787878*^9, 3.49356210099511*^9}, {
       3.82205357880484*^9, 3.822053583162833*^9}, {3.8220536381817493`*^9, 
       3.822053639341213*^9}, {3.822054296582895*^9, 
       3.8220543003302097`*^9}, {3.822597683536384*^9, 3.822597688170537*^9}},
       CellLabel -> "In[37]:="], 
     Cell[
      TextData[{"This sets the current working directory to be ", 
        Cell[
         BoxData["$CourseDataDirectory"], "Input"], ":"}], "CodeText", 
      CellChangeTimes -> {{3.8220542724732094`*^9, 3.822054272856375*^9}, {
       3.822569143916964*^9, 3.8225691565187283`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"SetDirectory", "[", "dataDirectory", "]"}]], "Input", 
      CellChangeTimes -> {3.822597697452578*^9}], 
     Cell[
     "Here is a list of the files in this directory:", "CodeText", 
      CellChangeTimes -> {{3.822054317626756*^9, 3.8220543179449596`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"FileNames", "[", "]"}]], "Input"], 
     Cell[
     "This gives a byte count for each of the files:", "CodeText", 
      CellChangeTimes -> {{3.822054323521598*^9, 3.8220543238200245`*^9}, {
       3.822569165476734*^9, 3.8225691656760387`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"Map", "[", 
         RowBox[{"FileByteCount", ",", 
           RowBox[{"FileNames", "[", "]"}]}], "]"}]], "Input"], 
     Cell[
     "This matches up the filenames with their corresponding byte counts:", 
      "CodeText", 
      CellChangeTimes -> {{3.822054334454258*^9, 3.82205433479832*^9}}], 
     Cell[
      BoxData[
       RowBox[{"Transpose", "[", 
         RowBox[{"{", 
           RowBox[{
             RowBox[{"FileNames", "[", "]"}], ",", 
             RowBox[{"Map", "[", 
               RowBox[{"FileByteCount", ",", 
                 RowBox[{"FileNames", "[", "]"}]}], "]"}]}], "}"}], "]"}]], 
      "Input"], 
     Cell[
     "Finally, here is the table with appropriate headings:", "CodeText", 
      CellChangeTimes -> {{3.8220543796393023`*^9, 3.822054380033928*^9}}], 
     Cell[
      BoxData[
       RowBox[{"TableForm", "[", 
         RowBox[{
           RowBox[{"Transpose", "[", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"FileNames", "[", "]"}], ",", 
                 RowBox[{"Map", "[", 
                   RowBox[{"FileByteCount", ",", 
                    RowBox[{"FileNames", "[", "]"}]}], "]"}]}], "}"}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"TableHeadings", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"None", ",", 
                 RowBox[{"{", 
                   RowBox[{"\"Filename\"", ",", "\"Byte count\""}], "}"}]}], 
               "}"}]}]}], "]"}]], "Input"], 
     Cell[
     "Using Grid, you can add various options to format your table:", 
      "CodeText", 
      CellChangeTimes -> {{3.8220544009855947`*^9, 3.822054407188466*^9}, {
       3.822569174972394*^9, 3.82256917582036*^9}}], 
     Cell[
      BoxData[
       RowBox[{"lis", "=", 
         RowBox[{"Prepend", "[", 
           RowBox[{
             RowBox[{"Transpose", "[", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"FileNames", "[", "]"}], ",", 
                   RowBox[{"Map", "[", 
                    RowBox[{"FileByteCount", ",", 
                    RowBox[{"FileNames", "[", "]"}]}], "]"}]}], "}"}], "]"}], 
             ",", 
             RowBox[{"{", 
               RowBox[{"\"Filename\"", ",", "\"Byte count\""}], "}"}]}], 
           "]"}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Options", "[", "Grid", "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Grid", "[", 
         RowBox[{"lis", ",", 
           RowBox[{"Alignment", "\[Rule]", 
             RowBox[{"{", "Left", "}"}]}], ",", 
           RowBox[{"Spacings", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{".5", ",", ".65"}], "}"}]}], ",", 
           RowBox[{"Dividers", "\[Rule]", "All"}]}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"36c8e953-6e4c-41ae-812f-8f54036dda10"],

Cell["", "EndOfSlide",ExpressionUUID->"867715e5-6090-43fa-b0b9-6777ce35ef62"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Saveable->False,
ScreenStyleEnvironment->"SlideShow",
WindowSize->{1024, 768},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"Working With Data",
TaggingRules->{
 "WolframUNotebook" -> True, 
  "PresenterSettings" -> {"ShowNavigationBar" -> True}},
ButtonBoxOptions->{BaseStyle->None},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["WolframULogo", StyleDefinitions -> StyleData["Title"]], 
          CellMargins -> {{120, 0}, {0, 130}}, CellGroupingRules -> 
          "GraphicsGrouping", PageBreakWithin -> False, GeneratedCell -> True,
           CellAutoOverwrite -> True, ShowCellLabel -> False, 
          CellFrameMargins -> {{0, 0}, {0, 0}}, DefaultFormatType -> 
          DefaultOutputFormatType, LanguageCategory -> "NaturalLanguage", 
          FormatType -> StandardForm, ShowStringCharacters -> False, 
          FrontFaceColor -> GrayLevel[0], FrontFaceOpacity -> 1, 
          GraphicsColor -> GrayLevel[0], PointSize -> Absolute[3], Thickness -> 
          Medium, Opacity -> 1, DrawEdges -> False, StyleMenuListing -> None, 
          FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Plain", 
          FontColor -> GrayLevel[0], FontOpacity -> 
          1, $CellContext`BackFaceColor -> 
          GrayLevel[0], $CellContext`StripStyleOnPaste -> 
          False, $CellContext`BackFaceOpacity -> 1], 
         Cell[
          StyleData[
          "WolframULogo", "SlideShow", StyleDefinitions -> 
           StyleData["WolframULogo"]], 
          CellFrameLabels -> {{None, None}, {None, None}}], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Working", StyleDefinitions -> 
           StyleData["WolframULogo", "SlideShow"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell["Title", "Subsection"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Title"], CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> 
          "Source Sans Pro", FontSize -> 81, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> 
          RGBColor[
           0.09019607843137255, 0.1607843137254902, 0.25882352941176473`]], 
         Cell[
          StyleData["Title", "SlideShow"], CellMargins -> {{120, 0}, {0, 40}},
           FontFamily -> "Source Sans Pro", FontSize -> 81, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> 
          RGBColor[
           0.09019607843137255, 0.1607843137254902, 0.25882352941176473`]], 
         Cell[
          StyleData[
          "Title", "Slideshow Working", StyleDefinitions -> 
           StyleData["Title", "SlideShow"]]], 
         Cell[
          StyleData[
          "Title", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Title", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Title", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Title", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subtitle"], CellMargins -> {{120, 0}, {0, 12}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 40, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          FontVariations -> {"CapsType" -> "AllCaps"}, 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData["Subtitle", "SlideShow"], 
          CellMargins -> {{120, 0}, {0, 12}}, FontFamily -> "Source Sans Pro",
           FontSize -> 40, FontWeight -> "Regular", FontSlant -> "Plain", 
          FontVariations -> {"CapsType" -> "AllCaps"}, 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData[
          "Subtitle", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subtitle", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subtitle", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subtitle", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subtitle", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subtitle", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["TitleGraphic"], CellMargins -> {{120, 0}, {0, 25}}, 
          CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False, 
          GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
          False, DefaultFormatType -> DefaultOutputFormatType, 
          LanguageCategory -> "NaturalLanguage", FormatType -> StandardForm, 
          ShowStringCharacters -> False, FrontFaceColor -> GrayLevel[0], 
          FrontFaceOpacity -> 1, GraphicsColor -> GrayLevel[0], PointSize -> 
          Absolute[3], Thickness -> Medium, Opacity -> 1, DrawEdges -> False, 
          StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 10, 
          FontWeight -> "Plain", FontColor -> GrayLevel[0], FontOpacity -> 
          1, $CellContext`BackFaceColor -> 
          GrayLevel[0], $CellContext`StripStyleOnPaste -> 
          False, $CellContext`BackFaceOpacity -> 1], 
         Cell[
          StyleData["TitleGraphic", "SlideShow"], 
          CellMargins -> {{120, 0}, {0, 25}}, CellGroupingRules -> 
          "GraphicsGrouping", PageBreakWithin -> False, GeneratedCell -> True,
           CellAutoOverwrite -> True, ShowCellLabel -> False, 
          DefaultFormatType -> DefaultOutputFormatType, LanguageCategory -> 
          "NaturalLanguage", FormatType -> StandardForm, ShowStringCharacters -> 
          False, FrontFaceColor -> GrayLevel[0], FrontFaceOpacity -> 1, 
          GraphicsColor -> GrayLevel[0], PointSize -> Absolute[3], Thickness -> 
          Medium, Opacity -> 1, DrawEdges -> False, StyleMenuListing -> None, 
          FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Plain", 
          FontColor -> GrayLevel[0], FontOpacity -> 
          1, $CellContext`BackFaceColor -> 
          GrayLevel[0], $CellContext`StripStyleOnPaste -> 
          False, $CellContext`BackFaceOpacity -> 1], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Working", StyleDefinitions -> 
           StyleData["TitelGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell["Section", "Subsection"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Section"], CellFrame -> {{0, 0}, {0, 0}}, 
          ShowGroupOpener -> "Inline", CellMargins -> {{120, 0}, {0, 50}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 70, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData["Section", "SlideShow"], CellFrame -> {{0, 0}, {0, 0}}, 
          ShowGroupOpener -> "Inline", CellMargins -> {{120, 0}, {0, 50}}, 
          LineSpacing -> {1, 2}, FontFamily -> "Source Sans Pro", FontSize -> 
          70, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData[
          "Section", "Slideshow Working", StyleDefinitions -> 
           StyleData["Section", "SlideShow"]]], 
         Cell[
          StyleData[
          "Section", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Section", "SlideShow"]]], 
         Cell[
          StyleData[
          "Section", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Section", "SlideShow"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsection"], ShowGroupOpener -> "Inline", 
          CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> "Source Sans Pro",
           FontSize -> 40, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
         Cell[
          StyleData["Subsection", "SlideShow"], ShowGroupOpener -> "Inline", 
          CellMargins -> {{120, 0}, {0, 40}}, LineSpacing -> {1, 2}, 
          FontFamily -> "Source Sans Pro", FontSize -> 40, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
         Cell[
          StyleData[
          "Subsection", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subsection", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subsection", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subsection", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subsection", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subsection", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsubsection"], ShowGroupOpener -> "Inline", 
          CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> "Source Sans Pro",
           FontSize -> 30, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData["Subsubsection", "SlideShow"], ShowGroupOpener -> 
          "Inline", CellMargins -> {{120, 0}, {0, 40}}, LineSpacing -> {1, 2},
           FontFamily -> "Source Sans Pro", FontSize -> 30, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData[
          "Subsubsection", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subsubsection", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subsubsection", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subsubsection", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subsubsection", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subsubsection", "Slideshow Working"]]]}, Open]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell[
      "Styles for Body Content", "Section", 
       CellChangeTimes -> {{3.727532504641029*^9, 3.727532505736285*^9}}], 
      Cell[
       StyleData["EndOfSlide"], CellFrame -> {{False, False}, {False, True}}, 
       ShowCellBracket -> False, CellMargins -> {{120, 0}, {100, 15}}, 
       CellFrameColor -> GrayLevel[0.85]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Text"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
          "Text", MenuSortingValue -> 1400, MenuCommandKey :> "7", FontFamily -> 
          "Source Sans Pro", FontSize -> 15, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData["Text", "SlideShow"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
          "Text", MenuSortingValue -> 1400, MenuCommandKey :> "7", FontFamily -> 
          "Source Sans Pro", FontSize -> 22, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData[
          "Text", "Slideshow Working", StyleDefinitions -> 
           StyleData["Text", "SlideShow"]]], 
         Cell[
          StyleData[
          "Text", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Text", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Text", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Text", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["CodeText"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, FontFamily -> 
          "Source Sans Pro", FontSize -> 15, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData["CodeText", "SlideShow"], 
          CellMargins -> {{120, 0}, {0, 15}}, LineSpacing -> {1, 3}, 
          TabSpacings -> {2.5}, FontFamily -> "Source Sans Pro", FontSize -> 
          22, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData[
          "CodeText", "Slideshow Working", StyleDefinitions -> 
           StyleData["CodeText", "SlideShow"]]], 
         Cell[
          StyleData[
          "CodeText", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["CodeText", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "CodeText", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["CodeText", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Note"], 
          CellMargins -> {{
            0.15 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
             FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {10, 10}}, 
          CellOpen -> True, LineSpacing -> {1, 3}, CounterIncrements -> 
          "Note", MenuSortingValue -> 8, FontFamily -> "Source Sans Pro", 
          FontSize -> 12, FontSlant -> "Italic", Background -> 
          GrayLevel[0.85]], 
         Cell[
          StyleData["Note", "SlideShow"], 
          CellMargins -> {{
            0.15 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
             FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {10, 10}}, 
          CellOpen -> False, 
          HyphenationOptions -> {"HyphenationCharacter" -> "-"}, 
          ParagraphSpacing -> {0, 6}, ParagraphIndent -> -10, 
          StyleMenuListing -> None, FontSize -> 18], 
         Cell[
          StyleData[
          "Note", "Slideshow Working", StyleDefinitions -> 
           StyleData["Note"]]], 
         Cell[
          StyleData[
          "Note", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Note", "SlideShow"]]], 
         Cell[
          StyleData[
          "Note", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Note", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Item"], CellDingbat -> 
          StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
            RGBColor[1., 0.42745098039215684`, 0.]], 
          CellMargins -> {{140, 0}, {0, 15}}], 
         Cell[
          StyleData["Item", "SlideShow"], CellMargins -> {{140, 0}, {0, 15}}, 
          CellFrameLabelMargins -> 10, FontSize -> 22], 
         Cell[
          StyleData[
          "Item", "Slideshow Working", StyleDefinitions -> 
           StyleData["Item", "SlideShow"]]], 
         Cell[
          StyleData[
          "Item", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Item", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Item", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Item", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ItemParagraph"], CellMargins -> {{140, 0}, {0, 15}}, 
          StyleKeyMapping -> {"Tab" -> "SubitemParagraph"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          DefaultNewCellStyle -> "Item", MenuSortingValue -> 1600, FontFamily -> 
          Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 14, 
          FontColor -> Dynamic[
            FrontEnd`CurrentValue[{StyleHints, "ColorSet", "Text1"}], 
            None], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ItemParagraph", "SlideShow"], ShowGroupOpener -> False, 
          CellMargins -> {{140, 0}, {0, 15}}, FontSize -> 22], 
         Cell[
          StyleData[
          "ItemParagraph", "Slideshow Working", StyleDefinitions -> 
           StyleData["ItemParagraph", "SlideShow"]]], 
         Cell[
          StyleData[
          "ItemParagraph", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["ItemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ItemParagraph", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["ItemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData["ItemParagraph", "Printout"], 
          CellMargins -> {{140, Inherited}, {Inherited, 0.5 Inherited}}]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subitem"], CellDingbat -> 
          StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
            RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
          CellMargins -> {{160, 0}, {0, 15}}], 
         Cell[
          StyleData["Subitem", "SlideShow"], 
          CellMargins -> {{160, 0}, {0, 15}}, CellFrameLabelMargins -> 10, 
          FontSize -> 22], 
         Cell[
          StyleData[
          "Subitem", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subitem", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subitem", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subitem", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subitem", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subitem", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SubitemParagraph"], CellMargins -> {{160, 0}, {0, 15}}, 
          StyleKeyMapping -> {
           "Tab" -> "SubsubitemParagraph", "Backspace" -> 
            "ItemParagraph", $CellContext`KeyEvent[
             "Tab", $CellContext`Modifiers -> {$CellContext`Shift}] -> 
            "ItemParagraph"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15100}, 
          CellFrameLabelMargins -> 4, DefaultNewCellStyle -> "Subitem", 
          MenuSortingValue -> 1610, FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 13.5,
           FontColor -> Dynamic[
            
            CurrentValue[{
             StyleHints, "ColorSet", 
              "Text1"}]], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["SubitemParagraph", "SlideShow"], 
          CellMargins -> {{160, 0}, {0, 15}}, FontSize -> 22], 
         Cell[
          StyleData[
          "SubitemParagraph", "Slideshow Working", StyleDefinitions -> 
           StyleData["SubitemParagraph", "SlideShow"]]], 
         Cell[
          StyleData[
          "SubitemParagraph", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["SubitemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "SubitemParagraph", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["SubitemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData["SubitemParagraph", "Printout"], 
          CellMargins -> {{160, Inherited}, {Inherited, 0.1 Inherited}}]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ItemNumbered"], CellDingbat -> Cell[
            TextData[{
              CounterBox["ItemNumbered"], "."}], FontWeight -> "Bold"], 
          CellMargins -> {{145, 0}, {0, 15}}, 
          StyleKeyMapping -> {"Tab" -> "SubitemNumbered"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          CellFrameLabelMargins -> 4, CounterIncrements -> "ItemNumbered", 
          CounterAssignments -> {{"SubitemNumbered", 0}, {
            "SubsubitemNumbered", 0}}, MenuSortingValue -> 1630, FontFamily -> 
          "Source Sans Pro", FontSize -> 
          15, $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ItemNumbered", "SlideShow"], 
          CellMargins -> {{145, 0}, {0, 15}}, CellFrameLabelMargins -> 6, 
          FontSize -> 22], 
         Cell[
          StyleData[
          "ItemNumbered", "Slideshow Working", StyleDefinitions -> 
           StyleData["ItemNumbered", "SlideShow"]]], 
         Cell[
          StyleData[
          "ItemNumbered", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["ItemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ItemNumbered", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["ItemNumbered", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SubitemNumbered"], CellDingbat -> Cell[
            TextData[{
              CounterBox["ItemNumbered"], ".", 
              CounterBox["SubitemNumbered"], "."}], FontWeight -> "Bold"], 
          CellMargins -> {{180, 0}, {0, 15}}, 
          StyleKeyMapping -> {
           "Tab" -> "SubsubitemNumbered", "Backspace" -> 
            "ItemNumbered", $CellContext`KeyEvent[
             "Tab", $CellContext`Modifiers -> {$CellContext`Shift}] -> 
            "ItemNumbered"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15100}, 
          CellFrameLabelMargins -> 4, DefaultNewCellStyle -> "Item", 
          CounterIncrements -> "SubitemNumbered", 
          CounterAssignments -> {{"SubsubitemNumbered", 0}}, MenuSortingValue -> 
          1640, FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 
          13.5, $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["SubitemNumbered", "SlideShow"], 
          CellMargins -> {{180, 0}, {0, 15}}, CellFrameLabelMargins -> 6, 
          CellChangeTimes -> {{3.772393378081081*^9, 3.772393382879437*^9}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 22], 
         Cell[
          StyleData[
          "SubitemNumbered", "Slideshow Working", StyleDefinitions -> 
           StyleData["SubitemNumbered", "SlideShow"]]], 
         Cell[
          StyleData[
          "SubitemNumbered", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["SubitemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "SubitemNumbered", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["SubitemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData["SubitemNumbered", "Printout"], 
          CellMargins -> {{180, Inherited}, {Inherited, Inherited}}]}, Open]], 
      Cell[
       StyleData["Graphics"], CellMargins -> {{120, Inherited}, {15, 15}}, 
       CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False, 
       GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
       False, DefaultFormatType -> DefaultOutputFormatType, ContextMenu -> 
       FEPrivate`FrontEndResource["ContextMenus", "Graphics"], 
       AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, 
       LanguageCategory -> "NaturalLanguage", FormatType -> StandardForm, 
       ShowStringCharacters -> False, NumberMarks -> False, CounterIncrements -> 
       "Graphics", ImageMargins -> {{43, Inherited}, {Inherited, 0}}, 
       Arrowheads -> 0.04, Dashing -> None, CapForm -> "Square", 
       JoinForm -> {"Miter", 3.25}, LineColor -> GrayLevel[0], LineOpacity -> 
       1, EdgeColor -> GrayLevel[0], EdgeOpacity -> 1, EdgeThickness -> 
       Medium, EdgeDashing -> None, EdgeCapForm -> "Square", 
       EdgeJoinForm -> {"Miter", 3.25}, FrontFaceColor -> GrayLevel[0], 
       FrontFaceOpacity -> 1, GraphicsColor -> GrayLevel[0], PointSize -> 
       Absolute[3], Thickness -> Medium, Opacity -> 1, DrawEdges -> False, 
       StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 10, 
       FontWeight -> "Plain", FontColor -> GrayLevel[0], FontOpacity -> 
       1, $CellContext`BackFaceColor -> 
       GrayLevel[0], $CellContext`StripStyleOnPaste -> 
       False, $CellContext`BackFaceOpacity -> 1], 
      Cell[
       StyleData["Hyperlink"], FontColor -> 
       RGBColor[0.269993, 0.308507, 0.6]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["KeyEvent"], CellFrame -> {{1, 1}, {1, 1}}, 
          CellFrameMargins -> {{2, 2}, {2, 2}}, CellFrameColor -> 
          GrayLevel[0.8], FontFamily -> "Source Sans Pro", FontColor -> 
          GrayLevel[0.360784], Background -> GrayLevel[0.964706]], 
         Cell[
          StyleData["KeyEvent", "SlideShow"]], 
         Cell[
          StyleData[
          "KeyEvent", "Slideshow Working", StyleDefinitions -> 
           StyleData["KeyEvent", "SlideShow"]]], 
         Cell[
          StyleData[
          "KeyEvent", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["KeyEvent", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "KeyEvent", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["KeyEvent", "Slideshow Working"]]]}, Open]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Input and Output Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Input"], CellMargins -> {{120, 10}, {5, 20}}, 
          StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
          FontSize -> 13], 
         Cell[
          StyleData["Input", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 20}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Input", "Slideshow Working", StyleDefinitions -> 
           StyleData["Input", "SlideShow"]]], 
         Cell[
          StyleData[
          "Input", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Input", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "ExperimentalInput", StyleDefinitions -> StyleData["Input"]], 
          CellFrame -> True, CellMargins -> {{120, 10}, {5, 20}}, 
          StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
          CellFrameColor -> 
          RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               InterpretationBox[
                Cell[
                 BoxData[
                  RotationBox[
                  "Experimental", BoxRotation -> 1.5707963267948966`]], 
                 "Text", LineColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 FrontFaceColor -> 
                 RGBColor[
                  1., 0.592156862745098, 
                   0.10196078431372549`], $CellContext`BackFaceColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 GraphicsColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 FontSize -> 10, FontColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
                TextCell[
                 Rotate["Experimental", 90 Degree], "Text", 10, 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`]]]]], 
             None}, {None, None}}, FontSize -> 13], 
         Cell[
          StyleData["ExperimentalInput", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 20}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "ExperimentalInput", "Slideshow Working", StyleDefinitions -> 
           StyleData["Input", "SlideShow"]]], 
         Cell[
          StyleData[
          "ExperimentalInput", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ExperimentalInput", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["InputOnly"], CellMargins -> {{120, 10}, {5, 10}}, 
          FontSize -> 13], 
         Cell[
          StyleData["InputOnly", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 10}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}], 
         Cell[
          StyleData[
          "InputOnly", "Slideshow Working", StyleDefinitions -> 
           StyleData["InputOnly", "SlideShow"]]], 
         Cell[
          StyleData[
          "InputOnly", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["InputOnly", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "InputOnly", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["InputOnly", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Code"], CellMargins -> {{120, 10}, {5, 10}}], 
         Cell[
          StyleData["Code", "SlideShow"], CellMargins -> {{120, 10}, {5, 10}},
           LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Code", "Slideshow Working", StyleDefinitions -> 
           StyleData["Code", "SlideShow"]]], 
         Cell[
          StyleData[
          "Code", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Code", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Code", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Code", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Output"], CellMargins -> {{120, 10}, {5, 10}}, FontSize -> 
          13], 
         Cell[
          StyleData["Output", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 10}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Output", "Slideshow Working", StyleDefinitions -> 
           StyleData["Output", "SlideShow"]]], 
         Cell[
          StyleData[
          "Output", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Output", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Output", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Output", "Slideshow Working"]]]}, Open]], 
      Cell[
       StyleData["Separator"], CellFrame -> {{False, False}, {1.5, False}}, 
       CellMargins -> {{120, 0}, {0, 0}}, CellFrameColor -> GrayLevel[0.8], 
       MenuSortingValue -> 10000]}, Closed]]}, Visible -> False, 
  FrontEndVersion -> "12.2 for Mac OS X x86 (64-bit) (December 12, 2020)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"838603cc-ab9c-4366-b9c3-1c9a04bc6560"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[611, 23, 136, 2, 0, "SlideShowNavigationBar",ExpressionUUID->"ae861ed8-5fa1-4088-84fd-2651cc7b368a",
   CellTags->"SlideShowHeader"],
  Cell[39244, 680, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"e4dff84c-9298-45c8-9d8c-89cd2ce2b4d3",
   CellTags->"SlideShowHeader"]},
 "Overview"->{
  Cell[40179, 709, 573, 10, 44, "Item",ExpressionUUID->"6bf698df-c9aa-435e-94c3-037a875a49b0",
   CellTags->"Overview"]},
 "Importing and Exporting"->{
  Cell[41849, 755, 212, 4, 174, "Section",ExpressionUUID->"acd2a8cb-e3d3-4dd4-811c-1893eb86b2bf",
   CellTags->"Importing and Exporting"],
  Cell[42064, 761, 485, 16, 44, "Item",ExpressionUUID->"9bb497d0-74e5-43d0-838d-224749b4bfaa",
   CellTags->"Importing and Exporting"],
  Cell[42552, 779, 503, 16, 44, "Item",ExpressionUUID->"46088051-8b09-4ab9-8a46-3124da3cbf17",
   CellTags->"Importing and Exporting"],
  Cell[43058, 797, 777, 23, 44, "Item",ExpressionUUID->"e4e3597e-3c7d-481d-b600-c85e6ce5e6d0",
   CellTags->"Importing and Exporting"],
  Cell[44078, 832, 208, 4, 174, "Section",ExpressionUUID->"c8ea12c8-baed-4bcf-8b5b-d1e50bc5cc5d",
   CellTags->"Importing and Exporting"],
  Cell[44289, 838, 377, 8, 44, "Text",ExpressionUUID->"3dde509a-3c4c-4561-87bc-e80a0f37ee84",
   CellTags->"Importing and Exporting"],
  Cell[44669, 848, 285, 5, 40, "Text",ExpressionUUID->"c02c286a-531a-4aa9-bbc8-2a55ef2b30d8",
   CellTags->"Importing and Exporting"],
  Cell[44957, 855, 285, 5, 40, "Text",ExpressionUUID->"791fd674-bff3-4f90-81a0-b340b92b405f",
   CellTags->"Importing and Exporting"],
  Cell[45245, 862, 220, 4, 44, "Text",ExpressionUUID->"84bcb39e-ed2e-44e2-a5a6-6bbdc60c43c1",
   CellTags->"Importing and Exporting"],
  Cell[45468, 868, 711, 27, 44, "Item",ExpressionUUID->"35d9f083-7d6d-4be3-8203-73742a0e14be",
   CellTags->"Importing and Exporting"],
  Cell[46182, 897, 602, 22, 44, "Item",ExpressionUUID->"f78a4bcf-3df4-4046-a275-80a6814a10cd",
   CellTags->"Importing and Exporting"],
  Cell[46787, 921, 853, 32, 44, "Item",ExpressionUUID->"f400da24-2d47-4e99-8fa2-c70bf1c17067",
   CellTags->"Importing and Exporting"],
  Cell[47643, 955, 767, 27, 44, "Item",ExpressionUUID->"d4882966-7136-4e04-b67e-e8386db9f92c",
   CellTags->"Importing and Exporting"],
  Cell[48413, 984, 727, 27, 44, "Item",ExpressionUUID->"16aeeb4c-a8fe-4286-9d31-5984d8e048c3",
   CellTags->"Importing and Exporting"],
  Cell[49817, 1036, 165, 4, 174, "Section",ExpressionUUID->"e8371217-f50e-432e-89ce-eea9b1254f6c",
   CellTags->"Importing and Exporting"],
  Cell[53997, 1152, 314, 6, 288, "Section",ExpressionUUID->"84307d41-c35f-4761-b32c-bf09362db020",
   CellTags->"Importing and Exporting"],
  Cell[54336, 1162, 391, 7, 114, "Subsection",ExpressionUUID->"eeb578d2-091c-495f-8ebf-0f8b99cfcc2e",
   CellTags->"Importing and Exporting"],
  Cell[54730, 1171, 692, 12, 102, "Text",ExpressionUUID->"fe2aee94-50c2-4df1-bd47-a3c26f5049ab",
   CellTags->"Importing and Exporting"],
  Cell[55425, 1185, 410, 8, 44, "CodeText",ExpressionUUID->"e811d69b-ff13-4f55-a1ea-b653ec69e1ea",
   CellTags->"Importing and Exporting"],
  Cell[56247, 1206, 523, 11, 73, "Text",ExpressionUUID->"33dbd9e4-df24-44f0-8086-227ca489c6d0",
   CellTags->"Importing and Exporting"],
  Cell[56773, 1219, 518, 12, 44, "CodeText",ExpressionUUID->"7ab4d549-fbca-4c33-a8dd-4f66134c542c",
   CellTags->"Importing and Exporting"],
  Cell[57828, 1247, 579, 14, 44, "CodeText",ExpressionUUID->"169a38a4-063b-4d70-bcf8-3e0fee06025c",
   CellTags->"Importing and Exporting"],
  Cell[58814, 1274, 262, 5, 52, "Input",ExpressionUUID->"2fe97cc9-926e-4145-82e8-24a48cc7d829",
   CellTags->"Importing and Exporting"],
  Cell[59113, 1284, 263, 5, 114, "Subsection",ExpressionUUID->"1cd64b4a-069c-41a6-897c-f1f598c8fe35",
   CellTags->"Importing and Exporting"],
  Cell[59379, 1291, 847, 15, 102, "Text",ExpressionUUID->"2bd33588-b5af-4d14-8435-56d3dd0393d7",
   CellTags->"Importing and Exporting"],
  Cell[60466, 1313, 693, 13, 44, "Text",ExpressionUUID->"c920b91e-30a5-4dfd-91a4-de39c9820220",
   CellTags->"Importing and Exporting"],
  Cell[61833, 1350, 809, 17, 44, "CodeText",ExpressionUUID->"f07fa0ca-bb96-4c59-ad48-836529d4310e",
   CellTags->"Importing and Exporting"],
  Cell[63032, 1379, 866, 18, 44, "CodeText",ExpressionUUID->"72522d16-ea6c-4b6b-801f-1f6070f738bd",
   CellTags->"Importing and Exporting"],
  Cell[64541, 1421, 256, 5, 174, "Section",ExpressionUUID->"77eb7269-73b3-41e6-a835-aae2d4927ccf",
   CellTags->"Importing and Exporting"],
  Cell[68190, 1515, 330, 6, 174, "Section",ExpressionUUID->"f9019830-8e02-4adc-a698-ed9dbad096db",
   CellTags->"Importing and Exporting"],
  Cell[68545, 1525, 359, 6, 114, "Subsection",ExpressionUUID->"d4618ab7-a66f-467f-b8cd-b8c9161160fe",
   CellTags->"Importing and Exporting"],
  Cell[258457, 4702, 305, 6, 174, "Section",ExpressionUUID->"25082016-5c2e-48df-a1d4-b5c6289947f4",
   CellTags->"Importing and Exporting"],
  Cell[267272, 4938, 343, 8, 44, "Text",ExpressionUUID->"6ecccc58-ad9e-455e-9347-71e62729e3f5",
   CellTags->"Importing and Exporting"],
  Cell[267618, 4948, 585, 18, 44, "Text",ExpressionUUID->"cb04cb12-64cf-4465-85e8-66fa61c0d935",
   CellTags->"Importing and Exporting"],
  Cell[268206, 4968, 315, 7, 44, "Text",ExpressionUUID->"6b31b06d-5846-43d5-b261-4fe7f6729c18",
   CellTags->"Importing and Exporting"]},
 "databaseExamples"->{
  Cell[270495, 5033, 347, 8, 79, "Input",ExpressionUUID->"0d4f729a-cfec-454a-bdca-9e883aef41b1",
   CellTags->"databaseExamples"]},
 "b:3.1"->{
  Cell[272893, 5098, 218, 4, 52, "Input",ExpressionUUID->"3596bf61-7402-4828-a20c-92cd05fd40a9",
   CellTags->{"b:3.1", "Ex--21943492438155078303,64"},
   CellID->27124]},
 "Ex--21943492438155078303,64"->{
  Cell[272893, 5098, 218, 4, 52, "Input",ExpressionUUID->"3596bf61-7402-4828-a20c-92cd05fd40a9",
   CellTags->{"b:3.1", "Ex--21943492438155078303,64"},
   CellID->27124]},
 "Data Collections"->{
  Cell[283441, 5390, 364, 5, 288, "Section",ExpressionUUID->"2c6b5ce4-db32-4bf2-a990-8662f78020cd",
   CellTags->"Data Collections"],
  Cell[283808, 5397, 997, 21, 102, "Text",ExpressionUUID->"576e7232-c224-4dfe-bd6e-8774504e5488",
   CellTags->"Data Collections"],
  Cell[284808, 5420, 540, 13, 44, "CodeText",ExpressionUUID->"40aa4466-cb00-474d-bdd9-e0cc7d928ad3",
   CellTags->"Data Collections"],
  Cell[286197, 5457, 714, 18, 44, "CodeText",ExpressionUUID->"881f17c1-d0b0-4ec7-ae0d-ae4a43075ca6",
   CellTags->"Data Collections"],
  Cell[290705, 5582, 231, 3, 44, "CodeText",ExpressionUUID->"13113681-ddbf-466a-aa2f-5df1985b4116",
   CellTags->"Data Collections"],
  Cell[291379, 5597, 311, 4, 44, "CodeText",ExpressionUUID->"92ec395a-5827-48e1-ae48-65ca537d8486",
   CellTags->"Data Collections"],
  Cell[291693, 5603, 529, 10, 62, "Input",ExpressionUUID->"8da362d1-8713-456d-83dc-67c22256ef78",
   CellTags->"Data Collections"],
  Cell[292225, 5615, 224, 3, 44, "CodeText",ExpressionUUID->"880d606c-cea5-4d90-b19b-5d32a4ba69f2",
   CellTags->"Data Collections"],
  Cell[292452, 5620, 710, 14, 63, "Input",ExpressionUUID->"aa54ad65-1852-41a6-94b7-052d24d3c123",
   CellTags->"Data Collections"],
  Cell[293165, 5636, 282, 4, 44, "CodeText",ExpressionUUID->"ff1176e1-2da9-49a8-8243-ff3f9b1a0ca9",
   CellTags->"Data Collections"],
  Cell[293450, 5642, 827, 17, 63, "Input",ExpressionUUID->"41858468-0fb5-453e-ad39-343a2d5899f0",
   CellTags->"Data Collections"],
  Cell[481868, 9084, 376, 6, 174, "Section",ExpressionUUID->"add81027-00bc-49ae-9f40-0c2cfb4f1b92",
   CellTags->"Data Collections"],
  Cell[561431, 11088, 434, 6, 288, "Section",ExpressionUUID->"a1e070e7-87ab-434b-85f8-1ec5c442a065",
   CellTags->"Data Collections"],
  Cell[569787, 11306, 1029, 19, 52, "Input",ExpressionUUID->"19ff8d91-2aae-461c-b169-96bb8cc3f154",
   CellTags->"Data Collections"],
  Cell[570819, 11327, 562, 14, 44, "Text",ExpressionUUID->"18bb26b9-cd28-4d22-9d0c-f02d4f53d8a9",
   CellTags->"Data Collections"],
  Cell[578062, 11508, 320, 8, 401, "Section",ExpressionUUID->"081cc3f5-4819-464b-9a62-6c38e595a170",
   CellTags->"Data Collections"],
  Cell[602385, 12061, 461, 7, 288, "Section",ExpressionUUID->"a0d0e878-1f41-4b71-b9b6-649ecaa7bb07",
   CellTags->"Data Collections"]},
 "Examples"->{
  Cell[559901, 11048, 105, 1, 174, "Section",ExpressionUUID->"cd6654d9-e024-4629-b678-1a18a46be463",
   CellTags->"Examples"],
  Cell[560009, 11051, 435, 8, 73, "Text",ExpressionUUID->"7b829f00-5e4c-407e-8b33-522e30589031",
   CellTags->"Examples"],
  Cell[560447, 11061, 368, 7, 44, "Item",ExpressionUUID->"9bb6fb0c-5926-43dd-8181-3d661fa3bb96",
   CellTags->"Examples"],
  Cell[560818, 11070, 190, 2, 44, "Item",ExpressionUUID->"2b1cdb10-7174-4cc7-8618-d3bfb2fa96f0",
   CellTags->"Examples"],
  Cell[561011, 11074, 177, 2, 44, "Item",ExpressionUUID->"e2adeb68-3516-44be-8a4c-34bb38f5e5f7",
   CellTags->"Examples"]},
 "Exercises"->{
  Cell[621207, 12549, 169, 2, 174, "Section",ExpressionUUID->"9f266981-a22f-4f0f-87b2-d3ea74fb47dc",
   CounterAssignments->{{"Chapter", 7}, {"ExerciseNumber", 0}},
   CellTags->"Exercises"],
  Cell[621401, 12555, 347, 7, 114, "Subsection",ExpressionUUID->"93f13363-17b4-4c84-84da-4712a9f1a1a0",
   CellTags->{"Exercises", "Writing Data"}],
  Cell[621773, 12566, 677, 15, 71, "Item",ExpressionUUID->"e5c3f47a-9096-4204-8df1-93101c70709b",
   CellTags->{"Exercises", "Writing Data"}],
  Cell[622453, 12583, 884, 28, 52, "Input",ExpressionUUID->"79fe9011-08b0-4d42-953f-846915ac4898",
   CellTags->{"Exercises", "Writing Data"}],
  Cell[625827, 12678, 291, 7, 44, "Item",ExpressionUUID->"c4d27e3a-5c36-4c6c-95a4-1c5a390d7991",
   CellTags->{"Exercises", "Writing Data"}],
  Cell[627615, 12729, 260, 5, 114, "Subsection",ExpressionUUID->"7cb51b71-07d2-415f-b9ed-92e3412785b9",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[627878, 12736, 690, 13, 73, "CodeText",ExpressionUUID->"33a4ee94-f3c8-4dc0-8a59-94751c769378",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[628764, 12757, 164, 4, 52, "Input",ExpressionUUID->"744a4291-12ec-4b41-b65a-e49ffd556472",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[628953, 12765, 491, 12, 44, "Item",ExpressionUUID->"71b96c67-521f-4ec8-97bc-6a3ef10aa1ce",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[629447, 12779, 416, 12, 52, "Input",ExpressionUUID->"3db0d9c3-c29a-4aa8-a05e-99422af64b42",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[629878, 12794, 637, 12, 71, "Item",ExpressionUUID->"8b87449c-3da9-439a-ae2d-33c23dba57de",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[650306, 13162, 461, 10, 71, "Item",ExpressionUUID->"5a735791-5388-4b3b-9c5f-8adc17bdab21",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[650770, 13174, 580, 17, 52, "Input",ExpressionUUID->"f69867e0-77f9-465d-9281-8ff9e204f0d2",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[653613, 13252, 244, 5, 114, "Subsection",ExpressionUUID->"b83845f1-b3ad-4afa-b581-c2f18daf91ab",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[653860, 13259, 373, 9, 44, "Text",ExpressionUUID->"d77e3ff8-0113-4f86-84a8-1038e0b10cf6",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[654236, 13270, 619, 15, 73, "CodeText",ExpressionUUID->"b08d88fd-e38a-420d-bce7-7478da33723a",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[654858, 13287, 503, 15, 79, "Input",ExpressionUUID->"188af498-810f-4e3c-85a9-fc665e29d6d0",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[655364, 13304, 580, 15, 44, "CodeText",ExpressionUUID->"005701df-8063-430f-9564-0abdbce319c2",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[655947, 13321, 825, 24, 52, "Input",ExpressionUUID->"302b0df1-c31d-499a-86a4-9506895437c1",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[656775, 13347, 255, 6, 44, "CodeText",ExpressionUUID->"475cf7a7-ca18-4778-8563-927a572851d4",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[657033, 13355, 366, 9, 52, "Input",ExpressionUUID->"c7e41146-5d9d-4ed8-854c-c873af632506",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[657402, 13366, 526, 11, 73, "CodeText",ExpressionUUID->"e3a03c50-0d64-415a-a5aa-feebe16789a7",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[659403, 13422, 232, 5, 114, "Subsection",ExpressionUUID->"80212623-4378-4cb3-bbbc-6a20c168b7d0",
   CellTags->{"Exercises", "Using Data Collections"}],
  Cell[659638, 13429, 584, 16, 73, "Text",ExpressionUUID->"5168f1d5-25d0-49c3-ae02-84567ad3fb7a",
   CellTags->{"Exercises", "Using Data Collections"}],
  Cell[672782, 13709, 222, 5, 114, "Subsection",ExpressionUUID->"e5f11a98-7658-4aba-8369-bb48a3a9fdf9",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[673007, 13716, 612, 12, 102, "Text",ExpressionUUID->"09736e18-3694-453a-9608-b46c90adc08a",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[673622, 13730, 269, 7, 44, "CodeText",ExpressionUUID->"f42bca1c-1b29-4986-a05b-c1e0a171c4ae",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[673894, 13739, 487, 13, 52, "Input",ExpressionUUID->"cf3ac2c2-a527-4969-82f0-21cf7c93ff00",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[675090, 13774, 535, 12, 71, "Item",ExpressionUUID->"353a1149-0f69-4345-9f74-e68e7c661a47",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[681548, 13928, 236, 7, 44, "Item",ExpressionUUID->"9bd003e5-5ee7-44df-95f4-4f80ed33046b",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[695175, 14231, 210, 6, 44, "Item",ExpressionUUID->"e1315c58-1319-438b-92a2-dbafb7c23167",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[728333, 15008, 255, 5, 114, "Subsection",ExpressionUUID->"df63b8e3-5c02-46c7-8848-f81550485505",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[728591, 15015, 725, 21, 44, "Text",ExpressionUUID->"313c463f-737a-40e1-833e-afc40f55efbe",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[729319, 15038, 543, 18, 52, "Input",ExpressionUUID->"f04ff86e-2c34-4ae7-bd36-f3031f8fb7f9",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[729865, 15058, 577, 12, 73, "Text",ExpressionUUID->"5a5845d1-cca9-4af2-a5dd-a8bafc6f61cf",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[730445, 15072, 486, 16, 52, "Input",ExpressionUUID->"f7ba58f0-8da9-46c9-80ac-17f005b363aa",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[730934, 15090, 690, 18, 73, "Text",ExpressionUUID->"7590e953-bf9c-41a1-9b2f-d4637a233f21",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[741335, 15359, 237, 4, 114, "Subsection",ExpressionUUID->"f13d250e-74ba-4bad-9ae8-4f7259c95831",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[741575, 15365, 287, 7, 44, "CodeText",ExpressionUUID->"d24483e3-750c-479b-a414-5df6c72c5920",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[741865, 15374, 235, 6, 52, "Input",ExpressionUUID->"c220cb43-5de0-49d6-8b7f-632125dfbd22",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742103, 15382, 381, 12, 52, "Input",ExpressionUUID->"8bf33170-7429-4bfc-b7a5-bc35108b13e0",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742487, 15396, 206, 6, 52, "Input",ExpressionUUID->"4cf0d87c-2253-4ae1-a92e-300bd6f60f88",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742696, 15404, 206, 6, 52, "Input",ExpressionUUID->"a3214aff-5cef-4a05-9ef0-6aa50695f993",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742905, 15412, 429, 8, 73, "Text",ExpressionUUID->"937dedd8-2f12-4c00-a1c4-dcd3c05ec0cb",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[743337, 15422, 938, 19, 131, "Text",ExpressionUUID->"f8519804-20dc-4caa-a8f6-3d474feeb5e3",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[744278, 15443, 139, 3, 52, "Input",ExpressionUUID->"ab6345b9-2cf5-4579-a0ca-22cb5f1f9ead",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[744420, 15448, 322, 7, 73, "Text",ExpressionUUID->"dfa1f12c-b519-409b-a944-a8318f40d6e8",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[744745, 15457, 287, 9, 126, "Program",ExpressionUUID->"dfa7d3f6-b9f1-434a-b184-4da057f19a16",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[745035, 15468, 952, 24, 73, "Text",ExpressionUUID->"1b74546a-14a6-4630-bf48-e0755b4ceac9",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[745990, 15494, 511, 11, 73, "Text",ExpressionUUID->"54580671-a5f5-4f00-9cef-9327a5b7df41",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[746504, 15507, 255, 6, 44, "Text",ExpressionUUID->"12501498-5646-470c-911c-47cefc40c2ed",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[746796, 15518, 241, 5, 114, "Subsection",ExpressionUUID->"60984a9c-f454-4aa0-9d49-7cf4faf2b86f",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[747040, 15525, 759, 16, 73, "Text",ExpressionUUID->"a36e6031-edd0-40ce-a2db-4fe324926ac8",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[749169, 15584, 415, 10, 44, "Text",ExpressionUUID->"6c19b73c-aa2a-4548-8203-a1e4cdec8f62",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[749587, 15596, 357, 7, 44, "Text",ExpressionUUID->"b8fb78c5-1797-4e3c-a157-539f97d37513",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[749947, 15605, 374, 11, 52, "Input",ExpressionUUID->"f510eb70-b512-4088-85ac-4c03cbd85714",
   CellTags->{"Exercises", "Tables of File Info"}]},
 "Writing Data"->{
  Cell[621401, 12555, 347, 7, 114, "Subsection",ExpressionUUID->"93f13363-17b4-4c84-84da-4712a9f1a1a0",
   CellTags->{"Exercises", "Writing Data"}],
  Cell[621773, 12566, 677, 15, 71, "Item",ExpressionUUID->"e5c3f47a-9096-4204-8df1-93101c70709b",
   CellTags->{"Exercises", "Writing Data"}],
  Cell[622453, 12583, 884, 28, 52, "Input",ExpressionUUID->"79fe9011-08b0-4d42-953f-846915ac4898",
   CellTags->{"Exercises", "Writing Data"}],
  Cell[625827, 12678, 291, 7, 44, "Item",ExpressionUUID->"c4d27e3a-5c36-4c6c-95a4-1c5a390d7991",
   CellTags->{"Exercises", "Writing Data"}]},
 "Exporting and Importing Images"->{
  Cell[627615, 12729, 260, 5, 114, "Subsection",ExpressionUUID->"7cb51b71-07d2-415f-b9ed-92e3412785b9",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[627878, 12736, 690, 13, 73, "CodeText",ExpressionUUID->"33a4ee94-f3c8-4dc0-8a59-94751c769378",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[628764, 12757, 164, 4, 52, "Input",ExpressionUUID->"744a4291-12ec-4b41-b65a-e49ffd556472",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[628953, 12765, 491, 12, 44, "Item",ExpressionUUID->"71b96c67-521f-4ec8-97bc-6a3ef10aa1ce",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[629447, 12779, 416, 12, 52, "Input",ExpressionUUID->"3db0d9c3-c29a-4aa8-a05e-99422af64b42",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[629878, 12794, 637, 12, 71, "Item",ExpressionUUID->"8b87449c-3da9-439a-ae2d-33c23dba57de",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[650306, 13162, 461, 10, 71, "Item",ExpressionUUID->"5a735791-5388-4b3b-9c5f-8adc17bdab21",
   CellTags->{"Exercises", "Exporting and Importing Images"}],
  Cell[650770, 13174, 580, 17, 52, "Input",ExpressionUUID->"f69867e0-77f9-465d-9281-8ff9e204f0d2",
   CellTags->{"Exercises", "Exporting and Importing Images"}]},
 "Exporting and Importing Data"->{
  Cell[653613, 13252, 244, 5, 114, "Subsection",ExpressionUUID->"b83845f1-b3ad-4afa-b581-c2f18daf91ab",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[653860, 13259, 373, 9, 44, "Text",ExpressionUUID->"d77e3ff8-0113-4f86-84a8-1038e0b10cf6",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[654236, 13270, 619, 15, 73, "CodeText",ExpressionUUID->"b08d88fd-e38a-420d-bce7-7478da33723a",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[654858, 13287, 503, 15, 79, "Input",ExpressionUUID->"188af498-810f-4e3c-85a9-fc665e29d6d0",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[655364, 13304, 580, 15, 44, "CodeText",ExpressionUUID->"005701df-8063-430f-9564-0abdbce319c2",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[655947, 13321, 825, 24, 52, "Input",ExpressionUUID->"302b0df1-c31d-499a-86a4-9506895437c1",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[656775, 13347, 255, 6, 44, "CodeText",ExpressionUUID->"475cf7a7-ca18-4778-8563-927a572851d4",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[657033, 13355, 366, 9, 52, "Input",ExpressionUUID->"c7e41146-5d9d-4ed8-854c-c873af632506",
   CellTags->{"Exercises", "Exporting and Importing Data"}],
  Cell[657402, 13366, 526, 11, 73, "CodeText",ExpressionUUID->"e3a03c50-0d64-415a-a5aa-feebe16789a7",
   CellTags->{"Exercises", "Exporting and Importing Data"}]},
 "Using Data Collections"->{
  Cell[659403, 13422, 232, 5, 114, "Subsection",ExpressionUUID->"80212623-4378-4cb3-bbbc-6a20c168b7d0",
   CellTags->{"Exercises", "Using Data Collections"}],
  Cell[659638, 13429, 584, 16, 73, "Text",ExpressionUUID->"5168f1d5-25d0-49c3-ae02-84567ad3fb7a",
   CellTags->{"Exercises", "Using Data Collections"}]},
 "Working with Data"->{
  Cell[672782, 13709, 222, 5, 114, "Subsection",ExpressionUUID->"e5f11a98-7658-4aba-8369-bb48a3a9fdf9",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[673007, 13716, 612, 12, 102, "Text",ExpressionUUID->"09736e18-3694-453a-9608-b46c90adc08a",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[673622, 13730, 269, 7, 44, "CodeText",ExpressionUUID->"f42bca1c-1b29-4986-a05b-c1e0a171c4ae",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[673894, 13739, 487, 13, 52, "Input",ExpressionUUID->"cf3ac2c2-a527-4969-82f0-21cf7c93ff00",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[674384, 13754, 413, 10, 44, "CodeText",ExpressionUUID->"c5487e84-bcea-4f90-b337-2406e7f3514f",
   CellTags->"Working with Data"],
  Cell[674800, 13766, 287, 6, 52, "Input",ExpressionUUID->"4640cc4d-40fc-4792-a10c-6ac4e55e7f00",
   CellTags->"Working with Data"],
  Cell[675090, 13774, 535, 12, 71, "Item",ExpressionUUID->"353a1149-0f69-4345-9f74-e68e7c661a47",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[681548, 13928, 236, 7, 44, "Item",ExpressionUUID->"9bd003e5-5ee7-44df-95f4-4f80ed33046b",
   CellTags->{"Exercises", "Working with Data"}],
  Cell[695175, 14231, 210, 6, 44, "Item",ExpressionUUID->"e1315c58-1319-438b-92a2-dbafb7c23167",
   CellTags->{"Exercises", "Working with Data"}]},
 "Saving Results from DE"->{
  Cell[728333, 15008, 255, 5, 114, "Subsection",ExpressionUUID->"df63b8e3-5c02-46c7-8848-f81550485505",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[728591, 15015, 725, 21, 44, "Text",ExpressionUUID->"313c463f-737a-40e1-833e-afc40f55efbe",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[729319, 15038, 543, 18, 52, "Input",ExpressionUUID->"f04ff86e-2c34-4ae7-bd36-f3031f8fb7f9",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[729865, 15058, 577, 12, 73, "Text",ExpressionUUID->"5a5845d1-cca9-4af2-a5dd-a8bafc6f61cf",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[730445, 15072, 486, 16, 52, "Input",ExpressionUUID->"f7ba58f0-8da9-46c9-80ac-17f005b363aa",
   CellTags->{"Exercises", "Saving Results from DE"}],
  Cell[730934, 15090, 690, 18, 73, "Text",ExpressionUUID->"7590e953-bf9c-41a1-9b2f-d4637a233f21",
   CellTags->{"Exercises", "Saving Results from DE"}]},
 "Saving Notebooks"->{
  Cell[741335, 15359, 237, 4, 114, "Subsection",ExpressionUUID->"f13d250e-74ba-4bad-9ae8-4f7259c95831",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[741575, 15365, 287, 7, 44, "CodeText",ExpressionUUID->"d24483e3-750c-479b-a414-5df6c72c5920",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[741865, 15374, 235, 6, 52, "Input",ExpressionUUID->"c220cb43-5de0-49d6-8b7f-632125dfbd22",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742103, 15382, 381, 12, 52, "Input",ExpressionUUID->"8bf33170-7429-4bfc-b7a5-bc35108b13e0",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742487, 15396, 206, 6, 52, "Input",ExpressionUUID->"4cf0d87c-2253-4ae1-a92e-300bd6f60f88",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742696, 15404, 206, 6, 52, "Input",ExpressionUUID->"a3214aff-5cef-4a05-9ef0-6aa50695f993",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[742905, 15412, 429, 8, 73, "Text",ExpressionUUID->"937dedd8-2f12-4c00-a1c4-dcd3c05ec0cb",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[743337, 15422, 938, 19, 131, "Text",ExpressionUUID->"f8519804-20dc-4caa-a8f6-3d474feeb5e3",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[744278, 15443, 139, 3, 52, "Input",ExpressionUUID->"ab6345b9-2cf5-4579-a0ca-22cb5f1f9ead",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[744420, 15448, 322, 7, 73, "Text",ExpressionUUID->"dfa1f12c-b519-409b-a944-a8318f40d6e8",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[744745, 15457, 287, 9, 126, "Program",ExpressionUUID->"dfa7d3f6-b9f1-434a-b184-4da057f19a16",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[745035, 15468, 952, 24, 73, "Text",ExpressionUUID->"1b74546a-14a6-4630-bf48-e0755b4ceac9",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[745990, 15494, 511, 11, 73, "Text",ExpressionUUID->"54580671-a5f5-4f00-9cef-9327a5b7df41",
   CellTags->{"Exercises", "Saving Notebooks"}],
  Cell[746504, 15507, 255, 6, 44, "Text",ExpressionUUID->"12501498-5646-470c-911c-47cefc40c2ed",
   CellTags->{"Exercises", "Saving Notebooks"}]},
 "Tables of File Info"->{
  Cell[746796, 15518, 241, 5, 114, "Subsection",ExpressionUUID->"60984a9c-f454-4aa0-9d49-7cf4faf2b86f",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[747040, 15525, 759, 16, 73, "Text",ExpressionUUID->"a36e6031-edd0-40ce-a2db-4fe324926ac8",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[749169, 15584, 415, 10, 44, "Text",ExpressionUUID->"6c19b73c-aa2a-4548-8203-a1e4cdec8f62",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[749587, 15596, 357, 7, 44, "Text",ExpressionUUID->"b8fb78c5-1797-4e3c-a157-539f97d37513",
   CellTags->{"Exercises", "Tables of File Info"}],
  Cell[749947, 15605, 374, 11, 52, "Input",ExpressionUUID->"f510eb70-b512-4088-85ac-4c03cbd85714",
   CellTags->{"Exercises", "Tables of File Info"}]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 788130, 16461},
 {"Overview", 788431, 16466},
 {"Importing and Exporting", 788583, 16469},
 {"databaseExamples", 793446, 16540},
 {"b:3.1", 793590, 16543},
 {"Ex--21943492438155078303,64", 793796, 16547},
 {"Data Collections", 793991, 16551},
 {"Examples", 796280, 16586},
 {"Exercises", 796916, 16597},
 {"Writing Data", 805567, 16711},
 {"Exporting and Importing Images", 806183, 16720},
 {"Exporting and Importing Data", 807519, 16737},
 {"Using Data Collections", 809002, 16756},
 {"Working with Data", 809339, 16761},
 {"Saving Results from DE", 810684, 16780},
 {"Saving Notebooks", 811634, 16793},
 {"Tables of File Info", 813730, 16822}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[611, 23, 136, 2, 0, "SlideShowNavigationBar",ExpressionUUID->"ae861ed8-5fa1-4088-84fd-2651cc7b368a",
 CellTags->"SlideShowHeader"],
Cell[750, 27, 15061, 253, 179, "Title",ExpressionUUID->"059f49ae-49fc-4f44-80e6-ab700841b96e"],
Cell[15814, 282, 502, 8, 178, "Title",ExpressionUUID->"1243965a-40ce-482a-9c91-36878f955d76"],
Cell[16319, 292, 457, 7, 79, "Subtitle",ExpressionUUID->"abd2714b-c40b-491d-9b98-1f3d249655e3"],
Cell[16779, 301, 22428, 374, 316, "Text",ExpressionUUID->"53d7a803-c89c-4384-ab1a-82f0054478e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39244, 680, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"e4dff84c-9298-45c8-9d8c-89cd2ce2b4d3",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[39391, 686, 154, 3, 174, "Section",ExpressionUUID->"6ccfc20f-0a0c-40c7-8ffd-d0b3b40f707d"],
Cell[39548, 691, 182, 4, 44, "Item",ExpressionUUID->"f862cf57-8b51-446e-acd2-d0460714cc85"],
Cell[39733, 697, 273, 5, 44, "Item",ExpressionUUID->"7af61e16-3c69-4e64-822a-f9e45b2f9de5"],
Cell[40009, 704, 167, 3, 44, "Item",ExpressionUUID->"c72213a5-4077-481e-88c8-7569a9b96202"],
Cell[40179, 709, 573, 10, 44, "Item",ExpressionUUID->"6bf698df-c9aa-435e-94c3-037a875a49b0",
 CellTags->"Overview"],
Cell[40755, 721, 243, 4, 44, "Item",ExpressionUUID->"89a311f9-ac4e-4171-8a9c-2386ad15a049"],
Cell[41001, 727, 243, 5, 44, "Item",ExpressionUUID->"72dbb281-2a6f-4ea2-80fe-f654f3aeaafc"],
Cell[41247, 734, 188, 4, 44, "Item",ExpressionUUID->"63398819-0fd8-49e6-95c3-183dbfe18fce"],
Cell[41438, 740, 248, 5, 44, "Item",ExpressionUUID->"f589fae6-5d29-47d1-9885-542259f1fa09"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41735, 751, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"b1318426-6bf5-473c-aba8-4a616b453086"],
Cell[CellGroupData[{
Cell[41849, 755, 212, 4, 174, "Section",ExpressionUUID->"acd2a8cb-e3d3-4dd4-811c-1893eb86b2bf",
 CellTags->"Importing and Exporting"],
Cell[42064, 761, 485, 16, 44, "Item",ExpressionUUID->"9bb497d0-74e5-43d0-838d-224749b4bfaa",
 CellTags->"Importing and Exporting"],
Cell[42552, 779, 503, 16, 44, "Item",ExpressionUUID->"46088051-8b09-4ab9-8a46-3124da3cbf17",
 CellTags->"Importing and Exporting"],
Cell[43058, 797, 777, 23, 44, "Item",ExpressionUUID->"e4e3597e-3c7d-481d-b600-c85e6ce5e6d0",
 CellTags->"Importing and Exporting"],
Cell[43838, 822, 77, 0, 171, "EndOfSlide",ExpressionUUID->"a90296af-f584-43b1-8b0e-160c9590cde5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43964, 828, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"f470fb73-a8a3-4d11-9358-63be99ef3334"],
Cell[CellGroupData[{
Cell[44078, 832, 208, 4, 174, "Section",ExpressionUUID->"c8ea12c8-baed-4bcf-8b5b-d1e50bc5cc5d",
 CellTags->"Importing and Exporting"],
Cell[44289, 838, 377, 8, 44, "Text",ExpressionUUID->"3dde509a-3c4c-4561-87bc-e80a0f37ee84",
 CellTags->"Importing and Exporting"],
Cell[44669, 848, 285, 5, 40, "Text",ExpressionUUID->"c02c286a-531a-4aa9-bbc8-2a55ef2b30d8",
 CellTags->"Importing and Exporting"],
Cell[44957, 855, 285, 5, 40, "Text",ExpressionUUID->"791fd674-bff3-4f90-81a0-b340b92b405f",
 CellTags->"Importing and Exporting"],
Cell[45245, 862, 220, 4, 44, "Text",ExpressionUUID->"84bcb39e-ed2e-44e2-a5a6-6bbdc60c43c1",
 CellTags->"Importing and Exporting"],
Cell[45468, 868, 711, 27, 44, "Item",ExpressionUUID->"35d9f083-7d6d-4be3-8203-73742a0e14be",
 CellTags->"Importing and Exporting"],
Cell[46182, 897, 602, 22, 44, "Item",ExpressionUUID->"f78a4bcf-3df4-4046-a275-80a6814a10cd",
 CellTags->"Importing and Exporting"],
Cell[46787, 921, 853, 32, 44, "Item",ExpressionUUID->"f400da24-2d47-4e99-8fa2-c70bf1c17067",
 CellTags->"Importing and Exporting"],
Cell[47643, 955, 767, 27, 44, "Item",ExpressionUUID->"d4882966-7136-4e04-b67e-e8386db9f92c",
 CellTags->"Importing and Exporting"],
Cell[48413, 984, 727, 27, 44, "Item",ExpressionUUID->"16aeeb4c-a8fe-4286-9d31-5984d8e048c3",
 CellTags->"Importing and Exporting"],
Cell[49143, 1013, 431, 11, 44, "Text",ExpressionUUID->"f743a8e9-0c1d-45b8-8307-b3f331f9fc02"],
Cell[49577, 1026, 77, 0, 171, "EndOfSlide",ExpressionUUID->"e573c595-f719-4a84-83ae-8a2ec5bec683"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[49703, 1032, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"bd260520-7097-4b55-a346-61d88db2332b"],
Cell[CellGroupData[{
Cell[49817, 1036, 165, 4, 174, "Section",ExpressionUUID->"e8371217-f50e-432e-89ce-eea9b1254f6c",
 CellTags->"Importing and Exporting"],
Cell[49985, 1042, 426, 9, 44, "Text",ExpressionUUID->"fdc13726-83c4-4852-bd5c-cc33fe224f31"],
Cell[50414, 1053, 562, 11, 44, "Item",ExpressionUUID->"610df7b0-cbfd-45bd-98bf-52cc9f4f6de2"],
Cell[50979, 1066, 529, 11, 44, "Item",ExpressionUUID->"1c0199c9-86a2-4358-afa0-cddd7937c786"],
Cell[51511, 1079, 426, 11, 44, "Item",ExpressionUUID->"ba4d8231-badb-4bb2-86b3-facdc1d0b7d3"],
Cell[51940, 1092, 364, 9, 44, "Item",ExpressionUUID->"cdaf0932-69c0-45c2-a4d6-d2b2da30e5ef"],
Cell[52307, 1103, 237, 5, 44, "Text",ExpressionUUID->"e9d0c14b-37f6-464b-9824-977a4149554b"],
Cell[52547, 1110, 775, 20, 44, "Item",ExpressionUUID->"aa42c422-1ad5-4cbb-892a-81558519a837"],
Cell[53325, 1132, 429, 8, 73, "Text",ExpressionUUID->"5ff7a4d8-c380-4f06-bb15-e33fc4b4a562"],
Cell[53757, 1142, 77, 0, 171, "EndOfSlide",ExpressionUUID->"65f2a56f-1e31-44df-86c7-77aa48f1a7ad"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53883, 1148, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"936e3285-aacb-4fe8-bb42-57574a241ebf"],
Cell[CellGroupData[{
Cell[53997, 1152, 314, 6, 288, "Section",ExpressionUUID->"84307d41-c35f-4761-b32c-bf09362db020",
 CellTags->"Importing and Exporting"],
Cell[CellGroupData[{
Cell[54336, 1162, 391, 7, 114, "Subsection",ExpressionUUID->"eeb578d2-091c-495f-8ebf-0f8b99cfcc2e",
 CellTags->"Importing and Exporting"],
Cell[54730, 1171, 692, 12, 102, "Text",ExpressionUUID->"fe2aee94-50c2-4df1-bd47-a3c26f5049ab",
 CellTags->"Importing and Exporting"],
Cell[55425, 1185, 410, 8, 44, "CodeText",ExpressionUUID->"e811d69b-ff13-4f55-a1ea-b653ec69e1ea",
 CellTags->"Importing and Exporting"],
Cell[55838, 1195, 218, 4, 52, "Input",ExpressionUUID->"3f38b205-6ba7-4537-ae35-d65097bec3d4"],
Cell[56059, 1201, 185, 3, 44, "CodeText",ExpressionUUID->"1deb198d-a2fc-4d87-a93f-9dbd6bffa04f"],
Cell[56247, 1206, 523, 11, 73, "Text",ExpressionUUID->"33dbd9e4-df24-44f0-8086-227ca489c6d0",
 CellTags->"Importing and Exporting"],
Cell[56773, 1219, 518, 12, 44, "CodeText",ExpressionUUID->"7ab4d549-fbca-4c33-a8dd-4f66134c542c",
 CellTags->"Importing and Exporting"],
Cell[57294, 1233, 531, 12, 52, "Input",ExpressionUUID->"12c671b0-59bc-4454-9508-fdc61d7eb8c0"],
Cell[57828, 1247, 579, 14, 44, "CodeText",ExpressionUUID->"169a38a4-063b-4d70-bcf8-3e0fee06025c",
 CellTags->"Importing and Exporting"],
Cell[58410, 1263, 206, 4, 52, "Input",ExpressionUUID->"a6d91e0c-f8af-4981-a712-66ffb1a6fef2"],
Cell[58619, 1269, 192, 3, 44, "CodeText",ExpressionUUID->"3bed0bc8-93c4-470f-8334-3901afd898cd"],
Cell[58814, 1274, 262, 5, 52, "Input",ExpressionUUID->"2fe97cc9-926e-4145-82e8-24a48cc7d829",
 CellTags->"Importing and Exporting"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59113, 1284, 263, 5, 114, "Subsection",ExpressionUUID->"1cd64b4a-069c-41a6-897c-f1f598c8fe35",
 CellTags->"Importing and Exporting"],
Cell[59379, 1291, 847, 15, 102, "Text",ExpressionUUID->"2bd33588-b5af-4d14-8435-56d3dd0393d7",
 CellTags->"Importing and Exporting"],
Cell[60229, 1308, 234, 3, 62, "Program",ExpressionUUID->"a19626ff-33a9-4afb-bc7c-7dcb068d9a8e"],
Cell[60466, 1313, 693, 13, 44, "Text",ExpressionUUID->"c920b91e-30a5-4dfd-91a4-de39c9820220",
 CellTags->"Importing and Exporting"],
Cell[61162, 1328, 350, 10, 44, "CodeText",ExpressionUUID->"cd417680-a5a3-4d1d-82e9-35a6064db567"],
Cell[61515, 1340, 315, 8, 52, "Input",ExpressionUUID->"8d084a14-dd9c-4e45-a3b8-50463a59f10a"],
Cell[61833, 1350, 809, 17, 44, "CodeText",ExpressionUUID->"f07fa0ca-bb96-4c59-ad48-836529d4310e",
 CellTags->"Importing and Exporting"],
Cell[62645, 1369, 384, 8, 52, "Input",ExpressionUUID->"2b54114b-2375-4ed0-afd0-d82369a4a062"],
Cell[63032, 1379, 866, 18, 44, "CodeText",ExpressionUUID->"72522d16-ea6c-4b6b-801f-1f6070f738bd",
 CellTags->"Importing and Exporting"],
Cell[63901, 1399, 385, 9, 52, "Input",ExpressionUUID->"8f8007eb-b5e0-464b-8ca5-d49bff2ef777"],
Cell[64289, 1410, 77, 0, 171, "EndOfSlide",ExpressionUUID->"55e4ad22-e41c-457e-87ac-c9c2a4ba5b56"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64427, 1417, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"a778863e-dcd9-4d5e-b902-bb0227da19dd"],
Cell[CellGroupData[{
Cell[64541, 1421, 256, 5, 174, "Section",ExpressionUUID->"77eb7269-73b3-41e6-a835-aae2d4927ccf",
 CellTags->"Importing and Exporting"],
Cell[64800, 1428, 363, 7, 44, "CodeText",ExpressionUUID->"25de5f51-d015-4a28-8f91-a8ceefaf8bf9"],
Cell[65166, 1437, 172, 3, 52, "Input",ExpressionUUID->"e860ae67-7206-42e1-8e04-af48572950aa"],
Cell[65341, 1442, 164, 2, 52, "Input",ExpressionUUID->"43c4b784-d69c-4b4c-ab61-8836f533cd94"],
Cell[65508, 1446, 165, 2, 52, "Input",ExpressionUUID->"408e5d66-0975-4bce-ac71-a190d8054c35"],
Cell[65676, 1450, 190, 3, 44, "CodeText",ExpressionUUID->"f75c08f7-5fdf-4ddf-be56-ed5c1170ae37"],
Cell[65869, 1455, 205, 4, 52, "Input",ExpressionUUID->"065e838e-cc33-4742-ba03-d8d388356353"],
Cell[66077, 1461, 205, 4, 52, "Input",ExpressionUUID->"a650349c-eb72-4bad-8d6c-81c5892918de"],
Cell[66285, 1467, 188, 3, 44, "CodeText",ExpressionUUID->"3adef248-15c4-4eb0-a0bb-2051588cd984"],
Cell[66476, 1472, 408, 7, 52, "Input",ExpressionUUID->"ec2833f7-a896-4c77-87db-93594b38d949"],
Cell[66887, 1481, 670, 12, 44, "CodeText",ExpressionUUID->"e98b08a8-164f-4813-a686-798bb2d3417b"],
Cell[67560, 1495, 387, 8, 52, "Input",ExpressionUUID->"fd9962f8-830f-4db9-bfa6-466dc2036d21"],
Cell[67950, 1505, 77, 0, 171, "EndOfSlide",ExpressionUUID->"0d33afcc-a98c-4614-bae2-db00d8f7eef8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[68076, 1511, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"32ec3413-6e12-4d55-b81d-cdeb91478e93"],
Cell[CellGroupData[{
Cell[68190, 1515, 330, 6, 174, "Section",ExpressionUUID->"f9019830-8e02-4adc-a698-ed9dbad096db",
 CellTags->"Importing and Exporting"],
Cell[CellGroupData[{
Cell[68545, 1525, 359, 6, 114, "Subsection",ExpressionUUID->"d4618ab7-a66f-467f-b8cd-b8c9161160fe",
 CellTags->"Importing and Exporting"],
Cell[68907, 1533, 664, 21, 44, "Text",ExpressionUUID->"481eb27b-e3db-478c-af3f-605dd375fc94"],
Cell[69574, 1556, 205, 3, 44, "CodeText",ExpressionUUID->"18cea835-eed7-4635-8d07-1ea5e2227803"],
Cell[69782, 1561, 289, 5, 105, "Input",ExpressionUUID->"f1a0d715-c195-441d-aadf-6f9f009fd370"],
Cell[70074, 1568, 237, 6, 44, "CodeText",ExpressionUUID->"b21522f5-a3c0-4ebd-8b98-58b817078e83"],
Cell[70314, 1576, 367, 8, 52, "Input",ExpressionUUID->"f3e8744a-2596-474c-adc9-3041268cb2f6"],
Cell[70684, 1586, 422, 12, 44, "Text",ExpressionUUID->"e0b6a282-c710-4a41-a01b-598e8c1cf635"],
Cell[71109, 1600, 339, 8, 44, "CodeText",ExpressionUUID->"6b3d90db-0d72-4539-a9f7-e563486781fa"],
Cell[71451, 1610, 185724, 3052, 171, "Input",ExpressionUUID->"afa65533-3ea6-4b8c-8eca-789a044380c6"],
Cell[257178, 4664, 245, 4, 44, "CodeText",ExpressionUUID->"d06f0cfb-21a0-4ae4-b0b8-5c81c78931a2"],
Cell[257426, 4670, 289, 6, 52, "Input",ExpressionUUID->"731cca41-4c8c-4ea6-b18d-d1e73c6b82bb"],
Cell[257718, 4678, 192, 3, 44, "CodeText",ExpressionUUID->"c3771dab-cda4-4329-9712-79932b69dfa6"],
Cell[257913, 4683, 289, 6, 52, "Input",ExpressionUUID->"8644e74d-82c4-4ae6-84c3-58116dcaad37"],
Cell[258205, 4691, 77, 0, 171, "EndOfSlide",ExpressionUUID->"db55e69f-20bd-434b-a0f5-32d985033de3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[258343, 4698, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"41a8b154-cd55-4688-911a-b31b704d2a34"],
Cell[CellGroupData[{
Cell[258457, 4702, 305, 6, 174, "Section",ExpressionUUID->"25082016-5c2e-48df-a1d4-b5c6289947f4",
 CellTags->"Importing and Exporting"],
Cell[CellGroupData[{
Cell[258787, 4712, 222, 4, 114, "Subsection",ExpressionUUID->"5bbb73a6-821f-4f44-9de0-d2fdce27b31c"],
Cell[259012, 4718, 451, 16, 44, "CodeText",ExpressionUUID->"7d250353-2921-4de4-8d73-511a69428c83"],
Cell[259466, 4736, 467, 9, 52, "Input",ExpressionUUID->"feec83d4-2f21-4eca-8c0d-66f1d1c0fb55"],
Cell[259936, 4747, 405, 6, 52, "Input",ExpressionUUID->"a082da16-2ab5-4125-a0cc-a45c855aa060"],
Cell[260344, 4755, 229, 4, 44, "Text",ExpressionUUID->"4fa48601-b3f3-4abd-811d-2fd674406656"],
Cell[260576, 4761, 281, 6, 44, "CodeText",ExpressionUUID->"6f63ea76-2292-4ce7-98b8-b0b775c7cf40"],
Cell[260860, 4769, 320, 5, 52, "Input",ExpressionUUID->"25279df6-886b-438f-b407-819c4c95e7d0"],
Cell[261183, 4776, 417, 10, 44, "CodeText",ExpressionUUID->"acf9fff6-3c0d-4a4b-90b3-b657726864a8"],
Cell[261603, 4788, 461, 7, 52, "Input",ExpressionUUID->"1ca9ff49-25a5-4a83-8457-f691f7be7c65"],
Cell[262067, 4797, 303, 4, 44, "CodeText",ExpressionUUID->"384a570f-b84d-420d-ac31-792646fc6cb9"],
Cell[262373, 4803, 226, 3, 52, "Input",ExpressionUUID->"57a23278-2c8f-4c87-9740-f293a6b5191d"],
Cell[262602, 4808, 401, 11, 44, "CodeText",ExpressionUUID->"87b82ec0-d947-484c-969a-76344d1b00a7"],
Cell[263006, 4821, 273, 4, 52, "Input",ExpressionUUID->"be9a3cb2-373b-4b82-be35-95478866958c"],
Cell[263282, 4827, 308, 5, 52, "Input",ExpressionUUID->"3ae398ab-1676-46cc-90df-0a0b98358c6d"],
Cell[263593, 4834, 225, 5, 44, "CodeText",ExpressionUUID->"46201a96-5fd1-48fb-a52d-4d5c74915779"],
Cell[263821, 4841, 189, 2, 52, "Input",ExpressionUUID->"3960298d-8009-4624-9a50-0c54d221dc0b"],
Cell[264013, 4845, 353, 7, 73, "Text",ExpressionUUID->"735f7549-a8b9-4c8a-88fe-5f5cad906f15"],
Cell[264369, 4854, 280, 6, 44, "CodeText",ExpressionUUID->"4155aee6-0627-46a9-a454-8be025a16b38"],
Cell[264652, 4862, 598, 14, 63, "Input",ExpressionUUID->"d7ca736b-71eb-4459-8cb8-a0c3737fa698"],
Cell[265253, 4878, 406, 9, 52, "Input",ExpressionUUID->"9305ab6b-b0b7-4a77-a475-0741940cca56"],
Cell[265662, 4889, 193, 3, 44, "CodeText",ExpressionUUID->"807b4a04-1845-4199-b2ae-90948656ef80"],
Cell[265858, 4894, 327, 7, 52, "Input",ExpressionUUID->"6f6d95d6-8ae0-4641-969f-be0d917c4e50"],
Cell[266188, 4903, 556, 16, 44, "CodeText",ExpressionUUID->"4d4d0452-563b-493b-a8b1-0dbe92acb82e"],
Cell[266747, 4921, 336, 7, 52, "Input",ExpressionUUID->"fdbe15b2-980c-40d0-ad76-36b17e893398"]
}, Open  ]],
Cell[CellGroupData[{
Cell[267120, 4933, 149, 3, 114, "Subsection",ExpressionUUID->"f6ee73e3-60dc-4825-b4d7-9473dc523da6"],
Cell[267272, 4938, 343, 8, 44, "Text",ExpressionUUID->"6ecccc58-ad9e-455e-9347-71e62729e3f5",
 CellTags->"Importing and Exporting"],
Cell[267618, 4948, 585, 18, 44, "Text",ExpressionUUID->"cb04cb12-64cf-4465-85e8-66fa61c0d935",
 CellTags->"Importing and Exporting"],
Cell[268206, 4968, 315, 7, 44, "Text",ExpressionUUID->"6b31b06d-5846-43d5-b261-4fe7f6729c18",
 CellTags->"Importing and Exporting"],
Cell[268524, 4977, 367, 8, 44, "CodeText",ExpressionUUID->"3fdb131a-a4d3-42bc-9fa3-99863effd3a3"],
Cell[268894, 4987, 332, 7, 52, "Input",ExpressionUUID->"74572cb1-1fdb-4738-af1d-141693aa8eae"],
Cell[269229, 4996, 77, 0, 171, "EndOfSlide",ExpressionUUID->"8f5a6e02-ff6d-4cd2-8f7e-a6a3c1abd0e9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[269367, 5003, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"0332e271-3e41-4b2a-8a84-e151aba603f5"],
Cell[CellGroupData[{
Cell[269481, 5007, 543, 8, 174, "Section",ExpressionUUID->"7633cfc3-8c10-4af2-a624-3eee9a0ac364"],
Cell[CellGroupData[{
Cell[270049, 5019, 156, 3, 114, "Subsection",ExpressionUUID->"381128ec-66df-474f-b1e3-3a1e474fcd72"],
Cell[270208, 5024, 284, 7, 44, "CodeText",ExpressionUUID->"e8273f89-ebf4-42d1-976d-6669dff6a0af"],
Cell[270495, 5033, 347, 8, 79, "Input",ExpressionUUID->"0d4f729a-cfec-454a-bdca-9e883aef41b1",
 CellTags->"databaseExamples"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270879, 5046, 301, 5, 114, "Subsection",ExpressionUUID->"e3bf9931-6da4-4f45-a500-a2f132367c0f"],
Cell[271183, 5053, 199, 3, 44, "CodeText",ExpressionUUID->"ebaff2e8-acbd-4782-9725-fb6f1874dd60"],
Cell[271385, 5058, 221, 5, 52, "Input",ExpressionUUID->"d71e1acc-a910-4884-bd07-6aee319d38d7"],
Cell[271609, 5065, 471, 9, 44, "CodeText",ExpressionUUID->"ab67171b-8c53-4638-9a4c-0ca228a9dbad"],
Cell[272083, 5076, 259, 5, 52, "Input",ExpressionUUID->"5f9c443a-8148-4999-a62b-24ed7e2033e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[272379, 5086, 239, 4, 114, "Subsection",ExpressionUUID->"de06d5d1-576d-455a-bcc0-09f7d578ab90"],
Cell[272621, 5092, 269, 4, 44, "CodeText",ExpressionUUID->"6d816fec-6ff4-4d05-a7a3-251037d46b8f"],
Cell[272893, 5098, 218, 4, 52, "Input",ExpressionUUID->"3596bf61-7402-4828-a20c-92cd05fd40a9",
 CellTags->{"b:3.1", "Ex--21943492438155078303,64"},
 CellID->27124],
Cell[273114, 5104, 349, 12, 44, "Text",ExpressionUUID->"aaea6b3b-b38e-4026-a90e-af4739aaf4bc"],
Cell[CellGroupData[{
Cell[273488, 5120, 381, 8, 44, "CodeText",ExpressionUUID->"596a5220-d867-41a4-b473-03d476cddee2",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[273872, 5130, 546, 10, 52, "Input",ExpressionUUID->"5b816c88-6d4c-4c3c-a54d-8e7324f0021d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[274421, 5142, 529, 9, 44, "CodeText",ExpressionUUID->"e8b2ee51-286a-4889-b851-7cbe15671b30",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[274953, 5153, 568, 13, 52, "Input",ExpressionUUID->"15480c0b-1e24-45f1-ab05-23bc308bf9b8",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[275558, 5171, 551, 10, 44, "CodeText",ExpressionUUID->"1816b1fe-b4d0-46a3-a126-5af6754349b8",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[276112, 5183, 749, 20, 52, "Input",ExpressionUUID->"fc17427a-1e95-4d24-9f6d-aa8b9bebdbf4",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[276864, 5205, 367, 6, 44, "CodeText",ExpressionUUID->"fdabdd8f-9185-4804-9e93-ef5bc4ca21fd",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[277234, 5213, 1159, 27, 52, "Input",ExpressionUUID->"0a7b59a6-5ecb-4b41-b755-60c4504e8109",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]],
Cell[278408, 5243, 216, 5, 44, "Text",ExpressionUUID->"639bf4f4-6963-41e6-a094-25211ee16b5d"],
Cell[CellGroupData[{
Cell[278649, 5252, 394, 8, 44, "CodeText",ExpressionUUID->"959a7182-ca98-4b7e-b477-0e826e836604",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[279046, 5262, 484, 11, 52, "Input",ExpressionUUID->"b4e2ff17-5e75-41ef-b948-f05d5dc6bfd2",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[279567, 5278, 347, 5, 44, "CodeText",ExpressionUUID->"9a7c1397-c8a9-41f5-a250-2646577d57f7",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[279917, 5285, 743, 18, 52, "Input",ExpressionUUID->"058bd0f2-23f2-4976-a5b5-d0dcefa79a83",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[280709, 5309, 220, 4, 114, "Subsection",ExpressionUUID->"aea3aed2-117c-4c4e-bd91-e577ee7fc73e"],
Cell[280932, 5315, 224, 4, 44, "CodeText",ExpressionUUID->"1ccd0e34-b75e-41b8-af1a-a1d873acde2f"],
Cell[281159, 5321, 211, 4, 52, "Input",ExpressionUUID->"0824c710-6279-4db8-852d-2f13f4296ef3"],
Cell[281373, 5327, 185, 3, 44, "CodeText",ExpressionUUID->"9cb7268f-0893-4b1e-b837-76680c55d4a1"],
Cell[281561, 5332, 223, 4, 52, "Input",ExpressionUUID->"b032ab6f-90e5-454d-b1fd-eaea9f513db7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[281821, 5341, 223, 4, 114, "Subsection",ExpressionUUID->"d9947804-31d3-4d49-9911-bf911d7aafe4"],
Cell[282047, 5347, 606, 15, 71, "Item",ExpressionUUID->"bc984a60-8025-408f-8852-94404745768b"],
Cell[282656, 5364, 530, 13, 71, "Item",ExpressionUUID->"f2a7b21b-2b56-42de-b1db-4c858c2a4952"],
Cell[283189, 5379, 77, 0, 171, "EndOfSlide",ExpressionUUID->"84c0768a-23a1-460e-b6aa-e653b527610d"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[283327, 5386, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"bed44165-58cb-4dc6-bc2d-219d58dc3e75"],
Cell[CellGroupData[{
Cell[283441, 5390, 364, 5, 288, "Section",ExpressionUUID->"2c6b5ce4-db32-4bf2-a990-8662f78020cd",
 CellTags->"Data Collections"],
Cell[283808, 5397, 997, 21, 102, "Text",ExpressionUUID->"576e7232-c224-4dfe-bd6e-8774504e5488",
 CellTags->"Data Collections"],
Cell[284808, 5420, 540, 13, 44, "CodeText",ExpressionUUID->"40aa4466-cb00-474d-bdd9-e0cc7d928ad3",
 CellTags->"Data Collections"],
Cell[285351, 5435, 535, 11, 62, "Input",ExpressionUUID->"47294322-682e-4386-8fbf-7749ef7b829b"],
Cell[285889, 5448, 305, 7, 44, "Text",ExpressionUUID->"51913a10-740f-4ea2-837e-ba1363fc8350"],
Cell[286197, 5457, 714, 18, 44, "CodeText",ExpressionUUID->"881f17c1-d0b0-4ec7-ae0d-ae4a43075ca6",
 CellTags->"Data Collections"],
Cell[286914, 5477, 455, 9, 62, "Input",ExpressionUUID->"d3b435b2-72c6-4ee3-bae1-b54572598525"],
Cell[287372, 5488, 379, 8, 44, "Text",ExpressionUUID->"ff014a99-c8f9-423f-8c80-bd9447713a60"],
Cell[287754, 5498, 334, 5, 44, "CodeText",ExpressionUUID->"ba10459b-2e49-4337-b2a9-e9c9e8cb2408"],
Cell[288091, 5505, 426, 9, 62, "Input",ExpressionUUID->"a09df921-6fed-4baf-b796-9a9097fbbe0d"],
Cell[288520, 5516, 445, 12, 44, "Text",ExpressionUUID->"3c229856-7863-41fe-862c-93cf7223bf0c"],
Cell[288968, 5530, 300, 7, 44, "CodeText",ExpressionUUID->"ac859246-d79f-40e0-91a2-25561c346d86"],
Cell[289271, 5539, 254, 7, 52, "Input",ExpressionUUID->"2b24af2e-c15e-4cda-ad47-c0df853a33d5"],
Cell[289528, 5548, 295, 7, 44, "CodeText",ExpressionUUID->"a9967550-4d11-41a7-b59c-7c6ec33886c3"],
Cell[289826, 5557, 477, 10, 63, "Input",ExpressionUUID->"94bbbff4-dab8-43af-8206-64b295163044"],
Cell[290306, 5569, 396, 11, 44, "Text",ExpressionUUID->"e348d65d-a56e-4a47-8da7-c3fc0a386902"],
Cell[290705, 5582, 231, 3, 44, "CodeText",ExpressionUUID->"13113681-ddbf-466a-aa2f-5df1985b4116",
 CellTags->"Data Collections"],
Cell[290939, 5587, 437, 8, 63, "Input",ExpressionUUID->"bd455f77-7531-42b8-ac30-ae8a317405c8"],
Cell[291379, 5597, 311, 4, 44, "CodeText",ExpressionUUID->"92ec395a-5827-48e1-ae48-65ca537d8486",
 CellTags->"Data Collections"],
Cell[291693, 5603, 529, 10, 62, "Input",ExpressionUUID->"8da362d1-8713-456d-83dc-67c22256ef78",
 CellTags->"Data Collections"],
Cell[292225, 5615, 224, 3, 44, "CodeText",ExpressionUUID->"880d606c-cea5-4d90-b19b-5d32a4ba69f2",
 CellTags->"Data Collections"],
Cell[292452, 5620, 710, 14, 63, "Input",ExpressionUUID->"aa54ad65-1852-41a6-94b7-052d24d3c123",
 CellTags->"Data Collections"],
Cell[293165, 5636, 282, 4, 44, "CodeText",ExpressionUUID->"ff1176e1-2da9-49a8-8243-ff3f9b1a0ca9",
 CellTags->"Data Collections"],
Cell[293450, 5642, 827, 17, 63, "Input",ExpressionUUID->"41858468-0fb5-453e-ad39-343a2d5899f0",
 CellTags->"Data Collections"],
Cell[294280, 5661, 77, 0, 171, "EndOfSlide",ExpressionUUID->"c59b933a-44c9-4a21-a610-b044aed797df"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[294406, 5667, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"44cb5668-06d3-42e4-8132-c4ec89e6de75"],
Cell[CellGroupData[{
Cell[294520, 5671, 469, 7, 174, "Section",ExpressionUUID->"16ddc666-5d14-4cb9-9cb4-47b3b13bd55b"],
Cell[294992, 5680, 654, 13, 73, "Text",ExpressionUUID->"1f30251f-2603-4391-9052-fdb443b4599b"],
Cell[CellGroupData[{
Cell[295671, 5697, 168, 3, 114, "Subsection",ExpressionUUID->"4e49d5d7-bebd-4d67-91c8-3fe11d119142"],
Cell[CellGroupData[{
Cell[295864, 5704, 469, 9, 44, "Text",ExpressionUUID->"aae1f191-d9df-4044-b651-673585061778",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[296336, 5715, 157902, 2595, 485, "Input",ExpressionUUID->"169f9175-97b1-421e-9d65-178f47c733c9",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[454241, 8312, 418, 6, 44, "CodeText",ExpressionUUID->"fd0376cf-2570-44bd-a853-8930949b2f58",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[454662, 8320, 528, 11, 52, "Input",ExpressionUUID->"b2a0b64e-63b0-4ab8-9583-092df72d1831",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[455239, 8337, 164, 3, 114, "Subsection",ExpressionUUID->"37225925-9465-43d4-a0f2-d44ac871850f"],
Cell[CellGroupData[{
Cell[455428, 8344, 773, 17, 44, "CodeText",ExpressionUUID->"c4f7445c-188b-4160-aa10-07901b9104cc",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[456204, 8363, 458, 8, 52, "Input",ExpressionUUID->"5beca4b6-405a-4a31-ad66-562a6923b6d6",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[456711, 8377, 219, 4, 114, "Subsection",ExpressionUUID->"81b777c9-9b92-4337-88ed-7f65cee1bbe2"],
Cell[CellGroupData[{
Cell[456955, 8385, 369, 6, 44, "CodeText",ExpressionUUID->"2d6bf5ac-691b-45c5-9761-1ed21f2f4bdf",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[457327, 8393, 508, 12, 52, "Input",ExpressionUUID->"78fbd64d-135b-4541-bb57-dfa9409e6106",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[457838, 8407, 251, 4, 44, "CodeText",ExpressionUUID->"57a6dcef-1e51-4b91-8f84-b7f42d99deb0",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[458092, 8413, 484, 11, 52, "Input",ExpressionUUID->"dce966cf-c364-459e-baf0-dc8317980a66",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]],
Cell[458591, 8427, 77, 0, 171, "EndOfSlide",ExpressionUUID->"748a8b66-a3a0-4828-910f-8cb248e7d6f0"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[458729, 8434, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"d5341a78-09db-46db-bf51-a1a299411b99"],
Cell[CellGroupData[{
Cell[458843, 8438, 163, 3, 174, "Section",ExpressionUUID->"ae46dcc2-5757-4786-98db-64d3d980ea1c"],
Cell[CellGroupData[{
Cell[459031, 8445, 153, 3, 114, "Subsection",ExpressionUUID->"8557c5cc-be44-4cdf-8a62-05ec936e1559"],
Cell[459187, 8450, 372, 8, 44, "Text",ExpressionUUID->"731d53ca-e6a1-4130-8a0d-f1a17a00de02"],
Cell[CellGroupData[{
Cell[459584, 8462, 289, 5, 44, "CodeText",ExpressionUUID->"dcc7e929-a4b9-4b5d-8887-d70a90a29796",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[459876, 8469, 514, 11, 52, "Input",ExpressionUUID->"58243122-4a46-4a39-9270-acbe1e1462a5",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[460405, 8483, 484, 9, 44, "CodeText",ExpressionUUID->"afa9a073-9402-4ad9-be97-c75716601e4f"],
Cell[460892, 8494, 290, 5, 52, "Input",ExpressionUUID->"25a0ef6d-b8a3-42af-bb6b-6ca2819312b9"],
Cell[461185, 8501, 350, 5, 44, "CodeText",ExpressionUUID->"3c617c5d-9ae5-4677-8307-a4f97db19e0c"],
Cell[461538, 8508, 295, 5, 52, "Input",ExpressionUUID->"77402f11-2fa4-406a-896d-1a7b1232dcb0"],
Cell[461836, 8515, 416, 8, 44, "CodeText",ExpressionUUID->"5cfed994-843b-4ae6-9902-d77e0932b45e"],
Cell[462255, 8525, 329, 6, 52, "Input",ExpressionUUID->"ded610c7-17a7-42c1-b12d-b56143dffed1"],
Cell[462587, 8533, 360, 5, 44, "CodeText",ExpressionUUID->"22273ae8-c17e-49a9-9681-0a11205c921b"],
Cell[462950, 8540, 366, 8, 52, "Input",ExpressionUUID->"6e8c0a7b-0328-438f-a802-5b29517d3789"],
Cell[463319, 8550, 404, 6, 44, "CodeText",ExpressionUUID->"b7324975-653e-43aa-a11b-695525a878ae"],
Cell[463726, 8558, 1086, 25, 79, "Input",ExpressionUUID->"5ef17af7-04e2-4804-b859-5d2b04a354b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[464849, 8588, 159, 3, 114, "Subsection",ExpressionUUID->"0f1428e0-eac8-435a-9e94-94e3d374b14a"],
Cell[465011, 8593, 597, 14, 44, "Text",ExpressionUUID->"99ecc8c1-2f75-45c9-8741-d365fce8640a"],
Cell[465611, 8609, 480, 9, 73, "Text",ExpressionUUID->"75ff2b73-b9d2-40d0-85cb-b25701789d0a"],
Cell[466094, 8620, 170, 2, 44, "CodeText",ExpressionUUID->"a3330a3d-dbff-4ee4-ad89-14dcc76eaf14"],
Cell[466267, 8624, 423, 11, 52, "Input",ExpressionUUID->"fce372da-0c41-4ec7-988b-eae0fa33da2e"],
Cell[466693, 8637, 300, 5, 44, "CodeText",ExpressionUUID->"85dd3861-870b-4292-97ac-b8af6b18762e"],
Cell[466996, 8644, 209, 4, 52, "Input",ExpressionUUID->"bdd8b6c2-c17d-47fb-93be-751fa2cfa7af"],
Cell[467208, 8650, 209, 5, 52, "Input",ExpressionUUID->"af71a99a-78b7-4722-b28e-d2e81693b1c2"],
Cell[467420, 8657, 240, 6, 52, "Input",ExpressionUUID->"d342f49f-ff0d-49b0-a41c-208cab01d01b"],
Cell[467663, 8665, 294, 6, 44, "CodeText",ExpressionUUID->"01c1d103-c558-4693-9d42-b3f6674132f0"],
Cell[467960, 8673, 209, 5, 52, "Input",ExpressionUUID->"b76c15d8-eda7-4eda-bc3d-9b8bb565ef0e"],
Cell[468172, 8680, 182, 4, 52, "Input",ExpressionUUID->"22e173a3-3fb5-4d6b-b4b5-5c19ecfe232f"],
Cell[468357, 8686, 258, 7, 52, "Input",ExpressionUUID->"e42e6c70-f258-4fce-a029-92dda1d9112a"],
Cell[468618, 8695, 190, 4, 52, "Input",ExpressionUUID->"2e3ca7c4-34ee-4ed4-ac73-f2c45bf5afa2"],
Cell[468811, 8701, 272, 4, 44, "CodeText",ExpressionUUID->"e567115c-3250-4645-98bd-2d30b029a6f9"],
Cell[469086, 8707, 214, 5, 52, "Input",ExpressionUUID->"eb955e89-26b0-45e8-b6fa-381d0daa8188"],
Cell[469303, 8714, 190, 4, 52, "Input",ExpressionUUID->"6b513e82-3c5f-4fbf-bc2a-b82520f52ea9"],
Cell[469496, 8720, 266, 4, 44, "CodeText",ExpressionUUID->"a79b8e4f-b173-4fbd-b6d1-19bad572b00d"],
Cell[469765, 8726, 189, 4, 52, "Input",ExpressionUUID->"871bde9c-dfba-4fab-b1c6-978069c3be86"],
Cell[469957, 8732, 191, 4, 52, "Input",ExpressionUUID->"dcf74fea-5aba-44d3-9789-cfd236706c9b"],
Cell[470151, 8738, 766, 19, 44, "CodeText",ExpressionUUID->"f029bef7-272f-4aa5-89ff-248d4cde89fe"],
Cell[470920, 8759, 216, 5, 52, "Input",ExpressionUUID->"6ce89fae-f1b7-4ee0-a47d-29bf9180473a"],
Cell[471139, 8766, 359, 9, 52, "Input",ExpressionUUID->"103d43ee-9173-4916-9b1c-d2d73b80aaf0"],
Cell[471501, 8777, 816, 23, 44, "Text",ExpressionUUID->"9b55c704-91af-4e93-a726-e4748d5c1baa"],
Cell[472320, 8802, 365, 8, 52, "Input",ExpressionUUID->"0c8d9eb3-4b34-4ee6-9492-3aad57bbf90b"],
Cell[472688, 8812, 176, 3, 44, "CodeText",ExpressionUUID->"2a26daa5-415d-4fa0-a9f9-d291729b1bac"],
Cell[472867, 8817, 461, 12, 52, "Input",ExpressionUUID->"9bd2783f-5d6a-4d13-8d76-82a3bafe9607"],
Cell[473331, 8831, 152, 3, 44, "CodeText",ExpressionUUID->"4142192d-8cb1-47d3-aaeb-72830e17e5ce"],
Cell[473486, 8836, 295, 7, 52, "Input",ExpressionUUID->"d7f3fee0-5286-4869-89fd-53513f3f4cc8"],
Cell[473784, 8845, 317, 8, 52, "Input",ExpressionUUID->"2f8160c3-ab20-4a10-9ed9-d81441051c99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[474138, 8858, 155, 3, 114, "Subsection",ExpressionUUID->"ee61a916-9004-4fce-81ae-c7f41b67f1f8"],
Cell[474296, 8863, 409, 12, 44, "Text",ExpressionUUID->"f91f4d74-a18a-43bf-a1b8-353e73894bb5"],
Cell[474708, 8877, 378, 9, 44, "Text",ExpressionUUID->"daba02ef-4ab6-43b2-bdc2-285a8c0c6874"],
Cell[475089, 8888, 1448, 36, 183, "Input",ExpressionUUID->"d86ae101-34ee-4568-813c-2c49d8046e6a"],
Cell[476540, 8926, 276, 6, 44, "CodeText",ExpressionUUID->"25b87448-f1bf-468e-9d98-081f775ac60d"],
Cell[476819, 8934, 216, 4, 52, "Input",ExpressionUUID->"2dc50525-a3e9-4cfb-8b83-899fbeab2520"],
Cell[477038, 8940, 347, 9, 44, "CodeText",ExpressionUUID->"f35b9f59-2220-4e2c-8cf8-fbbc77e63762"],
Cell[477388, 8951, 231, 5, 52, "Input",ExpressionUUID->"f883157f-48b7-484e-ac87-16fbcb1a6ee3"],
Cell[477622, 8958, 197, 3, 44, "CodeText",ExpressionUUID->"86817ac1-5e2c-4d0d-a4c4-db43c6bdc6e3"],
Cell[477822, 8963, 223, 4, 52, "Input",ExpressionUUID->"f18bf91d-4248-4261-9d5e-54a898c72721"],
Cell[478048, 8969, 336, 9, 44, "CodeText",ExpressionUUID->"fc5fd087-e9d7-4fc3-8088-bc7aae300df6"],
Cell[478387, 8980, 279, 6, 52, "Input",ExpressionUUID->"7b0bdfe4-7a33-4fc8-bb80-93b358c40875"],
Cell[478669, 8988, 328, 9, 44, "CodeText",ExpressionUUID->"4b5415c1-f0b5-4956-88bc-a815e2fc57a0"],
Cell[479000, 8999, 304, 6, 52, "Input",ExpressionUUID->"9f4fef07-2b4e-4fd2-829c-6861657c74f7"],
Cell[479307, 9007, 178, 3, 44, "CodeText",ExpressionUUID->"61b2c12c-692f-4029-a9c8-cfdf1b745fbf"],
Cell[479488, 9012, 307, 6, 52, "Input",ExpressionUUID->"7a64bd2e-8e62-482e-8ac2-11dc2e9703b0"],
Cell[479798, 9020, 239, 4, 44, "CodeText",ExpressionUUID->"dc6d9434-a0b8-48f7-bea4-29780a003484"],
Cell[480040, 9026, 602, 14, 52, "Input",ExpressionUUID->"2325c8b4-3d37-457f-bdf6-ff7973565538"],
Cell[480645, 9042, 324, 7, 44, "CodeText",ExpressionUUID->"0ead8d93-dd23-4537-9a5e-3aa0ce510098"],
Cell[480972, 9051, 559, 14, 52, "Input",ExpressionUUID->"a332c33a-8505-4f14-82f8-032d6e8c071e"],
Cell[481534, 9067, 159, 6, 189, "EndOfSlide",ExpressionUUID->"d47bff74-2c4a-4ecc-8fc7-16410ea5e5d5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[481754, 9080, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"70d7f987-e588-47af-8288-eaa02537f973"],
Cell[CellGroupData[{
Cell[481868, 9084, 376, 6, 174, "Section",ExpressionUUID->"add81027-00bc-49ae-9f40-0c2cfb4f1b92",
 CellTags->"Data Collections"],
Cell[482247, 9092, 762, 13, 73, "Text",ExpressionUUID->"9ae835e3-0eef-44e7-864e-9356c434b913"],
Cell[CellGroupData[{
Cell[483034, 9109, 459, 7, 114, "Subsection",ExpressionUUID->"dacf5772-0d93-4046-a33a-9d1987916547"],
Cell[CellGroupData[{
Cell[483518, 9120, 670, 11, 44, "Item",ExpressionUUID->"42a2512c-3107-4317-b8eb-05228f46c800"],
Cell[484191, 9133, 440, 6, 43, "Subitem",ExpressionUUID->"cdfce180-ab59-4f96-998d-30a8bf48f430"]
}, Open  ]],
Cell[CellGroupData[{
Cell[484668, 9144, 658, 12, 44, "Item",ExpressionUUID->"8831e397-e48e-4845-a968-cdaa7c4611bb"],
Cell[485329, 9158, 567, 10, 43, "Subitem",ExpressionUUID->"ebc10d55-28b6-4c71-b1bd-54b7af8c31d9"],
Cell[485899, 9170, 723, 12, 43, "Subitem",ExpressionUUID->"796e6e7a-3b04-48c8-a6fb-b1d76b4ac63e"],
Cell[486625, 9184, 862, 14, 43, "Subitem",ExpressionUUID->"08387c92-63af-4688-9e87-e1b1768c6788"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487524, 9203, 260, 4, 44, "Item",ExpressionUUID->"cc1cdd2b-a5e8-4008-ab46-61dea361a548"],
Cell[487787, 9209, 698, 12, 67, "Subitem",ExpressionUUID->"fc79956b-9b57-433c-830e-b2d24811abd6"],
Cell[488488, 9223, 277, 4, 43, "Subitem",ExpressionUUID->"0947e2a3-6c4d-4d29-9147-69b727198c29"]
}, Open  ]],
Cell[488780, 9230, 77, 0, 171, "EndOfSlide",ExpressionUUID->"2371a889-5bf9-4f2f-a9bc-d8d10f37d7cf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[488918, 9237, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"91e2996e-f0bb-43cb-85cb-e9eddd746d10"],
Cell[CellGroupData[{
Cell[489032, 9241, 431, 6, 288, "Section",ExpressionUUID->"5f5da008-dc19-4646-b90a-a0bfe5162d83"],
Cell[489466, 9249, 875, 19, 73, "Text",ExpressionUUID->"28a382be-26f2-4c25-ae74-cba62cb54cc8"],
Cell[490344, 9270, 5610, 132, 59, "Output",ExpressionUUID->"1e174d81-8b8f-4450-b67c-f816a520b42b"],
Cell[CellGroupData[{
Cell[495979, 9406, 231, 4, 114, "Subsection",ExpressionUUID->"2fa3c357-4a58-4096-813c-d2af486e3cc6"],
Cell[496213, 9412, 247, 6, 44, "Text",ExpressionUUID->"29727b3b-a159-4581-be6d-902091f23c80"],
Cell[496463, 9420, 171, 3, 44, "CodeText",ExpressionUUID->"4e3a15b4-3218-4d77-b557-a188ebcbe0e9"],
Cell[496637, 9425, 255, 3, 52, "Input",ExpressionUUID->"69d1cf35-2a25-41a0-88e7-6edfd287e3d4"],
Cell[496895, 9430, 367, 10, 44, "CodeText",ExpressionUUID->"7a7edd2d-4130-4752-afb9-be46a6d99a10"],
Cell[497265, 9442, 214, 4, 52, "Input",ExpressionUUID->"211a8db4-2fbc-4330-8b61-2bd1a1f62b97"]
}, Open  ]],
Cell[CellGroupData[{
Cell[497516, 9451, 230, 4, 114, "Subsection",ExpressionUUID->"c04e55dc-46a0-474b-9b6b-8a27150e5a06"],
Cell[497749, 9457, 170, 3, 44, "Text",ExpressionUUID->"dce762b6-cc2f-4fb4-afae-0941534c35be"],
Cell[497922, 9462, 474, 9, 44, "Item",ExpressionUUID->"09b6f237-8612-4847-a744-c7f0bf566009"],
Cell[498399, 9473, 366, 7, 44, "Item",ExpressionUUID->"8a5b6a09-64b5-499e-bb58-49bfaba1286c"],
Cell[498768, 9482, 401, 8, 44, "Item",ExpressionUUID->"bfa56dab-b451-46e4-8f2b-0f22ea9a42aa"],
Cell[499172, 9492, 171, 3, 44, "CodeText",ExpressionUUID->"c97a216d-9410-4a32-bb44-df03f60c5328"],
Cell[499346, 9497, 301, 5, 52, "Input",ExpressionUUID->"4baa0a11-1324-45b6-9974-7a8aba241ae7"],
Cell[499650, 9504, 424, 15, 44, "CodeText",ExpressionUUID->"e7b9154e-9b6d-4568-a605-ec4be26ad0d3"],
Cell[500077, 9521, 635, 19, 52, "Input",ExpressionUUID->"5f261553-a98a-4d87-8cd2-592ca9ee9781"],
Cell[500715, 9542, 226, 4, 44, "CodeText",ExpressionUUID->"ea274f27-eb41-4094-a1d3-5884ef1ce2a5"],
Cell[500944, 9548, 484, 8, 52, "Input",ExpressionUUID->"00ac3560-397f-4910-b03e-0ad45c123519"],
Cell[501431, 9558, 328, 7, 44, "Item",ExpressionUUID->"528e464f-fbcc-4c94-8b0f-9df0dd3a22a1"],
Cell[501762, 9567, 171, 3, 44, "CodeText",ExpressionUUID->"31a182cf-9712-4e73-8b61-9a08bd718a0e"],
Cell[501936, 9572, 194, 2, 52, "Input",ExpressionUUID->"f70c8eaa-4725-44c5-bc5f-761d3a2a2a12"],
Cell[502133, 9576, 272, 6, 44, "CodeText",ExpressionUUID->"579bb5ff-1828-4fb7-88bf-90ff1d19e33b"],
Cell[502408, 9584, 472, 13, 52, "Input",ExpressionUUID->"72233d26-97f3-4399-b92c-8cf1eddf0072"],
Cell[502883, 9599, 232, 4, 44, "CodeText",ExpressionUUID->"4c5ff6b0-c433-4715-b125-1ac9a7278850"],
Cell[503118, 9605, 563, 12, 62, "Input",ExpressionUUID->"bbd5e7dd-cd80-4750-8fcc-5efea7aa887a"],
Cell[503684, 9619, 427, 9, 44, "Item",ExpressionUUID->"bacc4034-e7ef-48e7-a9cc-408fa2c3b587"]
}, Open  ]],
Cell[CellGroupData[{
Cell[504148, 9633, 245, 4, 114, "Subsection",ExpressionUUID->"ec31c7b1-e74b-470a-b03f-2050b5e2d225"],
Cell[504396, 9639, 423, 6, 44, "Text",ExpressionUUID->"6de4d386-3409-4ff1-8aea-74d00932da6c"],
Cell[504822, 9647, 742, 12, 73, "Text",ExpressionUUID->"7408a366-4bd4-41be-90cf-1a59a48605cc"],
Cell[505567, 9661, 171, 3, 44, "CodeText",ExpressionUUID->"e34f3c32-63c4-474f-bde4-42225a07a036"],
Cell[505741, 9666, 250, 4, 52, "Input",ExpressionUUID->"9e4396f5-f222-4fbe-abb2-57eedb8eb674"],
Cell[505994, 9672, 230, 4, 44, "CodeText",ExpressionUUID->"4d1c7d2b-57be-47c0-ba0e-5cc1808c99fd"],
Cell[506227, 9678, 259, 4, 52, "Input",ExpressionUUID->"6f4ff8eb-399b-4e7e-90e4-48c064a6a5bd"],
Cell[506489, 9684, 320, 6, 44, "CodeText",ExpressionUUID->"0e168c30-078d-4a24-8b16-d6a3eb5cea7c"],
Cell[506812, 9692, 371, 6, 52, "Input",ExpressionUUID->"dbaa7043-7d76-4ca1-aab1-acbe0b7f92c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[507220, 9703, 452, 6, 180, "Subsection",ExpressionUUID->"e07cd7fb-b0f2-4297-ac71-11827ce937db"],
Cell[507675, 9711, 596, 10, 44, "Text",ExpressionUUID->"014ea171-38cc-43ca-81f0-965ef21b44d4"],
Cell[508274, 9723, 641, 11, 44, "Text",ExpressionUUID->"7a5dc4ce-dce0-4f4d-8226-d797510bf4b9"],
Cell[508918, 9736, 272, 4, 44, "CodeText",ExpressionUUID->"a4e0b829-66a5-4d5d-b9f3-1d7a87024678"],
Cell[509193, 9742, 136, 1, 52, "Input",ExpressionUUID->"60f6a7e6-ad4d-4765-8fd6-4837d9d35872"],
Cell[509332, 9745, 445, 11, 44, "CodeText",ExpressionUUID->"a9efb721-5f16-41e7-a668-9aa2e78eae9c"],
Cell[509780, 9758, 435, 7, 52, "Input",ExpressionUUID->"c3e40fe3-2704-42bf-9ec6-8607bc5a7ca7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510252, 9770, 311, 5, 114, "Subsection",ExpressionUUID->"71821bec-d5c9-4733-b530-9c87e73bfb87"],
Cell[510566, 9777, 340, 7, 44, "Text",ExpressionUUID->"e4a94d96-1ddc-4431-91e8-9387bd8eb790"],
Cell[510909, 9786, 272, 4, 44, "CodeText",ExpressionUUID->"09975b1a-e67f-4d85-9a23-de9cd1fef0ac"],
Cell[511184, 9792, 93, 0, 52, "Input",ExpressionUUID->"5405d4af-7256-4005-a13e-c2abce996978"],
Cell[511280, 9794, 338, 7, 52, "Input",ExpressionUUID->"2db4c4bb-595c-440d-b436-f49789d5f39b"],
Cell[511621, 9803, 342, 5, 44, "CodeText",ExpressionUUID->"92ab2856-b80a-474a-a2e0-ec4cf75488f1"],
Cell[511966, 9810, 325, 8, 52, "Input",ExpressionUUID->"0a43cfbd-440a-404b-8036-d6b44902f441"],
Cell[512294, 9820, 77, 0, 171, "EndOfSlide",ExpressionUUID->"eb266762-3d5d-4bfa-93ba-f999075c8b9a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[512432, 9827, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"8e6cf2e3-8dbb-42ea-bd73-db3c389cf392"],
Cell[CellGroupData[{
Cell[512546, 9831, 170, 3, 174, "Section",ExpressionUUID->"06c59956-740d-453a-aa86-7567f2195fdb"],
Cell[512719, 9836, 262, 4, 44, "CodeText",ExpressionUUID->"bc76f270-0bc3-4440-a6b1-20a4eae36305"],
Cell[512984, 9842, 31708, 784, 105, "Input",ExpressionUUID->"a3e4f30a-ebb0-468f-992b-0ab5dd63e1fd"],
Cell[544695, 10628, 263, 4, 52, "Input",ExpressionUUID->"9e1a6687-4524-4982-8b62-2f1620bd2e1b"],
Cell[CellGroupData[{
Cell[544983, 10636, 169, 3, 114, "Subsection",ExpressionUUID->"d79e7a6b-86a2-437f-a3e7-909295bb636e"],
Cell[545155, 10641, 222, 5, 44, "CodeText",ExpressionUUID->"6f13bd10-4bad-4228-9bec-9b255b21f0b3"],
Cell[545380, 10648, 314, 6, 52, "Input",ExpressionUUID->"97ba3a85-87b2-4091-a3a5-d6fa5103771d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[545731, 10659, 186, 3, 114, "Subsection",ExpressionUUID->"b474e1f7-c1e9-4861-b1bd-b2c5ad8428a5"],
Cell[545920, 10664, 183, 3, 44, "CodeText",ExpressionUUID->"0f443150-2bbe-4524-95ee-feefa4f7b66a"],
Cell[546106, 10669, 362, 7, 52, "Input",ExpressionUUID->"0cb5071c-4192-4b56-a72a-17d2acfdd146"],
Cell[546471, 10678, 319, 7, 44, "CodeText",ExpressionUUID->"bf62d293-e4b9-4ce3-a61b-58152071bb46"],
Cell[546793, 10687, 374, 8, 52, "Input",ExpressionUUID->"605026f8-20eb-499b-bb27-ac689c2a266f"],
Cell[547170, 10697, 540, 12, 52, "Input",ExpressionUUID->"8ba1780b-c39a-493b-a16c-2e145456dc78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[547747, 10714, 183, 3, 114, "Subsection",ExpressionUUID->"fb27d666-a53c-48f3-a236-5b56033257b9"],
Cell[547933, 10719, 192, 3, 44, "CodeText",ExpressionUUID->"94d9658a-cfa6-475d-a67a-157738fb816f"],
Cell[548128, 10724, 257, 5, 52, "Input",ExpressionUUID->"7065ec11-4d69-4f4c-b882-459ee0e14ab0"],
Cell[548388, 10731, 185, 3, 44, "CodeText",ExpressionUUID->"64263a67-52d2-4176-a374-2727dc5e5e01"],
Cell[548576, 10736, 396, 9, 52, "Input",ExpressionUUID->"ae3e7ac5-1d90-4bdc-b69c-3918fd16f6ef"],
Cell[548975, 10747, 268, 6, 44, "CodeText",ExpressionUUID->"184d8ad3-4369-4926-9915-96ccd377fc82"],
Cell[549246, 10755, 431, 10, 52, "Input",ExpressionUUID->"ffc234cd-67f5-400e-96b0-06df630de770"],
Cell[549680, 10767, 506, 11, 52, "Input",ExpressionUUID->"7c58f797-4873-4370-b99f-c13813d2650a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[550223, 10783, 203, 3, 180, "Subsection",ExpressionUUID->"c60b4300-43ab-4f4a-8c54-5276b2b73517"],
Cell[550429, 10788, 250, 6, 44, "CodeText",ExpressionUUID->"a54cc53c-76c7-486e-8306-3775d257e6ff"],
Cell[550682, 10796, 258, 4, 52, "Input",ExpressionUUID->"f8cf2da1-55e4-46e5-b6bd-eea9d1430590"],
Cell[550943, 10802, 217, 5, 44, "CodeText",ExpressionUUID->"1f239948-acd2-4019-8596-cb985a2f73f0"],
Cell[551163, 10809, 367, 8, 52, "Input",ExpressionUUID->"eee95797-7624-43b3-a105-656b79554da9"],
Cell[551533, 10819, 231, 4, 44, "CodeText",ExpressionUUID->"1276b2f7-5ce3-46ff-ad97-e42aac35acc5"],
Cell[551767, 10825, 338, 7, 52, "Input",ExpressionUUID->"89bf1a31-79f2-4f7c-b7d6-719e104a5792"],
Cell[552108, 10834, 268, 6, 44, "CodeText",ExpressionUUID->"9b17698c-f3c2-41ca-bc33-67061b00aa15"],
Cell[552379, 10842, 687, 16, 52, "Input",ExpressionUUID->"420787f7-65a6-40d8-814a-78e1067c445a"],
Cell[553069, 10860, 187, 3, 44, "CodeText",ExpressionUUID->"e3f8da66-8df2-4604-a051-c21fa414774b"],
Cell[553259, 10865, 524, 12, 52, "Input",ExpressionUUID->"0c3d1592-1d1b-4736-bf1f-0634c91efea7"],
Cell[553786, 10879, 266, 6, 44, "Text",ExpressionUUID->"75df22ba-cd1c-4250-bbd9-6bfd58a40c8e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[554089, 10890, 167, 3, 114, "Subsection",ExpressionUUID->"427001b2-d9b2-49fe-9164-07c203df59f7"],
Cell[554259, 10895, 249, 4, 44, "CodeText",ExpressionUUID->"c66b8eee-ee20-401b-a97d-eb24504ac2d8"],
Cell[554511, 10901, 319, 7, 52, "Input",ExpressionUUID->"e99446ce-605b-486c-9a14-1867c0e141e5"],
Cell[554833, 10910, 361, 7, 44, "CodeText",ExpressionUUID->"43fa2843-3fcf-41d3-840b-21c5c646c463"],
Cell[555197, 10919, 461, 10, 52, "Input",ExpressionUUID->"8c449c19-09f3-45d4-bd4f-3af31a2615d4"],
Cell[555661, 10931, 404, 7, 44, "CodeText",ExpressionUUID->"676564f7-e4fe-4e5b-9268-2ef2747998c4"],
Cell[556068, 10940, 590, 14, 52, "Input",ExpressionUUID->"029e9c54-8b7a-4e5d-8736-28ffea982fe9"],
Cell[556661, 10956, 558, 11, 52, "Input",ExpressionUUID->"cfba1a40-bd8d-45ed-bec4-34c22a06cfe5"],
Cell[557222, 10969, 184, 3, 44, "CodeText",ExpressionUUID->"d5acc04a-0166-4329-91c2-ccb2277b4f78"],
Cell[557409, 10974, 430, 10, 52, "Input",ExpressionUUID->"bc4169ca-d130-4db6-9b14-2540717b3394"],
Cell[557842, 10986, 319, 7, 73, "Text",ExpressionUUID->"3fee5913-ade6-454c-b83f-49b31860256d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[558198, 10998, 228, 4, 114, "Subsection",ExpressionUUID->"0cbf22a7-c9b1-4e06-a9b6-cfc6b64ef767"],
Cell[558429, 11004, 490, 12, 44, "CodeText",ExpressionUUID->"54e372e6-947b-4867-92bc-9731ab80f5b3"],
Cell[558922, 11018, 283, 5, 52, "Input",ExpressionUUID->"c212a988-36ad-4d3c-a124-7613ee63ff72"],
Cell[559208, 11025, 219, 5, 44, "CodeText",ExpressionUUID->"1ca04d89-0300-4d2e-94e9-03c947e0f3b4"],
Cell[559430, 11032, 216, 3, 52, "Input",ExpressionUUID->"7b9a7a25-ed5a-4017-8e15-8bae448ff18b"],
Cell[559649, 11037, 77, 0, 171, "EndOfSlide",ExpressionUUID->"ac528fd2-b42b-4349-bddb-1d5dc7e203df"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[559787, 11044, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"8636fa35-9052-4d77-94fc-9506baaaa6df"],
Cell[CellGroupData[{
Cell[559901, 11048, 105, 1, 174, "Section",ExpressionUUID->"cd6654d9-e024-4629-b678-1a18a46be463",
 CellTags->"Examples"],
Cell[560009, 11051, 435, 8, 73, "Text",ExpressionUUID->"7b829f00-5e4c-407e-8b33-522e30589031",
 CellTags->"Examples"],
Cell[560447, 11061, 368, 7, 44, "Item",ExpressionUUID->"9bb6fb0c-5926-43dd-8181-3d661fa3bb96",
 CellTags->"Examples"],
Cell[560818, 11070, 190, 2, 44, "Item",ExpressionUUID->"2b1cdb10-7174-4cc7-8618-d3bfb2fa96f0",
 CellTags->"Examples"],
Cell[561011, 11074, 177, 2, 44, "Item",ExpressionUUID->"e2adeb68-3516-44be-8a4c-34bb38f5e5f7",
 CellTags->"Examples"],
Cell[561191, 11078, 77, 0, 171, "EndOfSlide",ExpressionUUID->"da86ffb7-ee7d-4a0d-af1a-fdd24ae66db7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[561317, 11084, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"89fe6192-e2c0-4a2d-abbe-9fd41f195003"],
Cell[CellGroupData[{
Cell[561431, 11088, 434, 6, 288, "Section",ExpressionUUID->"a1e070e7-87ab-434b-85f8-1ec5c442a065",
 CellTags->"Data Collections"],
Cell[561868, 11096, 229, 6, 44, "Text",ExpressionUUID->"c981b1d5-1698-413b-8017-eaccf3b37bb3"],
Cell[562100, 11104, 201, 3, 44, "CodeText",ExpressionUUID->"dc232ab9-eaa3-404c-8371-1180f64c45b5"],
Cell[562304, 11109, 265, 4, 52, "Input",ExpressionUUID->"903d9b2a-47f5-4401-8cb1-6d4c7d2a90d8"],
Cell[562572, 11115, 180, 3, 44, "CodeText",ExpressionUUID->"6cfffb9b-3bfb-4593-9724-b1c025a61137"],
Cell[562755, 11120, 261, 4, 52, "Input",ExpressionUUID->"cb6ec408-3df9-4e49-83fd-577c6077eb22"],
Cell[563019, 11126, 287, 4, 44, "CodeText",ExpressionUUID->"865a541c-ff47-45a1-9460-b48c6dc6b600"],
Cell[563309, 11132, 243, 4, 52, "Input",ExpressionUUID->"564dc92b-ed6f-4116-8a62-37adebb1f7f0"],
Cell[563555, 11138, 477, 11, 44, "CodeText",ExpressionUUID->"7c3e2109-4f44-46ba-8169-0649a9c30ada"],
Cell[564035, 11151, 543, 11, 52, "Input",ExpressionUUID->"9c38a328-cdc9-48f8-8cc2-517641e4762e"],
Cell[564581, 11164, 377, 11, 44, "CodeText",ExpressionUUID->"558cf653-2093-45b1-83b2-b0a3aea72512"],
Cell[564961, 11177, 887, 17, 52, "Input",ExpressionUUID->"af2c73b6-5b81-4939-a081-d7d82b718320"],
Cell[565851, 11196, 244, 6, 44, "CodeText",ExpressionUUID->"1e14d19d-a85b-4686-a310-8cbe55971c62"],
Cell[566098, 11204, 301, 7, 52, "Input",ExpressionUUID->"7b1601e6-3ff8-4d4f-bd88-94bccb2dabb0"],
Cell[566402, 11213, 307, 7, 44, "CodeText",ExpressionUUID->"cb3ef489-868b-4336-8bb9-ef19108c4e96"],
Cell[566712, 11222, 285, 6, 52, "Input",ExpressionUUID->"9aa492f4-c5b6-48c4-975e-2b3807474197"],
Cell[567000, 11230, 385, 11, 44, "CodeText",ExpressionUUID->"286acb50-60a2-4adb-af31-dd433799d445"],
Cell[567388, 11243, 922, 19, 52, "Input",ExpressionUUID->"c2de4215-2ad3-4af1-b548-ac891df6caf8"],
Cell[568313, 11264, 352, 10, 44, "CodeText",ExpressionUUID->"13c82aad-7f3c-41eb-8740-24b4dafd42ce"],
Cell[568668, 11276, 652, 15, 52, "Input",ExpressionUUID->"497ba242-dd8f-4dde-80e9-334ef6a0631a"],
Cell[569323, 11293, 461, 11, 44, "CodeText",ExpressionUUID->"1dbad9ca-d9d1-4d8f-b251-ca99531ae82c"],
Cell[569787, 11306, 1029, 19, 52, "Input",ExpressionUUID->"19ff8d91-2aae-461c-b169-96bb8cc3f154",
 CellTags->"Data Collections"],
Cell[570819, 11327, 562, 14, 44, "Text",ExpressionUUID->"18bb26b9-cd28-4d22-9d0c-f02d4f53d8a9",
 CellTags->"Data Collections"],
Cell[571384, 11343, 247, 4, 44, "CodeText",ExpressionUUID->"cff4e67f-c3e0-453c-ad43-9299b5445503"],
Cell[571634, 11349, 252, 5, 52, "Input",ExpressionUUID->"c5d3e40e-327b-4061-90dc-4fc566564b96"],
Cell[571889, 11356, 1797, 44, 391, "Input",ExpressionUUID->"fe9e6587-7ed9-42bb-b9a1-0c8468590d1b"],
Cell[573689, 11402, 324, 6, 44, "CodeText",ExpressionUUID->"41508c5b-bacf-492a-9461-0fa5d4faa111"],
Cell[574016, 11410, 2583, 57, 365, "Input",ExpressionUUID->"7c1a1ca9-0903-40c0-aa79-5d859843c589"],
Cell[576602, 11469, 266, 6, 44, "CodeText",ExpressionUUID->"dbc4f999-27bc-4e18-9dfd-a122e87f6f7e"],
Cell[576871, 11477, 948, 19, 183, "Input",ExpressionUUID->"1f1c5726-d633-4d7c-923d-db430da8bd4b"],
Cell[577822, 11498, 77, 0, 171, "EndOfSlide",ExpressionUUID->"3541b615-cf8d-44a2-aef6-d61be6e32636"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[577948, 11504, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"83869712-651a-4190-97ea-74c8800921a9"],
Cell[CellGroupData[{
Cell[578062, 11508, 320, 8, 401, "Section",ExpressionUUID->"081cc3f5-4819-464b-9a62-6c38e595a170",
 CellTags->"Data Collections"],
Cell[578385, 11518, 1036, 26, 73, "Text",ExpressionUUID->"836f4e64-9485-4a92-8a7a-391e4467fd5b"],
Cell[579424, 11546, 180, 4, 52, "Input",ExpressionUUID->"e4235233-cf9c-4297-9663-5c706aff951f"],
Cell[579607, 11552, 177, 3, 44, "CodeText",ExpressionUUID->"4914a0d4-c680-4fc2-bd47-a5c44b9bec97"],
Cell[579787, 11557, 2790, 56, 213, "Input",ExpressionUUID->"02ff01f7-4126-44fe-9660-4c548c62a410"],
Cell[582580, 11615, 405, 11, 44, "CodeText",ExpressionUUID->"7067deab-873f-46c1-b4d9-9743824cfae7"],
Cell[582988, 11628, 1198, 26, 183, "Input",ExpressionUUID->"5b07ce07-4189-4fa2-b08d-3ca772719b33"],
Cell[584189, 11656, 665, 14, 44, "CodeText",ExpressionUUID->"4f101df6-fd2b-41b8-83e1-49066625ad9e"],
Cell[584857, 11672, 3888, 83, 434, "Input",ExpressionUUID->"d226c232-c9fe-4bcf-9896-f6217bc55457"],
Cell[588748, 11757, 421, 8, 63, "Input",ExpressionUUID->"fa566803-6f2c-45ed-b017-efccab247031"],
Cell[589172, 11767, 542, 9, 44, "CodeText",ExpressionUUID->"84dee4e0-b1d4-4aa6-9554-5ddc8adaf76b"],
Cell[589717, 11778, 1532, 34, 183, "Input",ExpressionUUID->"0a678385-1079-41c6-9d56-83cf6f43501c"],
Cell[591252, 11814, 325, 7, 44, "CodeText",ExpressionUUID->"d1d98182-a138-43d7-a6e1-dd78ea7875b2"],
Cell[591580, 11823, 2608, 54, 213, "Input",ExpressionUUID->"53b73662-1a0a-424b-88f2-2b0c4b978a61"],
Cell[594191, 11879, 168, 3, 44, "CodeText",ExpressionUUID->"0aae4b1f-6215-4c4a-8707-4e11340a98c2"],
Cell[594362, 11884, 1417, 23, 209, "Input",ExpressionUUID->"96456550-48af-49b3-a4c3-1d98b2b12461"],
Cell[595782, 11909, 441, 12, 44, "CodeText",ExpressionUUID->"453716a8-b867-4f5c-93c1-47a8003141fe"],
Cell[596226, 11923, 1560, 26, 235, "Input",ExpressionUUID->"3d1697a6-93aa-46de-86fc-12e7c573d50f"],
Cell[597789, 11951, 471, 11, 44, "CodeText",ExpressionUUID->"62215bbc-df40-4312-9c3d-687304d405fa"],
Cell[598263, 11964, 692, 15, 52, "Input",ExpressionUUID->"d8d2dc85-18e0-4aaf-86c0-2e97e60881ff"],
Cell[598958, 11981, 629, 12, 44, "CodeText",ExpressionUUID->"d0d7c72f-c236-4bb2-9ada-561fbb4afa0e"],
Cell[599590, 11995, 2552, 54, 261, "Input",ExpressionUUID->"ef1d146b-6b85-4e3d-82df-db2e53dcabb9"],
Cell[602145, 12051, 77, 0, 171, "EndOfSlide",ExpressionUUID->"77f35575-229c-4e8e-9829-ec02e0e3d990"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[602271, 12057, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"07b594fe-4313-43c9-b8f3-64cf631de409"],
Cell[CellGroupData[{
Cell[602385, 12061, 461, 7, 288, "Section",ExpressionUUID->"a0d0e878-1f41-4b71-b9b6-649ecaa7bb07",
 CellTags->"Data Collections"],
Cell[CellGroupData[{
Cell[602871, 12072, 163, 3, 114, "Subsection",ExpressionUUID->"cb5fbfd5-e379-40f3-8755-eb433de8c6cc"],
Cell[603037, 12077, 256, 5, 135, "Text",ExpressionUUID->"4da3e7cf-dff0-403a-8c3e-6f1f352e4ac8"],
Cell[603296, 12084, 265, 6, 55, "CodeText",ExpressionUUID->"ce0d296b-60f3-4012-a231-aba0f3c0ba25"],
Cell[603564, 12092, 2718, 57, 293, "Input",ExpressionUUID->"c96d4988-fbb6-4310-b96c-08d4858084de"],
Cell[606285, 12151, 200, 3, 64, "Input",ExpressionUUID->"88ca4a3e-b08f-429e-af25-8ffe3f301557"],
Cell[606488, 12156, 231, 5, 95, "CodeText",ExpressionUUID->"8dcdc1cf-9ae2-4f56-8659-34133cbbf4a2"],
Cell[606722, 12163, 448, 11, 185, "Input",ExpressionUUID->"d3369869-07e6-4589-bcd0-5a183013e11b"],
Cell[607173, 12176, 447, 10, 95, "CodeText",ExpressionUUID->"1b7b82f4-cee9-4f21-bd46-842090d7aa38"],
Cell[607623, 12188, 472, 11, 64, "Input",ExpressionUUID->"3ee6c757-4b39-4728-84f9-ca53faa8096d"],
Cell[608098, 12201, 261, 6, 95, "CodeText",ExpressionUUID->"ea628f00-e02e-4fcf-9977-5936ee6abb05"],
Cell[608362, 12209, 485, 12, 64, "Input",ExpressionUUID->"93859b52-1b20-43a5-82c9-868f91a23868"],
Cell[608850, 12223, 190, 3, 55, "CodeText",ExpressionUUID->"5fd458f3-32d1-45b5-8e08-7f9a44ac2ba1"],
Cell[609043, 12228, 745, 18, 145, "Input",ExpressionUUID->"9bc3db24-ae43-496d-bb4e-045097f2e6a5"],
Cell[609791, 12248, 296, 7, 55, "CodeText",ExpressionUUID->"7b39f96f-f8aa-4799-9c2f-507ff907bb36"],
Cell[610090, 12257, 299, 5, 64, "Input",ExpressionUUID->"311ba98e-4f8f-4b59-aafa-59630748c17e"],
Cell[610392, 12264, 387, 8, 95, "CodeText",ExpressionUUID->"636c0d9e-dba9-4871-9e88-f9a8437b41c4"],
Cell[610782, 12274, 699, 17, 145, "Input",ExpressionUUID->"806b9356-3f5d-41d9-9162-b8ee836c9a9a"],
Cell[611484, 12293, 268, 4, 55, "CodeText",ExpressionUUID->"ccff91f8-f545-497f-8b06-2e0b6dd0215b"],
Cell[611755, 12299, 260, 4, 64, "Input",ExpressionUUID->"2b3deaf5-d2c9-44ee-8fbd-3a241d994a44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[612052, 12308, 168, 3, 114, "Subsection",ExpressionUUID->"4fd8eee9-e548-4f8a-8df9-f033f107786f"],
Cell[612223, 12313, 379, 8, 135, "CodeText",ExpressionUUID->"2082445e-733e-4ff1-8ca0-e2304bbaf24b"],
Cell[612605, 12323, 700, 18, 145, "Input",ExpressionUUID->"6cb0cd59-cf8f-4b65-be54-b9f9d7fe08b7"],
Cell[613308, 12343, 541, 9, 214, "Text",ExpressionUUID->"035aafd6-6d45-4399-9988-d7aee9c8319f"],
Cell[613852, 12354, 737, 22, 97, "CodeText",ExpressionUUID->"d0210702-0c9e-40d5-92b0-7f3d22f19ced"],
Cell[614592, 12378, 791, 18, 185, "Input",ExpressionUUID->"3eac4020-adb2-432d-b43f-c6c8a6765465"],
Cell[615386, 12398, 217, 3, 64, "Input",ExpressionUUID->"09378d20-5ac6-4ef2-9c8c-d9159fd92859"],
Cell[615606, 12403, 576, 11, 105, "Input",ExpressionUUID->"f59a6c38-a8c8-46d8-b204-ccd65649f2d0"],
Cell[616185, 12416, 221, 3, 64, "Input",ExpressionUUID->"0253d26f-4a5b-40f7-bc09-a6e429624fb1"],
Cell[616409, 12421, 739, 15, 215, "Text",ExpressionUUID->"794ce673-94d3-473b-892a-3265d186f678"],
Cell[617151, 12438, 219, 5, 55, "CodeText",ExpressionUUID->"a4f41b3a-b3db-4d0f-af9d-a7e44b5e76b9"],
Cell[617373, 12445, 519, 11, 105, "Input",ExpressionUUID->"4c8fce7a-5167-41eb-98b2-d4ba1bdb3e88"],
Cell[617895, 12458, 279, 4, 64, "Input",ExpressionUUID->"84b794be-e1a0-44c6-b0e3-0dc559b90ef8"],
Cell[618177, 12464, 327, 7, 135, "Text",ExpressionUUID->"bd584a63-586b-4239-a1e0-35217ca5b0e8"],
Cell[618507, 12473, 418, 9, 135, "Text",ExpressionUUID->"33354afd-b111-40c2-9a13-7fe7aaa73c42"],
Cell[618928, 12484, 334, 7, 135, "CodeText",ExpressionUUID->"7a158ec8-3717-4792-9d9f-e34b6e6ec536"],
Cell[619265, 12493, 199, 3, 64, "Input",ExpressionUUID->"694f18ac-36b1-4732-9f6a-f3bb0a5154ca"],
Cell[619467, 12498, 578, 12, 215, "Text",ExpressionUUID->"a1b304ed-b6ac-4d19-8f60-44f6c5b6c291"],
Cell[620048, 12512, 610, 15, 185, "Input",ExpressionUUID->"ee9334e1-3038-4260-8fb7-42112bcd29ac"],
Cell[620661, 12529, 291, 7, 95, "Text",ExpressionUUID->"6e83c1ac-c53e-4beb-bba3-247f62d8c8e9"],
Cell[620955, 12538, 77, 0, 171, "EndOfSlide",ExpressionUUID->"eade411d-6e66-4e3f-9fbc-5e02ac90b2e8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[621093, 12545, 89, 0, 1, "SlideShowNavigationBar",ExpressionUUID->"6d96e334-3f16-4a40-95ec-e3c8e3e42366"],
Cell[CellGroupData[{
Cell[621207, 12549, 169, 2, 174, "Section",ExpressionUUID->"9f266981-a22f-4f0f-87b2-d3ea74fb47dc",
 CounterAssignments->{{"Chapter", 7}, {"ExerciseNumber", 0}},
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[621401, 12555, 347, 7, 114, "Subsection",ExpressionUUID->"93f13363-17b4-4c84-84da-4712a9f1a1a0",
 CellTags->{"Exercises", "Writing Data"}],
Cell[CellGroupData[{
Cell[621773, 12566, 677, 15, 71, "Item",ExpressionUUID->"e5c3f47a-9096-4204-8df1-93101c70709b",
 CellTags->{"Exercises", "Writing Data"}],
Cell[622453, 12583, 884, 28, 52, "Input",ExpressionUUID->"79fe9011-08b0-4d42-953f-846915ac4898",
 CellTags->{"Exercises", "Writing Data"}]
}, Open  ]],
Cell[623352, 12614, 2472, 62, 53, "Text",ExpressionUUID->"f9f4aa5c-6f38-4629-b5e7-52d88667033f"],
Cell[625827, 12678, 291, 7, 44, "Item",ExpressionUUID->"c4d27e3a-5c36-4c6c-95a4-1c5a390d7991",
 CellTags->{"Exercises", "Writing Data"}],
Cell[626121, 12687, 1457, 37, 53, "Text",ExpressionUUID->"5161be83-e362-4aca-856e-ba0d5daceb8d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[627615, 12729, 260, 5, 114, "Subsection",ExpressionUUID->"7cb51b71-07d2-415f-b9ed-92e3412785b9",
 CellTags->{"Exercises", "Exporting and Importing Images"}],
Cell[627878, 12736, 690, 13, 73, "CodeText",ExpressionUUID->"33a4ee94-f3c8-4dc0-8a59-94751c769378",
 CellTags->{"Exercises", "Exporting and Importing Images"}],
Cell[628571, 12751, 190, 4, 52, "Input",ExpressionUUID->"e0d5a946-7730-4e28-b7f4-ed0998ec91d3",
 PageBreakWithin->True],
Cell[628764, 12757, 164, 4, 52, "Input",ExpressionUUID->"744a4291-12ec-4b41-b65a-e49ffd556472",
 CellTags->{"Exercises", "Exporting and Importing Images"}],
Cell[CellGroupData[{
Cell[628953, 12765, 491, 12, 44, "Item",ExpressionUUID->"71b96c67-521f-4ec8-97bc-6a3ef10aa1ce",
 CellTags->{"Exercises", "Exporting and Importing Images"}],
Cell[629447, 12779, 416, 12, 52, "Input",ExpressionUUID->"3db0d9c3-c29a-4aa8-a05e-99422af64b42",
 CellTags->{"Exercises", "Exporting and Importing Images"}]
}, Open  ]],
Cell[629878, 12794, 637, 12, 71, "Item",ExpressionUUID->"8b87449c-3da9-439a-ae2d-33c23dba57de",
 CellTags->{"Exercises", "Exporting and Importing Images"}],
Cell[630518, 12808, 19763, 350, 53, "Text",ExpressionUUID->"582a8374-2ac1-4965-96c9-edf760b322da"],
Cell[CellGroupData[{
Cell[650306, 13162, 461, 10, 71, "Item",ExpressionUUID->"5a735791-5388-4b3b-9c5f-8adc17bdab21",
 CellTags->{"Exercises", "Exporting and Importing Images"}],
Cell[650770, 13174, 580, 17, 52, "Input",ExpressionUUID->"f69867e0-77f9-465d-9281-8ff9e204f0d2",
 CellTags->{"Exercises", "Exporting and Importing Images"}]
}, Open  ]],
Cell[651365, 13194, 2211, 53, 53, "Text",ExpressionUUID->"72fcf17a-d4b6-4a92-b19f-513b2d65419f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[653613, 13252, 244, 5, 114, "Subsection",ExpressionUUID->"b83845f1-b3ad-4afa-b581-c2f18daf91ab",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[653860, 13259, 373, 9, 44, "Text",ExpressionUUID->"d77e3ff8-0113-4f86-84a8-1038e0b10cf6",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[654236, 13270, 619, 15, 73, "CodeText",ExpressionUUID->"b08d88fd-e38a-420d-bce7-7478da33723a",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[654858, 13287, 503, 15, 79, "Input",ExpressionUUID->"188af498-810f-4e3c-85a9-fc665e29d6d0",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[655364, 13304, 580, 15, 44, "CodeText",ExpressionUUID->"005701df-8063-430f-9564-0abdbce319c2",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[655947, 13321, 825, 24, 52, "Input",ExpressionUUID->"302b0df1-c31d-499a-86a4-9506895437c1",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[656775, 13347, 255, 6, 44, "CodeText",ExpressionUUID->"475cf7a7-ca18-4778-8563-927a572851d4",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[657033, 13355, 366, 9, 52, "Input",ExpressionUUID->"c7e41146-5d9d-4ed8-854c-c873af632506",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[657402, 13366, 526, 11, 73, "CodeText",ExpressionUUID->"e3a03c50-0d64-415a-a5aa-feebe16789a7",
 CellTags->{"Exercises", "Exporting and Importing Data"}],
Cell[657931, 13379, 642, 16, 73, "Text",ExpressionUUID->"d6793f1c-00d6-49c1-9be8-e9871b6fd163"],
Cell[658576, 13397, 790, 20, 53, "Text",ExpressionUUID->"72ae9250-ff19-4b69-bd48-406e113ba09e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[659403, 13422, 232, 5, 114, "Subsection",ExpressionUUID->"80212623-4378-4cb3-bbbc-6a20c168b7d0",
 CellTags->{"Exercises", "Using Data Collections"}],
Cell[659638, 13429, 584, 16, 73, "Text",ExpressionUUID->"5168f1d5-25d0-49c3-ae02-84567ad3fb7a",
 CellTags->{"Exercises", "Using Data Collections"}],
Cell[660225, 13447, 12520, 257, 53, "Text",ExpressionUUID->"19e03b4d-9170-4512-bfec-ce2905d8dfc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[672782, 13709, 222, 5, 114, "Subsection",ExpressionUUID->"e5f11a98-7658-4aba-8369-bb48a3a9fdf9",
 CellTags->{"Exercises", "Working with Data"}],
Cell[673007, 13716, 612, 12, 102, "Text",ExpressionUUID->"09736e18-3694-453a-9608-b46c90adc08a",
 CellTags->{"Exercises", "Working with Data"}],
Cell[673622, 13730, 269, 7, 44, "CodeText",ExpressionUUID->"f42bca1c-1b29-4986-a05b-c1e0a171c4ae",
 CellTags->{"Exercises", "Working with Data"}],
Cell[673894, 13739, 487, 13, 52, "Input",ExpressionUUID->"cf3ac2c2-a527-4969-82f0-21cf7c93ff00",
 CellTags->{"Exercises", "Working with Data"}],
Cell[674384, 13754, 413, 10, 44, "CodeText",ExpressionUUID->"c5487e84-bcea-4f90-b337-2406e7f3514f",
 CellTags->"Working with Data"],
Cell[674800, 13766, 287, 6, 52, "Input",ExpressionUUID->"4640cc4d-40fc-4792-a10c-6ac4e55e7f00",
 CellTags->"Working with Data"],
Cell[675090, 13774, 535, 12, 71, "Item",ExpressionUUID->"353a1149-0f69-4345-9f74-e68e7c661a47",
 CellTags->{"Exercises", "Working with Data"}],
Cell[675628, 13788, 5917, 138, 53, "Text",ExpressionUUID->"11e01b03-4410-4452-ac53-3f1a7f7d5cb6"],
Cell[681548, 13928, 236, 7, 44, "Item",ExpressionUUID->"9bd003e5-5ee7-44df-95f4-4f80ed33046b",
 CellTags->{"Exercises", "Working with Data"}],
Cell[681787, 13937, 13385, 292, 53, "Text",ExpressionUUID->"5469cbae-854e-4ec0-9f5d-ed4599afd22e"],
Cell[695175, 14231, 210, 6, 44, "Item",ExpressionUUID->"e1315c58-1319-438b-92a2-dbafb7c23167",
 CellTags->{"Exercises", "Working with Data"}],
Cell[695388, 14239, 32908, 764, 53, "Text",ExpressionUUID->"7815b396-7e46-4946-9a7d-d0be6f1bfc49"]
}, Open  ]],
Cell[CellGroupData[{
Cell[728333, 15008, 255, 5, 114, "Subsection",ExpressionUUID->"df63b8e3-5c02-46c7-8848-f81550485505",
 CellTags->{"Exercises", "Saving Results from DE"}],
Cell[728591, 15015, 725, 21, 44, "Text",ExpressionUUID->"313c463f-737a-40e1-833e-afc40f55efbe",
 CellTags->{"Exercises", "Saving Results from DE"}],
Cell[729319, 15038, 543, 18, 52, "Input",ExpressionUUID->"f04ff86e-2c34-4ae7-bd36-f3031f8fb7f9",
 CellTags->{"Exercises", "Saving Results from DE"}],
Cell[729865, 15058, 577, 12, 73, "Text",ExpressionUUID->"5a5845d1-cca9-4af2-a5dd-a8bafc6f61cf",
 CellTags->{"Exercises", "Saving Results from DE"}],
Cell[730445, 15072, 486, 16, 52, "Input",ExpressionUUID->"f7ba58f0-8da9-46c9-80ac-17f005b363aa",
 CellTags->{"Exercises", "Saving Results from DE"}],
Cell[730934, 15090, 690, 18, 73, "Text",ExpressionUUID->"7590e953-bf9c-41a1-9b2f-d4637a233f21",
 CellTags->{"Exercises", "Saving Results from DE"}],
Cell[731627, 15110, 2763, 64, 53, "Text",ExpressionUUID->"ed8b5e01-3bac-4719-965d-aa68a122b552"],
Cell[734393, 15176, 371, 11, 44, "Text",ExpressionUUID->"e2948bec-f7cc-441f-bd60-e028c4334b45"],
Cell[734767, 15189, 397, 11, 44, "Text",ExpressionUUID->"7c2f8ab8-5fbf-43a5-9c91-19b6f986b0b1"],
Cell[735167, 15202, 934, 24, 73, "Text",ExpressionUUID->"85258830-1c28-4587-9231-cf946a27e6a0"],
Cell[736104, 15228, 5194, 126, 53, "Text",ExpressionUUID->"680ae903-c1e1-4a7b-a3f4-45eab8a7b3d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[741335, 15359, 237, 4, 114, "Subsection",ExpressionUUID->"f13d250e-74ba-4bad-9ae8-4f7259c95831",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[741575, 15365, 287, 7, 44, "CodeText",ExpressionUUID->"d24483e3-750c-479b-a414-5df6c72c5920",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[741865, 15374, 235, 6, 52, "Input",ExpressionUUID->"c220cb43-5de0-49d6-8b7f-632125dfbd22",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[742103, 15382, 381, 12, 52, "Input",ExpressionUUID->"8bf33170-7429-4bfc-b7a5-bc35108b13e0",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[742487, 15396, 206, 6, 52, "Input",ExpressionUUID->"4cf0d87c-2253-4ae1-a92e-300bd6f60f88",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[742696, 15404, 206, 6, 52, "Input",ExpressionUUID->"a3214aff-5cef-4a05-9ef0-6aa50695f993",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[742905, 15412, 429, 8, 73, "Text",ExpressionUUID->"937dedd8-2f12-4c00-a1c4-dcd3c05ec0cb",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[743337, 15422, 938, 19, 131, "Text",ExpressionUUID->"f8519804-20dc-4caa-a8f6-3d474feeb5e3",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[744278, 15443, 139, 3, 52, "Input",ExpressionUUID->"ab6345b9-2cf5-4579-a0ca-22cb5f1f9ead",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[744420, 15448, 322, 7, 73, "Text",ExpressionUUID->"dfa1f12c-b519-409b-a944-a8318f40d6e8",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[744745, 15457, 287, 9, 126, "Program",ExpressionUUID->"dfa7d3f6-b9f1-434a-b184-4da057f19a16",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[745035, 15468, 952, 24, 73, "Text",ExpressionUUID->"1b74546a-14a6-4630-bf48-e0755b4ceac9",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[745990, 15494, 511, 11, 73, "Text",ExpressionUUID->"54580671-a5f5-4f00-9cef-9327a5b7df41",
 CellTags->{"Exercises", "Saving Notebooks"}],
Cell[746504, 15507, 255, 6, 44, "Text",ExpressionUUID->"12501498-5646-470c-911c-47cefc40c2ed",
 CellTags->{"Exercises", "Saving Notebooks"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[746796, 15518, 241, 5, 114, "Subsection",ExpressionUUID->"60984a9c-f454-4aa0-9d49-7cf4faf2b86f",
 CellTags->{"Exercises", "Tables of File Info"}],
Cell[747040, 15525, 759, 16, 73, "Text",ExpressionUUID->"a36e6031-edd0-40ce-a2db-4fe324926ac8",
 CellTags->{"Exercises", "Tables of File Info"}],
Cell[747802, 15543, 1364, 39, 267, "Output",ExpressionUUID->"939cedd3-abcd-4412-b039-e8b525a90a47"],
Cell[749169, 15584, 415, 10, 44, "Text",ExpressionUUID->"6c19b73c-aa2a-4548-8203-a1e4cdec8f62",
 CellTags->{"Exercises", "Tables of File Info"}],
Cell[749587, 15596, 357, 7, 44, "Text",ExpressionUUID->"b8fb78c5-1797-4e3c-a157-539f97d37513",
 CellTags->{"Exercises", "Tables of File Info"}],
Cell[749947, 15605, 374, 11, 52, "Input",ExpressionUUID->"f510eb70-b512-4088-85ac-4c03cbd85714",
 CellTags->{"Exercises", "Tables of File Info"}],
Cell[750324, 15618, 4976, 124, 53, "Text",ExpressionUUID->"36c8e953-6e4c-41ae-812f-8f54036dda10"],
Cell[755303, 15744, 77, 0, 171, "EndOfSlide",ExpressionUUID->"867715e5-6090-43fa-b0b9-6777ce35ef62"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)


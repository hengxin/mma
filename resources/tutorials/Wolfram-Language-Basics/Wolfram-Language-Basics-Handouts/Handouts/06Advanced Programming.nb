(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    546713,      13476]
NotebookOptionsPosition[    350253,      10273]
NotebookOutlinePosition[    466642,      12209]
CellTagsIndexPosition[    465701,      12182]
WindowTitle->Advanced Programming
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar", "FirstSlide",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"ae861ed8-5fa1-4088-84fd-2651cc7b368a"],

Cell[BoxData[
 StyleBox[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztXQfYHUXVhhAIndAOVbj00DuEIiQQurQA0jFAIIiEkoA0hY+qQGjSUSBS
BWnySy8JoAgiGEOVGnoTfwQU+Gn/vM6Z3LnzzezObPnu/ZLzPs+BfLszZ87u
3t13yplzFtvnkKH795lmmmlGz6j+M3TvIwePGrX30Tv0V3/sdPDoH444eL/h
Wxx8+H4j9hs1cJ/p1MHhSh6adppp+k7THtCyG82qZA0luys5Usk5Sn6j5CEl
Lyh5TclHSj5W8q0l3/DxD5VMUvKsknuUXKXkNCWHKtlRyfJKpm/T5QkEAoFA
MBmKj+ZVsh3z1O3MX98GBDz3rpJXlExQ8qSS8Uoe4P8/yMcnsp5/Zuj6Uskz
Sn6r5KdKNlIyc7vvh0AgEAimbCiumUvJbkp+qeR5Dz+9y7z2CyUHKtmSx4YL
KEkeoqo6/ZQ0lKyjZKiSUUouV/Kokn85bX/Fx8dwu/3quAcCgUAgmLqg+GQR
JSOV3M/jMMM7n/K85XE8HpsrR08fJXMrWUzJKkrWVzLIkYFKVlSyqJLZI2xb
iMejY5gDbfs+UXID8/Yc1d0RgUAgEEzpULzRX8kBSv7kjLkeV3KsktWVTOep
Ny/zGcaCZym5hec/31HydcY8Z0i+UPI6c9x1Sk5VMkzJmkpm9bQ/M3My2n7F
mUe9lTlT1hYFAoFA4IXiiJV4zvPf1FzTu595bWGn7Aw8pjtGyc1K3irAc2UE
tmFu9kolP1KygpJpPdeD9cOJVj1w8glKFuzZuysQCASCToXihMGk5zgNV7zG
4z6X+xZXcrCSO5X8p4d5L0Y+4HHjHkrmcWxfTcl51PRT/T8llykZ0LN3WyAQ
CASdAsUBG5D21TQ8gr0N25I150l6PQ9jvic6gOdSBPOwGMuOUNLfuh7s6/ih
kpescmOVLNGepyAQCASCnob65i9Jer3McMZdStaxzmPOE/4l8P38pgM4rax8
TnoP42DrGuG3swvpfYpmfHimzZkCgUAgmLKgvvEzKjmRtP8Jvv3wg1nXOj8P
af/P9zqAu+qSp5QMB9fzNYMPsef/dT7/Pv5u31MSCAQCQR1Q3/a1qLnn720l
uxL7lTD/Ye/Bpx3AUz0l4L2DLT6cibRPzed8HmugC7X3qQkEAoGgLNS3fDrS
Y7yv+Pt+EfHePP7245wb42xqkldJ+9WYPgHmjB/gc4hps1N7n6BAIBAIikJ9
w0nJffxNf1PJEOvc9pQdB62nBPOU/9sBdvxBycp8b6YlHTvA+MQiPs4M7XuS
AoFAICgC9e1+g7/jmOObi4/NTzouZ7t5x8h6Sg7pADsgGDOfQhyTjfSeRDOX
fEt7n6ZAIBAIUsHfb+yF6MN/I+7mBx3AN0auZbv6ko6b3W57jCDe9wC2bTbS
cQUmtPNZCgQCgSAd/E2/lf89qAP4xRZwy0KWrUM6wCZb4DM0H9v2kfCgQCAQ
9D44PLhdB3CLLcewXYiJtg7/+5YOsMuWBtslPCgQCAS9EB3Mgy+T3suI/BPw
yUT8buzjQ+yazzrAPuFBgUAgmALQwTy4Ldt0kXVsXz52UgfYJzwoEAgEUwBq
4kHk9EM8sscK1r+b7VmZWnMxIYbNHKRzJ71RQC/iv/1eycbkzxEsPCgQCART
GWriwQcs/eswL34VWRd5AJclvT/vQc/5s1nvLgn2wJ/lfCVLW3ZVFRegwfqE
BwUCgaAXoiYefN7TDnLWn0H5++HzeC6PJ21BbqgjyImLTXo8WcV1Cg8KBAJB
L0dNPPix0wb25U/P/0ZOI/h/vuCph/jVMfOeoXlTI48o2UlJXy6H/X1zWPYs
LTwoEAgEAqAmHvyWuWx60vmZwG3Yq3+0krm5Lfh+fo+aMd0gw/lcjB+M60eD
cSLy665lXRt8S88mHRsH48dZ+fgGwoMCgUAgAGrkwaWZA89h3WuSzt+HeJyX
KFnWsmFF0rmeUvZF2PsqTlaysKUPPHcz6bEi8mYghipiiZ/L51PWFoUHBQKB
YApGjTy4AeuEj+fW/O/DnDLI7bsZcR4HLnNNQhujrXrg3D2VPGmdBw8O5vNd
aI//PUp4UCAQCARAjTy4C+ucSHof/HdIz03+j6cs8r1vz+UR3zQmvz14Z0mu
M1rJO54yXXx+EHPi5fz36cKDAoFAIABq5MFRrPMu/hs5ixArey7S+Z3c8pgz
Hch1uiL0b8Nl9w+cH096LhRzom/zsVO5zrXCgwKBQCAAauTB01nn5dYxw0Pr
k38/4VtK5iO9TnhHhu6TWc9aSr7wnIff6YKkx593WccP5HoPZOgWHhQIBIKp
CDXyoMmXdKp1DPOdm/LxA5iv3HrjSI8b51Tyiuf83aTHefMqed1z/kUlG3Mb
RznnhvLxqmLJCA+2CdxXQl9neSWrsCyhZKZ22yYQCHoXauTBB1jngc5x+M3M
xufAd1souZp0zBdTZgyfx7fN9h2dRNo/FDx4n6PzXCVrW9cFH1R3zGnmXauK
JVMLDyo9Syo5p4TMVaC9VSyZO7H+9gXtjOYs0n5Q25LeJ/M38s8DGMHe0xtJ
97WSrsVqb8OSz+CIIu0GbNmtpC2psnkNNmBN/jjS+bR3IN1/ma6qe1QGpPNq
27aOqKGNIu/I8lXbwbbMXMCWDStot+x37ZyINorqrosHn2edQz3nljH3xbJ/
Fn7Xbie9VrgTH/8B1/lcyRp87OekefNKvLP2+6T+vRT/f5in3UWo2lgydfHg
oCpsimwLc8fvOfV/kWjvOQXt7B+huz/p9eJ/FGwDfDnW/q1FXtOhJZ9BZXMD
bH+Vv9k86eohGz5RcivpfUwzVHW/UkB6bcW1C9+WWStup8g7cmGVNli27FrA
lkMraLfsd+3biDbK6K+DBz9mnQM951axbH5UycFKyLoWzHnupaQf/32hkn34
34hNs7OSma3yS5H+VmJO9BE+5uNBjCmqjCUDaXB7VfLgGqT9bH0+sCFBzmLM
905QsmBCW6t6dL2UaO8R3C78n77MsfMLfk4oP1uO3t2VfJijD77ImCd4i7LH
iOhb/ZQ4xlDENaHtp0j7WPliFoXkQ34O16fcwxxbsLf2mcTfQxk5LWDDszXa
gDWO3aq6Zwn39sKAPXtW3M4R/AzfTrgn+C1V3j+gbN8LW8z+a7wHu1fQLr5r
E/h9/b+E+4Bv20sU8X1l/fi+fBKh9z9GL/9dFQ/im3QnaU7anHXC78X9Pq3G
5z6yjmEOEz4te5DTFyPP/AnrxRzLnx3d4/n8Qc7xl/n4TKRjro0h7cNaNpdh
w7qWytcHlc5lqHVPpCu4bz/w3aNI/e4aqpGk8ZOlD7GDQvtSLnWfbUAH4hD9
MqDjM9aDfadu3FisGaJPhLh9fwvUH0fp88Zz8+8l63fwsJIVUu9XKkjvP8ra
Y4u5kkERgr7kBdS6HmEkc/6JbfhNhg3w4W5Ygt8wvoFbKzlGyf0U3ht1WdHf
coF72Y/C8Y7vqbHd+TN+365sV3Hb8J/P66t+y7/3pPck0Q7EQBlOmotCNrzJ
73ny74G/BRspedWjF9y+JbXOI+J4ER7E9xffZ6zX/IB/69M6tpiYoj926g7i
4x8FdIP/ESNtK6ODyyNOKMaJ8JUJ9dHv4bLuvNYQ2yZLZ19+R/HtxDqlL+5p
23iQdeNbEuo//bak7nEBvaXmQUj3IW19/82jHFEPa7+3BGy6jdLGuvit/Muj
B7Ylv+MU/vZjzjZ3jrcq8Dvu9v+MDEvUhd/W3x0dF0TUw3P6a8CG3G+3KrNC
Rv2LU66hKFQ73894r8HTC9Xc/viI70up99vT5kjnGn1t/qbKNnPscccrtqxT
gf6VPXo38JSL5UFw6E2kOe27ZM1Lcl3wyeqk/WKwbvcCfx8W4vfWfuaDuI5v
H2G3bwyXxXxmzNjNXIs9zjmLj2G/BsamT5CeD9mT9br8jf4/+guIc3oPhfm6
R3iQ9d8QaP/MEjoR8zzEr3eXtNflsqh+Lekxis+eMe5zitQHf6kPPPowFzB9
voYWXdsEbLsy1a6yID3PVpoHWddK1PpNHBtZ79iADbHPGv3aiQEdW6VeRyqo
dX7Q9x78uOb2RzjtPe6xAd+ryvpY1JoTNsTD21TVXoQ98wRseKXCNp619L4W
KBPDgwd56i2sZEfSuZTwTQmNb8Ej8MXAXIrhE7MHflKgTotw2VViyiq5mct3
8d94zzD/MXtGe5iHx3wu/NlC822XB+o2uEzdPLhboP3bSugMfdch8EuaOV9L
ULc9l4v58lzOyfj9YW4gmQMtvciB6duvekaiHt9aKuRnRW0rCgrHyB1WUJ/9
Tfx1ZB3fGnw0D7KOdQM6/lLkOhLaxdykmVP6OvB+P1WzDe7v/ZDAvdi/ovaW
cvTuF2hv1SraS7Drc48N91Wo3/5t/yFQJoYHwXHrcRnwUWou+EO5rnl3t+O/
o/bxWe3GtDWWy5/E93dF/vuqRJsxZpyL6+6bUa7BZermwTnJPxeMeb8o3w+P
zvNz7kGhfiHpcabNO1dH1IG/sG9+AH4Zc+TVj9D/M49u3M9VEnSEfoNdZe1L
Rca7OqygvlMsHbdG1inNg6znmYCe2tZble7DrXYwP7ttwIbaOMHzDNHP8vXV
H66ovRMsnRgXDgpcc/Q7UZFdvvm2qN9gpH6bB8cHysTwIARjpgFc7ric76cr
Nh9hDW43/veEmPpcNpUH4afs8m+s4PtoxqxbUra/YMN6lrXuoyedu8pnQ7f5
7kh9L+Xch4sK6t3S0bNHRJ1jAjYcWMQGj37sv/D5RET3OzN+g11V2JiCjHd1
WEF9dl+vp3kw5DNSybMPtPm01Q76SNhP5Vt3ObtGG9xniN/XKYF70aigPft9
x7qc8GCzTCwPQtBXWYDLXpJT1hX472F+Ev6EJgfEX2LqctlYHjyPyyO3oZmP
DfmEhWQE61ibsv2ZepoHXX8jI9383CN0Le7oeMyjd1JBO39h6cC60zw55bGf
xedPjns6SxEbAu2E9nCtGVl/SubBzSwdD0TWqYoHR2e9y1WDtF+c3Y6Z67rN
Y8O7VJP/qucZ4ve1TOBeHFuyLXv/GvxF4TcqPNgsk8KDEIzhwGXTBX43WXJm
hn1V8eA5ln6s641LtPEErou5dJ9/hSsN61nWzYPLB2yYWECXHecH89wh37nk
uSlq7Xc+HlE+NCc1NrXtnHbWDrTzq8j6UzIPzkTNeEJRe2aoOh7cO6DnmiLX
EtGevR6A/lcfPr5nwI4ta7KjGw/ycZ8v8N9LtmX7n93Bx4QHm2VSeRByL+k+
POYSHomsY2TjgH1B4bKxPPgzS39o/BQSrJVjDIm+0suRdRrWs6w9vij598NA
Fs6v3aLnd851Y97Q50tyeKLeJZ36J0bUuS5wTTultB3RDvpFvrg0eHb9IupP
sTxY0IaqeHCPgJ4barAZ3y07NsO51jn4r/rmRq+r2g5uL8SDIwP3Y62C7WA/
rt2n35WPCw82y0xuM+Pd8gnW+cAZ8Ht19x+FBL7J51ltYx0J+Qiz4oDE8iD8
ReALsyqXxxzsvQnXA39R7P2Aj8cTCfUa1rPsCR48L2DH8AQdeC/seAsmV6Sv
XxI1R2bpPtipn7kHiH9DoXH3AiltR9r3+0BbgyLqCg+22lAVD4b8Fi+pwWY3
zuMazvmbPHaAG2evwZYQDyKelm+v+7l5OgPtbGXpQNyEmfm48GCzTFEehJzB
9RYjPY8eKod1QKzLeteJSM+zYp3+Lt/z5zK+bxCeKfgYcSq8/XnSOQi6KDyO
gmDfDsa201NrnqZO5MHNA3bcnKBjQ6ve5PU79f8jPXq/TPkGkO5PmLrod2eu
rajzywWu55+xbaaAwrFuuiLqCg+22lAVD4b2IR5Sg832Ws6znvM7BmzZtwZb
vDzI53z5ypGfJ2nPK+uy4z9caR0XHmyWKcODk3+rpH1+7TwOb/E3ZzmrrWmt
f2Psdhe/S3NYx5Gnt4UT+bj5Bn3KzxUx62ey6iGGNtbbEa90tHXczP1j3IHv
P+YA7bEQ1rLm5fNjC1x/g/X3FA9inPtvjx0fx74j1JoL6wnr+AqBaxwaqRdr
TPa8Uu58EoV9eWvZP6b0/jDQXu4+TBIedG2oigdDebGXy6+d1M581NrPPspT
Zibyx6YcX6Ut3FYWD4bW65PiC1D3ud5NrXPCg80yZXkQewp25Pqb8m96ckw4
0msyQ5T8mjh3B3WfO8O8KPo/WKe2ORFzrgfwvxeg7tyH/HOYS/+jow/rXBtw
GcQ6PMv5jWHshzUJ9A2X5GMhf+WO4kFu69aALYMi69t73E91zr3m0RvrR7KZ
U2+viDonBq6l0nhSVnuh8fSkiLrCg602lOZB0v1PXx7RyvZRW22NsvRjHsS7
pk46HpZrD8ovWrE9WTyI+Ju+mIBJMc+cZ4S9uHZMTeHBZpmyPGh4bH1HL+KV
Ydxh9tyfxMfhv5sVa9xwIuKndIvJTE3ue5jC8fHMM5+f3zMTPwm+rocpmc/R
6cY36nQeHB6wZUxEXXLu22Dn/EUevfCpy43nQq37EtAGRdQJjcFzc40VAYV9
btF3yox/SsKDrg1V8OBWnvroW69eg7127PV7M8q5/TkjpfYueNoJ8iCf9+2r
TFqrpFYfibOdc8KDzTJV8CDmQBdhHfCBftQ5j5y52GeB8V1KLBrs3VvGshV5
IrK4z5Xx3C7mWidZxzE3Aq7diPVuSGl5QNrNgwsGbHk6oq7tm4f51Rmc898r
+m5Qq7/Uk5HXElqP7YqpnwrScaVDz3L+nLrCg602lOJB0j7KL3rqH12Dre6z
C8Z24G+Gz9+h1N4FTzt5PPjdwP3dO1I/vhN2DBDXJ0h4sFmmLA9i7L4y1x/l
OY9YWcS/rRT/TcjprBe5MjG2wxzr/Yk6TmMda1J3v1Rwn8lDkRV7vqN4kNsL
+bQuklPPnvO53XM+FFfjmBy97r78kyOvw53TNtJt7aYKkF4LDj3LpXPqCg+2
2lCYB1WZAeTPN3FcTbbacxVY/8uMz6DOnxu4tkJ7FwJt5PEg5rJe9dgwLlK/
HZ/gOc954cFmmTI8CB4xYyqfvwPGXevy+dA6UEgwpoT/JuJqYs0KHAoeBB++
n6hrW7bB5yPxL2r6Kx+WqLedPHhCwJ4RGXXc3PNefzxq9fk04o1Pa9Vx86es
n1XeqheKrVc6/3Wgvf4ZzzLz/afewYOI2Ts+UQrNQVMkD5KOHbsQ3z+sQdxI
3feqvmve06pB3ffPjY2o48tTDzm/QrsyeZDLnOSxAXNi34nQb/czus3pkvCg
XaYMD5p9Z8h36JtXNPE9t6C0+Uzcl8W47s3W8WP42KaJdiKu2hJc1xdvG+tf
i/L5MxN1N6xn2ZM8uGbAnuDvh7rnS/D645F/Hy/mV+bM0G3vy8P9jopFRWEe
HBlTPxWk/Q+mZB4sIuML2hDiwRQB/yFHWm5+5qLw3KvB+bX+W883Z4s4DMl7
FyLt8vHg0oH7dmSObnc/0mKeMsKDzTKT20x8t0ZzHeQ59Pk13cDnFyWddyfl
3TD+pz9yjqMPaWIB/jxRJ/pG8IlG3/Rpz/nnSOcdxJgpK9e2Kw3rWfYkD/Yh
/xoG5nxmCNSxczK+kaHbneM0snOgPLjFjsN6fcJ1hPLJHharIwWUPR5cMaeu
8GCrDWV5EM++Ek7JsdP2r8bcUm4+aK7XFbC7knGr5xl6+Yf8sX+fydFt51f5
Y6CM8GCzzOQ2E96ts7k89uy9ZR3HPKjZEzgTl4Fviy+/ZEgu5nr45vjyUsHH
Gn4vmOv4U6ROjFXhq7Mm68Y+IrPX0C6HtSqsjyH20gORuhvWs+wxHuQ2QzkR
hwTKj7PKXJ6j+zmPXm++WeruXzcs4RpC97krVkcK+DcbepZ5a6u9gQeH9aAN
IR7EMx1rCWJdhOaDas23S9o3z56rOiWhbmgsdlNFtsXyoDseMOLNCUW6L2/v
fzogUE54sFkmlQdv4PsMLkKeX8yXwXflAOJ8fawL4y573zzW9fYhPc/p26cK
eYr02AKxzbJitd3KNjQonEsCY6UrSO85nM2yA7HT+ll/I94MxknGpxr2wadn
Dmr1s+5EHnRjRBk5y1PWzT2/S45u3/ww1mW79aWpex6HTL9Lp25o7F1Lblvq
Hv/Ulhlz6goPttoQtT7IZUO5lfC9rnNO1N2rnOkL5anvm6+Av11wjSBBdywP
gst9cda6vedcfkOrDN75uQLlhAebZVJ4EPpmYMG4e6T9zSMduwB74U3MUPiK
Xko6n8AsVjnUH8LfT5ObAD78y/J53z5WV0Zy2R2sY4jfhrkMrJ31sdrD72gv
JdfzPTexSLGnenqrHHzYjldyEP+NtX3fHt9O4cHZyB+b1ecbtrV1PiYX0kaB
613DU9busyTdA1X+7EA7UXv3U0E6N72vvdw4biQ86NqQwoN4B0PrI3Xm+Hsy
0GZZCfqjJdgWxYNc9nceG1r2xVtlL7XK/C5Dp/Bgs0wsD04kT15w0mtuO5OO
T+vztzeCOU74IcKvsOHoQM4t41e6V+TvEN9/E1Mb83LzOzrxzULcQsydZvno
/JN/NxsHflPLZby/beVBbje0F2VRp9wY69wTIX1Wecw7f+zR+xOn3GLO+aRx
HOl5BJ/996foSWhvt0B73jUUp67wYKsN0TzI5UPPGnNK3fpXFdi3UuS3pIg8
UoF9KTy4U8COzZxyiLtoz5EFc7aQ8KBdJoYHsfd9YaceclliTuvTgr8jxHhZ
zNGJOcuUPRF3e65nPdKcXcQmtI0csos4OtenMMc3uEy7ePCQgF37OuXsnMen
hvQ5dW726B3nlHFj22yQaP/6AftfTdGT0F4opvNFEXWFB1ttSOXBPhTOvQ0/
tr4V23eWpR/zipMKiq8/CInK05hhXwoP9iM/X1zjlNveOod5r+BcPwkP2mVi
eBB71brtVyEdrwDzkoinjThnebnb4aeJ/TCrO3oWsf4dWhN2BX1IM4bEmuKC
lg6MZTC+Q77Nt3L0oO8E3x7Mp2J/x1yObViHxHg1tI7V4HLt4sElAnZdb5WZ
g1rjSsT6je/j0Ytx/cxWGfu+4B4kfctIzyf49tzANzg3J2AqKOxbtHtEXeHB
VhuSeJDrIBdyaH7miAptQ5/a9qe+toSu3et47p5nmLdv51KPDRiHzGqVsfuu
eb5wwoPNMjE8aORtvs/Iz7MBOTEZ+Le3Gun96ljjw7oR5iWRD3cpqxy4BftU
scaIfb8fOufuybEDYufbbfC7Zdpa0tGHdw/7LODXg37nRfwOg99a4maS9v8B
H4IXwY8hP5yO4EFu+3mPXdg3bHJt2LGlu8VSy9C7QOCaN+Hzbu7AGwva/3Cg
nczchQXb8u2ZwW9nvoi6tfAg6fk7M/a4I7JOr+RBrhfymUE/evGKbHPjA25R
Qhd8zHzzXi+7349Evak8GIqztiefx54g218gs79Lnc2D3eb6SuivmgddQZ89
k1esdsCRZoz2pqPnIy6DcQvmThYO3Bsj8OPEPEF/rtfwlIHvKcaeq2XcHx9v
p1x/p/DgmIBtq/F5e69lt1hqObp9fgYmVt3KzvF9Cto/OmB/1XGN3RjjRh6K
rF8XD9q+Xn+KrNObeTDLZ6aS7x/pmDVGJ2IolZpzVfWvCdi7XgmdqTyIfucr
Hhvu4fP7W8fwjc2LG98pPPgPjw2Z8asS9dv7L38fKFOGB30yeZ6RdeI3/+uM
3z3kEy6L78xh/O89AmXR3zHxTK+x6mXZhH72GZY9sfO4vYUHQ7/nw/n8Q9ax
pNym5I+H9xifO9Q5vmCevkAbmF9342xBomJ1J7QTytMRlWM143fWVdKuwy1d
4yPr9Foe5LohnxlI7hx1ju65qXVcVDp3Cek5Ip+tl5TQmcSDXMcXT/Frfoce
tI6dHqGrU3jQ588xqUL99rjrqkCZqnnQyPusc4OY8lzW7J0fwH/f5Cl7NJ+D
/9QXVr0Ym7AW5Rs7lpEG29BOHuxL/vEzYp1hfG3v1xyQqHugRy/W87Ame4N1
bGLJa7gucH+D4/kCbfj2gmENKXPfoFW/Lh680NJ1Z2Sd3s6DWT4zmGufu4Rd
bqzb0jmc+B17z2Mr+v2F1rE9zzCGB5cK3DP499lzHStH6OoUHvR95yG5axUR
ut3vvTeOO5+rgwcnss5QvvEW4bImfsNf+Hc3L7WudT9Ceo879uRjLG3mU9eO
tAl7qPtVeI2QBtvQNh7k9q/32Aab7DiDrxfQ24f88xbrUms/67SS9q9I/jFh
JevlSs8mgecXHceU6uPBe1OvN+NdHVbGlhRQ+bxLWT4zV5Swy+7vdNtLW0Jv
KAdFcG9Cjr5kHuR6eXG0ovqk1Dk8+OOAHT+qQLfrT79xoNzkdy/j3Soid7FO
Xy4mnyCemc3dXVx/G/4b/h1L8TET09nwYOh5urI+l/d914tKg3W2mwf3DNhn
+45fVlC3L66BG0NmUAXXcEHgGr5XUi/Grr44cZiPiV43ohp4kHS/7kNLV5Rf
Y8a7OqyoLamgavLwhnxmIJsXsMndMxi1RyhS93oBO4N71XP0FeXBA3O+SZkx
uC09ncKDAwJ2YC00aq4moBf+TXZfHe+ZN54tn6+DBy9nnadHloevk82D2O+z
Buu4As+e/72vVeZ1PhbLgztzeZ/PYFFpsM528yDWPb/22GfPiX6/oO5dc/R+
HPp9JbaD3+0LnrbQb0mKh2XphG+Bj8fRr1o+UZdvjhjSVcQ21unmYx8bWW/v
gC2l45zEgnQOJZ8N0et7lO0zg3gp8yba5O4t2D79yoK60WfxxW/Ct4oK6NvR
0bN2ZD2sf4byhkflZGI9blxgIwNTr6UsKBxnOHdfb0AfnpU7RxbsE/H5Onjw
VNZ5bWT5/tQ9FwD2OaAvj3U9fM8Qu8Te0zqJ29gmsg2TB+ruCq+zwTrbyoNs
QyinrXk/Cq25kM4B6eNYIzdXeA3LU+v4yP4mrpmoC7+bqz26cC3J30cK723t
StXF+jAH4vbJLoisG8oPdmkRW4qAwvOESXPk5N+nagRzxrH7fOAP7Pq+bVns
6oJthPzYk/MHo46jY6+EurcG7IjK0cs6QjE4Dky9lrIg3ccMzZGjbzNTgi70
E25xdGDPX7d4aFYdlKmDB834LTpvA/lz4pzFerBONd4592Ki3cbff2yF19lg
nZ3Ag8dk2Pl4Sd2hPX6Q4VVdA7eFdaMPPO1g/RDf/0y/VNJry/Cj8uWPQz86
M8Z4QCfWqicFrr+rgD74O/j6Lbm+jaTzYoW+x/AzWynVnoL2h+KsoB+zaL6W
ybrQx83qmyJe8WwReny5Ra8ud6Ut+kNrzBCMaaPGYawL/p1u3jT4P8Ry/g4B
O6LeRfL3wYzgd540Dq8ClJ2rHXGeDyUnJqdTH7/J46n7/ALe+UE5baNcHTw4
lHX69njbgnkGxPjAnBj6725c9W9Yj7tXDfJnPofvgi+HuvedoNbcXGWlwTo7
gQez4ilG55sJ6D46Q3f0+5/QHp5pyJ8Q4znwMtY+MUbDOtV+Sn5C2u80tP6L
d2n9yPaxhxWx4BE7F+/nOxnXj9/4rZGCb/oTKc+J9PoJck/D5wzrDL7xsi3Y
8w3/QcRBwdwX1g1KrfmwDZuxDWdS9v7eb9nGn3N52J7pp0x6LPdGhr43+Pli
/8KM1jPCtYET3P6/LeDY/bkuykfltyDdN0d5zF2fQuE8OUYQuwo+H4hpv4aj
Cz56m/DvCd8fn+8pBLng8JtGHIBg3hbqHkfUfEuzxjwLs17o/2ugfSP4vZ/I
9uI9WDiktyqQ7g+dl2MXBH1k9BkQmxN79OAX5cvFat6FXP8CLlsHDw5knaE+
I34Hx5Mzr06e/AN83OejsKtTF+8q9vSH9gXex+Vcv+oy0mCdbedBtiOUH2PD
knpDHPt0VbZ72sS4Dnvryvo1fca/q9kT2nb3RvaUdHlsqWL+YnzJZ1HWhrER
bYArJiS8c0WfUaw/SleJ653g6HL9ymJkWI59lzjlM+M5lfxNHxpzz6oA6Vj4
oX5CiqCvvGxkmyhfBw8i3+nMvt8H6f57P24TY0D05e/h8nO494DLuTyIa0T/
YQDXRR/MxBFDbDTkFHTj1jzH59316TLSYJ2dwoMXemxEnyhqviVHt6+/PqYK
u3PaxXw5+i4p+ZwhiHuFb1nyeJXax4OHe2yZKniQ20HfB2MQxIN5lfxrRo2S
z2hK4UHXfzUvjk+v4EG2FfODWL8MzQmFBOsCmHfZLL+VlvZQ1/Bg1J73SEGO
QbMfEL9l5M8abLWL+fGTqbWvfxKfs31CfTyIeTGTc+ku6zh8DfG9nJXPId42
fB1NXB2zzyKUgy5VcM/nYZ2dwoOzk57PsaVQnBeP7vk8umvLoRqwAWvg6PMc
oeRi0mtC+N1jTz/m1xFvA/OBjZLt+O5jT0i3MStpn8qyeqNzIwfuR1kbMvNd
ZrQ7LT9zW1ffks8odg2uf0H93d450n3zVB2Z7xY1c5G33JeM8mV+09FzKVWD
9Jw55nMxN4S1kF+Rft/x3iPeHfoYhykZTFYOgMQ2sB4HX5q5+e+xVJ4f3mNd
iN2JdQo77vXqpH34fH6/mL+CTyh8Yib3/bmezYMX87GtA+2Dk84ga62e9L5v
3Lt+/Fyr4MGDrOsENz9W/GkLBAKBoB2gpu/uLfx3aA9XirhzAtjLgbXsLJ9D
IzdzncljNv7b8CDWhudhPnspRxf8C39LnJ/JsqeKmDK3ke6PzULN+NyV+mgL
BAKBoH4wRxl+GsHHViW9z7goR9zJerDWh3gyrybWH8L1r/Lw4Ej++6hEnfAp
whzp9Fy/jO8FrseMn82+3fPb8fwEAoFAUB7qG74o6blE+FmadTfkNQ7ta8wT
rNlhj22en3FIniG9Xo78d3Yuiqf5+EIldMN35ugC3GwEOZ6XZZtMfk7keCoc
/0cgEAgE7Yf6jg/lbzr87ufnY6ljrirlELbhSP4/eHBj/rcvRkhPCNYAN2cb
kEf4M+bjpPhcAoFAIOhMUNNPGPHMzb6G2PigVQvWAeEnZHzDzP/XbSMH7s42
YD/qO3xs6/Y9MYFAIBBUCdJ+HyanHPxA+vKxi9rEPZc69sGPNCsWR50ynG1A
fK2n+NhR7XlSAoFAIKgLpPeyj+PvPPZmTEfx8W6qFqxPrmbZFsonXvc40HAg
/H7Mvs5CcdAFAoFA0Png773Ze34FuJCPH98GHvoj8zBser+H20a8vqGeewI/
1mnb+5QEAoFAUCdIx3CYyN/9m4hjMJCOVxvKfVWXwC+zSFyiMoI4wRvyNWOd
8m98HDmtpmvv0xEIBAJBT4DHQCY3zH3EsXXAD+TPi1OXIN7oVz3YHvZnLM7X
ivg2Zr/+5cKBAoFAMHWB9HqhieH5jMUPiE325x4eo/WEYLw3G1/jIGrut0eu
GZkLFQgEgqkQpONVX0zN+cLB1vEzOoC7qhDsBdzfuuYDSM//Yhx6UPvuvkAg
EAg6BaTzN4IX4EOJuKTGfwb5JUN573qDwAd0Ob6W2ai5Tx97GIe0964LBAKB
oJNAem3wbeaJ+5UsxMeR0+OXHcBpKYK8ScgfbfboI67qi3wO+xSXaO/dFggE
AkEngvRe8juZLxCXdJh17ruk/UzazXF5gjXPpdhmzO8ils6XfA65ovq17QYL
BAKBoONBek/fwaRjc4M7bifO90c6Ds1hPK/Ybr5zBTnKh1rXgTihE/jcW0q2
at9dFQgEAkFvA8ZU1MzbhFxNiM1tchvNSdrPsqf3G/rkQ+bmGSzb4Ptjcmog
/3D/9t5NgUAgEPRG8NhwP+YacAry0m5rnV+EOacdfIh52y7DcaTHqgdRc/8j
cg5v0r67JxAIBIIpBaTzxCMv7dfMMQ8qGWidBx+eR+Vy/MbKu0qOtfgPXL09
NXPHf8rnZR1QIBAIBJVCccuKSu62OOkO4vy+fB4x235COk5M1fz3PI9NTd4o
8N/WSv7K58HRv1KyQPvukEAgEAimBiiuGazkUYuj7rHnINW/ZySdQ2JCQc4z
8g3rBt/1Yd3wAd2DmjFSIcgptVz77ohAIBAIpkYo7tmcmr403zLvIXZ2X6sM
/DYvo6b/aYwg/wTyBC9u6cE++NFK3rDGfzfY41GBQCAQCNoBxUUDSeeuMD6a
r/Ma3fxWmf5KDqRw7NKveZ51J2LfT663HOmcFB9xOcRJu4BkL7xAIBAIOgyk
91pcbI39sH/9RiUbkxXLmrkN4713lDxLOvbLAtb5GZTspmS8M0aEf+g87bk6
gUAgEAjiwGO/kaTzWBgewz73nypZxCo3nVNvFR772bmfwIW72GNEgUAgEAh6
C0jHY7uK5zON78t97OsyC+lYbodSq0/NP5gPB7TbfoFAIBAIqgDp3L/Ief+I
xXf/pmbsT/z/NiVDZewnEAgEgikZiueWVnKqkjdJ738YpWS+dtslEAgEgikH
/w/qQILY
     "], {{0, 100}, {450, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{268.015625, Automatic},
   ImageSizeRaw->{450, 100},
   PlotRange->{{0, 450}, {0, 100}}], "Title"]], "Title",
 CellChangeTimes->{3.785141470231607*^9, 
  3.785141924332955*^9},ExpressionUUID->"059f49ae-49fc-4f44-80e6-\
ab700841b96e"],

Cell[TextData[StyleBox["Wolfram Language Basics",
 FontTracking->-0.75]], "Title",
 CellChangeTimes->{{3.720193284509671*^9, 3.720193288595942*^9}, {
   3.726941915180914*^9, 3.726941915962871*^9}, 3.72805557420755*^9, {
   3.730591596400971*^9, 3.7305915992067432`*^9}, {3.785144430726679*^9, 
   3.7851444313967543`*^9}, {3.812802882143258*^9, 3.812802882905703*^9}, {
   3.814892360443033*^9, 3.814892372895254*^9}, 
   3.8209954171662335`*^9},ExpressionUUID->"1243965a-40ce-482a-9c91-\
36878f955d76"],

Cell["advanced programming", "Subtitle",
 CellChangeTimes->{{3.7201933391803827`*^9, 3.720193342066636*^9}, {
   3.726941908757318*^9, 3.7269419228992167`*^9}, {3.727530497787223*^9, 
   3.72753049862645*^9}, 3.728055577046837*^9, {3.730591604782598*^9, 
   3.73059161531714*^9}, {3.814892398152801*^9, 3.814892406904223*^9}, 
   3.8148924864887667`*^9, {3.820995427675702*^9, 
   3.8209954313739147`*^9}},ExpressionUUID->"abd2714b-c40b-491d-9b98-\
1f3d249655e3"],

Cell[TextData[StyleBox["\[WolframLanguageLogoCircle]",
 FontSize->108,
 FontColor->RGBColor[
  0.07357900358587015, 0.11967650873579004`, 0.19916075379568168`]]], "Text",
 CellChangeTimes->{{3.820847947788309*^9, 
  3.8208479747250233`*^9}},ExpressionUUID->"f86fa7d0-ff30-468c-8c9f-\
8c98448569b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"8b4f6692-9aa6-4d88-b922-bfb6817f7bea"],

Cell[CellGroupData[{

Cell["Outline", "Section",
 CellChangeTimes->{{3.820995354621266*^9, 
  3.820995355721292*^9}},ExpressionUUID->"34a6e573-a88e-498f-ba06-\
a4971943ab3c"],

Cell["\<\
Structure and syntax of the Wolfram language: expressions, rules, and the \
evaluator\
\>", "Item",
 CellChangeTimes->{{3.8209955757087817`*^9, 3.8209956018937736`*^9}},
 CellTags->"Overview",ExpressionUUID->"097bd3e1-6d23-4edc-8cfd-4c7f2a7da2e9"],

Cell["\<\
Creating functions with optional arguments and warning messages\
\>", "Item",
 CellChangeTimes->{3.820995608900467*^9},
 CellTags->"Overview",ExpressionUUID->"0f855d13-c830-47a0-afa3-cfd01e617810"],

Cell["\<\
Functional programming, including pure functions, level specifications, \
comparison with other styles\
\>", "Item",
 CellChangeTimes->{3.8209956104063935`*^9},
 CellTags->"Overview",ExpressionUUID->"1b807f4b-4e58-47aa-86f8-e5fc087aa641"],

Cell["\<\
Efficiency issues: avoiding redundancy, using high-level functions, exact \
versus inexact computations\
\>", "Item",
 CellChangeTimes->{3.8209956130059724`*^9},
 CellTags->"Overview",ExpressionUUID->"1dabf61c-7b2f-4f80-846c-fd0e08c34608"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"23087012-ee4a-4f73-aa14-369b6e916e58"],

Cell[CellGroupData[{

Cell["Basic Principles: Overview", "Section",
 CellChangeTimes->{{3.822047151112382*^9, 3.82204715320264*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"6547c9cf-3045-4d2d-bd22-c8f5a8f2c939"],

Cell["Structure of atomic and normal (compound) expressions", "Item",
 CellChangeTimes->{3.820995659781414*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"e0de7613-c62c-4670-a3db-eb6595190f99"],

Cell["Creating and working with multiple rules for one symbol", "Item",
 CellChangeTimes->{3.820995661596863*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"eaa8af17-aca1-4abc-a0ba-3ac28dfd24f7"],

Cell["\<\
Evaluation: rules, order of evaluation, nonstandard evaluation\
\>", "Item",
 CellChangeTimes->{3.820995663720147*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"eb003f88-d93b-4f5b-aef6-1d714c55b7b7"],

Cell["Attributes of symbols", "Item",
 CellChangeTimes->{3.8209956678966923`*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"aa3888c2-0b37-4c83-97d2-00078fab9706"],

Cell["", "EndOfSlide",ExpressionUUID->"b5b4098a-0a29-4340-884b-0b5eedfcd3b4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"d8a49b2a-7e7d-4481-b628-87db01f46c0c"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Basic Principles", "Color7",
 FontSlant->"Plain"]], "Section",
 CellTags->
  "Basic Principles",ExpressionUUID->"fe70d8b3-9907-4a67-a216-240b94015c4f"],

Cell["\<\
The Wolfram programming language is based upon a few simple principles. These \
principles can be used to answer nearly all basic questions about the \
language:\
\>", "Text",
 CellChangeTimes->{{3.8209957152682357`*^9, 3.820995716791374*^9}, {
  3.8209957718638687`*^9, 3.8209957791493597`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"3703421c-b532-4acc-a62f-3c1239c2f75b"],

Cell["Everything is an expression.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"539a94a2-87a4-435a-806f-9801745c3b57"],

Cell["Evaluation works by applying rules associated with symbols.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"8e9a1874-8b3d-4b25-9c75-61080c00e14a"],

Cell["Rules are applied until there are no more applicable rules.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"6299fc6f-6631-4ab4-ba8b-f2ca6aad0502"],

Cell["Parts of expressions are evaluated in a specific order.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"085639ba-9116-4e0a-8d44-ac67dc17c938"],

Cell["", "EndOfSlide",ExpressionUUID->"82a05744-27b5-47a9-a2aa-a2873a4bd908"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"25d0d358-9498-41e4-85c8-3372e18496f4"],

Cell[CellGroupData[{

Cell["Expressions", "Section",
 CellChangeTimes->{3.820995846458747*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"73fdea96-3393-4e31-8f5e-2cb29ede9bcf"],

Cell[TextData[{
 "You have seen in the first segment on programming that all visible \
information in the Wolfram Language is represented using ",
 StyleBox["expressions",
  FontSlant->"Italic"],
 ", and that every expression is either atomic (numbers, strings, symbols) or \
of the form"
}], "Text",
 CellChangeTimes->{{3.8209958899076443`*^9, 3.820995894810579*^9}, 
   3.8226669250609293`*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"c75d9116-b3cd-405c-8fb4-0258f9daf94c"],

Cell[TextData[{
 "h[",
 Cell[BoxData[
  RowBox[{
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["1", "TR"]], ",", 
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["2", "TR"]], ",", "\[Ellipsis]", ",", 
   StyleBox[
    SubscriptBox["e", "n"], "TI"]}]],ExpressionUUID->
  "a43eec02-7ca9-4941-bb3c-230055e00293"],
 "]"
}], "Program",
 CellChangeTimes->{{3.8209958899076443`*^9, 3.820995894810579*^9}, {
  3.822666929892734*^9, 3.8226669356982*^9}, {3.8226669704872437`*^9, 
  3.8226669997350073`*^9}},
 TextAlignment->Center,
 CellTags->
  "Basic Principles",ExpressionUUID->"f2eabd31-efbd-497c-a3da-1eb1e861777d"],

Cell[TextData[{
 "So, for example, the expression ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}], "Input"]],ExpressionUUID->
  "c2cda66f-61cc-4301-9882-7367c22aa3bb"],
 " has head ",
 StyleBox["f", "MR"],
 " and three elements that are themselves atomic."
}], "Text",
 CellChangeTimes->{{3.8209958899076443`*^9, 3.820995894810579*^9}, 
   3.822666929892734*^9, {3.8226670291523438`*^9, 3.8226670301422462`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"e26d03ae-fa78-4d5a-bf43-56ae971e128b"],

Cell[TextData[{
 StyleBox[ButtonBox["Head",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Head"],
  FontWeight->"Bold"],
 " gives the head of an expression:"
}], "CodeText",
 CellChangeTimes->{{3.822047244126336*^9, 3.822047251200674*^9}, {
  3.8220473004401197`*^9, 3.822047352011279*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"d128125a-fe72-46ad-8d8f-e9b165c1f974"],

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"abad0e95-f906-41dd-ac7a-2c600efab24a"],

Cell[TextData[{
 StyleBox[ButtonBox["Length",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Length"],
  FontWeight->"Bold"],
 " gives the number of elements in an expression:"
}], "CodeText",
 CellChangeTimes->{{3.8220473213334846`*^9, 3.822047354643561*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"45aeeb14-dcaf-4a49-a1b8-61c865e00f16"],

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], "]"}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"bd80c726-e521-4d99-a7ea-ce30c75d5a1b"],

Cell["\<\
This structure extends to all expressions in the Wolfram Language, even those \
that, at first sight, appear to have different structures:\
\>", "CodeText",
 CellChangeTimes->{
  3.8210045936436253`*^9, {3.822047356792698*^9, 3.822047359526037*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"cc88f324-e1f3-43ce-8a21-a8c15d062f60"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"a", "+", "b", "+", "c"}], "]"}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"156f921f-4101-4b5a-84f0-d01c7a0a4ab1"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c"}], "}"}], "]"}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"18e5d46d-82b3-496f-85b6-2344a785d1d2"],

Cell["\<\
This unifying data structure is an essential feature of the Wolfram language. \
Because of this feature, the result of any calculation can always be used as \
the input to another calculation. But more is true\[LongDash]because of this \
uniformity of data structures, learning how to manipulate the basic \
expression structure gives you the power to manipulate almost any object in \
the Wolfram Language.\
\>", "Text",
 CellChangeTimes->{{3.8209959873806815`*^9, 3.8209959919919615`*^9}, {
  3.820996023721851*^9, 3.820996028510766*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"1eaf0896-32e2-41b1-a601-ae90443cb4e2"],

Cell["", "EndOfSlide",ExpressionUUID->"86d9aabc-7c96-48c3-ba38-092096d2590b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"4975a638-a87a-464b-b866-d5d81754be6a"],

Cell[CellGroupData[{

Cell["Evaluation Rules", "Section",
 CellChangeTimes->{{3.820996082473318*^9, 3.8209960873372755`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"ab3a095d-8a99-4413-84ac-81f8edc3d8b2"],

Cell["\<\
Another basic principle is that evaluation works by applying rules associated \
with symbols. Some functions have built-in evaluation rules. \
\>", "Text",
 CellChangeTimes->{{3.82266705724481*^9, 3.82266705761513*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"74962d8c-9e9d-47b5-8e23-bb65469a603a"],

Cell[TextData[{
 "Here is a calculation that uses a built-in evaluation rule for the ",
 StyleBox[ButtonBox["Cos",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cos"],
  FontWeight->"Bold"],
 " function:"
}], "CodeText",
 CellChangeTimes->{
  3.8216797658052163`*^9, {3.82204736423983*^9, 3.822047366230789*^9}, 
   3.8226670553201733`*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"abb2323e-ec23-4830-a1a5-daa3b6743099"],

Cell[BoxData[
 RowBox[{"Cos", "[", 
  FractionBox["\[Pi]", "4"], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"46322c69-6d21-4ec5-b571-01af6b72c48f"],

Cell["New evaluation rules are introduced using assignments.", "Text",
 CellTags->
  "Basic Principles",ExpressionUUID->"c3137097-0f8e-4a73-9d33-59131c70304c"],

Cell[TextData[{
 "For example, the assignment ",
 Cell[BoxData[
  RowBox[{"x", "=", "5"}]],ExpressionUUID->
  "b0aa5bd4-e85f-4fe7-9b25-dcab022892a4"],
 " introduces an evaluation rule that causes ",
 StyleBox["x", "MR"],
 " to be replaced by ",
 StyleBox["5", "MR"],
 " when ",
 StyleBox["x", "MR"],
 " is evaluated:"
}], "CodeText",
 CellChangeTimes->{{3.8220473720922127`*^9, 3.8220473727110453`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"1c58e23f-b997-4fac-b052-2895cd9ba2e1"],

Cell[BoxData[
 RowBox[{"x", "=", "5"}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"1b326d72-cf7c-459c-be61-f52359edb6a0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "x"}], "+", "1"}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"b3869cba-db7e-4ed2-bf16-7a73b08be8e4"],

Cell[TextData[{
 "The assignment ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    RowBox[{"f", "[", "x_", "]"}], ":=", 
    RowBox[{"Cos", "[", "x", "]"}]}], "Input"]],ExpressionUUID->
  "e0e43841-b12e-47b1-ab8d-7397f5826b55"],
 " introduces an evaluation rule that causes expressions that match the \
pattern ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"f", "[", "x_", "]"}], "Input"]],ExpressionUUID->
  "7b4d1f3b-0fa5-49f0-926a-bf1bab0f25fc"],
 " to be replaced by ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"Cos", "[", "x", "]"}], "Input"]], "Input",ExpressionUUID->
  "8cf1c094-9adc-42a5-bce3-750f599521dc"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.82204737591735*^9, 3.822047376389776*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"de1296f9-f8ba-44af-8545-12b168aa68bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"Cos", "[", "x", "]"}]}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"12ce20db-9833-4445-8821-f25df8fd9ef2"],

Cell[BoxData[
 RowBox[{"f", "[", "1", "]"}]], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"2c3f790f-8956-43bf-9f1b-df0fa3b8f659"],

Cell[TextData[{
 "Clear the values of ",
 StyleBox["f", "Input"],
 " and ",
 StyleBox["x:", "Input"]
}], "CodeText",
 CellChangeTimes->{{3.822047380946316*^9, 3.822047381451859*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"528afe8e-6258-4f43-bc4a-a71c7b10ced4"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "x"}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"In[3]:=",ExpressionUUID->"5124396f-1498-4a6c-a2bf-2e169e02aca0"],

Cell["", "EndOfSlide",ExpressionUUID->"0c1324a8-f7c8-4b3e-b2fa-f75701625bb7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"d0f4281c-db8d-42b1-96fa-7fbe40972e0d"],

Cell[CellGroupData[{

Cell["Multiple Rules for a Symbol", "Section",
 CellChangeTimes->{{3.8209961459804196`*^9, 3.820996154498642*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"49480b99-919f-4b89-b487-5e04c06395e7"],

Cell["\<\
There can be many evaluation rules associated with one symbol.\
\>", "Text",
 CellChangeTimes->{{3.821679898352538*^9, 3.8216798993868036`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"534276ea-671a-4685-ad9c-bc2ad98164fc"],

Cell[TextData[{
 "The following three assignments are all associated with the symbol ",
 StyleBox["f:", "MR"]
}], "CodeText",
 CellChangeTimes->{
  3.821679901029958*^9, {3.8220473845305357`*^9, 
   3.822047384984623*^9}},ExpressionUUID->"97412820-2c79-4558-88a4-\
4e5c9b9d9890"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_Integer", "]"}], ":=", 
  RowBox[{"x", "+", "1"}]}]], "Input",
 CellChangeTimes->{{3.4930538992513437`*^9, 3.49305390954187*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"9b463b50-bd5e-436a-8530-41334251a9ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_Real", "]"}], ":=", 
  RowBox[{"x", "+", "2"}]}]], "Input",
 CellChangeTimes->{{3.4930539127794313`*^9, 3.493053920979134*^9}, {
  3.493053957374555*^9, 3.493053958628446*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"3e97dc39-56f2-46b6-add0-ccf7b5c636cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  SuperscriptBox["x", "2"]}]], "Input",
 CellChangeTimes->{{3.4930539240330753`*^9, 3.493053928516325*^9}, {
  3.493053963028613*^9, 3.493053964791621*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"2e9ca631-d694-444c-a42f-9762d8985425"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "2.0", "]"}], ",", 
   RowBox[{"f", "[", "\[Alpha]", "]"}]}], "}"}]], "Input",
 CellChangeTimes->{{3.493053968002602*^9, 3.493053979641224*^9}},
 CellLabel->"",ExpressionUUID->"dd1682b0-2fd5-4d1b-be92-0660829f6cdf"],

Cell[TextData[{
 "Note that the general rule ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"f", "[", "x_", "]"}], "Input"]],ExpressionUUID->
  "301fcc0e-3dc3-4614-83c2-1d3f0a5771ea"],
 " will apply in all cases in which the other two rules do not."
}], "Text",ExpressionUUID->"276e45ce-4728-4794-b663-c27c3b0a5bdb"],

Cell["\<\
In addition to using pattern matching to identify those rules you wish to \
apply for various input, you can also use structured arguments to encode \
properties of functions.\
\>", "Text",
 CellChangeTimes->{{3.4930540499903727`*^9, 
  3.493054120989654*^9}},ExpressionUUID->"82fdf861-f489-448c-a0e3-\
4ff904d86b97"],

Cell[TextData[{
 "For example, here are two rules for a function ",
 StyleBox["log", "MR"],
 " that gives two properties of a logarithm function:"
}], "CodeText",
 CellChangeTimes->{{3.822047387088154*^9, 
  3.822047387536912*^9}},ExpressionUUID->"628a53bc-22bb-4428-981d-\
5c0e8a388d56"],

Cell[BoxData[
 RowBox[{
  RowBox[{"log", "[", 
   RowBox[{"a_", "*", "b_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"log", "[", "a", "]"}], "+", 
   RowBox[{"log", "[", "b", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.493053860067251*^9, 3.4930538744037046`*^9}, {
  3.4930541542049103`*^9, 3.493054159679598*^9}},
 CellTags->"Basic Principles",
 CellLabel->"In[8]:=",ExpressionUUID->"3ba21e57-14e6-4ba9-a7b7-53c95be5027c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"log", "[", 
   SuperscriptBox["a_", "n_"], "]"}], ":=", 
  RowBox[{"n", " ", 
   RowBox[{"log", "[", "a", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.493053887129361*^9, 3.4930538874160624`*^9}, {
  3.493054163468995*^9, 3.493054179554201*^9}},
 CellTags->"Basic Principles",
 CellLabel->"In[9]:=",ExpressionUUID->"c275feeb-dbf2-45a9-b85d-dc33a139297d"],

Cell[BoxData[
 RowBox[{"log", "[", 
  RowBox[{"x", " ", "y", " ", 
   SuperscriptBox["z", "5"]}], "]"}]], "Input",
 CellChangeTimes->{{3.4930542528898087`*^9, 3.4930542642919073`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"787767e7-a3bb-46a6-a1d2-0359216e2c63"],

Cell[TextData[{
 "As an aside, you can use ",
 Cell[BoxData[
  StyleBox[
   RowBox[{
    RowBox[{"log", "[", 
     RowBox[{"a_", " ", "b_"}], "]"}], "=."}], "Input"]],ExpressionUUID->
  "46e42cb0-0a2d-4a16-8562-0cef2853067a"],
 " to remove the corresponding rule:"
}], "CodeText",
 CellChangeTimes->{{3.822047389979567*^9, 3.822047390496929*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"aa099a4f-edcb-469a-9536-d60959e3a93f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"log", "[", 
   RowBox[{"a_", " ", "b_"}], "]"}], "=."}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"In[11]:=",ExpressionUUID->"704662ef-4422-493a-9b64-82ebf718a593"],

Cell[TextData[{
 "Note that the rule for ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"log", "[", 
    RowBox[{"a_", " ", "b_"}], "]"}], "Input"]],ExpressionUUID->
  "6cfa0ba9-b160-4812-8bd2-b71eb94273fc"],
 " has been dropped:"
}], "CodeText",
 CellChangeTimes->{{3.8220473924431543`*^9, 3.822047392904502*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"a7795a4c-0979-4692-b680-61c9032f54e7"],

Cell[BoxData[
 RowBox[{"?", "log"}]], "Input",
 CellChangeTimes->{{3.493054348368479*^9, 3.4930543486426163`*^9}},
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"920e97eb-577e-4a07-96b8-50d58c728728"],

Cell[TextData[{
 StyleBox[ButtonBox["Clear",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Clear"],
  FontWeight->"Bold"],
 " clears all the evaluation rules associated with the symbols you are \
clearing:"
}], "CodeText",
 CellChangeTimes->{
  3.821679972344967*^9, {3.822047394041044*^9, 3.822047394524736*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"25e12dbc-a29b-443a-b6fe-9c218828e0d6"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "log"}], "]"}]], "Input",
 CellChangeTimes->{{3.493054362561411*^9, 3.493054363204483*^9}},
 CellTags->"Basic Principles",
 CellLabel->"In[13]:=",ExpressionUUID->"6a7bac3a-3dd6-49a9-a7cf-1e9aa4c4fe4d"],

Cell[TextData[{
 "All the evaluation rules associated with ",
 StyleBox["f", "Input"],
 " have now been cleared:"
}], "CodeText",
 CellChangeTimes->{{3.822047396583255*^9, 3.822047399204446*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"a066bd8d-2a16-41bf-b2f8-2460ae3794f3"],

Cell[BoxData[
 RowBox[{"?", "f"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"3103cece-50f8-4412-ad41-4af3c0560084"],

Cell[BoxData[
 RowBox[{"?", "log"}]], "Input",
 CellChangeTimes->{{3.493054401413012*^9, 3.493054402141638*^9}},
 CellLabel->"",ExpressionUUID->"81472b1e-10da-44f6-92b4-11c2448c9985"],

Cell["", "EndOfSlide",ExpressionUUID->"f416e799-6b2f-401c-b31c-57f45bb4b574"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"ccc76b58-b570-43c0-8b14-a9ec75ae4534"],

Cell[CellGroupData[{

Cell["Infinite Evaluation", "Section",
 CellChangeTimes->{{3.820996213762456*^9, 3.820996218159583*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"bb5aebd8-a366-47f8-9466-34ab08dd7ebf"],

Cell["\<\
Another basic principle is that the Wolfram Language uses an evaluation \
strategy called \[OpenCurlyDoubleQuote]infinite\[CloseCurlyDoubleQuote] \
evaluation. Infinite evaluation means rules are applied until there are no \
longer any rules that apply to the expression.\
\>", "Text",
 CellChangeTimes->{{3.8209962230375795`*^9, 3.8209962329102297`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"cc30ff61-d4c6-40ac-8cfb-aa9d0d7eebf8"],

Cell[TextData[{
 "For example, the assignment ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"x1", "=", "x2"}], "Input"]],ExpressionUUID->
  "2458dd64-62e4-4f1b-b614-b60cd006c25f"],
 " introduces an evaluation rule that causes ",
 StyleBox["x1", "MR"],
 " to be replaced by ",
 StyleBox["x2", "MR"],
 ", the assignment ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"x2", "=", "x3"}], "Input"]],ExpressionUUID->
  "1d28607a-cc24-48e7-98b8-a2f72567bb50"],
 " introduces an evaluation rule that causes ",
 StyleBox["x2", "MR"],
 " to be replaced by ",
 StyleBox["x3", "MR"],
 ", and so forth:"
}], "CodeText",
 CellChangeTimes->{{3.822047404469922*^9, 3.8220474051218843`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"e630a18f-a374-4bff-8b03-e82d2823a7d3"],

Cell[BoxData[
 RowBox[{"x1", "=", "x2"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"c0d2c50d-8ee4-448d-a454-a4edfd6a8355"],

Cell[BoxData[
 RowBox[{"x2", "=", "x3"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"f254ffe8-174c-4cfe-b213-b2a5ba97bd7a"],

Cell[BoxData[
 RowBox[{"x3", "=", "4"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"b576c128-e001-4a9d-81fe-4c4d9f1dca7e"],

Cell[TextData[{
 "All these rules are applied when ",
 StyleBox["x1", "MR"],
 " is evaluated:"
}], "CodeText",
 CellChangeTimes->{{3.822047407293359*^9, 3.822047408632065*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"ed42ad3a-0279-4e0d-a330-38e34eb756c9"],

Cell[BoxData["x1"], "Input",
 CellTags->
  "Basic Principles",ExpressionUUID->"9c3f4b6b-6cdc-4e83-90ac-9fe70510f60c"],

Cell[TextData[{
 "Clear the rules for ",
 StyleBox["x1", "MR"],
 ", ",
 StyleBox["x2", "MR"],
 ", and ",
 StyleBox["x3:", "MR"]
}], "CodeText",
 CellChangeTimes->{{3.8220474117933702`*^9, 3.822047412321885*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"3745f6cd-dbf3-4e2e-b98c-1203244d7df3"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"x1", ",", "x2", ",", "x3", ",", "x"}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"In[19]:=",ExpressionUUID->"a0478e87-3108-4790-895f-59c7a03d0648"],

Cell["", "EndOfSlide",ExpressionUUID->"f7a0b572-8b2d-43ce-9278-8f032acc00a6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"2b5368c4-1e42-41b7-910d-8b25856a83a0"],

Cell[CellGroupData[{

Cell["Order of Evaluation", "Section",
 CellChangeTimes->{{3.8209962705096626`*^9, 3.8209962746306396`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"15152988-f1af-4ee5-9042-51f8815c2313"],

Cell["\<\
Finally, there are a few simple principles that determine the order of \
evaluation for expressions and elements in expressions.\
\>", "Text",
 CellTags->
  "Basic Principles",ExpressionUUID->"5b61d40c-71cd-4900-997c-eb9e168addd9"],

Cell["\<\
By default, function arguments are evaluated before the arguments are passed \
to the function. This same order is used in most programming languages.\
\>", "Text",
 CellTags->
  "Basic Principles",ExpressionUUID->"c58d2df0-0a78-4016-bcd7-261910f18618"],

Cell["\<\
There are several important exceptions in which function arguments are passed \
to the function without evaluation. The reasons for these exceptions are \
usually obvious but are nevertheless worth noting.\
\>", "Text",
 CellTags->
  "Basic Principles",ExpressionUUID->"ba02f09d-c65b-47a9-9872-c7153934fb8a"],

Cell["", "EndOfSlide",ExpressionUUID->"dfe19f9c-4b11-465a-a2cf-c2639de89f6b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"6860f40b-352c-47d3-9d50-fa74f6142fc8"],

Cell[CellGroupData[{

Cell["Standard Evaluation", "Section",
 CellChangeTimes->{{3.8209963005912766`*^9, 3.820996305974482*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"6c5e3794-47da-4730-8194-6fa0fec5a0ba"],

Cell["\<\
The default order of evaluation is to evaluate function arguments before the \
arguments are passed to the calling function.\
\>", "Text",
 CellTags->
  "Basic Principles",ExpressionUUID->"70d95ebf-f182-4d78-b7a3-73bf9edd8ea6"],

Cell[TextData[{
 "For example, note that ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"Head", "[", 
    RowBox[{"x", "+", "x"}], "]"}], "Input"]],ExpressionUUID->
  "75382f64-8734-4521-ab23-e6cf6909203e"],
 " returns ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{
  3.8216801650557985`*^9, {3.822047420669899*^9, 3.822047421491144*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"fe3b4507-cc08-485f-a84e-67b5471fd095"],

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{"x", "+", "x"}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"c446788b-23e6-4312-b092-df1e2c57d6d8"],

Cell[TextData[{
 "Even though the head of ",
 Cell[BoxData[
  RowBox[{"x", "+", "x"}]], "Input",ExpressionUUID->
  "6905dbd2-6567-45c3-a3dc-627d5a8ce9e2"],
 " is ",
 StyleBox[ButtonBox["Plus",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plus"],
  FontWeight->"Bold"],
 ", ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"x", "+", "x"}], "Input"]],ExpressionUUID->
  "791be5c8-c3ec-4665-892e-d9aefa182776"],
 " evaluates to ",
 Cell[BoxData[
  RowBox[{"2", " ", "x"}]], "Input",ExpressionUUID->
  "7995ea7a-d026-44c4-bc04-7b9f3a249e67"],
 " before ",
 StyleBox[ButtonBox["Head",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Head"],
  FontWeight->"Bold"],
 " is called."
}], "Text",
 CellChangeTimes->{{3.821680200193616*^9, 3.8216802223850327`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"4133367e-6a05-4077-b24e-5baf00028dad"],

Cell["", "EndOfSlide",ExpressionUUID->"a9baf7c6-75eb-4323-9663-7b27fd5ce110"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"4c15f63c-259d-45fe-9b61-30e2842d532f"],

Cell[CellGroupData[{

Cell["Nonstandard Evaluation", "Section",
 CellChangeTimes->{{3.8209963438044233`*^9, 3.8209963481867046`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"880c13d1-a84e-4d88-9b81-b97b99fcaf40"],

Cell["\<\
There are many functions for which it is useful or necessary to depart from \
standard evaluation order and to pass the arguments to the function without \
evaluating those arguments.\
\>", "Text",
 CellTags->
  "Basic Principles",ExpressionUUID->"071c0a32-af43-4c84-a53b-c6e9c1e17616"],

Cell[TextData[{
 "For example, the ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"],
  FontWeight->"Bold"],
 " function can work as intended only if the arguments are held unevaluated, \
since the purpose of the ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"],
  FontWeight->"Bold"],
 " function is to evaluate only one of the arguments:"
}], "CodeText",
 CellChangeTimes->{{3.821680236455328*^9, 3.8216802688501883`*^9}, {
  3.822047434923842*^9, 3.822047436262166*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"f4a154ce-fa04-4b74-a70e-91a3ccd756eb"],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"x", ">", "y"}], ",", 
   RowBox[{"Print", "[", 
    RowBox[{"1", "+", "1"}], "]"}], ",", 
   RowBox[{"Print", "[", 
    RowBox[{"2", "+", "2"}], "]"}]}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"d38e8e87-a148-4b43-97a3-d662aec13816"],

Cell[TextData[{
 "Most numerical functions, such as ",
 StyleBox[ButtonBox["NIntegrate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NIntegrate"],
  FontWeight->"Bold"],
 ", also hold their arguments unevaluated."
}], "Text",
 CellChangeTimes->{
  3.8216802799145393`*^9, {3.821680314096788*^9, 3.8216803272871313`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"d4d087ef-ec4e-4225-b4e7-c779db09cd5a"],

Cell[TextData[{
 "The integrand in this example is passed unevaluated to the ",
 StyleBox[ButtonBox["NIntegrate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NIntegrate"],
  FontWeight->"Bold"],
 " function and is evaluated only after numerical values are assigned for ",
 StyleBox["x:", "MR"]
}], "CodeText",
 CellChangeTimes->{
  3.8216803287013044`*^9, {3.822047438501067*^9, 
   3.8220474407734003`*^9}},ExpressionUUID->"201401d6-58d9-4314-9b23-\
1ac2e28b3191"],

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"64c62ce2-2f7f-4eac-8800-18952b37fa6c"],

Cell["", "EndOfSlide",ExpressionUUID->"f16b43b7-2ec5-43cc-ac49-273ddfedd47d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"66418b67-e742-443b-8130-db11265c9a63"],

Cell[CellGroupData[{

Cell["Evaluation Attributes", "Section",
 CellChangeTimes->{{3.8209963918596797`*^9, 3.8209963962569623`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"878195e8-414f-4cf3-ad4e-0df29dae0406"],

Cell[TextData[{
 "An ",
 StyleBox["attribute",
  FontSlant->"Italic"],
 " is a property of a symbol."
}], "Text",
 CellTags->
  "Basic Principles",ExpressionUUID->"4f6b3056-5db3-4592-8f8f-59f44d39638c"],

Cell[TextData[{
 "Nonstandard evaluation is controlled by the attributes ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["HoldFirst",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldFirst"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["HoldRest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldRest"],
  FontWeight->"Bold"],
 ", and ",
 StyleBox[ButtonBox["HoldAllComplete",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAllComplete"],
  FontWeight->"Bold"],
 ". You can use the ",
 StyleBox[ButtonBox["Attributes",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Attributes"],
  FontWeight->"Bold"],
 " function to see the attributes of a symbol."
}], "Text",
 CellChangeTimes->{{3.821680350381879*^9, 3.821680381130436*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"4954ea25-961d-46e1-99e9-ff177b7100a0"],

Cell[TextData[{
 "For example, ",
 StyleBox[ButtonBox["NIntegrate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NIntegrate"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"],
  FontWeight->"Bold"],
 " both have the ",
 StyleBox[ButtonBox["HoldAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/HoldAll"],
  FontWeight->"Bold"],
 " attribute, so both functions will hold all their arguments unevaluated by \
default:"
}], "CodeText",
 CellChangeTimes->{{3.8216803874644814`*^9, 3.821680399508249*^9}, {
  3.822047902112082*^9, 3.822047902639895*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"f6900c73-ccdf-4bb2-9877-0036a0fc7933"],

Cell[BoxData[
 RowBox[{"Attributes", "[", "NIntegrate", "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"de7113b3-a86d-4a2d-8e0c-d86c60009a7d"],

Cell[BoxData[
 RowBox[{"Attributes", "[", "Plot", "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"",ExpressionUUID->"d83c2188-0595-4863-8960-37323b99d19e"],

Cell["", "EndOfSlide",ExpressionUUID->"eb3606ee-5147-4afd-86c6-4c634e91de81"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"3d6a97af-f5d6-472a-a5c7-037210392e27"],

Cell[CellGroupData[{

Cell["Controlling Order of Evaluation", "Section",
 CellChangeTimes->{{3.8209964459841576`*^9, 3.8209964541147337`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"7bb0db35-475a-487a-b7d2-deed95d8abc2"],

Cell[TextData[{
 "Sometimes it is useful to force evaluation of function arguments that would \
otherwise have been held unevaluated. This can be done using ",
 StyleBox[ButtonBox["Evaluate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Evaluate"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8216804148722105`*^9, 3.8216804179579916`*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"ee9f2bb0-3d85-429b-abd1-c05c77ac832b"],

Cell["\<\
For example, consider making a plot of the following list of Legendre \
polynomials:\
\>", "CodeText",
 CellChangeTimes->{{3.822047907892564*^9, 3.822047908331429*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"904b0b20-31df-480a-acd6-d62eaf5ee3a7"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"LegendreP", "[", 
    RowBox[{"n", ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "8"}], "}"}]}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"In[1]:=",ExpressionUUID->"87db0276-7c48-4dd3-b14f-b5e3c731393d"],

Cell[TextData[{
 "If you simply try and use this list of polynomials as the first argument to \
",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"],
  FontWeight->"Bold"],
 ", it will take a little longer as the table gets re-evaluated for every \
value of ",
 StyleBox["x", "MR"],
 ":"
}], "CodeText",
 CellChangeTimes->{
  3.8210046070464177`*^9, 3.821680512250225*^9, {3.822047925327198*^9, 
   3.822047940056484*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"fe931ba0-d77d-4d04-ad26-0990cc0a156d"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"LegendreP", "[", 
      RowBox[{"n", ",", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "8"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"In[2]:=",ExpressionUUID->"b037e2c5-8750-4f0b-a1ea-bb74a1495221"],

Cell["\<\
Notice also that the Wolfram Language treats the set of curves as one \
graphical object and colors them all the same.\
\>", "Text",
 CellChangeTimes->{3.8210046070464177`*^9, 3.821680512250225*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"14e791ad-9fcf-46e0-aec6-0f91719b3f0d"],

Cell[TextData[{
 "Wrapping the ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"],
  FontWeight->"Bold"],
 " in ",
 StyleBox[ButtonBox["Evaluate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Evaluate"],
  FontWeight->"Bold"],
 " forces it to be evaluated first, producing the list of polynomials that \
are then (quickly) plotted against each other:"
}], "CodeText",
 CellChangeTimes->{{3.8216805310247326`*^9, 3.8216805427963963`*^9}, {
  3.8220479426105747`*^9, 3.822047943690289*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"0425955e-5f16-4aa1-8065-ebf1e7217397"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"LegendreP", "[", 
       RowBox[{"n", ",", "x"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "8"}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellTags->"Basic Principles",
 CellLabel->"In[3]:=",ExpressionUUID->"86c79fc6-674c-42ef-b1e3-a636fc691f1b"],

Cell["", "EndOfSlide",ExpressionUUID->"2b745339-3a6f-463a-a1a5-69d7146afb36"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"3fd03f9a-a483-4b9d-8111-313e7c490cd3"],

Cell[CellGroupData[{

Cell["Basic Principles: Summary", "Section",
 CellChangeTimes->{
  3.8209964958610616`*^9, {3.822048019415468*^9, 3.822048023350828*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"d46f7570-0999-48ec-93fe-b420fb4aab36"],

Cell["\<\
As mentioned at the beginning of this section, most basic questions about the \
Wolfram Language programming can be answered by considering a few simple \
principles.\
\>", "Text",
 CellChangeTimes->{{3.8209965167293806`*^9, 3.820996527229892*^9}},
 CellTags->
  "Basic Principles",ExpressionUUID->"fc6a0588-b6df-4fca-83c8-eace8a3fbad9"],

Cell["Everything is an expression.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"0ddedcfc-6864-4ecf-88f2-93735d4e9480"],

Cell["Evaluation works by applying rules associated with symbols.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"042ec9e7-2136-4d01-9a65-4cd39f22f659"],

Cell["Rules are applied until there are no more applicable rules.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"3e392e29-9830-40f5-9bf4-ce897998d2fe"],

Cell["Parts of expressions are evaluated in a specific order.", "Item",
 CellTags->
  "Basic Principles",ExpressionUUID->"ebc169b3-54f4-4c80-8242-84f0f72746c0"],

Cell[TextData[{
 "A more detailed discussion of evaluation can be found in the ",
 StyleBox[ButtonBox["Evaluation",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/Evaluation"],
  FontWeight->"Bold"],
 " tutorial."
}], "Text",
 CellChangeTimes->{3.8216805777839627`*^9},
 CellTags->
  "Basic Principles",ExpressionUUID->"bdbfb77b-3514-423d-8421-82b450ffb46e"],

Cell["", "EndOfSlide",ExpressionUUID->"602f08d7-de60-45bd-8e95-acdef2ed986f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"a77e6653-5abb-4a0c-bceb-fc005a49a619"],

Cell[CellGroupData[{

Cell["Functional Programming: Overview", "Section",
 CellChangeTimes->{{3.822047964164588*^9, 3.822047965897274*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b09e7296-e615-4cc4-baad-66e7cd9bbc54"],

Cell["Pure functions, syntax, and notation", "Item",
 CellChangeTimes->{3.8209965715968018`*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b12e7cf7-dfd1-4706-a7c4-ab93f7537498"],

Cell["Creating and working with pure functions", "Item",
 CellChangeTimes->{3.820996573723061*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"0c5a3466-566f-4f50-bf24-e48e92616123"],

Cell["Level specification for functional constructs", "Item",
 CellChangeTimes->{3.8209965751083636`*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"1bdc2516-0979-445b-965a-ee1bfaafeb08"],

Cell["Examples of functional programming", "Item",
 CellChangeTimes->{3.820996577112579*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"9b4343b6-5fb9-454d-9c0a-24760e5e6eed"],

Cell["", "EndOfSlide",ExpressionUUID->"633e8859-0ab5-4aa2-9320-950678b01e1f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"41006e41-64e1-4d1e-b84e-60fd20cb4b24"],

Cell[CellGroupData[{

Cell["Pure Functions", "Section",
 CellChangeTimes->{{3.820996615184019*^9, 3.8209966200325212`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ec82a80f-3b02-4881-b22b-addca8ab30ad"],

Cell[TextData[{
 "Pure functions, or \[OpenCurlyDoubleQuote]anonymous\[CloseCurlyDoubleQuote] \
functions, are functions that are introduced without being named. Pure \
functions are constructed using ",
 StyleBox[ButtonBox["Function",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Function"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.821680600701915*^9, 3.821680614997723*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"e9297ed1-feac-459d-bcda-789a748439a9"],

Cell["\<\
Here is a pure function that multiplies its argument by a constant:\
\>", "CodeText",
 CellChangeTimes->{{3.8220480322852592`*^9, 3.822048032732916*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"5d5d7094-2f4a-4e1d-9fce-a7ac17ecfa03"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"x", ",", 
   RowBox[{"10", "x"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"4c83b34c-a3ac-4544-820c-f5eab569337a"],

Cell["\<\
Pure functions are used by entering them as the head of an expression, just \
as other functions are used:\
\>", "CodeText",
 CellChangeTimes->{{3.822048034015505*^9, 3.822048034476631*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"249c4a60-99ed-4cc8-9417-7b241119d93b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{"x", ",", 
    RowBox[{"10", "x"}]}], "]"}], "[", "3", "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"2b2e0fd4-28e7-4b86-9137-8bf03a477ce2"],

Cell["\<\
This pure function has the same effect as the following definition but \
without the need for a definition:\
\>", "CodeText",
 CellChangeTimes->{{3.822048035658134*^9, 3.822048036117855*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"7ca094f2-7cdc-40c7-9a18-2aceee519864"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"10", " ", "x"}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[30]:=",ExpressionUUID->"080ebd5d-4d17-42d0-9024-936f4ae6f5a2"],

Cell[BoxData[
 RowBox[{"f", "[", "3", "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"7f1bde0a-edfc-4955-aead-4131dc15d486"],

Cell[TextData[{
 "Clear the definition of ",
 StyleBox["f:", "MR"]
}], "CodeText",
 CellChangeTimes->{{3.822048038481759*^9, 3.82204803895408*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"752f6528-0a1f-4045-8668-606acd1c1e81"],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[32]:=",ExpressionUUID->"3de4f171-c29b-4895-bdf1-b32476d9e05e"],

Cell["", "EndOfSlide",ExpressionUUID->"8511ee69-9db2-4fb9-977b-2c4340e50e16"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"65eacc6d-e609-435c-84bc-e78ea015c2b6"],

Cell[CellGroupData[{

Cell["Notation for Pure Functions", "Section",
 CellChangeTimes->{{3.820996651065448*^9, 3.82099665646497*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"cb16aea4-f1ab-436f-98c4-d896c48cf91c"],

Cell[TextData[{
 "When entering pure functions you can use ",
 StyleBox["#", "Input"],
 " in place of the variable and ",
 StyleBox["&", "MR"],
 " to indicate that the expression is a pure function."
}], "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"e447b1cc-40ee-4bc1-b77f-80d9a5a1d58c"],

Cell["\<\
This input represents a pure function that multiplies the argument by a \
constant:\
\>", "CodeText",
 CellChangeTimes->{{3.822048041676902*^9, 3.82204804211559*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"4e032594-c106-40c0-ba43-29402ab13e5c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"10", " ", "#"}], "&"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"51bb4670-a0aa-476f-acf3-05a6c510e62c"],

Cell["\<\
Here is an equivalent input in which the variable is given a name:\
\>", "CodeText",
 CellChangeTimes->{{3.822048044084208*^9, 3.822048044545629*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"92ee22bf-5e11-45cd-9421-5697713c153d"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{"x", ",", 
   RowBox[{"10", " ", "x"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"7b234eba-1905-4b61-b0f2-d2bc385442b2"],

Cell["\<\
Both ways of entering the pure function have the same effect. The parentheses \
are not required but are included here for clarity:\
\>", "CodeText",
 CellChangeTimes->{{3.822048045726548*^9, 3.8220480461989737`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"925e42c2-fb53-452a-9548-cc7b6e80f7f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"10", " ", "#"}], "&"}], ")"}], "[", "3", "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"571f54aa-a621-4533-8959-99a3c4a1ccd5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{"x", ",", 
    RowBox[{"10", " ", "x"}]}], "]"}], "[", "3", "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"48d0bc60-e8fd-41ff-8676-a83b8566314f"],

Cell[TextData[{
 "The notation ",
 StyleBox["#1, #2, \[Ellipsis] ", "Input"],
 "can be used for pure functions with more than one argument:"
}], "CodeText",
 CellChangeTimes->{{3.8220480484606247`*^9, 3.822048048930525*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"a3daa1cf-c401-4b23-927c-419a8b27d34f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"#1", "+", 
     RowBox[{"#2", " ", "#3"}]}], "&"}], ")"}], "[", 
  RowBox[{"x", ",", "y", ",", "z"}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"265cd74c-3374-4776-ac20-c966164b22f9"],

Cell["", "EndOfSlide",ExpressionUUID->"9c6d0244-4577-4e97-b1e4-8f4d62d79950"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"b471fa55-4757-4b9c-b999-b9680fe40270"],

Cell[CellGroupData[{

Cell["Example", "Section",
 CellChangeTimes->{3.8209967150122967`*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"2dbead05-5141-4a0a-b85c-3aa88883ac20"],

Cell[TextData[{
 StyleBox["Demonstration",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ": before going on, take a few moments and create the following pure \
functions:"
}], "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"c644a6a8-5197-48bf-a517-2c47bf8cf030"],

Cell["The function that adds 5 to the square of its argument", "Item",
 CellChangeTimes->{3.821004481367485*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"053eab3a-d939-4e36-aa4d-589dc554d209"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "The function that adds 5 to the square of its argument", "CodeText", 
      CellChangeTimes -> {3.821680846726677*^9}, CellTags -> 
      "Functional Programming"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{
           SuperscriptBox["#", "2"], "+", "5"}], "&"}]], "Input"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{
                SuperscriptBox["#", "2"], "+", "5"}], "&"}], "[", "\[Alpha]", 
            "]"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"5", "+", 
            SuperscriptBox["\[Alpha]", "2"]}]], "Output"]}, Open]]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"092cf541-60a1-46e9-8c60-0540b28a857a"],

Cell["\<\
The function that subtracts the cube of its argument from the square of its \
argument\
\>", "Item",
 CellChangeTimes->{3.82100448408607*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"9eca06bd-2eaf-4aa9-837c-a3f0054f021c"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "The function that subtracts the cube of its argument from the square of \
its argument", "CodeText", CellChangeTimes -> {3.8216808642917547`*^9}, 
      CellTags -> "Functional Programming"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{
           SuperscriptBox["#", "2"], "-", 
           SuperscriptBox["#", "3"]}], "&"}]], "Input"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{
                SuperscriptBox["#", "2"], "-", 
                SuperscriptBox["#", "3"]}], "&"}], "[", "\[Beta]", "]"}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{
            SuperscriptBox["\[Beta]", "2"], "-", 
            SuperscriptBox["\[Beta]", "3"]}]], "Output"]}, Open]]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"fd77bd92-d3bc-4f0c-8793-82f64faadd96"],

Cell["\<\
The function that squares the difference of its two arguments\
\>", "Item",
 CellChangeTimes->{3.8210044898957653`*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f386ae2a-fccd-4c59-a360-61fb79de1341"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "The function that squares the difference of its two arguments", 
      "CodeText", CellChangeTimes -> {3.8216808885047207`*^9}, CellTags -> 
      "Functional Programming"], 
     Cell[
      BoxData[
       RowBox[{
         SuperscriptBox[
          RowBox[{"(", 
            RowBox[{"#1", "-", "#2"}], ")"}], "2"], "&"}]], "Input"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              SuperscriptBox[
               RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}], "2"], "&"}], "[", 
            RowBox[{"\[Alpha]", ",", "\[Beta]"}], "]"}]], "Input"], 
        Cell[
         BoxData[
          SuperscriptBox[
           RowBox[{"(", 
             RowBox[{"\[Alpha]", "-", "\[Beta]"}], ")"}], "2"]], "Output"]}, 
       Open]]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"dea67524-7b91-4189-8443-cbc882a58db5"],

Cell[TextData[{
 "The function that returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "if its argument is between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "0.1"}], TraditionalForm]],ExpressionUUID->
  "a4169b85-c55c-4e8b-abcd-1a3ae23d9a24"],
 " and ",
 Cell[BoxData[
  FormBox["0.1", TraditionalForm]],ExpressionUUID->
  "c39cd9b1-d4cd-4b27-87e1-b823ad0f0f57"]
}], "Item",
 CellChangeTimes->{
  3.821004493150408*^9, {3.821680758690908*^9, 3.8216807626613226`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"48d1acfe-d58f-404c-8dd7-2cc9875c51fb"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The function that returns ", 
        StyleBox[
         ButtonBox[
         "True", BaseStyle -> "Link", ButtonData -> "paclet:ref/True"], 
         FontWeight -> "Bold"], " if its argument is between ", 
        Cell[
         BoxData[
          FormBox[
           RowBox[{"-", "0.1"}], TraditionalForm]]], " and ", 
        Cell[
         BoxData[
          FormBox["0.1", TraditionalForm]]]}], "CodeText", 
      CellChangeTimes -> {3.821680795183486*^9, 3.8216809088103094`*^9}, 
      CellTags -> "Functional Programming"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{
           RowBox[{"-", "0.1"}], "<", "#", "<", "0.1"}], "&"}]], "Input"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Select", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"-", "0.45615"}], ",", "0.25452", ",", "0.18843", 
                  ",", "0.29897", ",", "0.02901", ",", "0.39316", ",", 
                  RowBox[{"-", "0.08203"}], ",", 
                  RowBox[{"-", "0.36170"}], ",", "0.03806", ",", "0.44246", 
                  ",", "0.1286", ",", "0.37831"}], "}"}], ",", 
              RowBox[{
                RowBox[{
                  RowBox[{"-", "0.1"}], "<", "#", "<", "0.1"}], "&"}]}], 
            "]"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"0.02901`", ",", 
              RowBox[{"-", "0.08203`"}], ",", "0.03806`"}], "}"}]], 
         "Output"]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"e4673936-519c-42e9-a83b-da471522017a"],

Cell["", "EndOfSlide",ExpressionUUID->"05bd06aa-abb6-4d67-b7c4-09f8e0f3557b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"f85737dd-1189-4313-ae83-c413c6f54c08"],

Cell[CellGroupData[{

Cell["Using Pure Functions", "Section",
 CellChangeTimes->{{3.8209967539255457`*^9, 3.8209967589191575`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"abc8fe01-4c43-4d5c-b8e0-e3b65d44290e"],

Cell[TextData[{
 "Pure functions are frequently used in conjunction with other functions such \
as ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8216809711775827`*^9, 3.821680982037613*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"fad42bfe-133b-4188-9953-1a816db4dda5"],

Cell["\<\
This maps the pure function that squares its argument across a list:\
\>", "CodeText",
 CellChangeTimes->{{3.82204806808072*^9, 3.822048068586413*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"71d0bce7-d9c4-42ab-82d6-6c980984c5e2"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "^", "2"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "a", ",", "\[Pi]", ",", ".001"}], "}"}]}], 
  "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"4c7c338b-631e-49dd-8185-db81f0e33250"],

Cell[TextData[{
 "A pure function is used here to square all those elements of a list that \
lie between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "9b8269ae-aae8-4cbb-94d0-9f713de029e1"],
 " and 1:"
}], "CodeText",
 CellChangeTimes->{{3.822048069857875*^9, 3.8220480707803297`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"a5bb1f3c-5b14-4d06-b941-10949b03533e"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "1"}], "<", "#", "<", "1"}], ",", 
      SuperscriptBox["#", "2"], ",", "#"}], "]"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.1", ",", 
     RowBox[{"-", "0.25"}], ",", "1", ",", 
     RowBox[{"-", "0.01"}], ",", "4"}], "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"ebd5b2cd-0372-4603-972a-46a2b248cff2"],

Cell[TextData[{
 "Pure functions are also commonly used with functions such as ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"],
  FontWeight->"Bold"],
 " whose second argument should be a predicate function."
}], "Text",
 CellChangeTimes->{{3.821680994991814*^9, 3.8216809973046255`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"9ec04d7c-f2bc-4444-9b5a-e457a0f7c230"],

Cell[TextData[{
 "For example, this selects all those numbers from the list that are greater \
than ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "50"}], TraditionalForm]],ExpressionUUID->
  "5d071208-26b9-4568-b0ed-5b0c9aec4cec"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.822048073851635*^9, 3.822048074346545*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"356bd304-ec8f-4e3c-ab20-8faaaa52db7c"],

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"100", ",", 
     RowBox[{"-", "67"}], ",", 
     RowBox[{"-", "95"}], ",", 
     RowBox[{"-", "80"}], ",", 
     RowBox[{"-", "22"}], ",", 
     RowBox[{"-", "89"}], ",", "23", ",", 
     RowBox[{"-", "19"}], ",", "25", ",", "100", ",", 
     RowBox[{"-", "54"}], ",", 
     RowBox[{"-", "11"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"#", ">", 
     RowBox[{"-", "50"}]}], "&"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"e701e483-51f6-4bc0-bfc9-c27569220ec5"],

Cell[TextData[{
 "You could use a pure function as the first argument to ",
 StyleBox[ButtonBox["FixedPointList",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FixedPointList"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "to program a root-finder based on Newton\[CloseCurlyQuote]s method:"
}], "CodeText",
 CellChangeTimes->{{3.821681025502711*^9, 3.8216810313530893`*^9}, {
  3.822048078340904*^9, 3.822048079004591*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"acdc4f2f-9dd4-4578-b4a3-c16109767776"],

Cell[BoxData[
 ButtonBox[
  RowBox[{
   RowBox[{"Newton", "'"}], "s", " ", "method", " ", "refresher"}],
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      CellGroupData[{
        Cell["Newton\[CloseCurlyQuote]s Method Refresher", "Subsubsection"], 
        Cell[
        "Newton\[CloseCurlyQuote]s method for finding roots of a function is \
an iterative process that starts with an initial guess and, if the function \
is well-behaved, gives closer and closer approximations to the root with each \
iteration.", "Text"], 
        Cell[
         TextData[{"Given a function ", 
           Cell[
            BoxData[
             FormBox[
              RowBox[{"f", "(", "x", ")"}], TraditionalForm]]], 
           ", start with an initial guess ", 
           Cell[
            BoxData[
             FormBox[
              SubscriptBox["x", "0"], TraditionalForm]]], " for the root of ", 
           Cell[
            BoxData[
             FormBox["f", TraditionalForm]]], 
           ". Then draw the tangent to the curve given by ", 
           Cell[
            BoxData[
             FormBox["f", TraditionalForm]]], " at ", 
           Cell[
            BoxData[
             FormBox[
              SubscriptBox["x", "0"], TraditionalForm]]], 
           ". That is, draw the line connecting ", 
           Cell[
            BoxData[
             FormBox[
              RowBox[{"f", "(", 
                SubscriptBox["x", "0"], ")"}], TraditionalForm]]], " to the ", 
           Cell[
            BoxData[
             FormBox["x", TraditionalForm]]], 
           "-axis, tangent to the curve at ", 
           Cell[
            BoxData[
             FormBox[
              SubscriptBox["x", "0"], TraditionalForm]]], "."}], "CodeText"], 
        
        Cell[
         BoxData[
          GraphicsBox[{{}, {}, {
             Hue[0.67, 0.6, 0.6], 
             LineBox[CompressedData["
1:eJwV1mk01QkYBnA7qVw00r0YU7YW3ZoSJe7zFyVSyRbSjQhRljIUY41KaJkM
QlGWkl2WQbbromxtCuEqGcmakN2d/3x4z3t+5/n6vOe860+7m5zh4+HheUDO
/9vwzOCb6m9nGFMmM9sm+DhaAro0j16qHsJ18tw6iHuMnUlxic+oZqjb/tjY
hShl9MsqBvsoM+FdXHj0iHMz41BLe8F9qgM08hd1dhKdDMVIuTSu/FmscTro
KV/2hbFoaB9rp+wGXqsmASXnEcZQaBvbLsYTarG1W6XMJxnHHWYq/qJ6IW2y
okyamGOwdWkltYneaKsx20Sb5jK2K2jnTclfBoeHrSVWxo9EPtsMpRQ/5HVm
mt/iCEOkL+SRhXIA7IbtTok7r0LZp7cttWZBmKFNZh3MFIeHsYOhTUwwcmwS
N6wwX4Oebdd0o6ihcNmlOLOCoCI6aV210okweDTzWRgGy8KQ8lSrMvEqvgQe
zBadlkfxWPOucflwrHwQ+kiwTAHnmMyCa3Y34LKBxUqrUsKG1nH6bykR4Nu1
szeMo4Kb2ZIbjynfRLtA3iohZ1Xsl0tN/eZ0C9Kscrn0t3QE1MeL15jdRsNV
fyndzO1QU1eNsoq5g9sqonL85juRLHX06g1qNNwrLaX4iT3wa4llW5RFY+R9
lpjpR01YhH3iUzjxN8IKaUK6wVpYNe0ZWJ4YA9EG3XG+aeBSW/SlEfl7yE8+
Y85bpgvTyJ7if6rvgfPC2zCjVA90PeXpULt4xLdFMx5W7Uf/sxJPuZQElMXM
KARz9HHs7keXI8oPkFp3/AuPsxFUDylk0BoeQEf09euN8Ychwn/u64BTEs7v
MK9IfnsEp0qX86vMklG8ttaAyDSG1KbbdMuYhxBx0qHxmJsiWOSZSjg1FfM2
F1O5sMJm/TvXCzxSsXAg87cOWWu8DXP/1tWQioPrCnUcl6yhyK+aSfdOwxuP
3RdSXtqgfimV3vY2HTWLYfXG+rZYNRmzSz4yA9Vq42YWZxxQ9PsfMQe/ZGCb
w1+l7hMOYHqYznhqPsV+4Qff7QPPIHeUUsoefAqHJ2Pvu5MdYTJ4XctlfxZ8
LP7wF593RlyPr27Rcg6+2q0jAgXdoCNrlcoxz0Vd076m/bluGLLWEBTJzoVB
xvuNX63d8evIZfvsrXlIORW/teeEB9zPqivxdOfh+pZzR97UekLSIfdJ2u4C
zMV/NNCu9oKl1cPc7xOF8OjoU1F09cN4l5noI1oRTjhuypP64IerTJEzprpF
GHlhseuDzp94Zu9OK44uwuJKR3W2jD/E3LTD/DSK8TncYo1ZZwDqQjqthfxL
YFOAxIfawdiRJSEkK1IG/UOzsdu2huElvc62ZXsZYrqvb45zD4Nt/qXyAKsy
aHRE7nUuCENUca/H56dl8BQb72DsuYrB6uyu9MPlaPCW5a0/dA0P3hvk/373
OWbUZYS1Qsnec4Nt9H+tgscfT77V77uJuLPHmaoHqhCRpNB56/ZNKLap2kq4
VSE84L3Oc85NMDLa7bsqqqBxoicAf95CaUZMUQm9GmkNle9mTt7GqOnI80Ot
1dg0EWi1kH4H5k9imy6uZmGSerXzKDMaiSdDjBzXs3B4KaffNSIafZLnWyx3
sSC992JW6T/kXfjve6V9kgWB+hbPoTV/I9xk9K1wNgt7qE3vkpv/RsXivo8J
RrWQKhqYstWPhdKxscHaCDZush5m0k/Hgxaor+n0kI3mhBodzr14iGcnR4iW
sOGSZMJ88SYe8yKm9GN9bFQovdhstC8Br6tLLnJ216GDzishqZwI3+3By7P/
1qFmR6Zk7Ox9tFJ++YVONKAyyH2a1Z8Mn9Y9iJt6CYOe0z5+q9MgRi/696VI
I+5SdwYa0tOQGrU9ckG2EazECv6dR8meG6l0Mvc3ot2H94rxnTRsafrlolJM
I94H6VlXrE1Hb8N4eoFGE2icElem8mPo16SJtfg243WdKa3SMgPShRIcXt5X
GDOwTZ9ckYPiPt3mV1pv0eiblFX2shAsl/syViNtoF54sjLEphzTytqU7PPt
cEy7lvWbSg345jLFZZQ+ImCAzetjUwd1rm2xaU437ss40F8UvkRzqFpr/eZe
KGxUZ9JOtEL+9vBcxtgniHFzF/YOv8HwTC/n/fY+NM906XrntCF1qLxR7OYX
JAbTnI0H2iEm93i8v78fgUkJn4QMuhB5tsgxWXEANjLhP1alcfCTyOx3DvwK
D4k0yQ06n+G1g124tnYQtoETrvqbvqA3hx3xZv0QxldnEeuO/4sFl7aETb7D
CGB5RM/GfsUWHeFlx/IRKG64U6rd/A36j9Y75UuP4VWrpmqA0Qh85E5t+Gwz
joD2ww28FWNQHTFf2X74O4TUahs23v+ONZTvIuz571g8YGXQJ/ADAlUJuQqJ
E6gfso6qspuEq1p554pDPxASrLdWfWgKmQankyt//kCQTJC0qO9PTA/TxAdi
JqE32xk5sTCDIlN9/mi9KaidezwTmzWHwINhSYUDU7h1KUeedXgB63sMO1LC
puG1k2GyeXIRmhqh0dQdP/FPiddu+8Zl2Pz6ao733U9Y60VQ/9LnIaYbo/o8
gmdATbHpkdPjJeIEmF4mirPwMf46mKrOR6zhFD3iY8/i1m7r6MLN/ISgf7DZ
Hs85NHSZ/+6rKUDwZDBz+yTnMTuqF1LOECQuxOdGSbLmwS/GUJk5JURUbLku
IuG2AMqVcFONK8KEhOEF1RCxRSy5Vdu53BMhure+fnf5+SKyRqcObWldQeQ9
gGI/cwnSjaf7106LEidz1SXklpew62VlorfsKiIo7GFw99NlTKX3Vo3aryay
B+USxIy4uOE6ISGRKEYckxDb3TDPxSgThremKcQNQT6ZbtJ1PfYrSkmz56aX
vpO+m5zyoo+0el9PLW2Bi9U/vPTVf1II2rPso26k/dnMAz2k+8wOO0ktcmGi
ctRgyyyF8IqLjLFf4uJD/yP7hnkKkR0ZdPkS6WN925QnSA8EedlEkWYpdAzS
FiiE5VmbDSWkQy74urmR1tZUzRFdJg0hP6lFCiHU3VSXT9o7VvOe/RKFwOuq
J/Wk9dr8TkaRvsR+FtFFWsi8Y30J6aGshGOCXC75H3x5KrpMIVr9XXssSeeO
oDKftPCFU9XnSSsbnLjSRZpwNE0JIX3n252DglwKUXBk79ks0vo/jd9Zkh7e
t82o5v/8dGdcCGlFDYVtH0i/kfRnZpFmbpGWHCYtIqyl+IF0rPzKaS7pHVg7
xCX9H3ycv+I=
              "]]}}, AspectRatio -> 
           NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
           AxesOrigin -> {0, 0.2}, Epilog -> {
             InsetBox[
              FormBox[
               RowBox[{"f", "(", "x", ")"}], TraditionalForm], {1.95, 3.49}], {
              InsetBox[
               FormBox[
               "\"\\!\\(\\*SubscriptBox[\\(x\\), \\(0\\)]\\)\"", 
                TraditionalForm], {1.8, -0.02}], 
              PointSize[0.0125], 
              PointBox[{1.8, 0.2}]}, {
              InsetBox[
               FormBox[
               "\"\\!\\(\\*SubscriptBox[\\(x\\), \\(1\\)]\\)\"", 
                TraditionalForm], {1., -0.02}], 
              RGBColor[1, 0, 0], 
              LineBox[{{1.8, 3.24}, {1., 0.2}}]}, 
             Dashing[{0.015, 0.015}], 
             LineBox[{{1.8, 3.24}, {1.8, 0.2}}]}, 
           PlotRange -> {{0, 2}, {-0.2, 4.5}}, PlotRangeClipping -> True, 
           PlotRangePadding -> {
             Scaled[0.02], Automatic}, Ticks -> None]], "Input", 
         CellChangeTimes -> {{3.400506608486*^9, 3.4005066092790003`*^9}}], 
        Cell[
         TextData[{"Where the tangent lines crosses the ", 
           Cell[
            BoxData[
             FormBox["x", TraditionalForm]]], 
           "-axis you have the next best approximation to the root of ", 
           Cell[
            BoxData[
             FormBox["f", TraditionalForm]]], "; call it ", 
           Cell[
            BoxData[
             FormBox[
              SubscriptBox["x", "1"], TraditionalForm]]], ". "}], "Text"], 
        Cell[
         TextData[{
          "Now iterate this process: draw a new tangent to the curve at ", 
           Cell[
            BoxData[
             FormBox[
              RowBox[{"f", "(", 
                SubscriptBox["x", "1"], ")"}], TraditionalForm]]], 
           ". Where it crosses the ", 
           Cell[
            BoxData[
             FormBox["x", TraditionalForm]]], 
           "-axis will be a new approximation to the root, call it ", 
           Cell[
            BoxData[
             FormBox[
              SubscriptBox["x", "2"], TraditionalForm]]], ", and so on."}], 
         "CodeText"], 
        Cell[
         BoxData[
          GraphicsBox[{{}, {}, {
             Hue[0.67, 0.6, 0.6], 
             LineBox[CompressedData["
1:eJwV1mk01QkYBnA7qVw00r0YU7YW3ZoSJe7zFyVSyRbSjQhRljIUY41KaJkM
QlGWkl2WQbbromxtCuEqGcmakN2d/3x4z3t+5/n6vOe860+7m5zh4+HheUDO
/9vwzOCb6m9nGFMmM9sm+DhaAro0j16qHsJ18tw6iHuMnUlxic+oZqjb/tjY
hShl9MsqBvsoM+FdXHj0iHMz41BLe8F9qgM08hd1dhKdDMVIuTSu/FmscTro
KV/2hbFoaB9rp+wGXqsmASXnEcZQaBvbLsYTarG1W6XMJxnHHWYq/qJ6IW2y
okyamGOwdWkltYneaKsx20Sb5jK2K2jnTclfBoeHrSVWxo9EPtsMpRQ/5HVm
mt/iCEOkL+SRhXIA7IbtTok7r0LZp7cttWZBmKFNZh3MFIeHsYOhTUwwcmwS
N6wwX4Oebdd0o6ihcNmlOLOCoCI6aV210okweDTzWRgGy8KQ8lSrMvEqvgQe
zBadlkfxWPOucflwrHwQ+kiwTAHnmMyCa3Y34LKBxUqrUsKG1nH6bykR4Nu1
szeMo4Kb2ZIbjynfRLtA3iohZ1Xsl0tN/eZ0C9Kscrn0t3QE1MeL15jdRsNV
fyndzO1QU1eNsoq5g9sqonL85juRLHX06g1qNNwrLaX4iT3wa4llW5RFY+R9
lpjpR01YhH3iUzjxN8IKaUK6wVpYNe0ZWJ4YA9EG3XG+aeBSW/SlEfl7yE8+
Y85bpgvTyJ7if6rvgfPC2zCjVA90PeXpULt4xLdFMx5W7Uf/sxJPuZQElMXM
KARz9HHs7keXI8oPkFp3/AuPsxFUDylk0BoeQEf09euN8Ychwn/u64BTEs7v
MK9IfnsEp0qX86vMklG8ttaAyDSG1KbbdMuYhxBx0qHxmJsiWOSZSjg1FfM2
F1O5sMJm/TvXCzxSsXAg87cOWWu8DXP/1tWQioPrCnUcl6yhyK+aSfdOwxuP
3RdSXtqgfimV3vY2HTWLYfXG+rZYNRmzSz4yA9Vq42YWZxxQ9PsfMQe/ZGCb
w1+l7hMOYHqYznhqPsV+4Qff7QPPIHeUUsoefAqHJ2Pvu5MdYTJ4XctlfxZ8
LP7wF593RlyPr27Rcg6+2q0jAgXdoCNrlcoxz0Vd076m/bluGLLWEBTJzoVB
xvuNX63d8evIZfvsrXlIORW/teeEB9zPqivxdOfh+pZzR97UekLSIfdJ2u4C
zMV/NNCu9oKl1cPc7xOF8OjoU1F09cN4l5noI1oRTjhuypP64IerTJEzprpF
GHlhseuDzp94Zu9OK44uwuJKR3W2jD/E3LTD/DSK8TncYo1ZZwDqQjqthfxL
YFOAxIfawdiRJSEkK1IG/UOzsdu2huElvc62ZXsZYrqvb45zD4Nt/qXyAKsy
aHRE7nUuCENUca/H56dl8BQb72DsuYrB6uyu9MPlaPCW5a0/dA0P3hvk/373
OWbUZYS1Qsnec4Nt9H+tgscfT77V77uJuLPHmaoHqhCRpNB56/ZNKLap2kq4
VSE84L3Oc85NMDLa7bsqqqBxoicAf95CaUZMUQm9GmkNle9mTt7GqOnI80Ot
1dg0EWi1kH4H5k9imy6uZmGSerXzKDMaiSdDjBzXs3B4KaffNSIafZLnWyx3
sSC992JW6T/kXfjve6V9kgWB+hbPoTV/I9xk9K1wNgt7qE3vkpv/RsXivo8J
RrWQKhqYstWPhdKxscHaCDZush5m0k/Hgxaor+n0kI3mhBodzr14iGcnR4iW
sOGSZMJ88SYe8yKm9GN9bFQovdhstC8Br6tLLnJ216GDzishqZwI3+3By7P/
1qFmR6Zk7Ox9tFJ++YVONKAyyH2a1Z8Mn9Y9iJt6CYOe0z5+q9MgRi/696VI
I+5SdwYa0tOQGrU9ckG2EazECv6dR8meG6l0Mvc3ot2H94rxnTRsafrlolJM
I94H6VlXrE1Hb8N4eoFGE2icElem8mPo16SJtfg243WdKa3SMgPShRIcXt5X
GDOwTZ9ckYPiPt3mV1pv0eiblFX2shAsl/syViNtoF54sjLEphzTytqU7PPt
cEy7lvWbSg345jLFZZQ+ImCAzetjUwd1rm2xaU437ss40F8UvkRzqFpr/eZe
KGxUZ9JOtEL+9vBcxtgniHFzF/YOv8HwTC/n/fY+NM906XrntCF1qLxR7OYX
JAbTnI0H2iEm93i8v78fgUkJn4QMuhB5tsgxWXEANjLhP1alcfCTyOx3DvwK
D4k0yQ06n+G1g124tnYQtoETrvqbvqA3hx3xZv0QxldnEeuO/4sFl7aETb7D
CGB5RM/GfsUWHeFlx/IRKG64U6rd/A36j9Y75UuP4VWrpmqA0Qh85E5t+Gwz
joD2ww28FWNQHTFf2X74O4TUahs23v+ONZTvIuz571g8YGXQJ/ADAlUJuQqJ
E6gfso6qspuEq1p554pDPxASrLdWfWgKmQankyt//kCQTJC0qO9PTA/TxAdi
JqE32xk5sTCDIlN9/mi9KaidezwTmzWHwINhSYUDU7h1KUeedXgB63sMO1LC
puG1k2GyeXIRmhqh0dQdP/FPiddu+8Zl2Pz6ao733U9Y60VQ/9LnIaYbo/o8
gmdATbHpkdPjJeIEmF4mirPwMf46mKrOR6zhFD3iY8/i1m7r6MLN/ISgf7DZ
Hs85NHSZ/+6rKUDwZDBz+yTnMTuqF1LOECQuxOdGSbLmwS/GUJk5JURUbLku
IuG2AMqVcFONK8KEhOEF1RCxRSy5Vdu53BMhure+fnf5+SKyRqcObWldQeQ9
gGI/cwnSjaf7106LEidz1SXklpew62VlorfsKiIo7GFw99NlTKX3Vo3aryay
B+USxIy4uOE6ISGRKEYckxDb3TDPxSgThremKcQNQT6ZbtJ1PfYrSkmz56aX
vpO+m5zyoo+0el9PLW2Bi9U/vPTVf1II2rPso26k/dnMAz2k+8wOO0ktcmGi
ctRgyyyF8IqLjLFf4uJD/yP7hnkKkR0ZdPkS6WN925QnSA8EedlEkWYpdAzS
FiiE5VmbDSWkQy74urmR1tZUzRFdJg0hP6lFCiHU3VSXT9o7VvOe/RKFwOuq
J/Wk9dr8TkaRvsR+FtFFWsi8Y30J6aGshGOCXC75H3x5KrpMIVr9XXssSeeO
oDKftPCFU9XnSSsbnLjSRZpwNE0JIX3n252DglwKUXBk79ks0vo/jd9Zkh7e
t82o5v/8dGdcCGlFDYVtH0i/kfRnZpFmbpGWHCYtIqyl+IF0rPzKaS7pHVg7
xCX9H3ycv+I=
              "]]}}, AspectRatio -> 
           NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> True, 
           AxesOrigin -> {0, 0.2}, Epilog -> {
             InsetBox[
              FormBox[
               RowBox[{"f", "(", "x", ")"}], TraditionalForm], {1.95, 3.49}], {
              InsetBox[
               FormBox[
               "\"\\!\\(\\*SubscriptBox[\\(x\\), \\(0\\)]\\)\"", 
                TraditionalForm], {1.8, -0.02}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*SubscriptBox[\\(x\\), \\(1\\)]\\)\"", 
                TraditionalForm], {1., -0.02}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*SubscriptBox[\\(x\\), \\(2\\)]\\)\"", 
                TraditionalForm], {0.65, -0.02}], 
              InsetBox[
               FormBox[
               "\"\\!\\(\\*SubscriptBox[\\(x\\), \\(3\\)]\\)\"", 
                TraditionalForm], {0.48, -0.02}]}, {
              PointSize[0.01], 
              PointBox[{{1.8, 0.2}, {1., 0.2}, {0.65, 0.2}, {0.48, 0.2}}]}, {
              RGBColor[1, 0, 0], 
              LineBox[{{1.8, 3.24}, {1., 0.2}}], 
              LineBox[{{1., 1.}, {0.65, 0.2}}], 
              LineBox[{{0.65, 0.42250000000000004`}, {0.48, 0.2}}]}, {
              Dashing[{0.0125, 0.0125}], 
              LineBox[{{1.8, 3.24}, {1.8, 0.2}}], 
              LineBox[{{1., 1.}, {1., 0.2}}], 
              LineBox[{{0.65, 0.42250000000000004`}, {0.65, 0.2}}]}}, 
           PlotRange -> {{0, 2}, {-0.2, 4.5}}, PlotRangeClipping -> True, 
           PlotRangePadding -> {
             Scaled[0.02], Automatic}, Ticks -> None]], "Output", 
         CellChangeTimes -> {{3.4005068651210003`*^9, 3.400506875686*^9}, {
           3.400506951916*^9, 3.400506973947*^9}, 3.400507033973*^9, {
           3.400507078125*^9, 3.400507100465*^9}, {3.4005071307390003`*^9, 
           3.4005071912980003`*^9}}], 
        Cell[
         TextData[{
          "If you do the algebra that represents this process, you will find \
that, the (", 
           Cell[
            BoxData[
             FormBox[
              RowBox[{"n", "+", "1"}], TraditionalForm]]], 
           ")st approximation is given by:"}], "Text"], 
        Cell[
         TextData[
          Cell[
           BoxData[
            FormBox[
             RowBox[{
               SubscriptBox["x", 
                RowBox[{"n", "+", "1"}]], "=", 
               RowBox[{
                 SubscriptBox["x", "n"], "-", 
                 FractionBox[
                  RowBox[{"f", "(", 
                    SubscriptBox["x", "n"], ")"}], 
                  RowBox[{
                    RowBox[{"f", "'"}], 
                    RowBox[{"(", 
                    SubscriptBox["x", "n"], ")"}]}]]}]}], TraditionalForm]], 
           "Input"]], "DisplayFormula", FontSize -> 16]}, Open]], All]),
  Evaluator->Automatic,
  ImageSize->{190, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"295efc09-8b5b-4500-9f2a-7033d36c9222"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newton", "[", 
   RowBox[{"f_", ",", "xi_"}], "]"}], ":=", 
  RowBox[{"FixedPointList", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "-", 
       FractionBox[
        RowBox[{"f", "[", "#", "]"}], 
        RowBox[{
         RowBox[{"f", "'"}], "[", "#", "]"}]]}], ")"}], "&"}], ",", "xi"}], 
   "]"}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[41]:=",ExpressionUUID->"71f04d3f-aedb-4dee-80d8-8af51f20aca9"],

Cell["\<\
Using this definition, here is a root of cosine, closest to 0.75:\
\>", "CodeText",
 CellChangeTimes->{{3.822048081220024*^9, 3.822048081659075*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"54fab873-392b-417a-a05b-c71dda0dd405"],

Cell[BoxData[
 RowBox[{"newton", "[", 
  RowBox[{"Cos", ",", "0.75"}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"4fe80fe7-f845-42db-ad1c-c620f685ea4b"],

Cell[TextData[{
 "Using a pure function as an argument to ",
 StyleBox["newton", "MR"],
 ", you can compute the square root of 2:"
}], "CodeText",
 CellChangeTimes->{{3.8220480826718683`*^9, 3.822048083177947*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"66a85f7e-ac70-456e-8b9e-c805c4c6e52d"],

Cell[BoxData[
 RowBox[{"newton", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["#", "2"], "-", "2"}], "&"}], ",", "0.5"}], 
  "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"bb7fd396-5b50-4b6b-86ad-0832aea3daa6"],

Cell["", "EndOfSlide",ExpressionUUID->"c23090cd-fed2-41ac-9622-a361671db1f7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"85c56189-4f08-46c5-9075-a4fa7ea05e48"],

Cell[CellGroupData[{

Cell["Example: Pure Functions in Dynamic Objects", "Section",
 CellChangeTimes->{{3.8209968044874516`*^9, 3.820996827674159*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"dec9e1b5-ec06-42a6-8558-31f5bad23a7a"],

Cell["\<\
In this example, you will use pure functions to create a dynamic object\
\[LongDash]a plot in which the user can select different functions from a \
tabbed list.\
\>", "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"c0c5aeb3-bb23-4701-904c-cd144dfa8e60"],

Cell[TextData[{
 StyleBox[ButtonBox["TabView",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TabView"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "can take an arbitrary list of expressions and, by default, will create tab \
labels of successive integers:"
}], "CodeText",
 CellChangeTimes->{{3.8216811709772387`*^9, 3.8216811771377525`*^9}, {
  3.822048087678193*^9, 3.8220480883978033`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"160daa40-5a33-47c9-8ba4-68e66c95b1a1"],

Cell[BoxData[
 RowBox[{"TabView", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Factor", "[", 
     RowBox[{
      SuperscriptBox["x", "3"], "-", 
      SuperscriptBox["y", "3"]}], "]"}], ",", 
    SuperscriptBox["2", 
     SuperscriptBox["2", 
      SuperscriptBox["2", "2"]]], ",", "\"\<Ciao!\>\""}], "}"}], 
  "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"65efe0dc-76df-4417-b84f-5ce170b15bb3"],

Cell["You can add customized labels to the tabs by using rules:", "CodeText",
 CellChangeTimes->{{3.822048090107587*^9, 
  3.8220480906361237`*^9}},ExpressionUUID->"44b2d937-9588-4239-ba8f-\
0da2a9fa2cf8"],

Cell[BoxData[
 RowBox[{"TabView", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\"\<factoring\>\"", "\[Rule]", 
     RowBox[{"Factor", "[", 
      RowBox[{
       SuperscriptBox["x", "3"], "-", 
       SuperscriptBox["y", "3"]}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<powers of 2\>\"", "\[Rule]", 
     SuperscriptBox["2", 
      SuperscriptBox["2", 
       SuperscriptBox["2", "2"]]]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Greeting\>\"", "\[Rule]", "\"\<Ciao!\>\""}]}], 
   "\[IndentingNewLine]", "}"}], "]"}]], "Input",
 CellLabel->"",ExpressionUUID->"f1ae1a0b-4b92-4703-816a-f8b103e20546"],

Cell["Here, the list consists of a plot of different functions:", "CodeText",
 CellChangeTimes->{{3.8220480934376507`*^9, 3.822048093976589*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"aa4470cf-51d6-4658-90a5-0a5ff2ef280d"],

Cell[BoxData[
 RowBox[{"TabView", "[", "\[IndentingNewLine]", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Plot", "[", 
      RowBox[{
       RowBox[{"#", "[", "x", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", 
         RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"Sin", ",", "Cos", ",", "Tan"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"3294d1eb-251f-4e91-9e9c-f5e5a899dbaf"],

Cell["\<\
With one modification, you can also use a pure function to set the labels:\
\>", "CodeText",
 CellChangeTimes->{{3.822048096306533*^9, 3.822048096835137*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b8b05ca0-c545-4d52-931c-c32a4d97293a"],

Cell[BoxData[
 RowBox[{"TabView", "[", "\[IndentingNewLine]", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"TraditionalForm", "[", 
       RowBox[{"#", "[", "x", "]"}], "]"}], "\[Rule]", 
      RowBox[{"Plot", "[", 
       RowBox[{
        RowBox[{"#", "[", "x", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", 
          RowBox[{"2", "\[Pi]"}]}], "}"}]}], "]"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{"Sin", ",", "Cos", ",", "Tan"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"df334a64-923e-4e6d-98c9-fa3c326bc2fe"],

Cell["", "EndOfSlide",ExpressionUUID->"8473f7ac-2ef7-4fd0-a646-951fd548ccd8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"9d8f8c6c-7a25-4184-9811-052fb4a4e7be"],

Cell[CellGroupData[{

Cell["Example: Using Pure Functions with Visualization Functions", "Section",
 CellChangeTimes->{{3.8209968858743124`*^9, 3.820996904625514*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"c69febd3-839e-4120-bc63-f8841bb498b3"],

Cell[TextData[{
 "Since there are three variables in a surface, ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "ec1deebe-bf0e-471f-b2f0-f049916b1daf"],
 ", ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "2f7f73c7-2ecd-41bf-ab3e-756226459093"],
 ", and ",
 Cell[BoxData[
  FormBox["z", TraditionalForm]],ExpressionUUID->
  "461ce35e-91b8-4e57-85c6-d25b39e1fdb3"],
 ", you can give any of the three variables as arguments to the mesh, color, \
and region functions."
}], "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"02c127ca-c2f6-40fb-9ee5-deb90a6266ff"],

Cell[TextData[{
 "For example, this colors the surface according the third parameter, the \
height (",
 StyleBox["#3", "MR"],
 "). Try changing the ",
 StyleBox["#3", "MR"],
 " to ",
 StyleBox["#1", "MR"],
 " or ",
 StyleBox["#2:", "MR"]
}], "CodeText",
 CellChangeTimes->{{3.822048099883655*^9, 
  3.822048100367675*^9}},ExpressionUUID->"3e3d8a06-2c99-4154-9d6c-\
3b5a95cbc517"],

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   SuperscriptBox["E", 
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox["x", "2"]}], "-", 
     SuperscriptBox["y", "2"]}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Hue", "[", "#3", "]"}], "&"}], ")"}]}]}], "]"}]], "Input",
 CellLabel->"",ExpressionUUID->"8077f004-fe9d-4821-8118-ff68ae359697"],

Cell[TextData[{
 "The value of the following ",
 StyleBox[ButtonBox["RegionFunction",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RegionFunction"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "option is a pure function that restricts the contour plot to the annulus \
defined by ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"1", "<", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], "<", "8"}], "Input"], TraditionalForm]],
  ExpressionUUID->"5a7378b4-4224-4d63-b9c8-45a4ab26789b"],
 ". Here you also specify a style for the boundary:"
}], "CodeText",
 CellChangeTimes->{{3.8216812372056065`*^9, 3.821681242442127*^9}, {
  3.822048109784686*^9, 3.8220481108530912`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"2f168c63-f203-4bc7-ab74-c38bf19dacea"],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "2"], "-", 
    SuperscriptBox["y", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"RegionFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"1", "<", 
       RowBox[{
        SuperscriptBox["#1", "2"], "+", 
        SuperscriptBox["#2", "2"]}], "<", "8"}], "&"}], ")"}]}], ",", 
   RowBox[{"BoundaryStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Pink", ",", "Thick"}], "}"}]}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"d032f0b2-5228-4968-9a4f-1d6e89cb2cd4"],

Cell[TextData[{
 "The following example gives 10 mesh lines, equally spaced on the vertical \
axis. Changing the ",
 StyleBox[ButtonBox["MeshFunctions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MeshFunctions"],
  FontWeight->"Bold"],
 " value from ",
 StyleBox["#3", "MR"],
 " to ",
 StyleBox["#2", "MR"],
 " will give meshes along the ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "d17a080e-09e3-406f-9959-69320643f10c"],
 " axis; changing to ",
 StyleBox["#1", "MR"],
 " will give meshes along the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "05983a27-b355-4a61-9c70-1c47431f3806"],
 " axis (",
 StyleBox["#4", "MR"],
 " will give radial mesh lines):"
}], "CodeText",
 CellChangeTimes->{{3.8216812695075665`*^9, 3.821681275650166*^9}, {
  3.8220481134069023`*^9, 3.822048113924139*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ba8f06d9-ad7c-4bbe-92fd-68fa547fa8dc"],

Cell[BoxData[
 RowBox[{"ParametricPlot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"3", "+", 
        RowBox[{"Cos", "[", "v", "]"}]}], ")"}], " ", 
      RowBox[{"Sin", "[", "u", "]"}]}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"3", "+", 
        RowBox[{"Cos", "[", "v", "]"}]}], ")"}], " ", 
      RowBox[{"Cos", "[", "u", "]"}]}], ",", 
     RowBox[{"Sin", "[", "v", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", ",", 
     RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "10"}], ",", 
   RowBox[{"MeshFunctions", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{"#3", "&"}], ")"}]}]}], "]"}]], "Input",
 CellLabel->"",ExpressionUUID->"428ef240-96d5-4857-b595-9b95b5d30a5a"],

Cell["", "EndOfSlide",ExpressionUUID->"54578211-73df-4cd2-81e0-03fa0e98f82f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"9a764fa0-6e32-4787-b369-c8a01a386437"],

Cell[CellGroupData[{

Cell["Level Specifications", "Section",
 CellChangeTimes->{{3.8209969493755865`*^9, 3.820996953634198*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"1b421f36-022d-436a-8abe-1c12b83436d3"],

Cell["\<\
Operations can be applied at different levels within an expression.\
\>", "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"1fa60dd4-099d-43a4-b2fe-a46e9f27a9d4"],

Cell["The elements of an expression are at level 1.", "Item",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b560e226-06d6-40cc-9d18-ce92b1313c4f"],

Cell["\<\
The elements of the elements, such as the elements in a matrix, are at level \
2.\
\>", "Item",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"64902565-9d72-49eb-8ccf-eceffedfe802"],

Cell["Level 0 refers to the entire expression.", "Item",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"183a71f9-9e0f-43b9-a457-0f2da58a6a32"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "function operates by default at level 1:"
}], "CodeText",
 CellChangeTimes->{{3.8216813092841587`*^9, 3.8216813154592896`*^9}, {
  3.822048116613247*^9, 3.822048117074225*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"98f69873-80a6-46ab-a194-38493b2d43a6"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"50b7efa7-1825-477e-b9c0-b3b62d442eef"],

Cell[TextData[{
 "The optional third argument of ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "is used here to specify that the function should be applied at level 2:"
}], "CodeText",
 CellChangeTimes->{{3.8216813259806037`*^9, 3.8216813320942073`*^9}, {
  3.82204811818649*^9, 3.822048118615135*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"45846869-3736-4aed-8404-c708d27eecdb"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"af36f5fe-0b98-4168-b6ca-b84366e5be28"],

Cell[TextData[{
 "The ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "function operates by default at level 0:"
}], "CodeText",
 CellChangeTimes->{{3.8216813405655317`*^9, 3.8216813477812624`*^9}, {
  3.8220481197969*^9, 3.8220481222373743`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"dbe165d8-7f45-49eb-9a5a-691f730a5f14"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"db07c2ed-cd8f-4213-ba2b-34e3f2213fa6"],

Cell[TextData[{
 "The optional third argument of ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"],
  FontWeight->"Bold"],
 " is used here to specify that the function should be applied at level 1:"
}], "CodeText",
 CellChangeTimes->{
  3.8216813549944663`*^9, {3.8220481242516823`*^9, 3.822048124791731*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"1de0deeb-5838-4bf9-8291-d629bc508b32"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"5226a759-f971-4d30-84d8-a6e434c5e0dd"],

Cell["", "EndOfSlide",ExpressionUUID->"fc7316a0-824d-4cb9-bba1-7b9bf8a0f3c4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"291df447-2d4a-4e81-97b3-99963d98119b"],

Cell[CellGroupData[{

Cell["Example: Switching Elements in a Pair", "Section",
 CellChangeTimes->{{3.820996992740542*^9, 3.8209970045629253`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"95a2e919-4e8f-43a0-8f53-5fadfce8ec95"],

Cell["\<\
In this, and the next example, you will solve a programming problem using \
several different styles of programming to give you a better sense of the \
different approaches to these tasks.\
\>", "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ef5f8f6b-f561-453a-931a-0067c12185b4"],

Cell["\<\
For example, consider the task of switching the elements in a list of pairs:\
\>", "CodeText",
 CellChangeTimes->{{3.8220481283123207`*^9, 3.82204812955015*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ac8c9149-a5c0-4c9f-92d6-cd3a7cb45742"],

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"z", ",", "1"}], "}"}]}], "}"}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"fbddccac-da6d-4ee7-868f-3f06eb26b6f2"],

Cell["\<\
Here is a procedural program that switches the elements in each pair:\
\>", "CodeText",
 CellChangeTimes->{{3.822048131170397*^9, 3.822048131991084*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"18a0e812-bba9-4a68-bb26-e75cbcaa2c32"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m", "[", 
      RowBox[{"[", 
       RowBox[{"k", ",", "2"}], "]"}], "]"}], ",", 
     RowBox[{"m", "[", 
      RowBox[{"[", 
       RowBox[{"k", ",", "1"}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"9cc6b9cd-11c3-429b-a590-02561728bee3"],

Cell[TextData[{
 "Here is a functional program. Since ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"],
  FontWeight->"Bold"],
 " operates on the elements of the list (i.e. the two-element sublists), you \
get the correct result:"
}], "CodeText",
 CellChangeTimes->{
  3.8216814557102237`*^9, {3.822048133690268*^9, 3.822048134320072*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"206c5fca-2e88-48bc-b054-f8772bf9966c"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Reverse", ",", "m"}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"78c99de4-5abb-457f-9226-4eb486a68db0"],

Cell["And do not forget the rule-based approach:", "CodeText",
 CellChangeTimes->{{3.822048138898395*^9, 3.822048139764682*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b67b493c-0a05-4a13-9aac-96c9dfd81ae0"],

Cell[BoxData[
 RowBox[{"m", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"q", ",", "p"}], "}"}]}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"7745d7a5-6582-4b9b-80e5-1ca5608e7b23"],

Cell["", "EndOfSlide",ExpressionUUID->"dbfeb722-2fc4-4f01-a39d-620e141512f8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"94172dd2-2ac7-4c60-9a62-f45c75440363"],

Cell[CellGroupData[{

Cell["Example: Converting to a List of Equations", "Section",
 CellChangeTimes->{{3.820997041767763*^9, 3.8209970567941833`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ef880ebd-7375-4b8f-8efd-daa4e1a71f80"],

Cell["\<\
Consider the task of converting a list of pairs into a list of equations:\
\>", "CodeText",
 CellChangeTimes->{{3.822048142588509*^9, 3.822048143184874*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f1ef7572-d5d8-4af7-bf3b-124580719f25"],

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"z", ",", "1"}], "}"}]}], "}"}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"15e5b918-226f-4294-83b3-51e84ce3c034"],

Cell["\<\
Here is a procedural program that gives the list of equations:\
\>", "CodeText",
 CellChangeTimes->{{3.822048144636375*^9, 3.8220481451459007`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ca4cd071-4b38-4090-b536-ecc7bfdfc0bb"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"m", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "1"}], "]"}], "]"}], "==", 
    RowBox[{"m", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"9c514f68-db6e-49b7-8f4e-4bb56d4ae86c"],

Cell["Here is a functional program that gives the same result:", "CodeText",
 CellChangeTimes->{{3.822048147201023*^9, 3.822048147741177*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"37ed0ee5-f0cc-4df6-a5f6-5a22cf422f31"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Equal", ",", "m", ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"12cf3087-a902-4931-b780-8b8884ebddc9"],

Cell["The rule-based approach is very direct:", "CodeText",
 CellChangeTimes->{{3.822048149259818*^9, 3.8220481497661743`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"9f47479e-f1d5-4959-a7e9-4afdeb30d961"],

Cell[BoxData[
 RowBox[{"m", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", " ", 
   RowBox[{"p", "\[Equal]", "q"}]}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"",ExpressionUUID->"e417f4bb-ceee-4701-a820-4342ef1d9e03"],

Cell["", "EndOfSlide",ExpressionUUID->"846ff346-00ad-48a3-808d-a3aae8657c72"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"70fc80e3-2d4d-4903-8855-2e70bfeaeb3a"],

Cell[CellGroupData[{

Cell["Example: Converting Two Lists to a List of Rules", "Section",
 CellChangeTimes->{{3.8209970922648134`*^9, 3.820997107090207*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"326cb7e0-35b8-444c-b274-5476959e5d0f"],

Cell[TextData[{
 "Suppose you have a list of variables and a corresponding list of values and \
your task was to make a list of rules of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["var",
      FontSlant->"Italic"], "i"], "\[Rule]", 
    SubscriptBox[
     StyleBox["val",
      FontSlant->"Italic"], "i"]}], TraditionalForm]],ExpressionUUID->
  "95af3525-2e9e-4f33-a8cd-145805a10051"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8220481536809397`*^9, 3.822048154648467*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"982e0a1d-0ee9-4b90-b4f4-522224a2f7ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vars", "=", 
   RowBox[{"{", 
    RowBox[{
    "p", ",", "q", ",", "r", ",", "s", ",", "t", ",", "u", ",", "v", ",", "w",
      ",", "x", ",", "y", ",", "z"}], "}"}]}], ";"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[63]:=",ExpressionUUID->"deabd01e-054c-4339-8287-a9cabc4ca54c"],

Cell[BoxData[
 RowBox[{"vals", "=", 
  RowBox[{"RandomReal", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"Length", "[", "vars", "]"}], "}"}]}], "]"}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[64]:=",ExpressionUUID->"a2ecd791-f8e3-4303-9e58-7bfd52faa315"],

Cell["\<\
One approach would be to start by pairing up the variables and values:\
\>", "CodeText",
 CellChangeTimes->{{3.822048156438961*^9, 3.822048156954915*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f59f9edc-c48e-499b-9d90-8a7920ca0f2a"],

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{"vars", ",", "vals"}], "}"}], "]"}]}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[65]:=",ExpressionUUID->"40f4c13e-f90b-4b28-ac05-9db0d42dedef"],

Cell[TextData[{
 "You could then apply the ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"],
  FontWeight->"Bold"],
 " function to each of the sublists (at level 1):"
}], "CodeText",
 CellChangeTimes->{
  3.821681510760037*^9, {3.82204816460513*^9, 3.822048165065752*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"5e10c3c0-38cd-46f9-813a-70c12b2f9277"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Rule", ",", "data", ",", 
   RowBox[{"{", "1", "}"}]}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[66]:=",ExpressionUUID->"0f406cdf-a622-4678-bcdb-1ce4f4807359"],

Cell[TextData[{
 "There is a more direct way to do this, using ",
 StyleBox[ButtonBox["Thread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Thread"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{
  3.8216815175478706`*^9, {3.822048167147176*^9, 3.822048168497726*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"efa9d418-4e9b-4704-a58c-39edeed00daf"],

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"Rule", "[", 
   RowBox[{"vars", ",", "vals"}], "]"}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[67]:=",ExpressionUUID->"3ad91556-62ee-49b9-8e91-d7dd1aef4d79"],

Cell[TextData[{
 StyleBox[ButtonBox["MapThread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MapThread"],
  FontWeight->"Bold"],
 " (which takes a slightly different syntax) can also be used:"
}], "CodeText",
 CellChangeTimes->{
  3.821681525260333*^9, {3.822048170770031*^9, 
   3.8220481712986393`*^9}},ExpressionUUID->"7f83d2d6-a58c-46da-b8dc-\
311bf33d8076"],

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"Rule", ",", 
   RowBox[{"{", 
    RowBox[{"vars", ",", "vals"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"8c7cdefc-4ece-4d2f-b481-21f4586e589a"],

Cell[TextData[{
 "It might help to see what ",
 StyleBox[ButtonBox["Thread",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Thread"],
  FontWeight->"Bold"],
 " does by using an arbitrary function ",
 StyleBox["rule", "MR"],
 " instead of ",
 StyleBox[ButtonBox["Rule",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Rule"],
  FontWeight->"Bold"],
 " here:"
}], "CodeText",
 CellChangeTimes->{{3.8216815327872267`*^9, 3.821681544865445*^9}, {
  3.8220481727498837`*^9, 3.822048173211381*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"a26d88e4-2b16-41ec-aca0-1d4bcec2e1f5"],

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"rule", "[", 
   RowBox[{"vars", ",", "vals"}], "]"}], "]"}]], "Input",
 CellTags->"Functional Programming",
 CellLabel->"In[69]:=",ExpressionUUID->"75f1b418-b643-4b81-90dc-bc0122fa0ad6"],

Cell["", "EndOfSlide",ExpressionUUID->"f54030a4-8401-40f2-8db2-86ce60a516d9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"14322b82-75a3-4201-aef2-678e121b31e8"],

Cell[CellGroupData[{

Cell["Options and Messages: Overview", "Section",
 CellChangeTimes->{{3.822048180489449*^9, 3.822048188645728*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"bcbe3f4d-86d1-4b44-8141-420cdc2c161e"],

Cell["Using optional arguments to functions", "Item",
 CellChangeTimes->{3.8209971686735234`*^9},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"2dde8249-225d-426c-afde-9f632cbfd4ff"],

Cell[TextData[{
 "Adding options to user-defined functions\[LongDash]",
 StyleBox[ButtonBox["OptionsPattern",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OptionsPattern"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["OptionValue",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OptionValue"],
  FontWeight->"Bold"]
}], "Item",
 CellChangeTimes->{
  3.82099717040989*^9, {3.8216815918754454`*^9, 3.821681599716461*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"7f21b060-d692-4f85-83bf-84098beebafd"],

Cell["Example\[LongDash]random walks", "Item",
 CellChangeTimes->{3.8209971719378595`*^9},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"87c579f7-2b82-4108-ac44-74c9bec3fa28"],

Cell["Creating warning messages", "Item",
 CellChangeTimes->{3.8209971735774145`*^9},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"521e249a-7eb3-477a-97d1-810bbbd8151f"],

Cell["Usage messages", "Item",
 CellChangeTimes->{3.8209971749752383`*^9},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"76c05132-266c-48f1-8cf8-776bce6153d0"],

Cell["", "EndOfSlide",ExpressionUUID->"4de48b50-a754-4a9a-8c3d-e68e4a3669e4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"01e5aac3-942f-401e-90ae-9e9544e28963"],

Cell[CellGroupData[{

Cell["Options", "Section",
 CellChangeTimes->{3.820997203118744*^9},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"e67a6a1e-16a3-4ae4-85e5-ec5168c5a725"],

Cell["\<\
Many functions in the Wolfram Language have optional arguments (options, for \
short) that you can set. If you do not explicitly use them, then the Wolfram \
Language will use default settings.\
\>", "Text",
 CellChangeTimes->{{3.8210046186280575`*^9, 3.8210046340629673`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"887b61a1-9bd8-45f2-a709-fde0c36bc6a9"],

Cell[TextData[{
 "For example, the default value for the ",
 StyleBox[ButtonBox["Mesh",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mesh"],
  FontWeight->"Bold"],
 " option in ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "is ",
 StyleBox[ButtonBox["None",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/None"],
  FontWeight->"Bold"],
 ". This is the value that will be used if you do not explicitly set this \
optional argument:"
}], "CodeText",
 CellChangeTimes->{{3.821681616115571*^9, 3.821681630966406*^9}, {
  3.822048193821796*^9, 3.822048194541238*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"30858268-c3c1-49d7-a3d2-3a445dc69d84"],

Cell[BoxData[
 RowBox[{"Options", "[", 
  RowBox[{"Plot", ",", "Mesh"}], "]"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"c533d533-3c99-470f-bd2d-8e6b8263ce53"],

Cell[TextData[{
 "Setting a value for ",
 StyleBox[ButtonBox["Mesh",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mesh"],
  FontWeight->"Bold"],
 " overrides the default behavior. In this case, a value of ",
 StyleBox[ButtonBox["All",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/All"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "displays all points used in the computation:"
}], "CodeText",
 CellChangeTimes->{{3.8216816377806854`*^9, 3.821681652331253*^9}, {
  3.822048195779134*^9, 3.822048196238594*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"d81090cb-3c03-4df1-bf6f-8f463d5ad6a7"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"Sin", "[", 
    RowBox[{"x", "+", 
     RowBox[{
      SqrtBox["2"], 
      RowBox[{"Sin", "[", "x", "]"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"2", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"",ExpressionUUID->"b67a9d88-2b6d-45d7-8961-bfc14338c4ca"],

Cell["", "EndOfSlide",ExpressionUUID->"e19069d0-3c69-463d-9d23-196e26e522b9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"b2e5fb60-d33d-420b-8df0-3c1b8648303a"],

Cell[CellGroupData[{

Cell["Adding Options", "Section",
 CellChangeTimes->{{3.820997237040392*^9, 3.8209972417368813`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"7e6ac3ea-9d52-408f-9e89-2d8815ab7903"],

Cell["\<\
You can set up any of your own functions to use optional arguments. This is \
accomplished by first defining option names and giving default values for \
these options. \
\>", "Text",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"6a003f37-a49a-4a9d-a920-01302dff83b3"],

Cell[TextData[{
 "For example, this defines two options, ",
 StyleBox["opt1", "Input"],
 " and ",
 StyleBox["opt2", "Input"],
 " for a function ",
 StyleBox["f", "Input"],
 ", and gives default values:"
}], "CodeText",
 CellChangeTimes->{{3.8220481991758327`*^9, 3.8220481996818733`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"e2235856-e391-43fb-9d62-1f6d9726d4d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Options", "[", "f", "]"}], "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"opt1", "\[Rule]", "a"}], ",", 
    RowBox[{"opt2", "\[Rule]", "b"}]}], "}"}]}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[4]:=",ExpressionUUID->"64ceef36-f9fc-4463-8b52-efdd27240f20"],

Cell[TextData[{
 "Using ",
 StyleBox[ButtonBox["OptionsPattern",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OptionsPattern"],
  FontWeight->"Bold"],
 ", set up ",
 StyleBox["f", "MR"],
 " to take optional arguments. The value of an option is extracted with ",
 StyleBox[ButtonBox["OptionValue",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/OptionValue"],
  FontWeight->"Bold"],
 StyleBox[":",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.821681701354171*^9, 3.8216817149826965`*^9}, {
  3.8220482026528673`*^9, 3.822048203519251*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"4941d61a-5279-4406-86ba-c36997e357af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"x_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   FractionBox[
    RowBox[{"OptionValue", "[", "opt1", "]"}], 
    RowBox[{"OptionValue", "[", "opt2", "]"}]]}]}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[5]:=",ExpressionUUID->"2bb9decd-b572-49fb-822b-f511d0c7ab9f"],

Cell[TextData[{
 "First, try out ",
 StyleBox["f", "Input"],
 " with one argument. In this case, the default value of the options are used:"
}], "CodeText",
 CellChangeTimes->{{3.822048204789463*^9, 3.822048205171803*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"94625aae-aa1b-48c8-ba8b-5136dd712955"],

Cell[BoxData[
 RowBox[{"f", "[", "z", "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[6]:=",ExpressionUUID->"1a0e47e9-172f-466d-81d7-1604cc9390c4"],

Cell["\<\
Explicitly setting the options causes their values to be passed and used in \
the body of the function:\
\>", "CodeText",
 CellChangeTimes->{{3.822048206348625*^9, 3.822048206769054*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"2e46edcb-11e9-4866-a7ec-a1dd48189cc2"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"z", ",", 
   RowBox[{"opt1", "\[Rule]", "\[Alpha]"}], ",", 
   RowBox[{"opt2", "\[Rule]", "\[Beta]"}]}], "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[7]:=",ExpressionUUID->"d16896a8-dd54-4a72-952e-928dbea7e45e"],

Cell["", "EndOfSlide",ExpressionUUID->"6abafe8d-7859-4483-b948-46a5dffcdfb5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"7ad5570d-3d39-4ba2-94b3-ffdfbb0651ad"],

Cell[CellGroupData[{

Cell["Example: RandomWalk", "Section",
 CellChangeTimes->{3.8209972787108746`*^9, 3.8210020463595977`*^9, 
  3.8210075409872274`*^9},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"63df9f1b-3491-4993-ae06-64d4aa4a2f2f"],

Cell[TextData[{
 "The following example creates a function, ",
 StyleBox["RandomWalk", "Input"],
 ", for generating random walks in one and two dimensions. The user will set \
the dimension by means of an option, ",
 StyleBox["Dimension", "Input"],
 "."
}], "Text",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"c1c9fce2-d8f1-49d5-8a1b-c37d18b4850e"],

Cell[TextData[{
 "First, create two auxiliary functions, one for a one-dimensional random \
walk and another for the two-dimensional case (on a rectangular lattice). The \
list ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"-", "1"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}]], "Input",ExpressionUUID->
  "7b669720-c73e-424f-9a0f-d107ba46a358"],
 " comprises the step directions (north, south, east, west) for the \
two-dimensional walker:"
}], "CodeText",
 CellChangeTimes->{{3.822048209345883*^9, 3.8220482097956*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"47669f05-a3c2-445d-84ea-fc8eebafe370"],

Cell[BoxData[
 RowBox[{
  RowBox[{"walk1D", "[", "t_", "]"}], ":=", 
  RowBox[{"Accumulate", "[", 
   RowBox[{"RandomChoice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "t"}], "]"}], 
   "]"}]}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[10]:=",ExpressionUUID->"fd285d65-f769-43a0-b706-1309dd638ede"],

Cell[BoxData[
 RowBox[{
  RowBox[{"walk2D", "[", "t_", "]"}], ":=", 
  RowBox[{"Accumulate", "[", 
   RowBox[{"RandomChoice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", "t"}], "]"}], 
   "]"}]}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[11]:=",ExpressionUUID->"09be267f-ff76-42c5-a97d-c003d39feb35"],

Cell[TextData[{
 "You can see what these functions are doing by looking at a simple example. \
This chooses 5 elements at random from the list ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], "Input"]],ExpressionUUID->
  "4a425d11-965e-46b5-b09a-a1c75ab3c310"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.822048211460788*^9, 3.822048211910776*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"fb4039e1-8e70-4095-8a18-7937dff62562"],

Cell[BoxData[
 RowBox[{"RandomChoice", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "5"}], "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[2]:=",ExpressionUUID->"b98528c0-3595-401c-9a57-c58517ee60bc"],

Cell[TextData[{
 StyleBox[ButtonBox["Accumulate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Accumulate"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "essentially creates running sums:"
}], "CodeText",
 CellChangeTimes->{{3.8216818736865015`*^9, 3.821681877709889*^9}, {
  3.821682000443084*^9, 3.821682002669181*^9}, {3.822048213932866*^9, 
  3.82204821437122*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"21996930-ab0a-4e53-8227-2d01d7cdc051"],

Cell[BoxData[
 RowBox[{"Accumulate", "[", "%", "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[80]:=",ExpressionUUID->"bdca0c09-d991-477a-8262-910bbf95c6db"],

Cell[TextData[{
 "The ",
 StyleBox["RandomWalk", "Input"],
 " function simply calls one of the above functions depending upon the value \
of the option ",
 StyleBox["Dimension:", "Input"]
}], "CodeText",
 CellChangeTimes->{
  3.8216821093791275`*^9, {3.822048216354298*^9, 3.822048216714488*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"301965d9-0c78-406f-ba65-82e89002d551"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "RandomWalk", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Dimension", "\[Rule]", "2"}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"c6047a0c-5412-4033-8ba2-5dc12b5075ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomWalk", "[", 
   RowBox[{"t_Integer", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"OptionValue", "[", "Dimension", "]"}], "==", "1"}], ",", 
    RowBox[{"walk1D", "[", "t", "]"}], ",", 
    RowBox[{"walk2D", "[", "t", "]"}]}], "]"}]}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[13]:=",ExpressionUUID->"159b5036-055a-4fd9-a001-63842d4f265e"],

Cell[TextData[{
 "This uses ",
 StyleBox["RandomWalk", "Input"],
 " with the default value for the option ",
 StyleBox["Dimension:", "Input"]
}], "CodeText",
 CellChangeTimes->{{3.822048219166835*^9, 3.8220482196505747`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"60dcda93-0b39-4dee-b503-d5639803b999"],

Cell[BoxData[
 RowBox[{"RandomWalk", "[", "10", "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[14]:=",ExpressionUUID->"02bce44e-138b-445d-a136-02f48a4ae37c"],

Cell[TextData[{
 "This uses ",
 StyleBox["RandomWalk", "Input"],
 " with an explicit (nondefault) value for ",
 StyleBox["Dimension:", "Input"]
}], "CodeText",
 CellChangeTimes->{{3.822048222023965*^9, 3.8220482225191717`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"db9b5ff6-53c4-45b7-bcb7-7842dfbfd5cf"],

Cell[BoxData[
 RowBox[{"RandomWalk", "[", 
  RowBox[{"10", ",", 
   RowBox[{"Dimension", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[15]:=",ExpressionUUID->"6bb0888b-c0fd-43f7-aa0c-278dda8be763"],

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"RandomWalk", "[", "10000", "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"In[16]:=",ExpressionUUID->"bc5ef6f0-c670-43d1-a8b7-b70732362b17"],

Cell["", "EndOfSlide",ExpressionUUID->"bdde44e9-b3ca-47b2-9908-8a69159a9d1f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"9452aa05-632a-4743-b1c1-735a152d0a21"],

Cell[CellGroupData[{

Cell["Warning Messages", "Section",
 CellChangeTimes->{{3.8210021230472403`*^9, 3.8210021267926383`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"fbb1ad78-6977-4a76-973e-095f64bf522b"],

Cell[TextData[{
 StyleBox["RandomWalk", "Input"],
 " has been set up so that the value of the option ",
 StyleBox["Dimension", "Input"],
 " will cause either the ",
 StyleBox["walk1D", "Input"],
 " or ",
 StyleBox["walk2D", "Input"],
 " function to be called."
}], "Text",
 CellChangeTimes->{{3.8216825945453405`*^9, 3.8216826171311665`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"043fecba-cfa1-41c2-9406-ef46d3925590"],

Cell[TextData[{
 "This will work fine if the user supplies a value of 1 or 2, but if a \
different value is given, the ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"],
  FontWeight->"Bold"],
 " statement causes the ",
 StyleBox["ELSE", "Input"],
 " clause to be evaluated:"
}], "CodeText",
 CellChangeTimes->{
  3.821682619125869*^9, {3.8220482257373943`*^9, 
   3.822048226209215*^9}},ExpressionUUID->"5b23e5b3-ee0b-43a7-9cf7-\
3a5f5aa71582"],

Cell[BoxData[
 RowBox[{"RandomWalk", "[", 
  RowBox[{"5", ",", 
   RowBox[{"Dimension", "\[Rule]", "3"}]}], "]"}]], "Input",
 CellTags->"Options and Messages",
 CellLabel->"",ExpressionUUID->"0b570194-8a57-4149-9e96-dd0c911cc704"],

Cell[TextData[{
 "Instead of this behavior, you can issue a warning message that a bad value \
was given for the option ",
 StyleBox["Dimension", "Input"],
 ". This is done by first setting up the warning message and then calling it \
within the body of the ",
 StyleBox["RandomWalk", "Input"],
 " function when a particular condition is met."
}], "Text",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"d5a4f09a-4e96-456a-ad91-fe089edfc01a"],

Cell[TextData[{
 "Here is the ",
 StyleBox["RandomWalk", "Input"],
 " function that was developed in the previous section:"
}], "CodeText",
 CellChangeTimes->{
  3.821002067314432*^9, {3.822048228999073*^9, 3.822048229471756*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"691d3750-496c-4fac-9133-8cf0091f6863"],

Cell[BoxData[
 RowBox[{
  RowBox[{"walk1D", "[", "t_", "]"}], ":=", 
  RowBox[{"Accumulate", "[", 
   RowBox[{"RandomChoice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "t"}], "]"}], 
   "]"}]}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"16a68b53-41b0-4aad-a05b-23ace5a39965"],

Cell[BoxData[
 RowBox[{
  RowBox[{"walk2D", "[", "t_", "]"}], ":=", 
  RowBox[{"Accumulate", "[", 
   RowBox[{"RandomChoice", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "}"}], ",", "t"}], "]"}], 
   "]"}]}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"8de96331-636e-49dc-9960-80e65e94a2fd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "RandomWalk", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Dimension", "\[Rule]", "2"}], "}"}]}], ";"}]], "Input",Expression\
UUID->"4bad55fb-dabf-4ff1-8b3b-5e98dcc19ae4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomWalk", "[", 
   RowBox[{"t_Integer", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"OptionValue", "[", "Dimension", "]"}], "==", "1"}], ",", 
    RowBox[{"walk1D", "[", "t", "]"}], ",", 
    RowBox[{"walk2D", "[", "t", "]"}]}], "]"}]}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"88a5b31a-593d-40ba-9a44-1d256b1b4f1b"],

Cell[TextData[{
 "First clear all earlier definitions of ",
 StyleBox["RandomWalk", "Input"],
 ". Note that ",
 StyleBox[ButtonBox["Clear",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Clear"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "would only clear values associated with the symbol. ",
 StyleBox[ButtonBox["ClearAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ClearAll"],
  FontWeight->"Bold"],
 " is needed to also clear all attributes and options:"
}], "CodeText",
 CellChangeTimes->{{3.8216826663082094`*^9, 3.821682671880262*^9}, {
  3.8220482357724857`*^9, 
  3.822048236278325*^9}},ExpressionUUID->"67a29513-ef1c-41dd-8330-\
b66c47cf9adf"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "RandomWalk", "]"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"377c2f23-a073-4eab-b8f4-c41a29db881c"],

Cell[TextData[{
 "Next create the message that will be displayed whenever a bad value for ",
 StyleBox["Dimension", "Input"],
 " is given. The name of the message is ",
 StyleBox["baddim ", "Input",
  FontWeight->"Plain"],
 "The message is associated with ",
 StyleBox["RandomWalk", "Input"],
 ":"
}], "CodeText",
 CellChangeTimes->{
  3.8216826987639217`*^9, {3.822048245030569*^9, 3.822048247673996*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"f8596d62-f721-4a48-aefd-80087409983c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomWalk", "::", "baddim"}], "=", 
   "\"\<The value `1` of the option Dimension must be the integer 1 or \
2.\>\""}], ";"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"8997969f-ed14-430e-9022-65ae8c922507"],

Cell[TextData[{
 "Instead of using an ",
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "function, use ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Which"],
  FontWeight->"Bold"],
 " to choose the appropriate expression to evaluate: ",
 StyleBox["walk1D", "Input"],
 ", ",
 StyleBox["walk2D", "Input"],
 ", or issue a warning message:"
}], "CodeText",
 CellChangeTimes->{{3.821682713908972*^9, 3.8216827200849533`*^9}, {
  3.822048250407778*^9, 3.82204825095949*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"966339b0-397a-4e14-b8ef-4c60becce0dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "RandomWalk", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"Dimension", "\[Rule]", "2"}], "}"}]}], ";"}]], "Input",Expression\
UUID->"66ac30c1-fa74-4070-900e-bdab773306d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomWalk", "[", 
   RowBox[{"t_Integer", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dim", "=", 
      RowBox[{"OptionValue", "[", "Dimension", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Which", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"dim", "\[Equal]", "1"}], ",", 
      RowBox[{"walk1D", "[", "t", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"dim", "\[Equal]", "2"}], ",", 
      RowBox[{"walk2D", "[", "t", "]"}], ",", "\[IndentingNewLine]", "True", 
      ",", 
      RowBox[{"Message", "[", 
       RowBox[{
        RowBox[{"RandomWalk", "::", "\"\<baddim\>\""}], ",", "dim"}], "]"}]}],
      "\[IndentingNewLine]", "]"}]}], "]"}]}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"fbad8590-f709-4bab-ba79-4d0086c4ca07"],

Cell[TextData[{
 "Here is the usage message for ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Which"],
  FontWeight->"Bold"],
 StyleBox[":",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{
  3.8216827396542225`*^9, {3.822048254008111*^9, 
   3.822048254536745*^9}},ExpressionUUID->"507c0807-cbb9-41e4-8961-\
ac110e94075f"],

Cell[BoxData[
 RowBox[{"?", "Which"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"256619b0-f31a-4c32-b130-83c03868105f"],

Cell[TextData[{
 "This exercises the ",
 StyleBox["RandomWalk", "Input"],
 " function with no options and then with a bad value for the ",
 StyleBox["Dimension", "Input"],
 " option:"
}], "CodeText",
 CellChangeTimes->{{3.822048256269223*^9, 
  3.822048257225494*^9}},ExpressionUUID->"37e483b7-1e9f-42f3-b664-\
2cf939e51132"],

Cell[BoxData[
 RowBox[{"RandomWalk", "[", "8", "]"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"e75f81ce-abd2-4fe5-83f0-75c01cf4e1f1"],

Cell[BoxData[
 RowBox[{"RandomWalk", "[", 
  RowBox[{"10", ",", 
   RowBox[{"Dimension", "\[Rule]", "4.5"}]}], "]"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"5f05d720-bdf9-4bb9-a27e-2947e8ff0d8e"],

Cell["", "EndOfSlide",ExpressionUUID->"3dca64a6-ae03-42cf-85d0-0a47e6a75b0c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"e350a97b-0c2e-43f3-b780-6e9dcba7f299"],

Cell[CellGroupData[{

Cell["Usage Messages", "Section",
 CellChangeTimes->{{3.821002150142687*^9, 3.821002154976804*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"30ed55c0-1955-49aa-995d-4b9d2df4e4c6"],

Cell[TextData[{
 "Every built-in Wolfram Language function has a usage message that you can \
access using ",
 StyleBox["?FunctionName", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.8210021642304544`*^9, 3.821002167067382*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"26609986-f9ac-45cf-a7f7-5726a2dd461a"],

Cell[TextData[{
 "For example, here is the usage message for ",
 StyleBox[ButtonBox["RandomChoice",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomChoice"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{
  3.8216828321638374`*^9, {3.8220482617811537`*^9, 3.822048262637125*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"3a176cfe-6853-405b-8808-b4240406abca"],

Cell[BoxData[
 RowBox[{"?", "RandomChoice"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"9b850fc1-7dae-42b8-94c5-5b5572a0e8eb"],

Cell["\<\
You can add a usage message for any function you create. Here is a template \
for how to do this:\
\>", "CodeText",
 CellChangeTimes->{{3.822048263952529*^9, 3.8220482643679037`*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"6e47781c-82cd-4a35-93e0-7fd265b1ba14"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RandomWalk", "::", "usage"}], "=", 
   "\"\<RandomWalk[t, Dimension\[Rule]n] creates a t-step, two-dimensional \
random walk on a rectangular lattice. Setting the option Dimension\[Rule]1 \
creates a one-dimensional random walk.\>\""}], ";"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"9152b1bc-6f9b-455b-8d48-8c53bf01b37d"],

Cell[TextData[{
 "Now you can get information about ",
 StyleBox["RandomWalk", "Input"],
 " in the same way you do with any built-in Wolfram Language function:"
}], "CodeText",
 CellChangeTimes->{{3.8210046450061693`*^9, 3.8210046479941516`*^9}, {
  3.8220482654490623`*^9, 3.822048266091042*^9}},
 CellTags->
  "Options and \
Messages",ExpressionUUID->"fd325e3f-42c1-4544-84df-1eefcc00bf4a"],

Cell[BoxData[
 RowBox[{"?", "RandomWalk"}]], "Input",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"a87361aa-a135-4352-9efc-5dade47227b8"],

Cell[TextData[{
 "As an added bonus, because of how the usage message itself was set up, you \
also have such user-interface elements as ",
 StyleBox["Complete Selection", "Input"],
 " and ",
 StyleBox["Make Template", "Input"],
 " available. "
}], "Text",
 CellTags->
  "Options and \
Messages",ExpressionUUID->"b12f2afa-fd66-45bd-9d75-4489a6dcd4b2"],

Cell["", "EndOfSlide",ExpressionUUID->"a95e6fb9-6d4e-4e1d-957d-bdf42789e5ac"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"306f6466-fe2f-4c0a-bf84-c9170bc018b4"],

Cell[CellGroupData[{

Cell["Efficiency", "Section",
 CellTags->
  "Efficiency",ExpressionUUID->"6e521c99-f826-4a9d-a86c-4765ee0992fe"],

Cell["\<\
The most useful principles of efficient programming are the same in the \
Wolfram Language as in any programming language.\
\>", "Text",
 CellChangeTimes->{3.8210046803430014`*^9},
 CellTags->
  "Efficiency",ExpressionUUID->"998d59af-1e24-4220-b275-45fd119be89c"],

Cell["Avoid redundant calculations", "Item",
 CellChangeTimes->{3.8210022383075047`*^9},
 CellTags->
  "Efficiency",ExpressionUUID->"011d68cc-57ca-41b3-9f7d-fc7ec961ec66"],

Cell["\<\
Choose an efficient approach to the problem\[LongDash]using higher-level \
functions\
\>", "Item",
 CellChangeTimes->{3.821002242615495*^9},
 CellTags->
  "Efficiency",ExpressionUUID->"38e49911-fb53-4537-8438-ad6b86826a0c"],

Cell["Organize large programs into manageable components", "Item",
 CellChangeTimes->{3.8210022443413525`*^9},
 CellTags->
  "Efficiency",ExpressionUUID->"fcece4fa-841a-4323-ad35-650a9dcbeddc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"c2a86170-7f44-460d-bf40-a4f651125d5d"],

Cell[CellGroupData[{

Cell["Redundant Calculations", "Section",
 CellChangeTimes->{{3.821002249228857*^9, 3.8210022536443987`*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"59adc369-0772-4a3a-a9a9-dd2721e4c92f"],

Cell["\<\
Here is an example of a calculation that is relatively inefficient since it \
involves redundant calculations.\
\>", "Text",
 CellTags->
  "Efficiency",ExpressionUUID->"51fceb91-2493-437a-ba99-c96f6dbd7c17"],

Cell["\<\
The symbolic integral in this example is evaluated for every point in the \
plot.\
\>", "Text",
 CellChangeTimes->{{3.8216829508494596`*^9, 3.821682965478683*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"bef57ffd-a484-4b6f-95d9-df50f28c85fc"],

Cell[TextData[{
 "The speed of the calculation is checked by wrapping the expression in the \
",
 StyleBox[ButtonBox["AbsoluteTiming",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/AbsoluteTiming"],
  FontWeight->"Bold"],
 " function:"
}], "CodeText",
 CellChangeTimes->{{3.821682967304762*^9, 3.8216829689383917`*^9}, {
  3.8220482736955433`*^9, 
  3.82204827416794*^9}},ExpressionUUID->"546dfcc2-607f-4e73-97f2-\
bd68c9dccfee"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{"x", " ", 
       RowBox[{"Cos", "[", "x", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "t"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->"",ExpressionUUID->"ed328a36-eced-4b3b-82cd-373e2668c767"],

Cell["\<\
The calculation is much faster if the integral is evaluated once:\
\>", "CodeText",
 CellChangeTimes->{{3.8220482763841343`*^9, 3.822048276879044*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"e33a8589-69bf-4529-922b-ab1b6138c20d"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"int", "=", 
    RowBox[{"Integrate", "[", 
     RowBox[{
      RowBox[{"x", " ", 
       RowBox[{"Cos", "[", "x", "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "t"}], "}"}]}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"Plot", "[", 
    RowBox[{"int", ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->"",ExpressionUUID->"387be70f-cacc-4cab-b08f-8f2379e7a8d9"],

Cell[TextData[{
 "The same gain in efficiency is achieved by using ",
 StyleBox[ButtonBox["Evaluate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Evaluate"],
  FontWeight->"Bold"],
 " to force evaluation of the argument in ",
 StyleBox[ButtonBox["Plot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Plot"],
  FontWeight->"Bold"],
 StyleBox[":",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.821682981724722*^9, 3.821683002147151*^9}, {
  3.8220482786572657`*^9, 3.822048279129517*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"bbacb5f9-f620-4c45-b3b9-237d8fc8ba80"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{"Integrate", "[", 
      RowBox[{
       RowBox[{"x", " ", 
        RowBox[{"Cos", "[", "x", "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "t"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "10"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->"",ExpressionUUID->"3758c398-811d-421b-ae35-4e04112677f0"],

Cell["", "EndOfSlide",ExpressionUUID->"cef53c3f-5290-4f4c-bfa4-94d59b3b9b01"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"0992b897-6a93-4375-922a-b5685a15f362"],

Cell[CellGroupData[{

Cell["Additional Principles", "Section",
 CellChangeTimes->{{3.821002294852541*^9, 3.8210022997663097`*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"be212968-1029-4dd7-809f-e39bd18a375b"],

Cell["\<\
There are also a few principles of efficient programming that apply mainly to \
high-level symbolic programming languages like the Wolfram Language.\
\>", "Text",
 CellChangeTimes->{{3.8210023164419203`*^9, 3.8210023209329653`*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"fb61cf92-2ee0-4f87-bc62-55e9a6c04263"],

Cell["\<\
High-level functions that operate on entire vectors, matrices, or other \
expressions are almost always more efficient than programs that operate on \
expression elements.\
\>", "Item",
 CellTags->
  "Efficiency",ExpressionUUID->"62031956-01a6-4328-9c5b-f661bcee61d2"],

Cell["\<\
Choose carefully when there is a choice between exact (symbolic) and inexact \
(numerical) methods for doing a calculation.\
\>", "Item",
 CellTags->
  "Efficiency",ExpressionUUID->"2fd88d41-90a5-4545-af56-d407bb918b71"],

Cell["", "EndOfSlide",ExpressionUUID->"ce39ff86-d0fb-40f3-af82-7b0db1bf7728"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"aeef65a3-211c-49a0-89cb-32b751ce0ab5"],

Cell[CellGroupData[{

Cell["Using High-Level Functions", "Section",
 CellChangeTimes->{{3.8210023496370363`*^9, 3.8210023585269675`*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"1e101bd1-5f3d-46bb-b32a-fb59a03c4f34"],

Cell["\<\
Consider the task of picking out the first two columns in a matrix.\
\>", "Text",
 CellTags->
  "Efficiency",ExpressionUUID->"bb1f4fea-1174-4cfa-8a0a-d2b7ebe8c2f7"],

Cell["Enter a matrix:", "CodeText",
 CellChangeTimes->{{3.822048286024881*^9, 3.82204828650861*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"ca46c4f2-f048-4f6d-ad9a-3d398072d866"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"(", GridBox[{
      {"a", "b", "c"},
      {"d", "e", "f"},
      {"g", "h", "i"}
     }], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input",
 CellTags->"Efficiency",
 CellLabel->"In[89]:=",ExpressionUUID->"fced44d0-723d-48a0-9efe-cc91f023f111"],

Cell[TextData[{
 "This program uses ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"],
  FontWeight->"Bold"],
 " to pick out the first two columns of the matrix. This program involves \
explicitly picking individual elements from the matrix:"
}], "CodeText",
 CellChangeTimes->{{3.82168303233232*^9, 3.8216830359596124`*^9}, {
  3.822048288230804*^9, 3.822048289029347*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"95470c33-a5d5-4852-974e-2fa80d9e4b7b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"mat", "[", 
      RowBox[{"[", 
       RowBox[{"k", ",", 
        RowBox[{"1", ";;", "2"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", 
       RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "result", "]"}]}], "Input",
 CellTags->"Efficiency",
 CellLabel->"In[91]:=",ExpressionUUID->"41b150a5-9e05-4567-994e-4ad09426ec4f"],

Cell[TextData[{
 "Here is a program that uses the ",
 StyleBox[ButtonBox["Take",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Take"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "function and ",
 StyleBox[ButtonBox["All",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/All"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "to construct the same result. This takes all rows and the first two columns:"
}], "CodeText",
 CellChangeTimes->{{3.821683046758728*^9, 3.821683055361925*^9}, {
  3.822048290874757*^9, 3.8220482913353443`*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"72b48b07-4068-4d40-a02c-ed943d3f2b95"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"result", "=", 
    RowBox[{"Take", "[", 
     RowBox[{"mat", ",", "All", ",", "2"}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "result", "]"}]}], "Input",
 CellTags->"Efficiency",
 CellLabel->"In[93]:=",ExpressionUUID->"a6527030-1d49-4b5a-9dd9-58829e2ff8b9"],

Cell["\<\
Compare the speed of these programs for a much larger matrix:\
\>", "CodeText",
 CellChangeTimes->{{3.8220482934608307`*^9, 3.822048293889138*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"6c95430c-841a-44ce-8a0e-2404b3878fad"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SuperscriptBox["10", "6"], ",", "10"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.498909282931975*^9, 3.498909284379458*^9}},
 CellTags->"Efficiency",
 CellLabel->"In[95]:=",ExpressionUUID->"b243b77c-0649-457b-82ac-ad31ce3fbe85"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"mat", "[", 
      RowBox[{"[", 
       RowBox[{"k", ",", 
        RowBox[{"1", ";;", "2"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", 
       RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->"In[96]:=",ExpressionUUID->"4853b433-108a-494a-ad72-20373de806f8"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Take", "[", 
    RowBox[{"mat", ",", "All", ",", "2"}], "]"}], ";"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->"In[97]:=",ExpressionUUID->"225aa32d-ff30-4ac8-90ee-fd8cfcb8f3a4"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Part", "[", 
    RowBox[{"mat", ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->"In[98]:=",ExpressionUUID->"1794b9e3-a02f-496a-9f99-b7f4703d5b06"],

Cell["\<\
There are many other ways to perform this task. Almost any approach using \
high-level functions will be faster than a procedural program.\
\>", "Text",
 CellTags->
  "Efficiency",ExpressionUUID->"225930b4-d12c-4a01-9038-9a21a2ba53e7"],

Cell[TextData[{
 "For example, here is a procedural program using a ",
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"],
  FontWeight->"Bold"],
 " loop to pick out the first two columns in the ",
 StyleBox["matrix m", "Input"],
 ". Note that a ",
 StyleBox["much",
  FontSlant->"Italic"],
 " smaller matrix is used in this example:"
}], "CodeText",
 CellChangeTimes->{
  3.8216830757119656`*^9, {3.822048297420897*^9, 3.822048297905427*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"a9318dcb-f81d-45ca-9b95-65b7b6bc6b19"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SuperscriptBox["10", "4"], ",", "3"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"result", "=", 
    RowBox[{"Table", "[", 
     RowBox[{"Null", ",", 
      RowBox[{"{", 
       RowBox[{"Length", "[", "mat", "]"}], "}"}]}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"result", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"mat", "[", 
         RowBox[{"[", 
          RowBox[{"k", ",", "1"}], "]"}], "]"}], ",", 
        RowBox[{"mat", "[", 
         RowBox[{"[", 
          RowBox[{"k", ",", "2"}], "]"}], "]"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", 
       RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]}], "Input",
 CellTags->"Efficiency",
 CellLabel->"In[99]:=",ExpressionUUID->"f14a0097-7ad5-49c3-be66-9537489d0a72"],

Cell[TextData[{
 "Clear the value of ",
 StyleBox["mat", "Input"],
 " and ",
 StyleBox["result", "Input"],
 StyleBox[":", "MR"]
}], "CodeText",
 CellChangeTimes->{{3.822048300278535*^9, 3.822048301336384*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"d22b3db8-e3c0-42a5-a31c-2367e81a0a43"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"mat", ",", "result"}], "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->
  "In[101]:=",ExpressionUUID->"b3007fc9-a540-4b73-81c9-acf00d9fecd0"],

Cell["", "EndOfSlide",ExpressionUUID->"adff284a-e59a-4797-9fbc-8bd3a3162904"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"fc0287d3-bda2-48b5-9c09-dde1fff6e4dc"],

Cell[CellGroupData[{

Cell["Vector Operations", "Section",
 CellChangeTimes->{{3.8210025205853424`*^9, 3.8210025252513084`*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"e973b2a7-7f05-4bc8-83b2-e62733d96c28"],

Cell["\<\
Vector operations are fast in the Wolfram Language and whenever you can \
reduce (or convert) a problem to vector operations, you generally will be \
able to squeeze some speed out of those computations. \
\>", "Text",
 CellChangeTimes->{{3.821002535300351*^9, 
  3.8210025385777903`*^9}},ExpressionUUID->"4c1b0a08-069b-415a-8f2f-\
856a6d6f6c48"],

Cell[TextData[{
 "The following example takes a two-column matrix and creates a three-column \
matrix where the third column in each row consists of ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SqrtBox[
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}]], "Input"], TraditionalForm]],ExpressionUUID->
  "96a17e2e-d08b-44ad-9f85-10d00a9a3348"],
 " where ",
 StyleBox["{", "Input"],
 StyleBox[Cell[BoxData[
  FormBox["x", TraditionalForm]], "Input",ExpressionUUID->
  "8cbb8d24-5ac9-46a3-8564-b7b06a03cb29"], "Input"],
 StyleBox[",", "Input"],
 StyleBox[Cell[BoxData[
  FormBox["y", TraditionalForm]], "Input",ExpressionUUID->
  "8303b3ca-4219-4912-8992-88c4bc4c03f8"], "Input"],
 StyleBox["}", "Input"],
 " is the original row vector."
}], "Text",ExpressionUUID->"822f198e-7edc-4388-892d-383b6c5cf1d1"],

Cell["\<\
Here is a small two-column matrix to use to prototype your computations:\
\>", "CodeText",
 CellChangeTimes->{{3.8220483102593613`*^9, 
  3.822048310763538*^9}},ExpressionUUID->"e4708363-88e5-4e93-bdec-\
54d355262f99"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["x", "1"], ",", 
       SubscriptBox["y", "1"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["x", "2"], ",", 
       SubscriptBox["y", "2"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["x", "3"], ",", 
       SubscriptBox["y", "3"]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input",
 CellLabel->
  "In[102]:=",ExpressionUUID->"659fec00-b3a8-465b-8e88-dea03d5aaa00"],

Cell["First, try using rules:", "CodeText",
 CellChangeTimes->{{3.82204831350876*^9, 
  3.822048314003641*^9}},ExpressionUUID->"c7194e17-edc7-491f-bdb6-\
506aadd7ea12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "/.", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "b_"}], "}"}], "\[RuleDelayed]", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["a", "2"], "+", 
        SuperscriptBox["b", "2"]}]]}], "}"}]}]}], "//", 
  "MatrixForm"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"ec0cf161-5a10-4dbb-9327-58f55efa7c18"],

Cell["A second approach uses an assignment:", "CodeText",
 CellChangeTimes->{{3.822048315252207*^9, 
  3.822048315724566*^9}},ExpressionUUID->"33d69907-f48e-4870-9195-\
e299d034fb04"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"{", 
    RowBox[{"a_", ",", "b_"}], "}"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", 
    SqrtBox[
     RowBox[{
      SuperscriptBox["a", "2"], "+", 
      SuperscriptBox["b", "2"]}]]}], "}"}]}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"8a9cec64-5560-4e67-a973-88c3ac92b280"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", 
   RowBox[{"f", ",", "mat"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"4b546570-393f-4947-ae94-04fd901abb26"],

Cell[TextData[{
 "A third approach breaks down the columns, operates on them, and then puts \
the matrix back together using ",
 StyleBox[ButtonBox["Transpose",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Transpose"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821683145968213*^9, 3.8216831601004353`*^9}, {
  3.822048318143853*^9, 
  3.822048319280258*^9}},ExpressionUUID->"a32b03ab-68ee-46cd-942a-\
4f2b93e423bd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"c1", "=", 
   RowBox[{"mat", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c2", "=", 
   RowBox[{"mat", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{"c1", ",", "c2", ",", 
     SqrtBox[
      RowBox[{
       SuperscriptBox["c1", "2"], "+", 
       SuperscriptBox["c2", "2"]}]]}], "}"}], "]"}], "//", 
  "MatrixForm"}]}], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"850ddaae-0b2d-47d7-8393-ec7e6373cd9d"],

Cell["Now compare the three approaches using a large matrix:", "CodeText",
 CellChangeTimes->{{3.822048321912574*^9, 
  3.822048322441339*^9}},ExpressionUUID->"15a82142-3462-499a-99ca-\
b43da12b6d5d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bigmat", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SuperscriptBox["10", "6"], ",", "2"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"37f2a2f0-ec68-4ac2-8b97-d7aeb4536568"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"bigmat", "/.", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a_", ",", "b_"}], "}"}], "\[RuleDelayed]", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", 
       SqrtBox[
        RowBox[{
         SuperscriptBox["a", "2"], "+", 
         SuperscriptBox["b", "2"]}]]}], "}"}]}]}], ";"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"8dc6dcbd-9ee4-4ad9-9933-e3fb5166436c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{"f", ",", "bigmat"}], "]"}], ";"}], "//", 
  "AbsoluteTiming"}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"bf7036c2-f109-4d3d-b785-76f97107e395"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"c1", "=", 
    RowBox[{"bigmat", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"c2", "=", 
    RowBox[{"bigmat", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{"c1", ",", "c2", ",", 
      SqrtBox[
       RowBox[{
        SuperscriptBox["c1", "2"], "+", 
        SuperscriptBox["c2", "2"]}]]}], "}"}], "]"}], ";"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[113]:=",ExpressionUUID->"41370aa1-8c48-48cc-87a2-acf87c02019e"],

Cell["\<\
That is a speedup of about 1.5 to 2.5 orders of magnitude. Not bad!\
\>", "Text",ExpressionUUID->"a3c957df-014e-46f3-a783-c5aa3a1d03da"],

Cell["", "EndOfSlide",ExpressionUUID->"ce1ba122-4941-42e2-8157-9a7e99cb4194"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"509e7005-bc68-4ef8-bade-6c9288168e53"],

Cell[CellGroupData[{

Cell["Exact and Inexact Calculations", "Section",
 CellChangeTimes->{{3.8210025862221675`*^9, 3.821002592551039*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"1d59e946-ff2f-4333-8e6d-7de93497e5ab"],

Cell["\<\
Sometimes there is a choice between using either exact or inexact methods to \
do a calculation. The choice can have a large effect on efficiency.\
\>", "Text",
 CellTags->
  "Efficiency",ExpressionUUID->"58ffce00-be9e-4756-a750-f5ecd521d4a4"],

Cell["\<\
Consider the following example involving a simple sum. This exact result has \
the advantage of eliminating numerical error, but it is also rather bulky:\
\>", "CodeText",
 CellChangeTimes->{
  3.82100259442938*^9, {3.822048327762497*^9, 3.822048328223424*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"58bf75d3-6003-4153-b10f-f75089c29940"],

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"Sum", "[", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox[
       RowBox[{"3", "/", "4"}], "k"], ")"}], 
     FractionBox["k", 
      RowBox[{"3", "/", "4"}]]], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "5"}], "}"}]}], "]"}]}]], "Input",
 CellTags->"Efficiency",
 CellLabel->
  "In[114]:=",ExpressionUUID->"ec26320e-fa6a-4446-8eb8-030219ebe67a"],

Cell["\<\
A numerical approximation is needed to answer simple questions, such as \
\[OpenCurlyDoubleQuote]Is the result bigger or smaller than 1?\
\[CloseCurlyDoubleQuote]:\
\>", "CodeText",
 CellChangeTimes->{3.822048330090725*^9},
 CellTags->
  "Efficiency",ExpressionUUID->"7cfc1ba2-41ed-44d7-a451-aa6d8b985a81"],

Cell[BoxData[
 RowBox[{"N", "[", "result", "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->
  "In[115]:=",ExpressionUUID->"f3595f94-949c-4dcc-9613-0f6572aa1f40"],

Cell["\<\
A corresponding inexact result is much more compact. This input uses the \
inexact number 0.75 in place of the exact number 3/4:\
\>", "CodeText",
 CellChangeTimes->{{3.822048331406776*^9, 3.822048331879676*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"858862ff-e552-4ce7-a8d3-8bc17910a797"],

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     FractionBox["0.75", "k"], ")"}], 
    FractionBox["k", "0.75"]], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->
  "In[116]:=",ExpressionUUID->"8bbe6bcc-03af-40dc-9be6-3651f8297191"],

Cell["\<\
A significant difference in speed can be seen by comparing the exact and \
inexact sums for a large number of terms:\
\>", "CodeText",
 CellChangeTimes->{{3.8220483338374968`*^9, 3.822048334309951*^9}},
 CellTags->
  "Efficiency",ExpressionUUID->"3549491b-464c-4d57-a6f5-6a0167fbfddf"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"N", "[", 
   RowBox[{"Sum", "[", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       FractionBox[
        RowBox[{"3", "/", "4"}], "k"], ")"}], 
      FractionBox["k", 
       RowBox[{"3", "/", "4"}]]], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1000"}], "}"}]}], "]"}], "]"}], "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->
  "In[117]:=",ExpressionUUID->"5c97c333-ab10-42fb-a67e-56a63b2fe315"],

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"Sum", "[", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      FractionBox["0.75", "k"], ")"}], 
     FractionBox["k", "0.75"]], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1000"}], "}"}]}], "]"}], "]"}]], "Input",
 CellTags->"Efficiency",
 CellLabel->
  "In[118]:=",ExpressionUUID->"f92d123d-0c36-4b4f-9d4b-ddd4b3e7a206"],

Cell["\<\
There are also examples where exact calculations can be more efficient than \
inexact calculations or where optimal efficiency is achieved by mixing exact \
and symbolic calculations. When to use exact and when to use approximate \
numbers in your computations depends entirely on your constraints in terms of \
desired output, time, and computer resources.\
\>", "Text",
 CellTags->
  "Efficiency",ExpressionUUID->"2ff42857-a728-4e0e-aef2-ad468a7e00f6"],

Cell["", "EndOfSlide",ExpressionUUID->"347f99bb-df30-4da8-affb-7c047735208a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"b51a1512-1cfe-459b-ad01-d5ca8034a168"],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CounterAssignments->{{"Chapter", 6}, {"ExerciseNumber", 0}},
 CellTags->"Exercises",ExpressionUUID->"233bed71-f56f-473c-84fb-1eb6f734c6d0"],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Pattern Matching"
}], "Subsection",
 CellChangeTimes->{{3.821004225738118*^9, 3.821004231099349*^9}},
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"460bdb6e-0fd1-4cb9-bde2-2d2a0367fbc3"],

Cell[TextData[{
 "A ",
 StyleBox["pattern",
  FontSlant->"Italic"],
 " is an expression that represents a class of expressions."
}], "Text",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"1fb825ae-8d94-48fc-af39-4bb5a9a0d80e"],

Cell[TextData[{
 "An expression that is in the class of expressions represented by a pattern \
is said to ",
 StyleBox["match",
  FontSlant->"Italic"],
 " the pattern. You can use the ",
 StyleBox[ButtonBox["MatchQ",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatchQ"],
  FontWeight->"Bold"],
 " function to find out if an expression matches a pattern."
}], "Text",
 CellChangeTimes->{{3.8216843117212114`*^9, 3.8216843160905523`*^9}},
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"51409615-827f-4428-bdf5-36f69866b51d"],

Cell[TextData[{
 "For example,",
 StyleBox[" ", "Input"],
 StyleBox[Cell[BoxData[
  RowBox[{"MatchQ", "[", 
   RowBox[{"17", ",", "_Integer"}], "]"}]], "Input",ExpressionUUID->
  "72d0851f-4551-4217-8a88-c552250b2871"], "Input"],
 " returns ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"],
  FontWeight->"Bold"],
 " because ",
 StyleBox["17", "MR"],
 " matches the pattern ",
 StyleBox["_Integer", "Input"],
 ". The pattern",
 StyleBox[" _Integer", "Input"],
 " matches any expression with a head of ",
 StyleBox[ButtonBox["Integer",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Integer"],
  FontWeight->"Bold"],
 StyleBox[":",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.8216843250176153`*^9, 3.821684343617344*^9}, {
  3.822048348913002*^9, 3.822048349373864*^9}},
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"1c52a726-d0c2-4c11-9842-bd0501cd831a"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"17", ",", "_Integer"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"ff60fee8-1749-4ecf-a615-eb6509bbfb43"],

Cell[TextData[{
 "Replace ",
 StyleBox["expr", "MR"],
 " in each of the following inputs so that the input evaluates to ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"],
  FontWeight->"Bold"],
 ". In other words, find an expression that matches each pattern:"
}], "CodeText",
 CellChangeTimes->{{3.821684358014617*^9, 3.8216843625105453`*^9}, {
  3.82204835468224*^9, 3.822048355684752*^9}},
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"b872ed02-f773-496a-96de-577dad826497"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", "_List"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"05d379c3-5c24-4e16-9162-24932558873c"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The pattern ", 
         StyleBox["_List ", "Input"], "matches an expression with a head of ", 
         StyleBox[
          ButtonBox[
          "List", BaseStyle -> "Link", ButtonData -> "paclet:ref/List"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {3.821684389707343*^9}], 
      Cell[
       TextData[{"See the documentation for ", 
         StyleBox[
          ButtonBox[
          "Blank", BaseStyle -> "Link", ButtonData -> "paclet:ref/Blank"], 
          FontWeight -> "Bold"], 
         StyleBox[" ", FontWeight -> "Bold"], "in the Help Browser."}], 
       "Text", CellChangeTimes -> {{3.821684393148134*^9, 
        3.821684398455933*^9}}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"e2afd1db-a254-4cce-b258-94f44cfe3fca"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The pattern ", 
        StyleBox["_List", "Input"], " will match any list."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", "_List"}], "]"}]],
       "Input"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", "}"}], ",", "_List"}], "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"841ba6b2-bb26-43af-b35b-2a7cd9db3837"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", "_Plus"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"d49d1da0-7dff-4118-b9b7-206f28782956"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The pattern ", 
         StyleBox["_Plus", "Input"], " matches an expression with a head of ", 
         StyleBox[
          ButtonBox[
          "Plus", BaseStyle -> "Link", ButtonData -> "paclet:ref/Plus"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {{3.821684454233963*^9, 3.8216844693774185`*^9}}], 
      Cell[
       TextData[{"See the documentation for ", 
         StyleBox[
          ButtonBox[
          "Blank", BaseStyle -> "Link", ButtonData -> "paclet:ref/Blank"], 
          FontWeight -> "Bold"], 
         StyleBox[" ", FontWeight -> "Bold"], "in the Help Browser."}], 
       "Text", CellChangeTimes -> {{3.8216844744667964`*^9, 
        3.821684487799114*^9}}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"467c759f-2deb-47d6-9524-1314adc8cd96"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The pattern ", 
        StyleBox["_Plus", "Input"], " will match any sum."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"Pi", "+", "E"}], ",", "_Plus"}], "]"}]], "Input"], 
     Cell[
      TextData[{
       "If the expression evaluates to something other than a sum then the \
match will fail even if the original expression is a sum. For example ", 
        StyleBox["MatchQ[2+2,_Plus]", "Input"], " will return ", 
        StyleBox[
         ButtonBox[
         "False", BaseStyle -> "Link", ButtonData -> "paclet:ref/False"], 
         FontWeight -> "Bold"], 
        StyleBox[" ", FontWeight -> "Bold"], "since ", 
        StyleBox["2+2", "MR"], " evaluates to an integer."}], "Text", 
      CellChangeTimes -> {{3.8216845295920954`*^9, 3.8216845363111143`*^9}}], 
     
     Cell[
      TextData[{
        StyleBox["MatchQ[x+y,_Plus]", "Input"], " will return ", 
        StyleBox[
         ButtonBox[
         "True", BaseStyle -> "Link", ButtonData -> "paclet:ref/True"], 
         FontWeight -> "Bold"], " if ", 
        StyleBox["x", "MR"], " and ", 
        StyleBox["y", "MR"], " do not already have values that cause ", 
        StyleBox["x+y", "MR"], 
        " to evaluate to something other than a sum."}], "CodeText", 
      CellChangeTimes -> {3.821684556197068*^9}], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"x", "+", "y"}], ",", "_Plus"}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"92927779-7a76-4fbf-a2e8-33e769cccec7"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"{", 
    RowBox[{"_", ",", "_"}], "}"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"22c187cc-dc62-4032-9077-85699b0c7fcc"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The pattern ", 
         StyleBox["_", "Input"], " matches any expression."}], "Text"], 
      Cell[
       TextData[{"The pattern ", 
         StyleBox["{_,_}", "Input"], " matches any list with two elements."}],
        "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"f5e3148d-93f1-433b-8801-7150ffb860c4"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The pattern ", 
        StyleBox["{_,_}", "Input"], " matches any pair of expressions."}], 
      "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"2", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{"_", ",", "_"}], "}"}]}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", "1", "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{"_", ",", "_"}], "}"}]}], "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"114a7e52-464b-4d22-9eaa-f1c41cbc4a74"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"_", "?", "Positive"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"c77188c0-bc74-497c-8d5d-a20fd150c8a6"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The pattern ", 
         StyleBox["_?Positive", "Input"], " matches any expression ", 
         StyleBox["expr", "IT"], " such that ", 
         StyleBox["Positive[expr]", "Input"], " returns ", 
         StyleBox[
          ButtonBox[
          "True", BaseStyle -> "Link", ButtonData -> "paclet:ref/True"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {{3.8216846749009724`*^9, 3.821684679208438*^9}}], 
      Cell[
       TextData[{"See the documentation for ", 
         StyleBox[
          ButtonBox[
          "PatternTest", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/PatternTest"], FontWeight -> "Bold"], 
         " in the Help Browser."}], "Text", 
       CellChangeTimes -> {{3.8216846832990756`*^9, 
        3.8216846893768106`*^9}}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"61aea367-73fa-4823-9ca8-75fb353e625c"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The pattern ", 
        StyleBox["_?Positive", "Input"], 
        " will match any positive numeric expression."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{"42", ",", 
           RowBox[{"_", "?", "Positive"}]}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"Pi", "-", "E"}], ",", 
           RowBox[{"_", "?", "Positive"}]}], "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"7b33164e-0b3d-400f-aa30-bb19bf37cc43"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"_", "?", "Positive"}], ",", 
     RowBox[{"_", "?", "Negative"}]}], "}"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"bca72515-f547-4f30-aaf2-7c344b05c9e8"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The pattern ", 
         StyleBox["{_?Positive,_?Negative}", "Input"], 
         " matches any list with two elements and in which the first element \
matches ", 
         StyleBox["_?Positive", "Input"], " and the second element matches ", 
         
         StyleBox["_?Negative", "Input"], "."}], "Text"], 
      Cell[
       TextData[{"See the documentation for ", 
         StyleBox[
          ButtonBox[
          "PatternTest", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/PatternTest"], FontWeight -> "Bold"], 
         StyleBox[" ", FontWeight -> "Bold"], "in the Help Browser."}], 
       "Text", CellChangeTimes -> {{3.8216847484041457`*^9, 
        3.8216847577019863`*^9}}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"b46f7b0f-960f-47c8-88c4-6c5dcd48771c"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The pattern ", 
        StyleBox["{_?Positive,_?Negative}", "Input"], 
        " will match a list of two elements in which the first element is \
positive and the second element is negative."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"1", ",", 
               RowBox[{"-", "1"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"_", "?", "Positive"}], ",", 
               RowBox[{"_", "?", "Negative"}]}], "}"}]}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Cos", "[", "1", "]"}], ",", 
               RowBox[{"Cos", "[", "2", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"_", "?", "Positive"}], ",", 
               RowBox[{"_", "?", "Negative"}]}], "}"}]}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"b7ff6f9d-442d-4796-af7a-afa94ccd15a0"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"p_", "/;", 
    RowBox[{"10", "<", "p", "<", "20"}]}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"f85ebfbe-8c2d-4786-8e77-93df3fe8fb7d"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The pattern ", 
         StyleBox[
         "p_\[ThinSpace]/;\[ThinSpace]10\[ThinSpace]<\[ThinSpace]p\[ThinSpace]\
<\[ThinSpace]20", "Input"], " matches any expression ", 
         StyleBox["expr", "IT"], " such that ", 
         StyleBox[
         "10\[ThinSpace]<\[ThinSpace]expr\[ThinSpace]<\[ThinSpace]20", 
          "Input"], " evaluates to ", 
         StyleBox[
          ButtonBox[
          "True", BaseStyle -> "Link", ButtonData -> "paclet:ref/True"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {3.821684825495056*^9}], 
      Cell[
       TextData[{"See the documentation for ", 
         StyleBox[
          ButtonBox[
          "Condition", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/Condition"], FontWeight -> "Bold"], 
         " in the Documentation Center."}], "Text", 
       CellChangeTimes -> {{3.8216848311698723`*^9, 
        3.8216848352000823`*^9}}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"e78fc297-7a4e-4409-8ea8-c1b759545d42"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The pattern ", 
        StyleBox[
        "p_\[ThinSpace]/;\[ThinSpace]10\[ThinSpace]<\[ThinSpace]p\[ThinSpace]<\
\[ThinSpace]20", "Input"], " matches any number between 10 and 20."}], 
      "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{"10.1", ",", 
           RowBox[{"p_", "/;", 
             RowBox[{"10", "<", "p", "<", "20"}]}]}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           FractionBox["188", "11"], ",", 
           RowBox[{"p_", "/;", 
             RowBox[{"10", "<", "p", "<", "20"}]}]}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"0f84af77-6ec1-4393-88cf-a5fdf90dd124"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "__", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"63330ea9-e177-45bf-928b-4252ed4a7926"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The pattern ", 
         StyleBox["__", "Input"], 
         " matches any sequence of one or more expressions."}], "Text"], 
      Cell[
       TextData[{"See the documentation for ", 
         StyleBox[
          ButtonBox[
          "BlankSequence", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/BlankSequence"], FontWeight -> "Bold"], 
         " in the Documentation Center."}], "Text", 
       CellChangeTimes -> {3.8216848894429927`*^9}], 
      Cell[
       TextData[{"The pattern ", 
         StyleBox["__", "Input"], 
         " is meaningful only within another expression, since the elements \
that it matches must be elements of an expression."}], "Text"], 
      Cell[
       TextData[{"The notation ", 
         StyleBox["__", "Input"], 
         " is a pair of blanks (underscore characters)."}], "Text"], 
      Cell[
       TextData[{"The pattern ", 
         StyleBox["{1,__,10}", "Input"], 
         " will match any list that starts with 1, ends with 10, and has at \
least three elements."}], "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"dff725b1-51b1-41c5-b111-8613cb5273b6"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"The pattern ", 
        StyleBox["{1,__,10}", "Input"], 
        " will match any list that starts with 1, ends with 10, and has at \
least three elements."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"1", ",", "99", ",", 
               RowBox[{"-", "27"}], ",", "10"}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{"1", ",", "__", ",", "10"}], "}"}]}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"a6598975-8427-49a3-9111-ee0efa0f3700"],

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{"expr", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "1", "}"}], ".."}], "}"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"f33d5bbf-0d63-4dc3-994c-e3cfb6b6628b"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"A pattern of the form ", 
         StyleBox["patt", "IT"], 
         StyleBox["..", "MR"], 
         " matches any sequence of one or more expression elements that \
individually match the pattern ", 
         StyleBox["patt", "IT"], "."}], "Text"], 
      Cell[
       TextData[{"A pattern of the form ", 
         StyleBox["patt", "IT"], 
         StyleBox["..", "MR"], 
         " is meaningful only within another expression, since the elements \
that it matches must be elements of an expression."}], "Text"], 
      Cell[
       TextData[{"See the documentation for ", 
         StyleBox[
          ButtonBox[
          "Repeated", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/Repeated"], FontWeight -> "Bold"], 
         StyleBox[" ", FontWeight -> "Bold"], "in the Help Browser."}], 
       "Text", CellChangeTimes -> {{3.821684952768009*^9, 
        3.8216849573592997`*^9}}], 
      Cell[
       TextData[{"The pattern ", 
         StyleBox["{{1}..}", "Input"], 
         " matches any list with one or more elements, all of which are ", 
         StyleBox["{1}", "Input"], "."}], "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"f0fefa44-9d46-423d-b8eb-9314b24ce29e"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     BoxData[
      RowBox[{"MatchQ", "[", 
        RowBox[{
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "1", "}"}], ",", 
              RowBox[{"{", "1", "}"}]}], "}"}], ",", 
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", "1", "}"}], ".."}], "}"}]}], "]"}]], "Input"], 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"962ccee0-af20-47a6-9660-bf9e4c872a27"],

Cell[TextData[{
 "Is the expression ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"{", "1", "}"}], "Input"]],ExpressionUUID->
  "a9fe7a3b-0b35-4b57-a781-0f81b67d3985"],
 " a pattern? If so, what does it match?"
}], "Item",
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"5f9d6f25-dbfe-43c3-9425-91f157214ee5"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"Yes, the expression ", 
        StyleBox["{1}", "Input"], " can be a pattern."}], "Text"], 
     Cell[
      TextData[{"When ", 
        StyleBox["{1}", "Input"], 
        " is used as a pattern, the only expression that it matches is \
itself."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"MatchQ", "[", 
         RowBox[{
           RowBox[{"{", "1", "}"}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"20d7d20a-85ed-4e33-a103-85827fbb71ab"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Discarding Outliers from Data"
}], "Subsection",
 CellChangeTimes->{3.82100436480355*^9},
 CellTags->{
  "Exercises", 
   "Discarding \
Outliers"},ExpressionUUID->"b712b4ff-9d23-4f89-a469-9cac59d58555"],

Cell["Evaluate the following input to introduce sample data:", "CodeText",
 CellChangeTimes->{{3.822048367991976*^9, 3.822048368398321*^9}},
 CellTags->{
  "Exercises", 
   "Discarding \
Outliers"},ExpressionUUID->"437ba67d-3025-4903-8c62-952addce6cc0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
    "50.30", ",", "49.85", ",", "46.11", ",", "48.04", ",", "52.34", ",", 
     "56.06", ",", "48.22", ",", "48.85", ",", "48.62", ",", "48.46", ",", 
     "51.00", ",", "50.38", ",", "97.10", ",", "56.05", ",", "48.50", ",", 
     "51.43", ",", "49.86", ",", "53.92", ",", "2.35", ",", "48.25", ",", 
     "52.15", ",", "54.18", ",", "52.79", ",", "54.62", ",", "88.6", ",", 
     "47.54", ",", "51.34", ",", "47.31", ",", "45.10", ",", "5.55", ",", 
     "52.49"}], "}"}]}], ";"}]], "Input",
 CellTags->{"Exercises", "Discarding Outliers"},
 CellLabel->
  "In[139]:=",ExpressionUUID->"5756fb38-4bec-4581-b191-ded845b04af8"],

Cell[TextData[{
 "Evaluate the following input to see a plot of ",
 StyleBox["data", "MR"],
 ". The value of ",
 StyleBox["data", "MR"],
 " is a list of 31 numbers, four of which are significantly larger or \
significantly smaller than the rest:"
}], "CodeText",
 CellChangeTimes->{
  3.821002701311941*^9, {3.822048369589797*^9, 3.822048370049601*^9}},
 CellTags->{
  "Exercises", 
   "Discarding \
Outliers"},ExpressionUUID->"26231579-2e4a-4ff8-afa2-4db05c10830b"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Discarding \
Outliers"},ExpressionUUID->"eaaf2900-18e9-4dde-afc7-c2897fc9f851"],

Cell[TextData[{
 "Use ",
 StyleBox[ButtonBox["Select",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Select"],
  FontWeight->"Bold"],
 " or ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"],
  FontWeight->"Bold"],
 " to discard the elements in ",
 StyleBox["data", "MR"],
 " that are not between 40 and 60. The result should be a list with 27 \
elements. You can check your result by making another plot."
}], "Text",
 CellChangeTimes->{{3.821685125603404*^9, 3.8216851360597715`*^9}},
 CellTags->{
  "Exercises", 
   "Discarding \
Outliers"},ExpressionUUID->"8a5eab9d-ecbf-4f8b-9f56-75bf8b97fa23"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"To use ", 
         StyleBox[
          ButtonBox[
          "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
          FontWeight -> "Bold"], ", the second argument in ", 
         StyleBox[
          ButtonBox[
          "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
          FontWeight -> "Bold"], " will be a function that returns ", 
         StyleBox[
          ButtonBox[
          "True", BaseStyle -> "Link", ButtonData -> "paclet:ref/True"], 
          FontWeight -> "Bold"], 
         " when the argument of that function is between 40 and 60. One \
possibility is for the second argument in ", 
         StyleBox[
          ButtonBox[
          "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
          FontWeight -> "Bold"], " to be ", 
         StyleBox["f", "Input"], ", where ", 
         StyleBox["f", "Input"], " is defined by the following assignment."}],
        "CodeText", 
       CellChangeTimes -> {{3.8216851519443817`*^9, 3.8216851772007475`*^9}}], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"f", "[", "x_", "]"}], ":=", 
          RowBox[{"40", "<=", "x", "<=", "60"}]}]], "Input"], 
      Cell[
       TextData[{"Alternatively, you could use the pure function ", 
         StyleBox[
         "(40\[ThinSpace]\[LessEqual]\[ThinSpace]#\[ThinSpace]\[LessEqual]\
\[ThinSpace]60)&", "Input"], " as the second argument in ", 
         StyleBox[
          ButtonBox[
          "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {3.8216852127304883`*^9}], 
      Cell[
       TextData[{"If you decide to use ", 
         StyleBox[
          ButtonBox[
          "Cases", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cases"], 
          FontWeight -> "Bold"], ", the second argument in ", 
         StyleBox[
          ButtonBox[
          "Cases", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cases"], 
          FontWeight -> "Bold"], 
         " should be a pattern that matches any number between 40 and 60. For \
example, the second argument in ", 
         StyleBox[
          ButtonBox[
          "Cases", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cases"], 
          FontWeight -> "Bold"], 
         StyleBox[" ", FontWeight -> "Bold"], "could be the pattern ", 
         StyleBox[
         "p_\[ThinSpace]/;\[ThinSpace]40\[ThinSpace]\[LessEqual]\[ThinSpace]p\
\[ThinSpace]\[LessEqual]\[ThinSpace]60", "Input"], "."}], "Text", 
       CellChangeTimes -> {{3.8216852241434836`*^9, 3.821685244818758*^9}}]}, 
     All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"cedb46ba-57a5-4bde-84ad-5e7a78c461a5"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"Here is a solution in which the second argument in ", 
        StyleBox[
         ButtonBox[
         "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
         FontWeight -> "Bold"], 
        StyleBox[" ", FontWeight -> "Bold"], "is a pure function."}], 
      "CodeText", 
      CellChangeTimes -> {{3.821685512310294*^9, 3.8216855181417522`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"newdata", "=", 
         RowBox[{"Select", "[", 
           RowBox[{"data", ",", 
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"40", "\[LessEqual]", "#", "\[LessEqual]", "60"}], 
                 ")"}], "&"}]}], "]"}]}]], "Input"], 
     Cell[
      TextData[{
       "If you do not want to use a pure function, you can define a separate \
function and use the name of that function as the second argument in ", 
        StyleBox[
         ButtonBox[
         "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
         FontWeight -> "Bold"], "."}], "CodeText", 
      CellChangeTimes -> {3.8216855247874928`*^9}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", "x_", "]"}], ":=", 
         RowBox[{"40", "<=", "x", "<=", "60"}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"newdata", "=", 
         RowBox[{"Select", "[", 
           RowBox[{"data", ",", "f"}], "]"}]}]], "Input"], 
     Cell[
      TextData[{"Here is a solution using ", 
        StyleBox[
         ButtonBox[
         "Cases", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cases"], 
         FontWeight -> "Bold"], "."}], "CodeText", 
      CellChangeTimes -> {3.821685536684162*^9}], 
     Cell[
      BoxData[
       RowBox[{"newdata", "=", 
         RowBox[{"Cases", "[", 
           RowBox[{"data", ",", 
             RowBox[{"p_", "/;", 
               RowBox[{"40", "\[LessEqual]", "p", "\[LessEqual]", "60"}]}]}], 
           "]"}]}]], "Input"]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"0d0b9efc-c8ec-43d0-a31f-d093556e330e"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Finding Elements in a List"
}], "Subsection",
 CellChangeTimes->{3.82100436654093*^9},
 CellTags->{
  "Exercises", 
   "Finding Elements"},ExpressionUUID->"926afb49-14fc-4d47-b80a-2f7ac7e43627"],

Cell[TextData[{
 "Evaluate the following input to define ",
 StyleBox["v", "MR"],
 " as a list of integers:"
}], "CodeText",
 CellChangeTimes->{{3.822051178281492*^9, 3.8220511790995626`*^9}},
 CellTags->{
  "Exercises", 
   "Finding Elements"},ExpressionUUID->"f9757f34-2830-4418-b975-0908aecc4963"],

Cell[BoxData[
 RowBox[{
  RowBox[{"v", "=", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "5", ",", "7", ",", "7", ",", "4", ",", 
     RowBox[{"-", "3"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "3"}], ",", 
     RowBox[{"-", "4"}], ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", "2"}], ",", "0", ",", "2", ",", "3"}], "}"}]}], 
  ";"}]], "Input",
 CellTags->{"Exercises", "Finding Elements"},
 CellLabel->
  "In[144]:=",ExpressionUUID->"316b6933-fd5e-40e6-bdca-bf67ad8df361"],

Cell[TextData[{
 "Evaluate the following input to use the ",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "function to get the positions of all the negative numbers in ",
 StyleBox["v:", "MR"]
}], "CodeText",
 CellChangeTimes->{{3.821685612907293*^9, 3.821685618485334*^9}, {
  3.822051183782876*^9, 3.82205118422036*^9}},
 CellTags->{
  "Exercises", 
   "Finding Elements"},ExpressionUUID->"3b1b9855-5679-4257-9f3d-3b3ec497801f"],

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{"v", ",", 
   RowBox[{"_", "?", "Negative"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Finding Elements"},ExpressionUUID->"57928568-12e9-47dd-b66a-38004f32eb0a"],

Cell[TextData[{
 "Evaluate the following input to pick out the last negative element in ",
 StyleBox["v:", "MR"]
}], "CodeText",
 CellChangeTimes->{{3.822051188832794*^9, 3.8220511894741707`*^9}, {
  3.822053655394278*^9, 3.822053657511388*^9}},
 CellTags->{
  "Exercises", 
   "Finding Elements"},ExpressionUUID->"ca47bb0a-9166-408c-b121-12822b600f48"],

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"v", ",", 
   RowBox[{"Last", "[", 
    RowBox[{"Position", "[", 
     RowBox[{"v", ",", 
      RowBox[{"_", "?", "Negative"}]}], "]"}], "]"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Finding Elements"},ExpressionUUID->"00fef218-f164-49e6-9a73-dfdff11417b0"],

Cell[TextData[{
 "Find an input that returns the first even element in ",
 StyleBox["v", "MR"],
 ". There are many ways to do this. The examples above suggest a method using \
",
 StyleBox[ButtonBox["Position",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Position"],
  FontWeight->"Bold"],
 StyleBox[" ",
  FontWeight->"Bold"],
 "and ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"],
  FontWeight->"Bold"],
 ". See if you can find at least one other way. The solution shows several \
different ways, only one of which involves ",
 StyleBox[ButtonBox["Extract",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Extract"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.82168563406161*^9, 3.8216856556153092`*^9}},
 CellTags->{
  "Exercises", 
   "Finding Elements"},ExpressionUUID->"f9ad8e47-4806-47fd-b943-e7c3842cc95c"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{
         StyleBox["First[Position[v,_?EvenQ]]", "Input"], 
         " will return the position of the first even element in ", 
         StyleBox["v", "MR"], "."}], "Text"], 
      Cell[
       TextData[{"One alternate solution is to use ", 
         StyleBox[
          ButtonBox[
          "Part", BaseStyle -> "Link", ButtonData -> "paclet:ref/Part"], 
          FontWeight -> "Bold"], 
         StyleBox[" ", FontWeight -> "Bold"], "rather than ", 
         StyleBox[
          ButtonBox[
          "Extract", BaseStyle -> "Link", ButtonData -> "paclet:ref/Extract"],
           FontWeight -> "Bold"], " to pick out the desired element."}], 
       "Text", CellChangeTimes -> {{3.821685679031294*^9, 
        3.821685690809436*^9}}], 
      Cell[
       TextData[{"Another solution is to use ", 
         StyleBox[
          ButtonBox[
          "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
          FontWeight -> "Bold"], 
         StyleBox[" ", FontWeight -> "Bold"], "or ", 
         StyleBox[
          ButtonBox[
          "Cases", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cases"], 
          FontWeight -> "Bold"], 
         " to pick out all of the even elements from ", 
         StyleBox["v", "MR"], 
         ", and then take the first element from that result."}], "Text", 
       CellChangeTimes -> {{3.8216856963905*^9, 3.8216857071736407`*^9}}], 
      Cell[
       TextData[{"Another solution would be to write a ", 
         StyleBox[
          ButtonBox["Do", BaseStyle -> "Link", ButtonData -> "paclet:ref/Do"],
           FontWeight -> "Bold"], 
         " loop to check each element and to return from the loop when the \
first even element is encountered. This same approach could be implemented \
using a ", 
         StyleBox[
          ButtonBox[
          "For", BaseStyle -> "Link", ButtonData -> "paclet:ref/For"], 
          FontWeight -> "Bold"], " loop, or using ", 
         StyleBox[
          ButtonBox[
          "Scan", BaseStyle -> "Link", ButtonData -> "paclet:ref/Scan"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {{3.821685717761304*^9, 3.8216857372189283`*^9}}]}, 
     All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"7ffd01f3-da16-4118-af51-a3c87b86c9f6"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{
       "Any of these inputs will return the first even element in the list ", 
        
        StyleBox["v", "MR"], "."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"v", "=", 
           RowBox[{"{", 
             
             RowBox[{"3", ",", "1", ",", "5", ",", "7", ",", "7", ",", "4", 
               ",", 
               RowBox[{"-", "3"}], ",", 
               RowBox[{"-", "1"}], ",", 
               RowBox[{"-", "3"}], ",", 
               RowBox[{"-", "4"}], ",", 
               RowBox[{"-", "5"}], ",", 
               RowBox[{"-", "2"}], ",", 
               RowBox[{"-", "1"}], ",", 
               RowBox[{"-", "1"}], ",", 
               RowBox[{"-", "2"}], ",", "0", ",", "2", ",", "3"}], "}"}]}], 
         ";"}]], "Input", CellTags -> {"Exercises", "Finding Elements"}], 
     Cell[
      BoxData[
       RowBox[{"Extract", "[", 
         RowBox[{"v", ",", 
           RowBox[{"First", "[", 
             RowBox[{"Position", "[", 
               RowBox[{"v", ",", 
                 RowBox[{"_", "?", "EvenQ"}]}], "]"}], "]"}]}], "]"}]], 
      "Input"], 
     Cell[
      BoxData[
       RowBox[{"Part", "[", 
         RowBox[{"v", ",", 
           RowBox[{
             RowBox[{"Position", "[", 
               RowBox[{"v", ",", 
                 RowBox[{"_", "?", "EvenQ"}]}], "]"}], "[", 
             RowBox[{"[", 
               RowBox[{"1", ",", "1"}], "]"}], "]"}]}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"v", "[", 
         RowBox[{"[", 
           RowBox[{
             RowBox[{"Position", "[", 
               RowBox[{"v", ",", 
                 RowBox[{"_", "?", "EvenQ"}]}], "]"}], "[", 
             RowBox[{"[", 
               RowBox[{"1", ",", "1"}], "]"}], "]"}], "]"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"First", "[", 
         RowBox[{"Select", "[", 
           RowBox[{"v", ",", "EvenQ"}], "]"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"Select", "[", 
           RowBox[{"v", ",", "EvenQ", ",", "1"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"First", "[", 
         RowBox[{"Cases", "[", 
           RowBox[{"v", ",", 
             RowBox[{"_", "?", "EvenQ"}], ",", 
             RowBox[{"-", "1"}], ",", "1"}], "]"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Scan", "[", 
         RowBox[{
           RowBox[{
             RowBox[{"If", "[", 
               RowBox[{
                 RowBox[{"EvenQ", "[", "#", "]"}], ",", 
                 RowBox[{"Return", "[", "#", "]"}]}], "]"}], "&"}], ",", 
           "v"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Do", "[", 
         RowBox[{
           RowBox[{"If", "[", 
             RowBox[{
               RowBox[{"EvenQ", "[", 
                 RowBox[{"v", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "]"}], ",", 
               RowBox[{"Return", "[", 
                 RowBox[{"v", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "]"}]}], "]"}], ",", 
           RowBox[{"{", 
             RowBox[{"k", ",", 
               RowBox[{"Length", "[", "v", "]"}]}], "}"}]}], "]"}]], 
      "Input"]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"b250f9fb-3e95-47cc-90ea-03d9471ad165"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Selecting Solutions of an Equation"
}], "Subsection",
 CellChangeTimes->{3.8210043677297783`*^9},
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"f1d64c1e-e6d0-4efe-bdbd-01dd16df59f6"],

Cell[TextData[{
 "Evaluate the following input to define ",
 StyleBox["sol", "Input"],
 " as a result from ",
 StyleBox[ButtonBox["Solve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Solve"],
  FontWeight->"Bold"],
 " for a polynomial equation with three negative solutions, two positive \
solutions, and two complex solutions."
}], "Text",
 CellChangeTimes->{{3.8216858423462224`*^9, 3.8216858477909946`*^9}, {
  3.8220537694264927`*^9, 3.8220537768841867`*^9}},
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"99b1acf6-d278-430c-8150-28139eb928ac"],

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"205", "+", 
      RowBox[{"1850", " ", "x"}], "+", 
      RowBox[{"2064", " ", 
       SuperscriptBox["x", "2"]}], "+", 
      RowBox[{"328", " ", 
       SuperscriptBox["x", "3"]}], "-", 
      RowBox[{"167", " ", 
       SuperscriptBox["x", "4"]}], "-", 
      RowBox[{"84", " ", 
       SuperscriptBox["x", "5"]}], "+", 
      RowBox[{"7.5", " ", 
       SuperscriptBox["x", "6"]}], "+", 
      SuperscriptBox["x", "7"]}], "\[Equal]", "0"}], ",", "x"}], 
   "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"9f2b47f4-8a54-45b1-bea5-55cd33732c58"],

Cell["\<\
Evaluate the following input to pick out all the negative solutions:\
\>", "CodeText",
 CellChangeTimes->{{3.82205413148178*^9, 3.822054132618372*^9}},
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"167ac253-0aa8-4e53-9000-9f93074d2013"],

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{"sol", ",", 
   RowBox[{
    RowBox[{"Negative", "[", 
     RowBox[{"x", "/.", "#"}], "]"}], "&"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"e4eb675d-64d2-47dc-b345-aa009ea56c30"],

Cell[TextData[{
 "Evaluate the following input to pick out the negative solutions using ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"],
  FontWeight->"Bold"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821685868353134*^9, 3.821685875697418*^9}, {
  3.822054134161063*^9, 3.822054135228703*^9}},
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"5157c807-eb38-4576-a8b9-2f6c0b3ed796"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"sol", ",", 
   RowBox[{"{", 
    RowBox[{"_", "\[Rule]", 
     RowBox[{"_", "?", "Negative"}]}], "}"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"6f68e9d6-ee25-480d-a7a4-8310e41acb82"],

Cell["\<\
Find an input that picks out all five real (non-complex) solutions.\
\>", "Text",
 CellChangeTimes->{3.822053766809826*^9},
 CellTags->{
  "Exercises", 
   "Selecting \
Solutions"},ExpressionUUID->"f6c965eb-d689-4185-8472-72e165b88c48"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"If you use ", 
        StyleBox[
         ButtonBox[
         "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
         FontWeight -> "Bold"], ", you could use the fact that ", 
        StyleBox["MatchQ[x/.#,_Real]& ", "Input"], "or ", 
        StyleBox["Element[x/.#,Reals]&", "Input"], " will return ", 
        StyleBox[
         ButtonBox[
         "True", BaseStyle -> "Link", ButtonData -> "paclet:ref/True"], 
         FontWeight -> "Bold"], 
        " if the argument is a real (non-complex) solution."}], "CodeText", 
      CellChangeTimes -> {{3.8216859087673845`*^9, 3.821685942928539*^9}}], 
     Cell[
      TextData[{"If you use ", 
        StyleBox[
         ButtonBox[
         "Cases", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cases"], 
         FontWeight -> "Bold"], ", the pattern ", 
        StyleBox["{_\[ThinSpace]\[Rule]\[ThinSpace]_Real}", "Input"], 
        " will match any solution in which the right side of the rule is a \
real number."}], "CodeText", 
      CellChangeTimes -> {{3.821685949002283*^9, 3.8216859550520926`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"sol", "=", 
         RowBox[{"Solve", "[", 
           RowBox[{
             RowBox[{
               RowBox[{"205", "+", 
                 RowBox[{"1850", " ", "x"}], "+", 
                 RowBox[{"2064", " ", 
                   SuperscriptBox["x", "2"]}], "+", 
                 RowBox[{"328", " ", 
                   SuperscriptBox["x", "3"]}], "-", 
                 RowBox[{"167", " ", 
                   SuperscriptBox["x", "4"]}], "-", 
                 RowBox[{"84", " ", 
                   SuperscriptBox["x", "5"]}], "+", 
                 RowBox[{"7.5", " ", 
                   SuperscriptBox["x", "6"]}], "+", 
                 SuperscriptBox["x", "7"]}], "\[Equal]", "0"}], ",", "x"}], 
           "]"}]}]], "Input", 
      CellTags -> {"Exercises", "Selecting Solutions"}], 
     Cell[
      BoxData[
       RowBox[{"Select", "[", 
         RowBox[{"sol", ",", 
           RowBox[{
             RowBox[{"Element", "[", 
               RowBox[{
                 RowBox[{"x", "/.", "#"}], ",", "Reals"}], "]"}], "&"}]}], 
         "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Cases", "[", 
         RowBox[{"sol", ",", 
           RowBox[{"{", 
             RowBox[{"_", "->", "_Real"}], "}"}]}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"DeleteCases", "[", 
         RowBox[{"sol", ",", 
           RowBox[{"{", 
             RowBox[{"_", "\[Rule]", "_Complex"}], "}"}]}], "]"}]], "Input"], 
     
     Cell[
      BoxData[
       RowBox[{"Extract", "[", 
         RowBox[{"sol", ",", 
           RowBox[{"Position", "[", 
             RowBox[{"sol", ",", 
               RowBox[{"{", 
                 RowBox[{"_", "->", "_Real"}], "}"}]}], "]"}]}], "]"}]], 
      "Input"]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"d6d71c1f-7752-4608-bc64-fec7c51e9411"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Working with Pure Functions"
}], "Subsection",
 CellChangeTimes->{3.8210043708299427`*^9},
 CellTags->{
  "Exercises", 
   "Working with Pure \
Functions"},ExpressionUUID->"3125c2b6-952a-48c4-9c7f-c9ab79c8d1d2"],

Cell[TextData[{
 "Here is a plot of the two surfaces ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Sin", "(", 
    RowBox[{"x", "-", 
     RowBox[{"Sin", "(", "y", ")"}]}], ")"}], TraditionalForm]], "Input",
  ExpressionUUID->"92142f17-8085-435f-bde1-9a1aaf0beac5"],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Sin", "(", 
     RowBox[{"y", "-", 
      RowBox[{"Cos", "(", "x", ")"}]}], ")"}], "Input"], TraditionalForm]],
  ExpressionUUID->"7e6f362d-2820-4e49-a21e-cfda558018bc"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8216861005315585`*^9, 3.8216861091436467`*^9}, 
   3.8216862181690073`*^9, {3.8220541619147167`*^9, 3.8220541622835503`*^9}},
 CellTags->{
  "Exercises", 
   "Working with Pure \
Functions"},ExpressionUUID->"958eb617-a2ca-4951-b41a-846c5a0c559b"],

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"x", "-", 
       RowBox[{"Sin", "[", "y", "]"}]}], "]"}], ",", 
     RowBox[{"Sin", "[", 
      RowBox[{"y", "-", 
       RowBox[{"Cos", "[", "x", "]"}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", 
     RowBox[{"3", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "0", ",", 
     RowBox[{"4", "\[Pi]"}]}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Green", ",", "Purple"}], "}"}]}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Working with Pure \
Functions"},ExpressionUUID->"674157f7-71dd-4932-b7c6-46acd35b9ccf"],

Cell[TextData[{
 "Using the options ",
 StyleBox[ButtonBox["Mesh",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Mesh"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["MeshFunctions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MeshFunctions"],
  FontWeight->"Bold"],
 ", and ",
 StyleBox[ButtonBox["MeshStyle",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MeshStyle"],
  FontWeight->"Bold"],
 ", modify the above graphic so that the intersection of the two surfaces is \
displayed with a thick red curve. Hint: the ",
 StyleBox[ButtonBox["MeshFunctions",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MeshFunctions"],
  FontWeight->"Bold"],
 " option can specify a function of several variables using pure functions \
where the first variable is specified with ",
 StyleBox["#1", "Input"],
 " and the second variable is specified with ",
 StyleBox["#2", "Input"],
 "."
}], "Text",
 CellChangeTimes->{
  3.8210027565113325`*^9, {3.821686131354925*^9, 3.8216861564793797`*^9}},
 CellTags->{
  "Exercises", 
   "Working with Pure \
Functions"},ExpressionUUID->"a42b7b9a-d260-4cde-b36c-18404b7c288a"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     BoxData[
      RowBox[{"Plot3D", "[", 
        RowBox[{
          RowBox[{"{", 
            RowBox[{
              RowBox[{"Sin", "[", 
                RowBox[{"x", "-", 
                  RowBox[{"Sin", "[", "y", "]"}]}], "]"}], ",", 
              RowBox[{"Sin", "[", 
                RowBox[{"y", "-", 
                  RowBox[{"Cos", "[", "x", "]"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", 
              RowBox[{"3", "\[Pi]"}]}], "}"}], ",", 
          RowBox[{"{", 
            RowBox[{"y", ",", "0", ",", 
              RowBox[{"4", "\[Pi]"}]}], "}"}], ",", 
          RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"Green", ",", "Purple"}], "}"}]}], ",", 
          RowBox[{"Mesh", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"{", "0", "}"}], "}"}]}], ",", 
          RowBox[{"MeshFunctions", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{
                  RowBox[{"Sin", "[", 
                    RowBox[{"#1", "-", 
                    RowBox[{"Sin", "[", "#2", "]"}]}], "]"}], "-", 
                  RowBox[{"(", 
                    RowBox[{"Sin", "[", 
                    RowBox[{"#2", "-", 
                    RowBox[{"Cos", "[", "#1", "]"}]}], "]"}], ")"}]}], "&"}], 
              "}"}]}], ",", 
          RowBox[{"MeshStyle", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"{", 
                RowBox[{"Thick", ",", "Red"}], "}"}], "}"}]}]}], "]"}]], 
     "Input", CellChangeTimes -> {{3.3866069476089163`*^9, 
      3.3866069496238317`*^9}}], WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"2bf6e540-28a6-4871-a0a5-2ce7c2a00f54"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Distance Function"
}], "Subsection",
 CellChangeTimes->{3.8210043725231323`*^9},
 CellTags->{
  "Exercises", 
   "Distance \
Function"},ExpressionUUID->"fe501e8c-3c59-4573-bf52-cd8bf3b0d279"],

Cell["\<\
Here are some points together with a graphic showing the points as endpoints \
of vectors in the plane:\
\>", "CodeText",
 CellChangeTimes->{{3.822054170328752*^9, 3.8220541709347277`*^9}},
 CellTags->{
  "Exercises", 
   "Distance \
Function"},ExpressionUUID->"5cef4eb4-37f8-47f1-b849-4dca12480f13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pts", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", 
       RowBox[{"-", "7"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "6"}], ",", 
       RowBox[{"-", "1"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", 
       RowBox[{"-", "3"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "0"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Distance \
Function"},ExpressionUUID->"9cc0dfe3-8361-43b5-83c2-1ebf2e61a888"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Arrow", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}], ",", "#"}], "}"}], "]"}], "&"}], 
     ",", "pts"}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Distance \
Function"},ExpressionUUID->"5c460460-b35a-4a31-bad1-e07c3c5c6933"],

Cell[TextData[{
 "Create a function, ",
 Cell[BoxData[
  StyleBox[
   RowBox[{"Distances", "[", "lis", "]"}], "Input"]],ExpressionUUID->
  "c2dd2fad-91c6-4c31-a0a7-3997a6a31829"],
 " that, given a list of coordinate pairs in the plane, computes the distance \
from each point to the origin. Create a procedural, functional, and \
rule-based implementation of this function."
}], "Text",
 CellTags->{
  "Exercises", 
   "Distance \
Function"},ExpressionUUID->"0c86265d-b1ca-462e-a7b5-2baa6a88e6d5"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell["Procedural", "Subsection"], 
        Cell[
         TextData[{"Here is a procedural approach using a ", 
           StyleBox[
            ButtonBox[
            "Do", BaseStyle -> "Link", ButtonData -> "paclet:ref/Do"], 
            FontWeight -> "Bold"], " loop."}], "CodeText", 
         CellChangeTimes -> {{3.8216862492295246`*^9, 3.82168625404364*^9}}], 
        
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"DistancesP", "[", "lis_List", "]"}], ":=", 
            RowBox[{"Module", "[", 
              RowBox[{
                RowBox[{"{", "disTbl", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                  RowBox[{"disTbl", "=", " ", 
                    RowBox[{"Table", "[", 
                    RowBox[{"Null", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", "lis", "]"}], "}"}]}], "]"}]}], 
                  ";", "\[IndentingNewLine]", 
                  RowBox[{"Do", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"disTbl", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "=", 
                    SqrtBox[
                    RowBox[{" ", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"lis", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "1"}], "]"}], "]"}], "2"], "+", " ", 
                    SuperscriptBox[
                    RowBox[{"lis", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", "2"}], "]"}], "]"}], "2"]}]}]]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "lis", "]"}]}], "}"}]}], "]"}], 
                  ";", "\[IndentingNewLine]", "disTbl"}]}], "]"}]}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"pts", "=", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "7"}]}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"6", ",", "5"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "4"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "6"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "3"}]}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"2", ",", "7"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"4", ",", "0"}], "}"}]}], "}"}]}], ";"}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{"DistancesP", "[", "pts", "]"}]], "Input"], 
        Cell[
         TextData[{"This can be made a bit more compact by using ", 
           StyleBox[
            ButtonBox[
            "Table", BaseStyle -> "Link", ButtonData -> "paclet:ref/Table"], 
            FontWeight -> "Bold"], " and ", 
           StyleBox[
            ButtonBox[
            "Total", BaseStyle -> "Link", ButtonData -> "paclet:ref/Total"], 
            FontWeight -> "Bold"], "."}], "CodeText", 
         CellChangeTimes -> {{3.8216862663143167`*^9, 3.821686271832549*^9}}], 
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"DistancesP2", "[", "lis_List", "]"}], ":=", 
            RowBox[{"Table", "[", 
              RowBox[{
                SqrtBox[
                 RowBox[{"Total", "[", 
                   SuperscriptBox[
                    RowBox[{"lis", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "2"], "]"}]], ",", 
                RowBox[{"{", 
                  RowBox[{"i", ",", "1", ",", 
                    RowBox[{"Length", "[", "lis", "]"}]}], "}"}]}], "]"}]}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{"DistancesP2", "[", "pts", "]"}]], "Input"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell["Functional", "Subsection"], 
        Cell[
        "The functional approach simply recognizes that all we are computing \
is the norm of these vectors.", "CodeText"], 
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"DistancesF", "[", "lis_", "]"}], ":=", " ", 
            RowBox[{"Map", "[", 
              RowBox[{"Norm", ",", "lis"}], "]"}]}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"DistancesF", "[", "pts", "]"}]], "Input"], 
        Cell[
         TextData[{"You can also use the ", 
           StyleBox[
            ButtonBox[
            "EuclideanDistance", BaseStyle -> "Link", ButtonData -> 
             "paclet:ref/EuclideanDistance"], FontWeight -> "Bold"], 
           " function to accomplish the same thing."}], "CodeText", 
         CellChangeTimes -> {3.8216863109502277`*^9}], 
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"DistancesF2", "[", "lis_List", "]"}], ":=", 
            RowBox[{"Map", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"EuclideanDistance", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", "#"}], "]"}], "&"}], 
                ",", "lis"}], "]"}]}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"DistancesF2", "[", "pts", "]"}]], "Input"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell["Rule-Based", "Subsection"], 
        Cell[
        "Rule-based approach.", "CodeText", 
         CellChangeTimes -> {3.8216863783436613`*^9}], 
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"DistancesR", "[", "lis_", "]"}], ":=", " ", 
            RowBox[{"lis", "/.", 
              RowBox[{
                RowBox[{"v_", "?", "VectorQ"}], "\[RuleDelayed]", " ", 
                RowBox[{"Norm", "[", "v", "]"}]}]}]}]], "Input", 
         CellChangeTimes -> {{3.383920459179882*^9, 3.383920553468459*^9}}], 
        Cell[
         BoxData[
          RowBox[{"DistancesR", "[", "pts", "]"}]], "Input", 
         CellChangeTimes -> {{3.383920529356709*^9, 3.383920538838334*^9}}]}, 
       Open]]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"997cb156-7890-4eb7-bee7-e562978579c9"],

Cell["\<\
Create a graphic that displays each point as a vector in the plane and \
overlays the length of the vector centered on the arrow representing that \
vector.\
\>", "Text",
 CellTags->{
  "Exercises", 
   "Distance \
Function"},ExpressionUUID->"acdc5970-14a3-4bdd-a2bc-5825b83d5b51"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"pts", "=", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2", ",", 
                   RowBox[{"-", "7"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"6", ",", "5"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "1"}], ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "6"}], ",", 
                   RowBox[{"-", "1"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"2", ",", 
                   RowBox[{"-", "3"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"2", ",", "7"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"4", ",", "0"}], "}"}]}], "}"}]}], ";"}]], "Input"], 
     
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"DistancesF", "[", "lis_", "]"}], ":=", " ", 
         RowBox[{"Map", "[", 
           RowBox[{"Norm", ",", "lis"}], "]"}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Graphics", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
             RowBox[{"Map", "[", 
               RowBox[{
                 RowBox[{
                   RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", "#"}], "}"}], "]"}], 
                   "&"}], ",", "pts"}], "]"}], ",", 
             RowBox[{"MapThread", "[", 
               RowBox[{
                 RowBox[{
                   RowBox[{"Text", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"#2", "/", "2"}]}], "]"}], "&"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"DistancesF", "[", "pts", "]"}], ",", "pts"}], 
                   "}"}]}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]], 
      "Input"]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"10b6ee71-afd2-4e4b-95ca-17a6615ecad1"],

Cell[TextData[{
 "Compute the center of the set of points and then draw a graphic consisting \
of lines from each point to this geographic center. Create a ",
 StyleBox[ButtonBox["Manipulate",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Manipulate"],
  FontWeight->"Bold"],
 " with locators for each of the points."
}], "Text",
 CellChangeTimes->{3.821686420096486*^9},
 CellTags->{
  "Exercises", 
   "Distance \
Function"},ExpressionUUID->"0b24a10e-c37c-40c8-aae2-68ed1c209d73"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"pts", "=", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2", ",", 
                   RowBox[{"-", "7"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"6", ",", "5"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "1"}], ",", "4"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"-", "6"}], ",", 
                   RowBox[{"-", "1"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"2", ",", 
                   RowBox[{"-", "3"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"2", ",", "7"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"4", ",", "0"}], "}"}]}], "}"}]}], ";"}]], "Input", 
      CellTags -> {"Exercises", "Distance Function"}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Mean", "[", "pts", "]"}]], "Input", 
         CellChangeTimes -> {{3.400508149773*^9, 3.4005081520480003`*^9}}], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              FractionBox["9", "7"], ",", 
              FractionBox["5", "7"]}], "}"}]], "Output"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Graphics", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"Blue", ",", 
                RowBox[{"Map", "[", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Mean", "[", "pts", "]"}], ",", "#"}], "}"}], 
                    "]"}], "&"}], ",", "pts"}], "]"}], ",", 
                "\[IndentingNewLine]", "Red", ",", 
                RowBox[{"PointSize", "[", ".015", "]"}], ",", 
                RowBox[{"Point", "[", "pts", "]"}]}], "}"}], "]"}]], "Input", 
         CellChangeTimes -> {{3.400508115209*^9, 3.400508201082*^9}}], 
        Cell[
         BoxData[
          GraphicsBox[{{
             RGBColor[0, 0, 1], 
             LineBox[
              NCache[{{
                 Rational[9, 7], 
                 Rational[5, 7]}, {2, -7}}, {{1.2857142857142858`, 
                0.7142857142857143}, {2, -7}}]], 
             LineBox[
              NCache[{{
                 Rational[9, 7], 
                 Rational[5, 7]}, {6, 5}}, {{1.2857142857142858`, 
                0.7142857142857143}, {6, 5}}]], 
             LineBox[
              NCache[{{
                 Rational[9, 7], 
                 Rational[5, 7]}, {-1, 4}}, {{1.2857142857142858`, 
                0.7142857142857143}, {-1, 4}}]], 
             LineBox[
              NCache[{{
                 Rational[9, 7], 
                 Rational[5, 7]}, {-6, -1}}, {{1.2857142857142858`, 
                0.7142857142857143}, {-6, -1}}]], 
             LineBox[
              NCache[{{
                 Rational[9, 7], 
                 Rational[5, 7]}, {2, -3}}, {{1.2857142857142858`, 
                0.7142857142857143}, {2, -3}}]], 
             LineBox[
              NCache[{{
                 Rational[9, 7], 
                 Rational[5, 7]}, {2, 7}}, {{1.2857142857142858`, 
                0.7142857142857143}, {2, 7}}]], 
             LineBox[
              NCache[{{
                 Rational[9, 7], 
                 Rational[5, 7]}, {4, 0}}, {{1.2857142857142858`, 
                0.7142857142857143}, {4, 0}}]]}, {
             RGBColor[1, 0, 0], 
             PointSize[0.015], 
             PointBox[{{2, -7}, {6, 5}, {-1, 4}, {-6, -1}, {2, -3}, {2, 7}, {
              4, 0}}]}}]], "Output"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
            RowBox[{
              RowBox[{"Graphics", "[", 
                RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{"Purple", ",", 
                    RowBox[{"PointSize", "[", ".025", "]"}], ",", 
                    RowBox[{"Point", "[", 
                    RowBox[{"Mean", "[", "pts", "]"}], "]"}], ",", 
                    "\[IndentingNewLine]", "Blue", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Line", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Mean", "[", "pts", "]"}], ",", "#"}], "}"}], 
                    "]"}], "&"}], ",", "pts"}], "]"}], ",", 
                    "\[IndentingNewLine]", "Red", ",", 
                    RowBox[{"PointSize", "[", ".025", "]"}], ",", 
                    RowBox[{"Point", "[", "pts", "]"}]}], "}"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", "7"}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"pts", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "7"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "5"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "4"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "6"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "3"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "7"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
                  "Locator"}], "}"}]}], "]"}]], "Input"], 
        Cell[
         BoxData[
          TagBox[
           StyleBox[
            
            DynamicModuleBox[{$CellContext`pts$$ = {{2, -7}, {6, 5}, {-1, 
               4}, {-6, -1}, {2, -3}, {2, 7}, {4, 0}}, Typeset`show$$ = True, 
              Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
              Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
              "\"untitled\"", Typeset`specs$$ = {{{
                  Hold[$CellContext`pts$$], {{2, -7}, {6, 5}, {-1, 
                  4}, {-6, -1}, {2, -3}, {2, 7}, {4, 0}}}, Automatic}}, 
              Typeset`size$$ = {540., {265., 275.}}, Typeset`update$$ = 0, 
              Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
             DynamicBox[
              Manipulate`ManipulateBoxes[
              1, StandardForm, 
               "Variables" :> {$CellContext`pts$$ = {{2, -7}, {6, 5}, {-1, 
                  4}, {-6, -1}, {2, -3}, {2, 7}, {4, 0}}}, 
               "ControllerVariables" :> {}, 
               "OtherVariables" :> {
                Typeset`show$$, Typeset`bookmarkList$$, 
                 Typeset`bookmarkMode$$, Typeset`animator$$, 
                 Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                 Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                 Typeset`skipInitDone$$}, "Body" :> Graphics[{Purple, 
                  PointSize[0.025], 
                  Point[
                   Mean[$CellContext`pts$$]], Blue, 
                  Map[Line[{
                    Mean[$CellContext`pts$$], #}]& , $CellContext`pts$$], Red, 
                  PointSize[0.025], 
                  Point[$CellContext`pts$$]}, PlotRange -> 7], 
               "Specifications" :> {{{$CellContext`pts$$, {{2, -7}, {6, 
                   5}, {-1, 4}, {-6, -1}, {2, -3}, {2, 7}, {4, 0}}}, 
                  Automatic, ControlType -> Locator}}, "Options" :> {}, 
               "DefaultOptions" :> {}], 
              ImageSizeCache -> {597., {302., 308.}}, SingleEvaluation -> 
              True], Deinitialization :> None, DynamicModuleValues :> {}, 
             SynchronousInitialization -> True, 
             UnsavedVariables :> {Typeset`initDone$$}, 
             UntrackedVariables :> {Typeset`size$$}], "Manipulate", Deployed -> 
            True, StripOnInput -> False], 
           Manipulate`InterpretManipulate[1]]], "Output"]}, Open]]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"6a769de8-efcc-4e52-8e93-bdc460b87b32"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Selecting Columns from a Matrix"
}], "Subsection",
 CellChangeTimes->{3.8210043742830095`*^9},
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"a8298410-ac83-4bea-80c2-b53be21467ed"],

Cell[TextData[{
 "Evaluate the following two inputs to define ",
 Cell[BoxData["mat"],ExpressionUUID->"c9c0afd2-d9ac-4744-8020-596196fd2ad1"],
 " to be a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"25000", "\[Cross]", "3"}], TraditionalForm]],ExpressionUUID->
  "7e269ede-9503-400a-8714-5909063a83be"],
 " matrix of random numbers and to define ",
 StyleBox["cols12", "Input"],
 " as the matrix consisting of the first two columns of ",
 StyleBox["mat:", "MR"]
}], "CodeText",
 CellChangeTimes->{{3.822054176189455*^9, 3.822054176684532*^9}},
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"60728bbe-bc67-46e9-a5b6-c51e5a18e371"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Random", "[", "]"}], ",", 
     RowBox[{"{", "25000", "}"}], ",", 
     RowBox[{"{", "3", "}"}]}], "]"}]}], ";"}]], "Input",
 CellTags->{"Exercises", "Selecting Columns"},
 CellLabel->
  "In[173]:=",ExpressionUUID->"1592c10d-88a1-473b-96e7-70911128ffc6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cols12", "=", 
   RowBox[{"Take", "[", 
    RowBox[{"mat", ",", "All", ",", "2"}], "]"}]}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"75fdb892-d060-4f25-9425-e3babaef0964"],

Cell[TextData[{
 "Evaluate the following input to demonstrate the use of a procedural program \
for picking out the first two columns from the matrix ",
 StyleBox["mat", "Input"],
 ". Show that the result is correct by observing that ",
 StyleBox["result\[ThinSpace]==\[ThinSpace]cols12", "Input"],
 " evaluates to ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"],
  FontWeight->"Bold"],
 StyleBox[":",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{{3.821686490787552*^9, 3.8216864934265313`*^9}, {
  3.822054180193171*^9, 3.822054180588916*^9}},
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"409bd70f-cfca-4c7b-abba-78e7bbb40544"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "mat", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"result", "[", 
     RowBox[{"[", "k", "]"}], "]"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"mat", "[", 
       RowBox[{"[", 
        RowBox[{"k", ",", "1"}], "]"}], "]"}], ",", 
      RowBox[{"mat", "[", 
       RowBox[{"[", 
        RowBox[{"k", ",", "2"}], "]"}], "]"}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", 
     RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}]}], "Input",
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"bea88754-e0c2-4e47-a6e4-a7d6f62b412b"],

Cell[BoxData[
 RowBox[{"result", "\[Equal]", "cols12"}]], "Input",
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"bb92feda-61a9-4609-8b50-55a3b243654d"],

Cell[TextData[{
 "Evaluate the following input to demonstrate yet another way of picking out \
the first two columns from the matrix ",
 StyleBox["mat", "Input"],
 ". Show that the result is correct by observing that the result is equal to ",
 StyleBox["cols12:", "Input"]
}], "CodeText",
 CellChangeTimes->{{3.822054255838903*^9, 3.822054256208214*^9}},
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"af78f7da-9972-450d-8163-f5dfddeb4c99"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Apply", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", "mat", ",", 
    RowBox[{"{", "1", "}"}]}], "]"}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"92ce9980-632a-4a73-a288-64e72d5695c3"],

Cell[TextData[{
 "Show four ways of picking out the last two columns from the matrix ",
 StyleBox["mat", "Input"],
 ". Demonstrate that your programs all give the same result."
}], "Text",
 CellTags->{
  "Exercises", 
   "Selecting \
Columns"},ExpressionUUID->"2d09590b-56c5-4371-97ac-57e6b5198e77"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{
        "To develop your programs you might try defining a smaller matrix ", 
         StyleBox["m", "MR"], 
         " so that you can easily display the results and see what your \
programs have done, and then run your programs for the larger matrix after \
you have determined that your programs are working."}], "Text"], 
      Cell[
       TextData[{"The three ways of picking out the last two columns of ", 
         StyleBox["mat", "MR"], 
         " can of course be minor variants of the three ways shown for \
picking out the first two columns of ", 
         StyleBox["mat", "Input"], "."}], "Text"], 
      Cell[
       TextData[{"Here is an input that uses the ", 
         StyleBox[
          ButtonBox[
          "Part", BaseStyle -> "Link", ButtonData -> "paclet:ref/Part"], 
          FontWeight -> "Bold"], 
         " function to pick out the last two columns of ", 
         StyleBox["mat", "Input"], 
         ". The semicolon after this input is used to suppress the display. \
Without the semicolon you can expect a delay of several seconds while the \
result is formatted, and a display about 20 pages long."}], "Text", 
       CellChangeTimes -> {3.821686568375085*^9}], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"cols23", "=", 
            RowBox[{"mat", "[", 
              RowBox[{"[", 
                RowBox[{"All", ",", 
                  RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}]}], "]"}], "]"}]}], ";"}]], 
       "Input"], 
      Cell[
       TextData[{
        "You should be able to construct two other ways of picking out the \
last two columns of ", 
         StyleBox["mat", "Input"], 
         " by studying the two programs that pick out the first two columns \
of ", 
         StyleBox["mat", "Input"], 
         " and replacing 1 by 2 and 2 by 3 as necessary in those programs."}],
        "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"a5a56dfd-76c8-4146-a9be-b8874c6ea614"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{
       "Here are four programs that pick out the last two columns in a matrix \
", 
        Cell[
         BoxData[
          StyleBox["mat", "Input"]], "Input"], " that has three columns."}], 
      "CodeText"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"mat", "[", 
           RowBox[{"[", 
             RowBox[{"All", ",", 
               RowBox[{"{", 
                 RowBox[{"2", ",", "3"}], "}"}]}], "]"}], "]"}], ";"}]], 
      "Input"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[{
           RowBox[{
             RowBox[{"result", "=", 
               RowBox[{"Table", "[", 
                 RowBox[{"Null", ",", 
                   RowBox[{"{", 
                    RowBox[{"Length", "[", "mat", "]"}], "}"}]}], "]"}]}], 
             ";"}], "\n", 
           RowBox[{
             RowBox[{"Do", "[", 
               RowBox[{
                 RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "=", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"mat", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"mat", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "3"}], "]"}], "]"}]}], "}"}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                   RowBox[{"k", ",", "1", ",", 
                    RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}], 
             "//", "AbsoluteTiming"}]}], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"0.256452`5.860551083856513", ",", "Null"}], "}"}]], 
         "Output"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{"Apply", "[", 
                RowBox[{
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#2", ",", "#3"}], "}"}], "&"}], ",", "mat", ",", 
                  
                  RowBox[{"{", "1", "}"}]}], "]"}], ";"}], "//", 
            "AbsoluteTiming"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"0.017043`4.683091037492895", ",", "Null"}], "}"}]], 
         "Output"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{"mat", "/.", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"___", ",", "x_Real", ",", "y_Real"}], "}"}], 
                  "\[RuleDelayed]", 
                  RowBox[{"{", 
                    RowBox[{"x", ",", "y"}], "}"}]}]}], ";"}], "//", 
            "AbsoluteTiming"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"0.01528`4.635668347735637", ",", "Null"}], "}"}]], 
         "Output"]}, Open]], 
     Cell[
      TextData[{
       "Here is an input that will pick out the last two columns in any \
matrix ", 
        Cell[
         BoxData["mat"]], 
        " that has at least two columns. Negative part specifications count \
from the end of a list or other expression."}], "CodeText"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{"mat", "[", 
                RowBox[{"[", 
                  RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "2"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "]"}], "]"}], ";"}], "//", 
            "AbsoluteTiming"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"0.000521`3.168382716795493", ",", "Null"}], "}"}]], 
         "Output"]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"0cfa18be-1839-443f-baad-f7b6cbf91457"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Matrix Manipulation"
}], "Subsection",
 CellChangeTimes->{3.8210043761328516`*^9},
 CellTags->{
  "Exercises", 
   "Matrix Manipulation"},ExpressionUUID->"ed63be7b-1fd2-432e-930f-\
d4cd6cb9c426"],

Cell[TextData[{
 "Given an array with many rows and three columns, create a new matrix with \
the same number of rows and four new columns that are linear combinations of \
the original columns. In this example, each row has the form ",
 StyleBox["{", "Input"],
 StyleBox["a", "Input",
  FontSlant->"Italic"],
 StyleBox[", ", "Input"],
 StyleBox["b", "Input",
  FontSlant->"Italic"],
 StyleBox[", ", "Input"],
 StyleBox["c", "Input",
  FontSlant->"Italic"],
 StyleBox["}", "Input"],
 " and the new matrix will have rows of the form ",
 StyleBox["{", "Input"],
 StyleBox["a", "Input",
  FontSlant->"Italic"],
 StyleBox[", ", "Input"],
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["a", "2"], "+", "b"}], TraditionalForm]], "Input",
  ExpressionUUID->"6b640d1b-d41a-4f04-a163-b48758751fc4"], "Input"],
 StyleBox[", ", "Input"],
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["a", "3"], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["b", "2"]}], "+", "c"}], TraditionalForm]], "Input",
  ExpressionUUID->"b0da22a4-bd2b-4050-9f33-a54dda62f09d"], "Input"],
 StyleBox[", ", "Input"],
 StyleBox[Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["b", "3"], "-", 
    RowBox[{"3", " ", 
     SuperscriptBox["c", "2"]}]}], TraditionalForm]], "Input",ExpressionUUID->
  "5efc139e-e2ec-4709-9b9e-3f59da63f832"], "Input"],
 StyleBox["}", "Input"],
 "."
}], "Text",
 CellTags->
  "Matrix Manipulation",ExpressionUUID->"758af97e-e1da-4d64-8e74-\
f7299d83bc5c"],

Cell[TextData[{
 "Here is a large ",
 Cell[BoxData[
  FormBox[
   RowBox[{"10000", "\[Cross]", "3"}], TraditionalForm]],ExpressionUUID->
  "ad17a9ab-2bd8-47cf-9969-5db814857f5b"],
 " matrix of random numbers between 0 and 1 to work with:"
}], "CodeText",
 CellChangeTimes->{{3.822054264749486*^9, 3.8220542651764803`*^9}},
 CellTags->
  "Matrix Manipulation",ExpressionUUID->"4150f4ad-b3e9-4481-ac99-\
62ae9a09dc82"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{"1", ",", 
     RowBox[{"{", 
      RowBox[{"10000", ",", "3"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellTags->
  "Matrix Manipulation",ExpressionUUID->"9e217a58-afef-4f13-b929-\
a1783803b658"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell["Using substitution rules", "Subsection"], 
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"mat", "=", 
              RowBox[{"RandomReal", "[", 
                RowBox[{"1", ",", 
                  RowBox[{"{", 
                    RowBox[{"10000", ",", "3"}], "}"}]}], "]"}]}], ";"}]], 
         "Input"], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"AbsoluteTiming", "[", 
               RowBox[{
                 RowBox[{"(", 
                   RowBox[{"newmatSR", "=", 
                    RowBox[{"(", 
                    RowBox[{"mat", "/.", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"a_", ",", "b_", ",", "c_"}], "}"}], 
                    "\[RuleDelayed]", " ", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", " ", "b"}], ",", 
                    RowBox[{
                    SuperscriptBox["a", "3"], "+", " ", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["b", "2"]}], "+", "c"}], ",", 
                    RowBox[{
                    SuperscriptBox["b", "3"], "-", " ", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["c", "2"]}]}]}], "}"}]}]}], ")"}]}], ")"}],
                  ";"}], "]"}]], "Input"], 
           Cell[
            BoxData[
             RowBox[{"{", 
               RowBox[{"0.075172`5.32760109858321", ",", "Null"}], "}"}]], 
            "Output"]}, Open]]}, Open]], 
     Cell[
      CellGroupData[{
        Cell["Using Table", "Subsection"], 
        Cell[
         TextData[{"First we create a rule that will map the 3 columns of ", 
           StyleBox["mat", "Input"], 
           " to the four columns matrix in the statement of the problem."}], 
         "CodeText"], 
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"f", "[", 
              RowBox[{"{", 
                RowBox[{"a_", ",", "b_", ",", "c_"}], "}"}], "]"}], ":=", 
            RowBox[{"{", 
              RowBox[{"a", ",", 
                RowBox[{
                  SuperscriptBox["a", "2"], "+", "b"}], ",", 
                RowBox[{
                  SuperscriptBox["a", "3"], "+", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["b", "2"]}], "+", "c"}], ",", 
                RowBox[{
                  SuperscriptBox["b", "3"], "-", 
                  RowBox[{"3", " ", 
                    SuperscriptBox["c", "2"]}]}]}], "}"}]}]], "Input", 
         CellChangeTimes -> {{3.433163461655078*^9, 3.433163494637382*^9}}], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"AbsoluteTiming", "[", 
               RowBox[{
                 RowBox[{"newmatT", "=", " ", 
                   RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"f", "[", 
                    RowBox[{"mat", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", 
                    RowBox[{"Length", "[", "mat", "]"}]}], "}"}]}], "]"}]}], 
                 ";"}], "]"}]], "Input"], 
           Cell[
            BoxData[
             RowBox[{"{", 
               RowBox[{"0.096654`5.436764825393713", ",", "Null"}], "}"}]], 
            "Output"]}, Open]]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
        "Using Map", "Subsection", 
         CellChangeTimes -> {{3.433163453414948*^9, 3.433163456118333*^9}}], 
        Cell[
         TextData[{
           StyleBox[
            ButtonBox[
            "Map", BaseStyle -> "Link", ButtonData -> "paclet:ref/Map"], 
            FontWeight -> "Bold"], " is about 20% faster than the ", 
           StyleBox[
            ButtonBox[
            "Table", BaseStyle -> "Link", ButtonData -> "paclet:ref/Table"], 
            FontWeight -> "Bold"], " solution."}], "CodeText", 
         CellChangeTimes -> {{3.821686764179765*^9, 3.8216867736646433`*^9}}], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"AbsoluteTiming", "[", 
               RowBox[{
                 RowBox[{"newmatM", "=", 
                   RowBox[{"Map", "[", 
                    RowBox[{"f", ",", "mat"}], "]"}]}], ";"}], "]"}]], 
            "Input"], 
           Cell[
            BoxData[
             RowBox[{"{", 
               RowBox[{"0.081321`5.361747703990889", ",", "Null"}], "}"}]], 
            "Output"]}, Open]], 
        Cell["A quick check that our results are consistent.", "CodeText"], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"newmatT", "\[Equal]", "newmatM"}]], "Input"], 
           Cell[
            BoxData["True"], "Output"]}, Open]], 
        Cell[
        "The solution that uses the least memory and runs fastest is to \
dismantle the matrix and reassemble it. In the next implementation, we will \
operate on entire columns of data directly. ", "Text"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
        "Using Part and Reassembling", "Subsection", 
         CellChangeTimes -> {{3.4331634136341057`*^9, 3.433163429602463*^9}}], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"AbsoluteTiming", "[", 
               RowBox[{"With", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"a", "=", 
                    RowBox[{"mat", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ",", 
                    RowBox[{"b", "=", 
                    RowBox[{"mat", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ",", 
                    RowBox[{"c", "=", 
                    RowBox[{"mat", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "3"}], "]"}], "]"}]}]}], "}"}], ",", 
                   RowBox[{
                    RowBox[{"newmat2", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "+", " ", "b"}], ",", 
                    RowBox[{
                    SuperscriptBox["a", "3"], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["b", "2"]}], "+", "c"}], ",", 
                    RowBox[{
                    SuperscriptBox["b", "3"], "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["c", "2"]}]}]}], "}"}], "]"}]}], ";"}]}], 
                 "]"}], "]"}]], "Input"], 
           Cell[
            BoxData[
             RowBox[{"{", 
               RowBox[{"0.002265`3.806613199844821", ",", "Null"}], "}"}]], 
            "Output"]}, Open]], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"newmatM", "\[Equal]", "newmat2"}]], "Input"], 
           Cell[
            BoxData["True"], "Output"]}, Open]], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"newmatM", "[", 
               RowBox[{"[", "1", "]"}], "]"}]], "Input"], 
           Cell[
            BoxData[
             RowBox[{"{", 
               
               RowBox[{
                "0.14342347907033925`", ",", "0.42224356233483146`", ",", 
                 "1.1077665752531884`", ",", 
                 RowBox[{"-", "1.7703918255964937`"}]}], "}"}]], "Output"]}, 
          Open]], 
        Cell[
         CellGroupData[{
           Cell[
            BoxData[
             RowBox[{"newmat2", "[", 
               RowBox[{"[", "1", "]"}], "]"}]], "Input"], 
           Cell[
            BoxData[
             RowBox[{"{", 
               
               RowBox[{
                "0.14342347907033925`", ",", "0.42224356233483146`", ",", 
                 "1.1077665752531884`", ",", 
                 RowBox[{"-", "1.7703918255964937`"}]}], "}"}]], "Output"]}, 
          Open]]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"23395110-f57e-467a-997c-c8cdac85722b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Operating on Elements in a List"
}], "Subsection",
 CellChangeTimes->{3.821004378600951*^9},
 CellTags->{
  "Exercises", 
   "Operating on \
Elements"},ExpressionUUID->"8553669d-b0a3-44e9-bb23-bc36eefced95"],

Cell[TextData[{
 "Evaluate the following input to define ",
 StyleBox["data", "MR"],
 " to be a list of pairs of numbers:"
}], "CodeText",
 CellChangeTimes->{{3.822054278126493*^9, 3.822054278575613*^9}},
 CellTags->{
  "Exercises", 
   "Operating on \
Elements"},ExpressionUUID->"d089fa6a-0bb8-4134-991a-647e48b6443c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1.04", ",", "0.42"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2.41", ",", "2.66"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.52", ",", "7.15"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9.20", ",", "6.01"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.79", ",", "1.40"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.33", ",", "4.95"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.63", ",", "5.30"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.66", ",", "4.99"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4.65", ",", "6.58"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3.45", ",", "2.76"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.03", ",", "4.61"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5.48", ",", "0.49"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellTags->{"Exercises", "Operating on Elements"},
 CellLabel->
  "In[191]:=",ExpressionUUID->"2224577e-6477-4cfb-a312-4834d52ebdb9"],

Cell[TextData[{
 "Show a way to construct a list that gives the square of the difference \
between the numbers in each pair in the value of ",
 StyleBox["data", "MR"],
 ". "
}], "Text",
 CellChangeTimes->{3.8220542946209927`*^9},
 CellTags->{
  "Exercises", 
   "Operating on \
Elements"},ExpressionUUID->"ea3cb7ab-c42d-4c21-b76b-729ae37069d8"],

Cell["The result will be the list of numbers:", "CodeText",
 CellChangeTimes->{3.822054298036808*^9},
 CellTags->{
  "Exercises", 
   "Operating on \
Elements"},ExpressionUUID->"e961c4d2-78ef-4190-80f8-68af5568214f"],

Cell[BoxData[
 StyleBox[
  RowBox[{"{", 
   RowBox[{
   "0.3844", ",", "0.0625", ",", "0.3969", ",", "10.1761", ",", "19.2721", 
    ",", "13.1044", ",", "11.0889", ",", "13.4689", ",", "3.7249", ",", 
    "0.4761", ",", "2.0164", ",", "24.9001"}], "}"}], "Text"]], "Output",
 CellTags->{
  "Exercises", 
   "Operating on \
Elements"},ExpressionUUID->"791cb4f3-d384-46fa-b707-e325a66a65fe"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"One straightforward solution is to use ", 
         StyleBox[
          ButtonBox[
          "Table", BaseStyle -> "Link", ButtonData -> "paclet:ref/Table"], 
          FontWeight -> "Bold"], " to directly construct the result."}], 
       "CodeText", CellChangeTimes -> {3.821686936880993*^9}], 
      Cell[
       BoxData[
        RowBox[{"Table", "[", 
          RowBox[{
            RowBox[{
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "1"}], "]"}], "]"}], "-", 
                  RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ")"}], "^", 
              "2"}], ",", 
            RowBox[{"{", 
              RowBox[{"k", ",", 
                RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}]], 
       "Input"], 
      Cell["See if you can find another solution.", "Text"], 
      Cell[
       TextData[{"One solution is to use ", 
         StyleBox[
          ButtonBox[
          "Map", BaseStyle -> "Link", ButtonData -> "paclet:ref/Map"], 
          FontWeight -> "Bold"], " to map the function ", 
         StyleBox["(#[[1]]-#[[2]])^2&", "Input"], 
         " on to each pair in the list."}], "Text", 
       CellChangeTimes -> {3.8216869430555077`*^9}], 
      Cell[
       TextData[{"Another solution is to use ", 
         StyleBox[
          ButtonBox[
          "Apply", BaseStyle -> "Link", ButtonData -> "paclet:ref/Apply"], 
          FontWeight -> "Bold"], " to apply the function ", 
         StyleBox["(#1-#2)^2&", "Input"], 
         " to each pair in the list. Note that this will require a level \
specification in ", 
         StyleBox[
          ButtonBox[
          "Apply", BaseStyle -> "Link", ButtonData -> "paclet:ref/Apply"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {{3.8216869596042757`*^9, 3.8216869726264257`*^9}}], 
      Cell[
       TextData[{"You could also use the rule ", 
         StyleBox["{p_,q_}\[Rule](p-q)^2", "Input"], 
         " to replace each pair in the list by the square of the difference \
between the elements in that pair."}], "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"5a53829d-2335-4f7f-a7d6-20bc6a17eb97"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell["Here are four possible solutions.", "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"Table", "[", 
         RowBox[{
           RowBox[{
             RowBox[{"(", 
               RowBox[{
                 RowBox[{"data", "[", 
                   RowBox[{"[", 
                    RowBox[{"k", ",", "1"}], "]"}], "]"}], "-", 
                 RowBox[{"data", "[", 
                   RowBox[{"[", 
                    RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ")"}], "^", 
             "2"}], ",", 
           RowBox[{"{", 
             RowBox[{"k", ",", 
               RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}]], 
      "Input"], 
     Cell[
      BoxData[
       RowBox[{"Map", "[", 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "-", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "^", "2"}], 
             "&"}], ",", "data"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Apply", "[", 
         RowBox[{
           RowBox[{
             RowBox[{
               RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}], "^", "2"}], "&"}], ",", 
           "data", ",", "1"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"data", "/.", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
           RowBox[{
             RowBox[{"(", 
               RowBox[{"p", "-", "q"}], ")"}], "^", "2"}]}]}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"2c8d6bbd-71d8-4f66-a4f3-b3eb8c044d69"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Using Options"
}], "Subsection",
 CellChangeTimes->{3.8210043801397095`*^9},
 CellTags->{
  "Exercises", 
   "Using Options"},ExpressionUUID->"94629abf-332e-4c9b-9ef7-2d3889897f39"],

Cell[TextData[{
 "A hypocycloid is the curve described by a point on the rim of a circle of \
radius ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]], "Input",ExpressionUUID->
  "e657e56c-dba1-4193-a136-d5d220740307"],
 " that rolls without slipping within a fixed circle of radius ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]], "Input",ExpressionUUID->
  "2b11f6d7-a96e-4af0-a539-cb25f40b16db"],
 ". It can be defined parametrically as:"
}], "Text",
 CellTags->{
  "Exercises", 
   "Using Options"},ExpressionUUID->"70e86e89-163d-423c-a81c-9ca180d11d9a"],

Cell[BoxData[
 FormBox[
  RowBox[{"\[NoBreak]", 
   RowBox[{GridBox[{
      {
       StyleBox[
        RowBox[{
         RowBox[{"x", "(", "t", ")"}], "=", 
         RowBox[{
          RowBox[{"b", " ", 
           RowBox[{"cos", "(", 
            FractionBox[
             RowBox[{"t", " ", 
              RowBox[{"(", 
               RowBox[{"a", "-", "b"}], ")"}]}], "b"], ")"}]}], "+", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"a", "-", "b"}], ")"}], " ", 
           RowBox[{"cos", "(", "t", ")"}]}]}]}], "Input"]},
      {
       StyleBox[
        RowBox[{
         RowBox[{"y", "(", "t", ")"}], "=", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"a", "-", "b"}], ")"}], " ", 
           RowBox[{"sin", "(", "t", ")"}]}], "-", 
          RowBox[{"b", " ", 
           RowBox[{"sin", "(", 
            FractionBox[
             RowBox[{"t", " ", 
              RowBox[{"(", 
               RowBox[{"a", "-", "b"}], ")"}]}], "b"], ")"}]}]}]}], "Input"]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ";"}]}], 
  TraditionalForm]], "Input",
 CellTags->{
  "Exercises", 
   "Using Options"},ExpressionUUID->"f4543c79-7fde-486d-8f70-f00cf2594d99"],

Cell[TextData[{
 "Use ",
 StyleBox[ButtonBox["ParametricPlot",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ParametricPlot"],
  FontWeight->"Bold"],
 " to create a function ",
 StyleBox["PlotHypocycloid", "Input"],
 " with two arguments ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]], "Input",ExpressionUUID->
  "e2189c00-c8a8-4b3c-b1ca-d31319d00e05"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]], "Input",ExpressionUUID->
  "ebf0c5e4-37e9-4780-918e-d44132a832eb"],
 " giving the radii of the two circles. Include an option ",
 StyleBox["Rotation", "Input"],
 ", with default value ",
 StyleBox["2\[Pi]", "Input"],
 ", that gives the value for the parameter ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]], "Input",ExpressionUUID->
  "5b9059ad-be03-4152-800c-58d3931e6490"],
 ". "
}], "Text",
 CellChangeTimes->{{3.8216870683841715`*^9, 3.821687075319566*^9}},
 CellTags->{
  "Exercises", 
   "Using Options"},ExpressionUUID->"17d23993-9a47-4624-9f87-3a14ab914d71"],

Cell[TextData[{
 "Finally, make plots for several pairs of values ",
 Cell[BoxData[
  FormBox["a", TraditionalForm]], "Input",ExpressionUUID->
  "b21444cf-f67a-43f1-9734-dca1c7f15fb5"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]], "Input",ExpressionUUID->
  "05a175e5-7a08-4e34-9821-fb3e30bdcf7b"],
 ", including ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "/", "b"}], TraditionalForm]], "Input",ExpressionUUID->
  "2b33e797-0b06-444b-90c6-4b7ccc19f5ea"],
 " integer, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "/", "b"}], TraditionalForm]], "Input",ExpressionUUID->
  "6c3f7cd1-6bd9-408f-ae3b-1abdd17f2ddf"],
 " rational, and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "/", "b"}], TraditionalForm]], "Input",ExpressionUUID->
  "3fc50e47-bd6b-45bc-9063-1279f7b2a9cd"],
 " irrational."
}], "Text",
 CellTags->{
  "Exercises", 
   "Using Options"},ExpressionUUID->"9c0f44c9-f2a0-4c3f-ab52-a871536541af"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"This defines an option ", 
        StyleBox["Rotation", "Input"], " for the function ", 
        StyleBox["PlotHypocycloid", "Input"], 
        " and gives it a default value of ", 
        Cell[
         BoxData[
          FormBox[
           RowBox[{"2", "\[Pi]"}], TraditionalForm]], "Input"], "."}], 
      "CodeText", 
      CellChangeTimes -> {{3.8216871582943926`*^9, 3.8216871583412647`*^9}}], 
     
     Cell[
      BoxData[
       RowBox[{
         RowBox[{
           RowBox[{"Options", "[", "PlotHypocycloid", "]"}], "=", 
           RowBox[{"{", 
             RowBox[{"Rotation", "\[Rule]", 
               RowBox[{"2", "\[Pi]"}]}], "}"}]}], ";"}]], "Input"], 
     Cell[
      TextData[{
        StyleBox[
         ButtonBox[
         "OptionsPattern", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/OptionsPattern"], FontWeight -> "Bold"], 
        " is used to allow options for the function ", 
        StyleBox["PlotHypocycloid", "Input"], 
        ". The actual value of this option is extracted using ", 
        StyleBox[
         ButtonBox[
         "OptionValue", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/OptionValue"], FontWeight -> "Bold"], "."}], "CodeText",
       CellChangeTimes -> {{3.821687165168028*^9, 3.8216871780854254`*^9}}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"PlotHypocycloid", "[", 
           RowBox[{"a_", ",", "b_", ",", 
             RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
         "\[IndentingNewLine]", 
         RowBox[{"ParametricPlot", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "-", "b"}], ")"}], " ", 
                    RowBox[{"Cos", "[", "t", "]"}]}], "+", 
                   RowBox[{"b", " ", 
                    RowBox[{"Cos", "[", 
                    FractionBox[
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"a", "-", "b"}], ")"}]}], "b"], "]"}]}]}], ",", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"a", "-", "b"}], ")"}], " ", 
                    RowBox[{"Sin", "[", "t", "]"}]}], "-", 
                   RowBox[{"b", " ", 
                    RowBox[{"Sin", "[", 
                    FractionBox[
                    RowBox[{"t", " ", 
                    RowBox[{"(", 
                    RowBox[{"a", "-", "b"}], ")"}]}], "b"], "]"}]}]}]}], 
               "}"}], ",", 
             RowBox[{"{", 
               RowBox[{"t", ",", "0", ",", 
                 RowBox[{"OptionValue", "[", "Rotation", "]"}]}], "}"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Epilog", "\[Rule]", 
               RowBox[{"Circle", "[", 
                 RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", "a"}], "]"}]}], ",", 
             
             RowBox[{"PlotRange", "\[Rule]", 
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"-", "a"}], "-", ".1"}], ",", 
                   RowBox[{"a", "+", ".1"}]}], "}"}]}]}], "]"}]}]], "Input"], 
     
     Cell["This uses the function with default option values.", "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"PlotHypocycloid", "[", 
         RowBox[{"3", ",", "1"}], "]"}]], "Input"], 
     Cell[
      TextData[{
       "This exercises the function with a non-default value for the option ", 
        StyleBox["Rotation", "MR"], "."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"PlotHypocycloid", "[", 
         RowBox[{"7", ",", "5", ",", 
           RowBox[{"Rotation", "\[Rule]", 
             RowBox[{"12", "\[Pi]"}]}]}], "]"}]], "Input"], 
     Cell["Finally, here is a dynamic version.", "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
         RowBox[{
           RowBox[{"PlotHypocycloid", "[", 
             RowBox[{"r1", ",", "r2", ",", 
               RowBox[{"Rotation", "\[Rule]", 
                 RowBox[{"12", "\[Pi]"}]}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
             RowBox[{"r1", ",", "3", ",", "5"}], "}"}], ",", 
           RowBox[{"{", 
             RowBox[{"r2", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"2bd6bd96-39c8-4258-913d-69a3dd7708a1"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Recursive Definitions"
}], "Subsection",
 CellChangeTimes->{3.8210043817078986`*^9},
 CellTags->{
  "Exercises", 
   "Recursive \
Definitions"},ExpressionUUID->"a8e4eab8-b200-4fe5-9147-c5a6ea7ad691"],

Cell[TextData[{
 "Consider a function ",
 StyleBox["b[n]", "Input"],
 " defined recursively by the equation ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"b", "[", "n", "]"}], "\[Equal]", 
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{"n", "-", "1"}], "]"}], "+", 
    RowBox[{"2", " ", 
     RowBox[{"b", "[", 
      RowBox[{"n", "-", "2"}], "]"}]}]}]}]], "Input",ExpressionUUID->
  "55cced81-f9d0-48e5-a7cd-6a01c2994aef"],
 " and the initial conditions ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"b", "[", "0", "]"}], "\[Equal]", 
   RowBox[{"b", "[", "1", "]"}], "\[Equal]", "1"}]], "Input",ExpressionUUID->
  "df953e78-30f8-4926-82b3-fd6d8e62880e"],
 ". Define a function ",
 Cell[BoxData[
  RowBox[{"b", "[", "n", "]"}]], "Input",ExpressionUUID->
  "6ed62628-5213-4180-b385-429589958f4b"],
 " to compute values of this function for any non-negative integer ",
 StyleBox["b", "Input"],
 ". Use your definition to compute a value for ",
 Cell[BoxData[
  RowBox[{"b", "[", "10", "]"}]], "Input",ExpressionUUID->
  "d19b4d6c-30e4-4f9f-884a-3677d227b915"],
 "."
}], "Text",
 CellTags->{
  "Exercises", 
   "Recursive \
Definitions"},ExpressionUUID->"e9923155-679b-480e-a022-d52985fb0469"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
      "The definition of this function can be entered using three \
assignments.", "Text"], 
      Cell[
      "Here are the two assignments corresponding to the initial conditions.",
        "CodeText"], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"b", "[", "0", "]"}], "=", "1"}]], "Input"], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"b", "[", "1", "]"}], "=", "1"}]], "Input"], 
      Cell[
       TextData[{
        "Be sure to include an underscore character on the left side of the \
definition of ", 
         StyleBox["b[n_]", "Input"], 
         " and to use a delayed assignment rather than an immediate \
assignment."}], "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"9582a943-6cd0-4879-9064-23793ee6b767"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "The definition of this function can be entered using three assignments \
.", "CodeText", 
      CellChangeTimes -> {{3.821687796439046*^9, 3.821687807271612*^9}}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"b", "[", "0", "]"}], "=", "1"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"b", "[", "1", "]"}], "=", "1"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"b", "[", 
           RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
         RowBox[{
           RowBox[{"b", "[", 
             RowBox[{"n", "-", "1"}], "]"}], "+", 
           RowBox[{"2", 
             RowBox[{"b", "[", 
               RowBox[{"n", "-", "2"}], "]"}]}]}]}]], "Input"], 
     Cell[
      TextData[{"This generates values for ", 
        StyleBox["b[i]", "Input"], " for ", 
        StyleBox["i", "Input"], " from 1 to 10."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"Table", "[", 
         RowBox[{
           RowBox[{"b", "[", "i", "]"}], ",", 
           RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"9ca24fc6-a82d-4d27-ae8b-2c95ddb7ab12"],

Cell[TextData[{
 "You can compute the general term in this recursion relation using the ",
 StyleBox[ButtonBox["RSolve",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RSolve"],
  FontWeight->"Bold"],
 " function. Here is an example showing how to find the general term for the \
recursion relation in this exercise and the value of ",
 Cell[BoxData[
  RowBox[{"b", "[", "10", "]"}]], "Input",ExpressionUUID->
  "dff4773d-53a9-42a8-8dea-c04ae492668b"],
 ":"
}], "CodeText",
 CellChangeTimes->{
  3.8216877075859995`*^9, {3.822054315284121*^9, 3.8220543157115717`*^9}},
 CellTags->{
  "Exercises", 
   "Recursive \
Definitions"},ExpressionUUID->"94336364-b7ae-4fee-94e3-fa1ce540f89e"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"b", ",", "n"}], "]"}]], "Input",
 CellTags->{"Exercises", "Recursive Definitions"},
 CellLabel->
  "In[205]:=",ExpressionUUID->"ebf19626-5603-458c-b9fd-19b6e0943c7f"],

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"RSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"b", "[", "n", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"b", "[", 
         RowBox[{"n", "-", "1"}], "]"}], "+", 
        RowBox[{"2", 
         RowBox[{"b", "[", 
          RowBox[{"n", "-", "2"}], "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"b", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
      RowBox[{
       RowBox[{"b", "[", "1", "]"}], "\[Equal]", "1"}]}], "}"}], ",", 
    RowBox[{"b", "[", "n", "]"}], ",", "n"}], "]"}]}]], "Input",
 CellTags->{"Exercises", "Recursive Definitions"},
 CellLabel->"",ExpressionUUID->"a98155cc-d02c-4fc6-b85e-a02d84467ed8"],

Cell[BoxData[
 RowBox[{"sol", "/.", 
  RowBox[{"n", "\[Rule]", "10"}]}]], "Input",
 CellTags->{"Exercises", "Recursive Definitions"},
 CellLabel->"",ExpressionUUID->"f75433f9-adb8-4dda-abd3-0d1c62b631b2"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Using Listability"
}], "Subsection",
 CellChangeTimes->{3.8210043836021185`*^9},
 CellTags->{
  "Exercises", 
   "Using Listability"},ExpressionUUID->"76451480-ceb1-4e8b-ba49-\
d715a9d3b470"],

Cell["Evaluate the following two inputs:", "CodeText",
 CellChangeTimes->{{3.822054322487969*^9, 3.822054322898932*^9}},
 CellTags->{
  "Exercises", 
   "Using Listability"},ExpressionUUID->"29dd218e-f426-4165-8d1a-\
bb6a6dacf25e"],

Cell[BoxData[
 RowBox[{"v", "=", 
  RowBox[{"{", 
   RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5"}], 
   "}"}]}]], "Input",
 CellTags->{"Exercises", "Using Listability"},
 CellLabel->
  "In[208]:=",ExpressionUUID->"a8335970-4637-4d17-94a5-0fcda0723d04"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"#", "^", "2"}]}], ")"}], "&"}], ",", 
   RowBox[{"Map", "[", 
    RowBox[{"Cos", ",", "v"}], "]"}]}], "]"}]], "Input",
 CellTags->{"Exercises", "Using Listability"},
 CellLabel->
  "In[209]:=",ExpressionUUID->"efb20d9f-fb80-48bb-8beb-3e359757ec78"],

Cell[TextData[{
 "Show how to get the same result without using ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"],
  FontWeight->"Bold"],
 ". Why does your solution work?"
}], "Text",
 CellChangeTimes->{{3.8216879614726057`*^9, 3.8216879669119883`*^9}},
 CellTags->{
  "Exercises", 
   "Using Listability"},ExpressionUUID->"210fe2c1-bdda-47ad-bcd5-\
cb56ac43eeb3"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{
        "Here is an input that gives the same result with only one use of ", 
         StyleBox[
          ButtonBox[
          "Map", BaseStyle -> "Link", ButtonData -> "paclet:ref/Map"], 
          FontWeight -> "Bold"], ". This works because ", 
         StyleBox[
          ButtonBox[
          "Cos", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cos"], 
          FontWeight -> "Bold"], " automatically maps over lists, so if ", 
         StyleBox["v", "Input"], " is a list, ", 
         StyleBox["Cos[v]", "Input"], " gives the same result as ", 
         StyleBox["Map[Cos,v]", "Input"], "."}], "Text", 
       CellChangeTimes -> {{3.8216879832334394`*^9, 3.821687989463765*^9}}], 
      Cell[
       BoxData[
        RowBox[{"Map", "[", 
          RowBox[{
            RowBox[{
              RowBox[{"(", 
                RowBox[{"1", "+", 
                  RowBox[{"#", "^", "2"}]}], ")"}], "&"}], ",", 
            RowBox[{"Cos", "[", "v", "]"}]}], "]"}]], "Input"], 
      Cell[
       TextData[{
        "Here is another input that gives the same result with only one use \
of ", 
         StyleBox[
          ButtonBox[
          "Map", BaseStyle -> "Link", ButtonData -> "paclet:ref/Map"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {3.8216880084037914`*^9}], 
      Cell[
       BoxData[
        RowBox[{"(", 
          RowBox[{"1", "+", 
            RowBox[{
              RowBox[{"Map", "[", 
                RowBox[{"Cos", ",", "v"}], "]"}], "^", "2"}]}], ")"}]], 
       "Input"], 
      Cell[
       TextData[{"Now eliminate both uses of ", 
         StyleBox[
          ButtonBox[
          "Map", BaseStyle -> "Link", ButtonData -> "paclet:ref/Map"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {3.821688013859239*^9}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"9b91611e-8c8b-41df-b0bf-efc10f2a81bd"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"(", 
            RowBox[{"1", "+", 
              RowBox[{
                RowBox[{"Cos", "[", "v", "]"}], "^", "2"}]}], ")"}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{"1", "+", 
            SuperscriptBox[
             RowBox[{"Cos", "[", "v", "]"}], "2"]}]], "Output"]}, Open]], 
     Cell[
      TextData[{"This solution works because all of the functions (", 
        StyleBox[
         ButtonBox[
         "Cos", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cos"], 
         FontWeight -> "Bold"], ", ", 
        StyleBox[
         ButtonBox[
         "Power", BaseStyle -> "Link", ButtonData -> "paclet:ref/Power"], 
         FontWeight -> "Bold"], ", and ", 
        StyleBox[
         ButtonBox[
         "Plus", BaseStyle -> "Link", ButtonData -> "paclet:ref/Plus"], 
         FontWeight -> "Bold"], ") in this calculation have the ", 
        StyleBox[
         ButtonBox[
         "Listable", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/Listable"], FontWeight -> "Bold"], 
        " attribute, and so automatically map over lists."}], "Text", 
      CellChangeTimes -> {{3.8216880507082367`*^9, 3.8216880738069367`*^9}}], 
     
     Cell[
     "The significance of this difference becomes quite apparent as you scale \
up the size of your computations.", "CodeText"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"vec", "=", 
           RowBox[{"RandomReal", "[", 
             RowBox[{"1", ",", 
               SuperscriptBox["10", "6"]}], "]"}]}], ";"}]], "Input"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{"Map", "[", 
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"#", "^", "2"}]}], ")"}], "&"}], ",", 
                  RowBox[{"Map", "[", 
                    RowBox[{"Cos", ",", "vec"}], "]"}]}], "]"}], ";"}], "//", 
            "AbsoluteTiming"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"0.154421`5.640251354029081", ",", "Null"}], "}"}]], 
         "Output"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{
              RowBox[{"(", 
                RowBox[{"1", "+", 
                  RowBox[{
                    RowBox[{"Cos", "[", "vec", "]"}], "^", "2"}]}], ")"}], 
              ";"}], "//", "AbsoluteTiming"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"0.050113`5.151495395928067", ",", "Null"}], "}"}]], 
         "Output"]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"0855fcd6-4143-4f8c-9800-23277707e16c"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Debugging a Program"
}], "Subsection",
 CellChangeTimes->{3.821004385120273*^9},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"b8d4fced-23f5-41a2-8500-0f8e21e58b33"],

Cell[TextData[{
 "Evaluate the following input to define a function ",
 StyleBox["f", "Input"],
 " that takes a list of numbers as its argument and returns the largest \
difference between consecutive elements in that list:"
}], "CodeText",
 CellChangeTimes->{{3.822054333152494*^9, 3.822054333610093*^9}},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"1a539bc8-c4bd-45cd-9616-0d132660d0cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "p_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "diff", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"diff", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"diff", "<", 
          RowBox[{"Abs", "[", 
           RowBox[{
            RowBox[{"p", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "-", 
            RowBox[{"p", "[", 
             RowBox[{"[", 
              RowBox[{"k", "+", "1"}], "]"}], "]"}]}], "]"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"diff", "=", 
          RowBox[{"Abs", "[", 
           RowBox[{
            RowBox[{"p", "[", 
             RowBox[{"[", "k", "]"}], "]"}], "-", 
            RowBox[{"p", "[", 
             RowBox[{"[", 
              RowBox[{"k", "+", "1"}], "]"}], "]"}]}], "]"}]}]}], "]"}], ",", 
       
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", 
         RowBox[{"Length", "[", "p", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "diff"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellTags->{"Exercises", "Debugging a Program"},
 CellLabel->
  "In[217]:=",ExpressionUUID->"975a2eaa-cc13-4cb6-863b-809be5871647"],

Cell[TextData[{
 "Evaluate the following input to demonstrate the use of ",
 StyleBox["f", "Input"],
 " for a sample list:"
}], "CodeText",
 CellChangeTimes->{{3.822054359261384*^9, 3.822054361191684*^9}},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"376ab4bb-8856-4740-a4db-0a362a58af3d"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"{", 
   RowBox[{"17", ",", "23", ",", "38", ",", "27", ",", "25", ",", "16"}], 
   "}"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"fd14fa4b-a110-4747-84c5-09bc98413691"],

Cell["\<\
The result is correct, but the program generates a warning message indicating \
an attempt to access an element beyond the end of the argument list.\
\>", "Text",
 CellChangeTimes->{{3.822054359261384*^9, 3.822054363951421*^9}},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"c2d85e5c-a5d2-4038-8634-1f4532894c75"],

Cell[TextData[{
 "Fix the error in the definition of ",
 StyleBox["f", "MR"],
 " so that it returns the correct result without generating any warning \
messages."
}], "Text",
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"8c8e861b-fd77-46af-ae29-2d939805da54"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      TextData[{
       "The only error in this program is that the loop iterates one step too \
far. The loop should stop at ", 
        StyleBox["Length[p]-1", "Input"], " rather than at ", 
        StyleBox["Length[p]", "Input"], "."}], "Text"], All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"d456f879-e4d8-4f43-9eb3-82cabb48d40f"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"Here is a corrected version of the definition of ", 
        StyleBox["f", "Input"], "."}], "Text"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", "p_List", "]"}], ":=", 
         RowBox[{"Module", "[", 
           RowBox[{
             RowBox[{"{", "diff", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
               RowBox[{"diff", "=", "0"}], ";", "\[IndentingNewLine]", 
               RowBox[{"Do", "[", 
                 RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"diff", "<", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"p", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "-", 
                    RowBox[{"p", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "1"}], "]"}], "]"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"diff", "=", 
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"p", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "-", 
                    RowBox[{"p", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", "+", "1"}], "]"}], "]"}]}], "]"}]}]}], "]"}],
                    ",", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "1", ",", 
                    RowBox[{
                    RowBox[{"Length", "[", "p", "]"}], "-", "1"}]}], "}"}]}], 
                 "]"}], ";", "\[IndentingNewLine]", "diff"}]}], 
           "\[IndentingNewLine]", "]"}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"f", "[", 
         RowBox[{"{", 
           
           RowBox[{"17", ",", "23", ",", "38", ",", "27", ",", "25", ",", 
             "16"}], "}"}], "]"}]], "Input"]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"39f60191-5b6b-43d9-96b3-f5724c6042b6"],

Cell["\<\
Another common way of fixing programs is to simply rewrite them. There are \
many other ways of getting the result that is obtained by this program.\
\>", "Text",
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"58c55bfb-5858-439c-acda-5d124c978fef"],

Cell[TextData[{
 "Find another way to define a function that gives the same result as the \
(corrected) function ",
 StyleBox["f", "MR"],
 " above. Several compact versions of this program can be written using a \
functional programming style"
}], "Text",
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"25d753e4-bdcd-4dad-97b3-e87840186c64"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{
        "Here are three inputs that each give a list of differences between \
consecutive elements in a list ", 
         StyleBox["p", "Input"], "."}], "CodeText"], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"p", "=", 
            RowBox[{"{", 
              
              RowBox[{"17", ",", "23", ",", "38", ",", "27", ",", "25", ",", 
                "16"}], "}"}]}], ";"}]], "Input"], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"Drop", "[", 
            RowBox[{"p", ",", "1"}], "]"}], "-", 
          RowBox[{"Drop", "[", 
            RowBox[{"p", ",", 
              RowBox[{"-", "1"}]}], "]"}]}]], "Input"], 
      Cell[
       BoxData[
        RowBox[{"ListConvolve", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{"1", ",", 
                RowBox[{"-", "1"}]}], "}"}], ",", "p"}], "]"}]], "Input"], 
      Cell[
       BoxData[
        RowBox[{"Differences", "[", "p", "]"}]], "Input"], 
      Cell[
       TextData[{
        "Once you have a list of differences between consecutive elements in \
a list, you can use ", 
         StyleBox[
          ButtonBox[
          "Abs", BaseStyle -> "Link", ButtonData -> "paclet:ref/Abs"], 
          FontWeight -> "Bold"], 
         " to get the absolute values of those differences and ", 
         StyleBox[
          ButtonBox[
          "Max", BaseStyle -> "Link", ButtonData -> "paclet:ref/Max"], 
          FontWeight -> "Bold"], 
         " to pick out the largest of those absolute values."}], "Text", 
       CellChangeTimes -> {{3.8216883161992188`*^9, 3.821688321122043*^9}}]}, 
     All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"eafcf0e1-a018-422a-9d12-c26545dc787e"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "Here are three possible ways of defining a function that takes a list \
of numbers as its argument and returns the largest difference between \
consecutive elements in that list.", "CodeText"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f1", "[", "lis_List", "]"}], ":=", 
         RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
             RowBox[{
               RowBox[{"Drop", "[", 
                 RowBox[{"lis", ",", 
                   RowBox[{"-", "1"}]}], "]"}], "-", 
               RowBox[{"Drop", "[", 
                 RowBox[{"lis", ",", "1"}], "]"}]}], "]"}], "]"}]}]], 
      "Input"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f2", "[", "lis_List", "]"}], ":=", 
         RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
             RowBox[{"ListConvolve", "[", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "lis"}], "]"}], "]"}], 
           "]"}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f3", "[", "lis_List", "]"}], ":=", 
         RowBox[{"Max", "[", 
           RowBox[{"Abs", "[", 
             RowBox[{"Differences", "[", "lis", "]"}], "]"}], "]"}]}]], 
      "Input"], 
     Cell[
      TextData[{"This tests these functions on a small vector ", 
        StyleBox["p", "Input"], " consisting of six integers."}], "CodeText"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"p", "=", 
           RowBox[{"{", 
             
             RowBox[{"17", ",", "23", ",", "38", ",", "27", ",", "25", ",", 
               "16"}], "}"}]}], ";"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"{", 
         RowBox[{
           RowBox[{"f1", "[", "p", "]"}], ",", 
           RowBox[{"f2", "[", "p", "]"}], ",", 
           RowBox[{"f3", "[", "p", "]"}]}], "}"}]], "Input"], 
     Cell[
      TextData[{"Running some ", 
        StyleBox[
         ButtonBox[
         "RepeatedTiming", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/RepeatedTiming"], FontWeight -> "Bold"], 
        " tests on a fairly large vector of random integers shows that all of \
these approaches are fairly fast, with the built-in ", 
        StyleBox[
         ButtonBox[
         "Differences", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/Differences"], FontWeight -> "Bold"], 
        " function being the fastest."}], "CodeText", 
      CellChangeTimes -> {{3.821688381445586*^9, 3.821688390173229*^9}}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"pLarge", "=", 
           RowBox[{"RandomInteger", "[", 
             RowBox[{"1000", ",", 
               RowBox[{"{", 
                 SuperscriptBox["10", "6"], "}"}]}], "]"}]}], ";"}]], 
      "Input"], 
     Cell[
      BoxData[
       RowBox[{"{", 
         RowBox[{
           RowBox[{"RepeatedTiming", "[", 
             RowBox[{
               RowBox[{"f1", "[", "pLarge", "]"}], ";"}], "]"}], ",", 
           RowBox[{"RepeatedTiming", "[", 
             RowBox[{
               RowBox[{"f2", "[", "pLarge", "]"}], ";"}], "]"}], ",", 
           RowBox[{"RepeatedTiming", "[", 
             RowBox[{
               RowBox[{"f3", "[", "pLarge", "]"}], ";"}], "]"}]}], "}"}]], 
      "Input"]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"f2ef8d62-8cfa-4bfd-8deb-0285f1d148ab"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Extracting Array Elements with Span"
}], "Subsection",
 CellChangeTimes->{3.8210043865823293`*^9},
 CellTags->{
  "Exercises", 
   "Extracting Array \
Elements"},ExpressionUUID->"e9287866-d904-4dea-ac35-00ae7de10fb1"],

Cell["Here is a sample array you will work with in this exercise:", "CodeText",
 CellChangeTimes->{{3.8216884403825307`*^9, 3.8216884612769756`*^9}, {
  3.8220553314365263`*^9, 3.822055333903036*^9}},
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"4f0e6cc4-8d5b-48cf-aaa5-cab4dcb3d1d1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"Array", "[", 
    RowBox[{
     RowBox[{
      SubscriptBox["a", "##"], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "8"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input",
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"7edd4801-43ee-481e-824f-089d7247a9ad"],

Cell[TextData[{
 "Note the use of the notation ",
 StyleBox["##", "Input"],
 "(",
 StyleBox[ButtonBox["SlotSequence",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/SlotSequence"],
  FontWeight->"Bold"],
 "), which represents a ",
 StyleBox["sequence",
  FontSlant->"Italic"],
 " of arguments for the pure function."
}], "Text",
 CellChangeTimes->{{3.8216884403825307`*^9, 3.8216884612769756`*^9}, {
   3.8220553314365263`*^9, 3.8220553319421597`*^9}, 3.8220553625093117`*^9},
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"3ad98ff6-7f6b-4abb-852d-11037af68e56"],

Cell["\<\
The following manually extracts every other row of this matrix, starting with \
the first:\
\>", "CodeText",
 CellChangeTimes->{{3.821688473455383*^9, 3.82168847346735*^9}, {
  3.822055366670903*^9, 3.822055367897087*^9}},
 CellTags->{
  "Exercises", 
   "Extracting Array \
Elements"},ExpressionUUID->"74ad5368-e7b3-424f-888d-0b627ecde99a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "[", 
   RowBox[{"[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5", ",", "7"}], "}"}], "]"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"89af4c17-d9f3-47a1-b867-86f0bdee1d2d"],

Cell[TextData[{
 "Or you might do it with the ",
 StyleBox[ButtonBox["Range",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Range"],
  FontWeight->"Bold"],
 " function:"
}], "CodeText",
 CellChangeTimes->{
  3.8216884830403156`*^9, {3.822055369214121*^9, 3.822055369742545*^9}},
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"64f4364f-acc9-429d-8340-418107b39c7c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "[", 
   RowBox[{"[", 
    RowBox[{"Range", "[", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "[", "mat", "]"}], ",", "2"}], "]"}], "]"}], "]"}], "//",
   "MatrixForm"}]], "Input",
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"d682758f-ae16-4256-8a7b-11cc55796151"],

Cell[TextData[{
 "Perform the same computation using the ",
 StyleBox[ButtonBox["Span",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Span"],
  FontWeight->"Bold"],
 " (",
 Cell[BoxData[
  ButtonBox[";;",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Span"]], "Input",ExpressionUUID->
  "2f53a036-ccc6-418a-908b-550fb39f836e"],
 ") function (look at the documentation for different forms of input)."
}], "Text",
 CellChangeTimes->{{3.8216884898018*^9, 3.82168849218542*^9}},
 CellTags->{
  "Exercises", 
   "Extracting Array \
Elements"},ExpressionUUID->"33da3aba-92c2-45ba-afea-995e29673dfc"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "This extracts from the first through the last rows, taking every \
other.", "CodeText"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"mat", "[", 
              RowBox[{"[", 
                RowBox[{";;", 
                  RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}], "//", 
            "MatrixForm"}]], "Input", 
         CellChangeTimes -> {{3.464103050772814*^9, 3.46410309262864*^9}}], 
        Cell[
         BoxData[
          TagBox[
           RowBox[{"(", "\[NoBreak]", 
             GridBox[{{
                SubscriptBox["a", 
                 RowBox[{"1", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "8"}]]}, {
                SubscriptBox["a", 
                 RowBox[{"3", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "8"}]]}, {
                SubscriptBox["a", 
                 RowBox[{"5", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "8"}]]}, {
                SubscriptBox["a", 
                 RowBox[{"7", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "8"}]]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
              GridBoxSpacings -> {"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.7]}, 
                  Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                "Rows" -> {
                  Offset[0.2], {
                   Offset[0.4]}, 
                  Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]], "Output"]}, Open]]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"01ecd206-2719-4e21-804c-d6b4014e7cdf"],

Cell["\<\
The following extracts every other row (starting with the first row) and \
every other column (starting with the second column):\
\>", "CodeText",
 CellChangeTimes->{{3.8220553718121557`*^9, 3.822055372329928*^9}},
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"b1dc74ff-1ab7-4a2e-a2d3-51c495e859b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "[", 
   RowBox[{"[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", "mat", "]"}], ",", "2"}], "]"}], ",", 
     RowBox[{"Range", "[", 
      RowBox[{"2", ",", 
       RowBox[{"Length", "[", "mat", "]"}], ",", "2"}], "]"}]}], "]"}], "]"}],
   "//", "MatrixForm"}]], "Input",
 CellTags->
  "Extracting Array \
Elements",ExpressionUUID->"8beeef22-109e-4540-ab89-3cf093b5b0be"],

Cell[TextData[{
 "Perform the same computation using the ",
 StyleBox[ButtonBox["Span",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Span"],
  FontWeight->"Bold"],
 "(",
 Cell[BoxData[
  ButtonBox[";;",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Span"]], "Input",ExpressionUUID->
  "18352910-8708-45c1-8106-67da6e8220a7"],
 ") function only."
}], "Text",
 CellChangeTimes->{3.821688548145417*^9},
 CellTags->{
  "Exercises", 
   "Extracting Array \
Elements"},ExpressionUUID->"cfa4444d-8d48-4df6-b04d-72d155d8dd9e"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     CellGroupData[{
       Cell[
        BoxData[
         RowBox[{
           RowBox[{"mat", "[", 
             RowBox[{"[", 
               RowBox[{
                 RowBox[{";;", 
                   RowBox[{"-", "1"}], ";;", "2"}], ",", 
                 RowBox[{"2", ";;", 
                   RowBox[{"-", "1"}], ";;", "2"}]}], "]"}], "]"}], "//", 
           "MatrixForm"}]], "Input", 
        CellChangeTimes -> {{3.464103050772814*^9, 3.46410309262864*^9}, {
         3.464103123563211*^9, 3.464103177341322*^9}}], 
       Cell[
        BoxData[
         TagBox[
          RowBox[{"(", "\[NoBreak]", 
            GridBox[{{
               SubscriptBox["a", 
                RowBox[{"1", ",", "2"}]], 
               SubscriptBox["a", 
                RowBox[{"1", ",", "4"}]], 
               SubscriptBox["a", 
                RowBox[{"1", ",", "6"}]], 
               SubscriptBox["a", 
                RowBox[{"1", ",", "8"}]]}, {
               SubscriptBox["a", 
                RowBox[{"3", ",", "2"}]], 
               SubscriptBox["a", 
                RowBox[{"3", ",", "4"}]], 
               SubscriptBox["a", 
                RowBox[{"3", ",", "6"}]], 
               SubscriptBox["a", 
                RowBox[{"3", ",", "8"}]]}, {
               SubscriptBox["a", 
                RowBox[{"5", ",", "2"}]], 
               SubscriptBox["a", 
                RowBox[{"5", ",", "4"}]], 
               SubscriptBox["a", 
                RowBox[{"5", ",", "6"}]], 
               SubscriptBox["a", 
                RowBox[{"5", ",", "8"}]]}, {
               SubscriptBox["a", 
                RowBox[{"7", ",", "2"}]], 
               SubscriptBox["a", 
                RowBox[{"7", ",", "4"}]], 
               SubscriptBox["a", 
                RowBox[{"7", ",", "6"}]], 
               SubscriptBox["a", 
                RowBox[{"7", ",", "8"}]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
             GridBoxSpacings -> {"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]]], "Output"]}, Open]], WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"ae720462-21c6-4d4c-a662-ab83a5805eae"],

Cell["\<\
Replace the elements in every other row (starting with the first) and every \
other column (starting with the second) with a random integer between 0 and \
10.\
\>", "Text",
 CellTags->{
  "Exercises", 
   "Extracting Array \
Elements"},ExpressionUUID->"c969266b-0b14-410f-a666-a1269df368af"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{
       "This is basic list component assignment; that is, using the ", 
        StyleBox[
         ButtonBox[
         "Span", BaseStyle -> "Link", ButtonData -> "paclet:ref/Span"], 
         FontWeight -> "Bold"], 
        " function, we identify the components in mat that we want to replace \
and make an assignment to do that with random integers. Note that this is a \
destructive operation in the sense that we have overwritten ", 
        StyleBox["mat", "Input"], " and it now has a new value."}], 
      "CodeText", CellChangeTimes -> {3.8216885757161913`*^9}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"mat", "[", 
              RowBox[{"[", 
                RowBox[{
                  RowBox[{";;", 
                    RowBox[{"-", "1"}], ";;", "2"}], ",", 
                  RowBox[{"2", ";;", 
                    RowBox[{"-", "1"}], ";;", "2"}]}], "]"}], "]"}], "=", 
            RowBox[{"RandomInteger", "[", 
              RowBox[{"10", ",", 
                RowBox[{"{", 
                  RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}]], "Input", 
         CellChangeTimes -> {{3.464103050772814*^9, 3.46410309262864*^9}, {
          3.464103123563211*^9, 3.464103177341322*^9}, {3.464103264493248*^9, 
          3.464103289264586*^9}}], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"8", ",", "2", ",", "7", ",", "7"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"8", ",", "4", ",", "8", ",", "10"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"3", ",", "8", ",", "1", ",", "9"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"6", ",", "1", ",", "10", ",", "0"}], "}"}]}], "}"}]],
          "Output", CellChangeTimes -> {3.464103292312751*^9}]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"MatrixForm", "[", "mat", "]"}]], "Input", 
         CellChangeTimes -> {{3.464103301953631*^9, 3.4641033072531776`*^9}}], 
        Cell[
         BoxData[
          TagBox[
           RowBox[{"(", "\[NoBreak]", 
             GridBox[{{
                SubscriptBox["a", 
                 RowBox[{"1", ",", "1"}]], "8", 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "3"}]], "2", 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "5"}]], "7", 
                SubscriptBox["a", 
                 RowBox[{"1", ",", "7"}]], "7"}, {
                SubscriptBox["a", 
                 RowBox[{"2", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"2", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"2", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"2", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"2", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"2", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"2", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"2", ",", "8"}]]}, {
                SubscriptBox["a", 
                 RowBox[{"3", ",", "1"}]], "8", 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "3"}]], "4", 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "5"}]], "8", 
                SubscriptBox["a", 
                 RowBox[{"3", ",", "7"}]], "10"}, {
                SubscriptBox["a", 
                 RowBox[{"4", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"4", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"4", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"4", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"4", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"4", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"4", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"4", ",", "8"}]]}, {
                SubscriptBox["a", 
                 RowBox[{"5", ",", "1"}]], "3", 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "3"}]], "8", 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "5"}]], "1", 
                SubscriptBox["a", 
                 RowBox[{"5", ",", "7"}]], "9"}, {
                SubscriptBox["a", 
                 RowBox[{"6", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"6", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"6", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"6", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"6", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"6", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"6", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"6", ",", "8"}]]}, {
                SubscriptBox["a", 
                 RowBox[{"7", ",", "1"}]], "6", 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "3"}]], "1", 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "5"}]], "10", 
                SubscriptBox["a", 
                 RowBox[{"7", ",", "7"}]], "0"}, {
                SubscriptBox["a", 
                 RowBox[{"8", ",", "1"}]], 
                SubscriptBox["a", 
                 RowBox[{"8", ",", "2"}]], 
                SubscriptBox["a", 
                 RowBox[{"8", ",", "3"}]], 
                SubscriptBox["a", 
                 RowBox[{"8", ",", "4"}]], 
                SubscriptBox["a", 
                 RowBox[{"8", ",", "5"}]], 
                SubscriptBox["a", 
                 RowBox[{"8", ",", "6"}]], 
                SubscriptBox["a", 
                 RowBox[{"8", ",", "7"}]], 
                SubscriptBox["a", 
                 RowBox[{"8", ",", "8"}]]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
              GridBoxSpacings -> {"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.7]}, 
                  Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                "Rows" -> {
                  Offset[0.2], {
                   Offset[0.4]}, 
                  Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]], "Output", 
         CellChangeTimes -> {3.464103308557638*^9}]}, Open]]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"e4062b8d-1f68-412c-9607-053be4d98368"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " Using Levels in Expressions"
}], "Subsection",
 CellChangeTimes->{3.82100438893425*^9},
 CellTags->{
  "Exercises", 
   "Using Levels"},ExpressionUUID->"9fcbfffa-fda4-450c-80ed-405d260e88c0"],

Cell[TextData[{
 "Evaluate the following inputs to define ",
 Cell[BoxData["m"],ExpressionUUID->"753da913-0bea-45fb-8b33-4ec6947758f5"],
 " to be a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"3", "\[Cross]", "3"}], TraditionalForm]],ExpressionUUID->
  "362bd461-ba52-4b91-bc9e-7b4bf321eed4"],
 " matrix in which each element is a pair of symbols, and display the matrix \
using ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"],
  FontWeight->"Bold"],
 StyleBox[":",
  FontWeight->"Bold"]
}], "CodeText",
 CellChangeTimes->{
  3.82168860978079*^9, {3.822055386157772*^9, 3.8220553865835953`*^9}},
 CellTags->{
  "Exercises", 
   "Using Levels"},ExpressionUUID->"5bb5e424-209d-40f0-95a0-d5c6668df205"],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x1", ",", "y1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x2", ",", "y2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x3", ",", "y3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x4", ",", "y4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x5", ",", "y5"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x6", ",", "y6"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x7", ",", "y7"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x8", ",", "y8"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x9", ",", "y9"}], "}"}]}], "}"}]}], "}"}]}], ";"}]], "Input",\

 CellTags->{"Exercises", "Using Levels"},
 CellLabel->
  "In[227]:=",ExpressionUUID->"3db5033c-60a9-4778-8f4d-73f01604e35b"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"m", ",", 
   RowBox[{"TableDepth", "\[Rule]", "2"}]}], "]"}]], "Input",
 CellTags->{"Exercises", "Using Levels"},
 CellLabel->
  "In[228]:=",ExpressionUUID->"90e340bd-588e-4e57-9a06-ccc11b6ccec3"],

Cell[TextData[{
 "Show a way of using ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"],
  FontWeight->"Bold"],
 " to construct the following matrix, each element of which is the sum of the \
elements from the corresponding pair in the matrix ",
 StyleBox["m", "Input"],
 "."
}], "Text",
 CellChangeTimes->{{3.8216886156549835`*^9, 3.8216886195343513`*^9}},
 CellTags->{
  "Exercises", 
   "Using Levels"},ExpressionUUID->"ec7433c4-66da-418e-afa8-c17d433f67c7"],

Cell["Expected output:", "CodeText",
 CellChangeTimes->{{3.822055438896679*^9, 
  3.822055451080481*^9}},ExpressionUUID->"37c21b77-6042-41cc-8aac-\
08643cb1ddf4"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"x1", "+", "y1"}], 
      RowBox[{"x2", "+", "y2"}], 
      RowBox[{"x3", "+", "y3"}]},
     {
      RowBox[{"x4", "+", "y4"}], 
      RowBox[{"x5", "+", "y5"}], 
      RowBox[{"x6", "+", "y6"}]},
     {
      RowBox[{"x7", "+", "y7"}], 
      RowBox[{"x8", "+", "y8"}], 
      RowBox[{"x9", "+", "y9"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Text",
 CellChangeTimes->{
  3.8210029104423246`*^9},ExpressionUUID->"36afc843-bac5-4ed3-8416-\
4acf589997e6"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"This can be done by applying ", 
         StyleBox[
          ButtonBox[
          "Plus", BaseStyle -> "Link", ButtonData -> "paclet:ref/Plus"], 
          FontWeight -> "Bold"], " at level 2 in the matrix."}], "Text", 
       CellChangeTimes -> {3.8216886361992254`*^9}], 
      Cell[
       TextData[{
        "The level at which to apply a function is specified using the \
optional third argument in ", 
         StyleBox[
          ButtonBox[
          "Apply", BaseStyle -> "Link", ButtonData -> "paclet:ref/Apply"], 
          FontWeight -> "Bold"], "."}], "Text", 
       CellChangeTimes -> {3.821688643013501*^9}]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"aad317db-ef6e-4eca-8f3b-cc12ff9d8288"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"This can be done by applying ", 
        StyleBox[
         ButtonBox[
         "Plus", BaseStyle -> "Link", ButtonData -> "paclet:ref/Plus"], 
         FontWeight -> "Bold"], " at level 2 in the matrix."}], "CodeText", 
      CellChangeTimes -> {{3.821688653500065*^9, 3.821688663502875*^9}}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"MatrixForm", "[", 
           RowBox[{"Apply", "[", 
             RowBox[{"Plus", ",", "m", ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], "]"}], " "}]], "Input"], 
     Cell[
      TextData[{"Or, use ", 
        StyleBox[
         ButtonBox[
         "Total", BaseStyle -> "Link", ButtonData -> "paclet:ref/Total"], 
         FontWeight -> "Bold"], " at level 3."}], "CodeText", 
      CellChangeTimes -> {3.8216886738631463`*^9}], 
     Cell[
      BoxData[
       RowBox[{"MatrixForm", "@", 
         RowBox[{"Total", "[", 
           RowBox[{"m", ",", 
             RowBox[{"{", "3", "}"}]}], "]"}]}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"3fdfeee7-fc0f-436f-b87d-b3680eb3817e"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "6.",
 
 CounterBox["Subsection"],
 " More Patterns"
}], "Subsection",
 CellChangeTimes->{3.821004390344799*^9},
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"2ffdba79-c8fc-4f0c-9a5f-78348c17556d"],

Cell[TextData[{
 "Evaluate the following inputs to define and demonstrate the use of a \
function ",
 StyleBox["f", "Input"],
 ". "
}], "Text",
 CellChangeTimes->{3.8216887043151264`*^9, 3.822055403237803*^9},
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"85f09082-0221-4492-8023-6b3cef8ec26b"],

Cell[TextData[{
 "This function uses the ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"],
  FontWeight->"Bold"],
 " function to select from a list of pairs all the pairs in which the first \
element is greater than 5:"
}], "CodeText",
 CellChangeTimes->{
  3.8216887043151264`*^9, {3.822055408780292*^9, 3.822055409792753*^9}},
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"95217338-b8a0-4d60-9119-8a50f050acb0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"p", ":", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], "]"}], ":=", 
  RowBox[{"Cases", "[", 
   RowBox[{"p", ",", 
    RowBox[{"q_", "/;", 
     RowBox[{
      RowBox[{"First", "[", "q", "]"}], ">", "5"}]}]}], "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"d6277317-53ca-4191-863f-01615141bcbe"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"9", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "8"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "1"}], "}"}]}], "}"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"fb04d708-5e82-485c-a9c2-c49e19f4507f"],

Cell[TextData[{
 "The pattern ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"_", ",", "_"}], "}"}]], "Input",ExpressionUUID->
  "fc01bbc2-9dc3-4f36-9cb9-547432a416f2"],
 " on the left side of the definitions of ",
 StyleBox["f", "MR"],
 " matches any pair of expressions."
}], "Text",
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"5f9c8fcd-9e0f-481b-a4c3-d5676e195e4f"],

Cell[TextData[{
 "The pattern ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]], "Input",ExpressionUUID->
  "c9392911-1836-4a06-8bb7-cac253e4f0ae"],
 " matches any list of zero or more expressions that match ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"_", ",", "_"}], "}"}]], "Input",ExpressionUUID->
  "4c4de08d-ca10-4445-9327-5de404a3c880"],
 ". The notation ",
 StyleBox["...", "MR"],
 " in this pattern is the special notation for ",
 StyleBox[ButtonBox["RepeatedNull",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RepeatedNull"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{3.8216887492810183`*^9},
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"fd0a772d-63ba-4121-ad9d-ee4ce3cfa1ef"],

Cell[TextData[{
 "The symbol ",
 StyleBox["p", "MR"],
 " in ",
 Cell[BoxData[
  RowBox[{"p", ":", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}]], "Input",
  ExpressionUUID->"bdc64c50-8759-4f69-a7af-9d33beb0a784"],
 " is included to give name to the expression that matches ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]], "Input",ExpressionUUID->
  "b8a10321-b855-4132-a895-5eed6baeb42a"],
 ", so that this expression can be referenced on the right side of the \
definition."
}], "Text",
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"d1a0ca50-6ae2-4260-9e79-c89ef7dfaa3e"],

Cell[TextData[{
 "The second argument in ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"],
  FontWeight->"Bold"],
 " is a pattern that specifies the class of expressions to select. In this \
example, the pattern ",
 Cell[BoxData[
  RowBox[{"q_", "/;", 
   RowBox[{
    RowBox[{"First", "[", "q", "]"}], ">", "5"}]}]], "Input",ExpressionUUID->
  "3df33c43-0d28-46b4-98a0-e1f0b3bc4a04"],
 ", or ",
 Cell[BoxData[
  RowBox[{"Condition", "[", 
   RowBox[{"q_", ",", 
    RowBox[{
     RowBox[{"First", "[", "q", "]"}], ">", "5"}]}], "]"}]], "Input",
  ExpressionUUID->"1dd9d1e5-53dc-490a-92cc-29c9458b9487"],
 ", matches any expression ",
 StyleBox["q", "Input"],
 " such that ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"First", "[", "q", "]"}], ">", "5"}]], "Input",ExpressionUUID->
  "49e36f26-3504-412d-90dc-cf159d91bde3"],
 " evaluates to ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8216887757715993`*^9, 3.821688803876788*^9}},
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"98c685b1-10ed-465a-9e3b-b09035ffba3d"],

Cell[TextData[{
 "Change the definition of ",
 StyleBox["f", "Input"],
 " so that it selects from a list of pairs all the pairs in which the sum of \
the elements is greater than 10."
}], "Text",
 CellTags->{
  "Exercises", 
   "More Patterns"},ExpressionUUID->"2d77efe8-0bd4-458c-af3e-e15ae44975c3"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      TextData[{"The pattern ", 
        StyleBox[
        "{p_,\[ThinSpace]q_}\[ThinSpace]/;\[ThinSpace]p\[ThinSpace]+\
\[ThinSpace]q\[ThinSpace]>\[ThinSpace]10", "Input"], 
        " matches any list with two elements in which the sum of the elements \
is greater than 10."}], "Text"], All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"3e78b9ed-2e21-426c-ae54-4acb31b59fed"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "Here is one possible solution, and a demonstration of the use of this \
function.", "CodeText"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", 
           RowBox[{"p", ":", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], "]"}], 
         ":=", 
         RowBox[{"Cases", "[", 
           RowBox[{"p", ",", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"x_", ",", "y_"}], "}"}], "/;", 
               RowBox[{
                 RowBox[{"x", "+", "y"}], ">", "10"}]}]}], "]"}]}]], "Input"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"f", "[", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"2", ",", "4"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"6", ",", "1"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"9", ",", "2"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"4", ",", "8"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"7", ",", "1"}], "}"}]}], "}"}], "]"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"9", ",", "2"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"4", ",", "8"}], "}"}]}], "}"}]], "Output"]}, Open]], 
     
     Cell[
      TextData[{
       "A function that gives the same result can also be defined using ", 
        StyleBox[
         ButtonBox[
         "Select", BaseStyle -> "Link", ButtonData -> "paclet:ref/Select"], 
         FontWeight -> "Bold"], "."}], "CodeText", 
      CellChangeTimes -> {3.821688843077506*^9}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", 
           RowBox[{"p", ":", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"_", ",", "_"}], "}"}], "..."}], "}"}]}], "]"}], 
         ":=", 
         RowBox[{"Select", "[", 
           RowBox[{"p", ",", 
             RowBox[{
               RowBox[{
                 RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "+", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ">", "10"}], "&"}]}], 
           "]"}]}]], "Input"]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"d137536a-8aa9-4ee3-9a06-d42230d6cc81"],

Cell["", "EndOfSlide",ExpressionUUID->"5960269b-64e2-47c3-b291-f2aabaa6556e"]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
Saveable->False,
ScreenStyleEnvironment->"SlideShow",
WindowSize->{1024, 768},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"Advanced Programming",
TaggingRules->{
 "WolframUNotebook" -> True, 
  "PresenterSettings" -> {"ShowNavigationBar" -> True}},
ButtonBoxOptions->{BaseStyle->None},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["WolframULogo", StyleDefinitions -> StyleData["Title"]], 
          CellMargins -> {{120, 0}, {0, 130}}, CellGroupingRules -> 
          "GraphicsGrouping", PageBreakWithin -> False, GeneratedCell -> True,
           CellAutoOverwrite -> True, ShowCellLabel -> False, 
          CellFrameMargins -> {{0, 0}, {0, 0}}, DefaultFormatType -> 
          DefaultOutputFormatType, LanguageCategory -> "NaturalLanguage", 
          FormatType -> StandardForm, ShowStringCharacters -> False, 
          FrontFaceColor -> GrayLevel[0], FrontFaceOpacity -> 1, 
          GraphicsColor -> GrayLevel[0], PointSize -> Absolute[3], Thickness -> 
          Medium, Opacity -> 1, DrawEdges -> False, StyleMenuListing -> None, 
          FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Plain", 
          FontColor -> GrayLevel[0], FontOpacity -> 
          1, $CellContext`BackFaceColor -> 
          GrayLevel[0], $CellContext`StripStyleOnPaste -> 
          False, $CellContext`BackFaceOpacity -> 1], 
         Cell[
          StyleData[
          "WolframULogo", "SlideShow", StyleDefinitions -> 
           StyleData["WolframULogo"]], 
          CellFrameLabels -> {{None, None}, {None, None}}], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Working", StyleDefinitions -> 
           StyleData["WolframULogo", "SlideShow"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell["Title", "Subsection"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Title"], CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> 
          "Source Sans Pro", FontSize -> 81, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> 
          RGBColor[
           0.09019607843137255, 0.1607843137254902, 0.25882352941176473`]], 
         Cell[
          StyleData["Title", "SlideShow"], CellMargins -> {{120, 0}, {0, 40}},
           FontFamily -> "Source Sans Pro", FontSize -> 81, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> 
          RGBColor[
           0.09019607843137255, 0.1607843137254902, 0.25882352941176473`]], 
         Cell[
          StyleData[
          "Title", "Slideshow Working", StyleDefinitions -> 
           StyleData["Title", "SlideShow"]]], 
         Cell[
          StyleData[
          "Title", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Title", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Title", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Title", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subtitle"], CellMargins -> {{120, 0}, {0, 12}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 40, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          FontVariations -> {"CapsType" -> "AllCaps"}, 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData["Subtitle", "SlideShow"], 
          CellMargins -> {{120, 0}, {0, 12}}, FontFamily -> "Source Sans Pro",
           FontSize -> 40, FontWeight -> "Regular", FontSlant -> "Plain", 
          FontVariations -> {"CapsType" -> "AllCaps"}, 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData[
          "Subtitle", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subtitle", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subtitle", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subtitle", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subtitle", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subtitle", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["TitleGraphic"], CellMargins -> {{120, 0}, {0, 25}}, 
          CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False, 
          GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
          False, DefaultFormatType -> DefaultOutputFormatType, 
          LanguageCategory -> "NaturalLanguage", FormatType -> StandardForm, 
          ShowStringCharacters -> False, FrontFaceColor -> GrayLevel[0], 
          FrontFaceOpacity -> 1, GraphicsColor -> GrayLevel[0], PointSize -> 
          Absolute[3], Thickness -> Medium, Opacity -> 1, DrawEdges -> False, 
          StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 10, 
          FontWeight -> "Plain", FontColor -> GrayLevel[0], FontOpacity -> 
          1, $CellContext`BackFaceColor -> 
          GrayLevel[0], $CellContext`StripStyleOnPaste -> 
          False, $CellContext`BackFaceOpacity -> 1], 
         Cell[
          StyleData["TitleGraphic", "SlideShow"], 
          CellMargins -> {{120, 0}, {0, 25}}, CellGroupingRules -> 
          "GraphicsGrouping", PageBreakWithin -> False, GeneratedCell -> True,
           CellAutoOverwrite -> True, ShowCellLabel -> False, 
          DefaultFormatType -> DefaultOutputFormatType, LanguageCategory -> 
          "NaturalLanguage", FormatType -> StandardForm, ShowStringCharacters -> 
          False, FrontFaceColor -> GrayLevel[0], FrontFaceOpacity -> 1, 
          GraphicsColor -> GrayLevel[0], PointSize -> Absolute[3], Thickness -> 
          Medium, Opacity -> 1, DrawEdges -> False, StyleMenuListing -> None, 
          FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Plain", 
          FontColor -> GrayLevel[0], FontOpacity -> 
          1, $CellContext`BackFaceColor -> 
          GrayLevel[0], $CellContext`StripStyleOnPaste -> 
          False, $CellContext`BackFaceOpacity -> 1], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Working", StyleDefinitions -> 
           StyleData["TitelGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell["Section", "Subsection"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Section"], CellFrame -> {{0, 0}, {0, 0}}, 
          ShowGroupOpener -> "Inline", CellMargins -> {{120, 0}, {0, 50}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 70, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData["Section", "SlideShow"], CellFrame -> {{0, 0}, {0, 0}}, 
          ShowGroupOpener -> "Inline", CellMargins -> {{120, 0}, {0, 50}}, 
          LineSpacing -> {1, 2}, FontFamily -> "Source Sans Pro", FontSize -> 
          70, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData[
          "Section", "Slideshow Working", StyleDefinitions -> 
           StyleData["Section", "SlideShow"]]], 
         Cell[
          StyleData[
          "Section", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Section", "SlideShow"]]], 
         Cell[
          StyleData[
          "Section", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Section", "SlideShow"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsection"], ShowGroupOpener -> "Inline", 
          CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> "Source Sans Pro",
           FontSize -> 40, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
         Cell[
          StyleData["Subsection", "SlideShow"], ShowGroupOpener -> "Inline", 
          CellMargins -> {{120, 0}, {0, 40}}, LineSpacing -> {1, 2}, 
          FontFamily -> "Source Sans Pro", FontSize -> 40, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
         Cell[
          StyleData[
          "Subsection", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subsection", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subsection", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subsection", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subsection", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subsection", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subsubsection"], ShowGroupOpener -> "Inline", 
          CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> "Source Sans Pro",
           FontSize -> 30, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData["Subsubsection", "SlideShow"], ShowGroupOpener -> 
          "Inline", CellMargins -> {{120, 0}, {0, 40}}, LineSpacing -> {1, 2},
           FontFamily -> "Source Sans Pro", FontSize -> 30, FontWeight -> 
          "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
          FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
         Cell[
          StyleData[
          "Subsubsection", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subsubsection", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subsubsection", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subsubsection", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subsubsection", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subsubsection", "Slideshow Working"]]]}, Open]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell[
      "Styles for Body Content", "Section", 
       CellChangeTimes -> {{3.727532504641029*^9, 3.727532505736285*^9}}], 
      Cell[
       StyleData["EndOfSlide"], CellFrame -> {{False, False}, {False, True}}, 
       ShowCellBracket -> False, CellMargins -> {{120, 0}, {100, 15}}, 
       CellFrameColor -> GrayLevel[0.85]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Text"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
          "Text", MenuSortingValue -> 1400, MenuCommandKey :> "7", FontFamily -> 
          "Source Sans Pro", FontSize -> 15, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData["Text", "SlideShow"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
          "Text", MenuSortingValue -> 1400, MenuCommandKey :> "7", FontFamily -> 
          "Source Sans Pro", FontSize -> 22, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData[
          "Text", "Slideshow Working", StyleDefinitions -> 
           StyleData["Text", "SlideShow"]]], 
         Cell[
          StyleData[
          "Text", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Text", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Text", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Text", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["CodeText"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, FontFamily -> 
          "Source Sans Pro", FontSize -> 15, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData["CodeText", "SlideShow"], 
          CellMargins -> {{120, 0}, {0, 15}}, LineSpacing -> {1, 3}, 
          TabSpacings -> {2.5}, FontFamily -> "Source Sans Pro", FontSize -> 
          22, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData[
          "CodeText", "Slideshow Working", StyleDefinitions -> 
           StyleData["CodeText", "SlideShow"]]], 
         Cell[
          StyleData[
          "CodeText", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["CodeText", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "CodeText", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["CodeText", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Note"], 
          CellMargins -> {{
            0.15 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
             FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {10, 10}}, 
          CellOpen -> True, LineSpacing -> {1, 3}, CounterIncrements -> 
          "Note", MenuSortingValue -> 8, FontFamily -> "Source Sans Pro", 
          FontSize -> 12, FontSlant -> "Italic", Background -> 
          GrayLevel[0.85]], 
         Cell[
          StyleData["Note", "SlideShow"], 
          CellMargins -> {{
            0.15 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
             FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {10, 10}}, 
          CellOpen -> False, 
          HyphenationOptions -> {"HyphenationCharacter" -> "-"}, 
          ParagraphSpacing -> {0, 6}, ParagraphIndent -> -10, 
          StyleMenuListing -> None, FontSize -> 18], 
         Cell[
          StyleData[
          "Note", "Slideshow Working", StyleDefinitions -> 
           StyleData["Note"]]], 
         Cell[
          StyleData[
          "Note", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Note", "SlideShow"]]], 
         Cell[
          StyleData[
          "Note", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Note", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Item"], CellDingbat -> 
          StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
            RGBColor[1., 0.42745098039215684`, 0.]], 
          CellMargins -> {{140, 0}, {0, 15}}], 
         Cell[
          StyleData["Item", "SlideShow"], CellMargins -> {{140, 0}, {0, 15}}, 
          CellFrameLabelMargins -> 10, FontSize -> 22], 
         Cell[
          StyleData[
          "Item", "Slideshow Working", StyleDefinitions -> 
           StyleData["Item", "SlideShow"]]], 
         Cell[
          StyleData[
          "Item", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Item", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Item", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Item", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ItemParagraph"], CellMargins -> {{140, 0}, {0, 15}}, 
          StyleKeyMapping -> {"Tab" -> "SubitemParagraph"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          DefaultNewCellStyle -> "Item", MenuSortingValue -> 1600, FontFamily -> 
          Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 14, 
          FontColor -> Dynamic[
            FrontEnd`CurrentValue[{StyleHints, "ColorSet", "Text1"}], 
            None], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ItemParagraph", "SlideShow"], ShowGroupOpener -> False, 
          CellMargins -> {{140, 0}, {0, 15}}, FontSize -> 22], 
         Cell[
          StyleData[
          "ItemParagraph", "Slideshow Working", StyleDefinitions -> 
           StyleData["ItemParagraph", "SlideShow"]]], 
         Cell[
          StyleData[
          "ItemParagraph", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["ItemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ItemParagraph", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["ItemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData["ItemParagraph", "Printout"], 
          CellMargins -> {{140, Inherited}, {Inherited, 0.5 Inherited}}]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subitem"], CellDingbat -> 
          StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
            RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
          CellMargins -> {{160, 0}, {0, 15}}], 
         Cell[
          StyleData["Subitem", "SlideShow"], 
          CellMargins -> {{160, 0}, {0, 15}}, CellFrameLabelMargins -> 10, 
          FontSize -> 22], 
         Cell[
          StyleData[
          "Subitem", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subitem", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subitem", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subitem", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subitem", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subitem", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SubitemParagraph"], CellMargins -> {{160, 0}, {0, 15}}, 
          StyleKeyMapping -> {
           "Tab" -> "SubsubitemParagraph", "Backspace" -> 
            "ItemParagraph", $CellContext`KeyEvent[
             "Tab", $CellContext`Modifiers -> {$CellContext`Shift}] -> 
            "ItemParagraph"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15100}, 
          CellFrameLabelMargins -> 4, DefaultNewCellStyle -> "Subitem", 
          MenuSortingValue -> 1610, FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 13.5,
           FontColor -> Dynamic[
            
            CurrentValue[{
             StyleHints, "ColorSet", 
              "Text1"}]], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["SubitemParagraph", "SlideShow"], 
          CellMargins -> {{160, 0}, {0, 15}}, FontSize -> 22], 
         Cell[
          StyleData[
          "SubitemParagraph", "Slideshow Working", StyleDefinitions -> 
           StyleData["SubitemParagraph", "SlideShow"]]], 
         Cell[
          StyleData[
          "SubitemParagraph", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["SubitemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "SubitemParagraph", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["SubitemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData["SubitemParagraph", "Printout"], 
          CellMargins -> {{160, Inherited}, {Inherited, 0.1 Inherited}}]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ItemNumbered"], CellDingbat -> Cell[
            TextData[{
              CounterBox["ItemNumbered"], "."}], FontWeight -> "Bold"], 
          CellMargins -> {{145, 0}, {0, 15}}, 
          StyleKeyMapping -> {"Tab" -> "SubitemNumbered"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          CellFrameLabelMargins -> 4, CounterIncrements -> "ItemNumbered", 
          CounterAssignments -> {{"SubitemNumbered", 0}, {
            "SubsubitemNumbered", 0}}, MenuSortingValue -> 1630, FontFamily -> 
          "Source Sans Pro", FontSize -> 
          15, $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ItemNumbered", "SlideShow"], 
          CellMargins -> {{145, 0}, {0, 15}}, CellFrameLabelMargins -> 6, 
          FontSize -> 22], 
         Cell[
          StyleData[
          "ItemNumbered", "Slideshow Working", StyleDefinitions -> 
           StyleData["ItemNumbered", "SlideShow"]]], 
         Cell[
          StyleData[
          "ItemNumbered", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["ItemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ItemNumbered", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["ItemNumbered", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SubitemNumbered"], CellDingbat -> Cell[
            TextData[{
              CounterBox["ItemNumbered"], ".", 
              CounterBox["SubitemNumbered"], "."}], FontWeight -> "Bold"], 
          CellMargins -> {{180, 0}, {0, 15}}, 
          StyleKeyMapping -> {
           "Tab" -> "SubsubitemNumbered", "Backspace" -> 
            "ItemNumbered", $CellContext`KeyEvent[
             "Tab", $CellContext`Modifiers -> {$CellContext`Shift}] -> 
            "ItemNumbered"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15100}, 
          CellFrameLabelMargins -> 4, DefaultNewCellStyle -> "Item", 
          CounterIncrements -> "SubitemNumbered", 
          CounterAssignments -> {{"SubsubitemNumbered", 0}}, MenuSortingValue -> 
          1640, FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 
          13.5, $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["SubitemNumbered", "SlideShow"], 
          CellMargins -> {{180, 0}, {0, 15}}, CellFrameLabelMargins -> 6, 
          CellChangeTimes -> {{3.772393378081081*^9, 3.772393382879437*^9}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 22], 
         Cell[
          StyleData[
          "SubitemNumbered", "Slideshow Working", StyleDefinitions -> 
           StyleData["SubitemNumbered", "SlideShow"]]], 
         Cell[
          StyleData[
          "SubitemNumbered", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["SubitemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "SubitemNumbered", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["SubitemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData["SubitemNumbered", "Printout"], 
          CellMargins -> {{180, Inherited}, {Inherited, Inherited}}]}, Open]], 
      Cell[
       StyleData["Graphics"], CellMargins -> {{120, Inherited}, {15, 15}}, 
       CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False, 
       GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
       False, DefaultFormatType -> DefaultOutputFormatType, ContextMenu -> 
       FEPrivate`FrontEndResource["ContextMenus", "Graphics"], 
       AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, 
       LanguageCategory -> "NaturalLanguage", FormatType -> StandardForm, 
       ShowStringCharacters -> False, NumberMarks -> False, CounterIncrements -> 
       "Graphics", ImageMargins -> {{43, Inherited}, {Inherited, 0}}, 
       Arrowheads -> 0.04, Dashing -> None, CapForm -> "Square", 
       JoinForm -> {"Miter", 3.25}, LineColor -> GrayLevel[0], LineOpacity -> 
       1, EdgeColor -> GrayLevel[0], EdgeOpacity -> 1, EdgeThickness -> 
       Medium, EdgeDashing -> None, EdgeCapForm -> "Square", 
       EdgeJoinForm -> {"Miter", 3.25}, FrontFaceColor -> GrayLevel[0], 
       FrontFaceOpacity -> 1, GraphicsColor -> GrayLevel[0], PointSize -> 
       Absolute[3], Thickness -> Medium, Opacity -> 1, DrawEdges -> False, 
       StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 10, 
       FontWeight -> "Plain", FontColor -> GrayLevel[0], FontOpacity -> 
       1, $CellContext`BackFaceColor -> 
       GrayLevel[0], $CellContext`StripStyleOnPaste -> 
       False, $CellContext`BackFaceOpacity -> 1], 
      Cell[
       StyleData["Hyperlink"], FontColor -> 
       RGBColor[0.269993, 0.308507, 0.6]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["KeyEvent"], CellFrame -> {{1, 1}, {1, 1}}, 
          CellFrameMargins -> {{2, 2}, {2, 2}}, CellFrameColor -> 
          GrayLevel[0.8], FontFamily -> "Source Sans Pro", FontColor -> 
          GrayLevel[0.360784], Background -> GrayLevel[0.964706]], 
         Cell[
          StyleData["KeyEvent", "SlideShow"]], 
         Cell[
          StyleData[
          "KeyEvent", "Slideshow Working", StyleDefinitions -> 
           StyleData["KeyEvent", "SlideShow"]]], 
         Cell[
          StyleData[
          "KeyEvent", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["KeyEvent", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "KeyEvent", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["KeyEvent", "Slideshow Working"]]]}, Open]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Input and Output Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Input"], CellMargins -> {{120, 10}, {5, 20}}, 
          StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
          FontSize -> 13], 
         Cell[
          StyleData["Input", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 20}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Input", "Slideshow Working", StyleDefinitions -> 
           StyleData["Input", "SlideShow"]]], 
         Cell[
          StyleData[
          "Input", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Input", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "ExperimentalInput", StyleDefinitions -> StyleData["Input"]], 
          CellFrame -> True, CellMargins -> {{120, 10}, {5, 20}}, 
          StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
          CellFrameColor -> 
          RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               InterpretationBox[
                Cell[
                 BoxData[
                  RotationBox[
                  "Experimental", BoxRotation -> 1.5707963267948966`]], 
                 "Text", LineColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 FrontFaceColor -> 
                 RGBColor[
                  1., 0.592156862745098, 
                   0.10196078431372549`], $CellContext`BackFaceColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 GraphicsColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 FontSize -> 10, FontColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
                TextCell[
                 Rotate["Experimental", 90 Degree], "Text", 10, 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`]]]]], 
             None}, {None, None}}, FontSize -> 13], 
         Cell[
          StyleData["ExperimentalInput", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 20}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "ExperimentalInput", "Slideshow Working", StyleDefinitions -> 
           StyleData["Input", "SlideShow"]]], 
         Cell[
          StyleData[
          "ExperimentalInput", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ExperimentalInput", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["InputOnly"], CellMargins -> {{120, 10}, {5, 10}}, 
          FontSize -> 13], 
         Cell[
          StyleData["InputOnly", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 10}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}], 
         Cell[
          StyleData[
          "InputOnly", "Slideshow Working", StyleDefinitions -> 
           StyleData["InputOnly", "SlideShow"]]], 
         Cell[
          StyleData[
          "InputOnly", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["InputOnly", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "InputOnly", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["InputOnly", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Code"], CellMargins -> {{120, 10}, {5, 10}}], 
         Cell[
          StyleData["Code", "SlideShow"], CellMargins -> {{120, 10}, {5, 10}},
           LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Code", "Slideshow Working", StyleDefinitions -> 
           StyleData["Code", "SlideShow"]]], 
         Cell[
          StyleData[
          "Code", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Code", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Code", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Code", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Output"], CellMargins -> {{120, 10}, {5, 10}}, FontSize -> 
          13], 
         Cell[
          StyleData["Output", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 10}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Output", "Slideshow Working", StyleDefinitions -> 
           StyleData["Output", "SlideShow"]]], 
         Cell[
          StyleData[
          "Output", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Output", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Output", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Output", "Slideshow Working"]]]}, Open]], 
      Cell[
       StyleData["Separator"], CellFrame -> {{False, False}, {1.5, False}}, 
       CellMargins -> {{120, 0}, {0, 0}}, CellFrameColor -> GrayLevel[0.8], 
       MenuSortingValue -> 10000]}, Closed]]}, Visible -> False, 
  FrontEndVersion -> "12.2 for Mac OS X x86 (64-bit) (December 12, 2020)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"d1f1fea9-d342-4e9a-9163-152d52a2d0a9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[614, 23, 136, 2, 5, "SlideShowNavigationBar",ExpressionUUID->"ae861ed8-5fa1-4088-84fd-2651cc7b368a",
   CellTags->"SlideShowHeader"],
  Cell[17125, 312, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"8b4f6692-9aa6-4d88-b922-bfb6817f7bea",
   CellTags->"SlideShowHeader"],
  Cell[18446, 354, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"23087012-ee4a-4f73-aa14-369b6e916e58",
   CellTags->"SlideShowHeader"],
  Cell[19722, 393, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"d8a49b2a-7e7d-4481-b628-87db01f46c0c",
   CellTags->"SlideShowHeader"],
  Cell[21204, 436, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"25d0d358-9498-41e4-85c8-3372e18496f4",
   CellTags->"SlideShowHeader"],
  Cell[25862, 576, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"4975a638-a87a-464b-b866-d5d81754be6a",
   CellTags->"SlideShowHeader"],
  Cell[29824, 706, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"d0f4281c-db8d-42b1-96fa-7fbe40972e0d",
   CellTags->"SlideShowHeader"],
  Cell[36584, 907, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"ccc76b58-b570-43c0-8b14-a9ec75ae4534",
   CellTags->"SlideShowHeader"],
  Cell[39640, 1005, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"2b5368c4-1e42-41b7-910d-8b25856a83a0",
   CellTags->"SlideShowHeader"],
  Cell[40944, 1044, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"6860f40b-352c-47d3-9d50-fa74f6142fc8",
   CellTags->"SlideShowHeader"],
  Cell[43207, 1123, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"4c15f63c-259d-45fe-9b61-30e2842d532f",
   CellTags->"SlideShowHeader"],
  Cell[46110, 1214, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"66418b67-e742-443b-8130-db11265c9a63",
   CellTags->"SlideShowHeader"],
  Cell[48780, 1306, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"3d6a97af-f5d6-472a-a5c7-037210392e27",
   CellTags->"SlideShowHeader"],
  Cell[52683, 1428, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"3fd03f9a-a483-4b9d-8111-313e7c490cd3",
   CellTags->"SlideShowHeader"],
  Cell[54534, 1483, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"a77e6653-5abb-4a0c-bceb-fc005a49a619",
   CellTags->"SlideShowHeader"],
  Cell[55815, 1525, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"41006e41-64e1-4d1e-b84e-60fd20cb4b24",
   CellTags->"SlideShowHeader"],
  Cell[58924, 1625, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"65eacc6d-e609-435c-84bc-e78ea015c2b6",
   CellTags->"SlideShowHeader"],
  Cell[62082, 1729, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b471fa55-4757-4b9c-b999-b9680fe40270",
   CellTags->"SlideShowHeader"],
  Cell[70143, 1980, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"f85737dd-1189-4313-ae83-c413c6f54c08",
   CellTags->"SlideShowHeader"],
  Cell[90389, 2483, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"85c56189-4f08-46c5-9075-a4fa7ea05e48",
   CellTags->"SlideShowHeader"],
  Cell[94716, 2614, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9d8f8c6c-7a25-4184-9811-052fb4a4e7be",
   CellTags->"SlideShowHeader"],
  Cell[100286, 2797, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9a764fa0-6e32-4787-b369-c8a01a386437",
   CellTags->"SlideShowHeader"],
  Cell[104773, 2952, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"291df447-2d4a-4e81-97b3-99963d98119b",
   CellTags->"SlideShowHeader"],
  Cell[108145, 3061, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"94172dd2-2ac7-4c60-9a62-f45c75440363",
   CellTags->"SlideShowHeader"],
  Cell[110960, 3151, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"70fc80e3-2d4d-4903-8855-2e70bfeaeb3a",
   CellTags->"SlideShowHeader"],
  Cell[116014, 3316, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"14322b82-75a3-4201-aef2-678e121b31e8",
   CellTags->"SlideShowHeader"],
  Cell[117766, 3376, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"01e5aac3-942f-401e-90ae-9e9544e28963",
   CellTags->"SlideShowHeader"],
  Cell[120616, 3474, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b2e5fb60-d33d-420b-8df0-3c1b8648303a",
   CellTags->"SlideShowHeader"],
  Cell[124212, 3592, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"7ad5570d-3d39-4ba2-94b3-ffdfbb0651ad",
   CellTags->"SlideShowHeader"],
  Cell[130941, 3808, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9452aa05-632a-4743-b1c1-735a152d0a21",
   CellTags->"SlideShowHeader"],
  Cell[139809, 4108, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"e350a97b-0c2e-43f3-b780-6e9dcba7f299",
   CellTags->"SlideShowHeader"],
  Cell[142749, 4206, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"306f6466-fe2f-4c0a-bf84-c9170bc018b4",
   CellTags->"SlideShowHeader"],
  Cell[143939, 4246, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"c2a86170-7f44-460d-bf40-a4f651125d5d",
   CellTags->"SlideShowHeader"],
  Cell[147850, 4370, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"0992b897-6a93-4375-922a-b5685a15f362",
   CellTags->"SlideShowHeader"],
  Cell[149159, 4410, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"aeef65a3-211c-49a0-89cb-32b751ce0ab5",
   CellTags->"SlideShowHeader"],
  Cell[156791, 4655, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"fc0287d3-bda2-48b5-9c09-dde1fff6e4dc",
   CellTags->"SlideShowHeader"],
  Cell[163881, 4891, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"509e7005-bc68-4ef8-bade-6c9288168e53",
   CellTags->"SlideShowHeader"],
  Cell[168173, 5025, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b51a1512-1cfe-459b-ad01-d5ca8034a168",
   CellTags->"SlideShowHeader"]},
 "Overview"->{
  Cell[17427, 323, 257, 5, 44, "Item",ExpressionUUID->"097bd3e1-6d23-4edc-8cfd-4c7f2a7da2e9",
   CellTags->"Overview"],
  Cell[17687, 330, 207, 4, 44, "Item",ExpressionUUID->"0f855d13-c830-47a0-afa3-cfd01e617810",
   CellTags->"Overview"],
  Cell[17897, 336, 248, 5, 74, "Item",ExpressionUUID->"1b807f4b-4e58-47aa-86f8-e5fc087aa641",
   CellTags->"Overview"],
  Cell[18148, 343, 249, 5, 74, "Item",ExpressionUUID->"1dabf61c-7b2f-4f80-846c-fd0e08c34608",
   CellTags->"Overview"]},
 "Basic Principles"->{
  Cell[18593, 360, 199, 3, 139, "Section",ExpressionUUID->"6547c9cf-3045-4d2d-bd22-c8f5a8f2c939",
   CellTags->"Basic Principles"],
  Cell[18795, 365, 200, 3, 44, "Item",ExpressionUUID->"e0de7613-c62c-4670-a3db-eb6595190f99",
   CellTags->"Basic Principles"],
  Cell[18998, 370, 202, 3, 44, "Item",ExpressionUUID->"eaa8af17-aca1-4abc-a0ba-3ac28dfd24f7",
   CellTags->"Basic Principles"],
  Cell[19203, 375, 217, 5, 44, "Item",ExpressionUUID->"eb003f88-d93b-4f5b-aef6-1d714c55b7b7",
   CellTags->"Basic Principles"],
  Cell[19423, 382, 170, 3, 44, "Item",ExpressionUUID->"aa3888c2-0b37-4c83-97d2-00078fab9706",
   CellTags->"Basic Principles"],
  Cell[19869, 399, 175, 3, 139, "Section",ExpressionUUID->"fe70d8b3-9907-4a67-a216-240b94015c4f",
   CellTags->"Basic Principles"],
  Cell[20047, 404, 395, 8, 76, "Text",ExpressionUUID->"3703421c-b532-4acc-a62f-3c1239c2f75b",
   CellTags->"Basic Principles"],
  Cell[20445, 414, 133, 2, 44, "Item",ExpressionUUID->"539a94a2-87a4-435a-806f-9801745c3b57",
   CellTags->"Basic Principles"],
  Cell[20581, 418, 164, 2, 44, "Item",ExpressionUUID->"8e9a1874-8b3d-4b25-9c75-61080c00e14a",
   CellTags->"Basic Principles"],
  Cell[20748, 422, 164, 2, 44, "Item",ExpressionUUID->"6299fc6f-6631-4ab4-ba8b-f2ca6aad0502",
   CellTags->"Basic Principles"],
  Cell[20915, 426, 160, 2, 44, "Item",ExpressionUUID->"085639ba-9116-4e0a-8d44-ac67dc17c938",
   CellTags->"Basic Principles"],
  Cell[21351, 442, 161, 3, 139, "Section",ExpressionUUID->"73fdea96-3393-4e31-8f5e-2cb29ede9bcf",
   CellTags->"Basic Principles"],
  Cell[21515, 447, 485, 11, 108, "Text",ExpressionUUID->"c75d9116-b3cd-405c-8fb4-0258f9daf94c",
   CellTags->"Basic Principles"],
  Cell[22003, 460, 629, 20, 71, "Program",ExpressionUUID->"f2eabd31-efbd-497c-a3da-1eb1e861777d",
   CellTags->"Basic Principles"],
  Cell[22635, 482, 550, 14, 76, "Text",ExpressionUUID->"e26d03ae-fa78-4d5a-bf43-56ae971e128b",
   CellTags->"Basic Principles"],
  Cell[23188, 498, 380, 10, 44, "CodeText",ExpressionUUID->"d128125a-fe72-46ad-8d8f-e9b165c1f974",
   CellTags->"Basic Principles"],
  Cell[23571, 510, 208, 5, 51, "Input",ExpressionUUID->"abad0e95-f906-41dd-ac7a-2c600efab24a",
   CellTags->"Basic Principles"],
  Cell[23782, 517, 349, 9, 44, "CodeText",ExpressionUUID->"45aeeb14-dcaf-4a49-a1b8-61c865e00f16",
   CellTags->"Basic Principles"],
  Cell[24134, 528, 210, 5, 51, "Input",ExpressionUUID->"bd80c726-e521-4d99-a7ea-ce30c75d5a1b",
   CellTags->"Basic Principles"],
  Cell[24347, 535, 348, 7, 76, "CodeText",ExpressionUUID->"cc88f324-e1f3-43ce-8a21-a8c15d062f60",
   CellTags->"Basic Principles"],
  Cell[24698, 544, 183, 4, 51, "Input",ExpressionUUID->"156f921f-4101-4b5a-84f0-d01c7a0a4ab1",
   CellTags->"Basic Principles"],
  Cell[24884, 550, 207, 5, 51, "Input",ExpressionUUID->"18e5d46d-82b3-496f-85b6-2344a785d1d2",
   CellTags->"Basic Principles"],
  Cell[25094, 557, 639, 11, 172, "Text",ExpressionUUID->"1eaf0896-32e2-41b1-a601-ae90443cb4e2",
   CellTags->"Basic Principles"],
  Cell[26009, 582, 192, 3, 139, "Section",ExpressionUUID->"ab3a095d-8a99-4413-84ac-81f8edc3d8b2",
   CellTags->"Basic Principles"],
  Cell[26204, 587, 318, 6, 76, "Text",ExpressionUUID->"74962d8c-9e9d-47b5-8e23-bb65469a603a",
   CellTags->"Basic Principles"],
  Cell[26525, 595, 430, 12, 44, "CodeText",ExpressionUUID->"abb2323e-ec23-4830-a1a5-daa3b6743099",
   CellTags->"Basic Principles"],
  Cell[26958, 609, 183, 4, 70, "Input",ExpressionUUID->"46322c69-6d21-4ec5-b571-01af6b72c48f",
   CellTags->"Basic Principles"],
  Cell[27144, 615, 159, 2, 44, "Text",ExpressionUUID->"c3137097-0f8e-4a73-9d33-59131c70304c",
   CellTags->"Basic Principles"],
  Cell[27306, 619, 492, 15, 76, "CodeText",ExpressionUUID->"1c58e23f-b997-4fac-b052-2895cd9ba2e1",
   CellTags->"Basic Principles"],
  Cell[27801, 636, 138, 3, 51, "Input",ExpressionUUID->"1b326d72-cf7c-459c-be61-f52359edb6a0",
   CellTags->"Basic Principles"],
  Cell[27942, 641, 156, 4, 51, "Input",ExpressionUUID->"b3869cba-db7e-4ed2-bf16-7a73b08be8e4",
   CellTags->"Basic Principles"],
  Cell[28101, 647, 780, 23, 76, "CodeText",ExpressionUUID->"de1296f9-f8ba-44af-8545-12b168aa68bd",
   CellTags->"Basic Principles"],
  Cell[28884, 672, 198, 5, 51, "Input",ExpressionUUID->"12ce20db-9833-4445-8821-f25df8fd9ef2",
   CellTags->"Basic Principles"],
  Cell[29085, 679, 143, 3, 51, "Input",ExpressionUUID->"2c3f790f-8956-43bf-9f1b-df0fa3b8f659",
   CellTags->"Basic Principles"],
  Cell[29231, 684, 271, 8, 44, "CodeText",ExpressionUUID->"528afe8e-6258-4f43-bc4a-a71c7b10ced4",
   CellTags->"Basic Principles"],
  Cell[29505, 694, 190, 4, 51, "Input",ExpressionUUID->"5124396f-1498-4a6c-a2bf-2e169e02aca0",
   CellTags->"Basic Principles"],
  Cell[29971, 712, 203, 3, 139, "Section",ExpressionUUID->"49480b99-919f-4b89-b487-5e04c06395e7",
   CellTags->"Basic Principles"],
  Cell[30177, 717, 243, 5, 44, "Text",ExpressionUUID->"534276ea-671a-4685-ad9c-bc2ad98164fc",
   CellTags->"Basic Principles"],
  Cell[32819, 792, 419, 10, 51, "Input",ExpressionUUID->"3ba21e57-14e6-4ba9-a7b7-53c95be5027c",
   CellTags->"Basic Principles"],
  Cell[33241, 804, 387, 9, 55, "Input",ExpressionUUID->"c275feeb-dbf2-45a9-b85d-dc33a139297d",
   CellTags->"Basic Principles"],
  Cell[33897, 822, 435, 12, 44, "CodeText",ExpressionUUID->"aa099a4f-edcb-469a-9536-d60959e3a93f",
   CellTags->"Basic Principles"],
  Cell[34335, 836, 211, 5, 51, "Input",ExpressionUUID->"704662ef-4422-493a-9b64-82ebf718a593",
   CellTags->"Basic Principles"],
  Cell[34549, 843, 397, 11, 44, "CodeText",ExpressionUUID->"a7795a4c-0979-4692-b680-61c9032f54e7",
   CellTags->"Basic Principles"],
  Cell[34949, 856, 216, 4, 51, "Input",ExpressionUUID->"920e97eb-577e-4a07-96b8-50d58c728728",
   CellTags->"Basic Principles"],
  Cell[35168, 862, 403, 11, 44, "CodeText",ExpressionUUID->"25e12dbc-a29b-443a-b6fe-9c218828e0d6",
   CellTags->"Basic Principles"],
  Cell[35574, 875, 259, 5, 51, "Input",ExpressionUUID->"6a7bac3a-3dd6-49a9-a7cf-1e9aa4c4fe4d",
   CellTags->"Basic Principles"],
  Cell[35836, 882, 284, 7, 44, "CodeText",ExpressionUUID->"a066bd8d-2a16-41bf-b2f8-2460ae3794f3",
   CellTags->"Basic Principles"],
  Cell[36123, 891, 146, 3, 51, "Input",ExpressionUUID->"3103cece-50f8-4412-ad41-4af3c0560084",
   CellTags->"Basic Principles"],
  Cell[36731, 913, 193, 3, 139, "Section",ExpressionUUID->"bb5aebd8-a366-47f8-9466-34ab08dd7ebf",
   CellTags->"Basic Principles"],
  Cell[36927, 918, 454, 8, 108, "Text",ExpressionUUID->"cc30ff61-d4c6-40ac-8cfb-aa9d0d7eebf8",
   CellTags->"Basic Principles"],
  Cell[37384, 928, 752, 23, 108, "CodeText",ExpressionUUID->"e630a18f-a374-4bff-8b03-e82d2823a7d3",
   CellTags->"Basic Principles"],
  Cell[38139, 953, 153, 3, 51, "Input",ExpressionUUID->"c0d2c50d-8ee4-448d-a454-a4edfd6a8355",
   CellTags->"Basic Principles"],
  Cell[38295, 958, 153, 3, 51, "Input",ExpressionUUID->"f254ffe8-174c-4cfe-b213-b2a5ba97bd7a",
   CellTags->"Basic Principles"],
  Cell[38451, 963, 152, 3, 51, "Input",ExpressionUUID->"b576c128-e001-4a9d-81fe-4c4d9f1dca7e",
   CellTags->"Basic Principles"],
  Cell[38606, 968, 265, 7, 44, "CodeText",ExpressionUUID->"ed42ad3a-0279-4e0d-a330-38e34eb756c9",
   CellTags->"Basic Principles"],
  Cell[38874, 977, 117, 2, 51, "Input",ExpressionUUID->"9c3f4b6b-6cdc-4e83-90ac-9fe70510f60c",
   CellTags->"Basic Principles"],
  Cell[38994, 981, 300, 10, 44, "CodeText",ExpressionUUID->"3745f6cd-dbf3-4e2e-b98c-1203244d7df3",
   CellTags->"Basic Principles"],
  Cell[39297, 993, 214, 4, 51, "Input",ExpressionUUID->"a0478e87-3108-4790-895f-59c7a03d0648",
   CellTags->"Basic Principles"],
  Cell[39787, 1011, 197, 3, 139, "Section",ExpressionUUID->"15152988-f1af-4ee5-9042-51f8815c2313",
   CellTags->"Basic Principles"],
  Cell[39987, 1016, 241, 5, 76, "Text",ExpressionUUID->"5b61d40c-71cd-4900-997c-eb9e168addd9",
   CellTags->"Basic Principles"],
  Cell[40231, 1023, 263, 5, 76, "Text",ExpressionUUID->"c58d2df0-0a78-4016-bcd7-261910f18618",
   CellTags->"Basic Principles"],
  Cell[40497, 1030, 318, 6, 108, "Text",ExpressionUUID->"ba02f09d-c65b-47a9-9872-c7153934fb8a",
   CellTags->"Basic Principles"],
  Cell[41091, 1050, 195, 3, 139, "Section",ExpressionUUID->"6c5e3794-47da-4730-8194-6fa0fec5a0ba",
   CellTags->"Basic Principles"],
  Cell[41289, 1055, 237, 5, 76, "Text",ExpressionUUID->"70d95ebf-f182-4d78-b7a3-73bf9edd8ea6",
   CellTags->"Basic Principles"],
  Cell[41529, 1062, 526, 17, 44, "CodeText",ExpressionUUID->"fe3b4507-cc08-485f-a84e-67b5471fd095",
   CellTags->"Basic Principles"],
  Cell[42058, 1081, 182, 4, 51, "Input",ExpressionUUID->"c446788b-23e6-4312-b092-df1e2c57d6d8",
   CellTags->"Basic Principles"],
  Cell[42243, 1087, 835, 28, 44, "Text",ExpressionUUID->"4133367e-6a05-4077-b24e-5baf00028dad",
   CellTags->"Basic Principles"],
  Cell[43354, 1129, 200, 3, 139, "Section",ExpressionUUID->"880c13d1-a84e-4d88-9b81-b97b99fcaf40",
   CellTags->"Basic Principles"],
  Cell[43557, 1134, 296, 6, 108, "Text",ExpressionUUID->"071c0a32-af43-4c84-a53b-c6e9c1e17616",
   CellTags->"Basic Principles"],
  Cell[43856, 1142, 625, 17, 76, "CodeText",ExpressionUUID->"f4a154ce-fa04-4b74-a70e-91a3ccd756eb",
   CellTags->"Basic Principles"],
  Cell[44484, 1161, 330, 9, 51, "Input",ExpressionUUID->"d38e8e87-a148-4b43-97a3-d662aec13816",
   CellTags->"Basic Principles"],
  Cell[44817, 1172, 412, 11, 44, "Text",ExpressionUUID->"d4d087ef-ec4e-4225-b4e7-c779db09cd5a",
   CellTags->"Basic Principles"],
  Cell[45703, 1199, 278, 7, 51, "Input",ExpressionUUID->"64c62ce2-2f7f-4eac-8800-18952b37fa6c",
   CellTags->"Basic Principles"],
  Cell[46257, 1220, 199, 3, 139, "Section",ExpressionUUID->"878195e8-414f-4cf3-ad4e-0df29dae0406",
   CellTags->"Basic Principles"],
  Cell[46459, 1225, 202, 7, 44, "Text",ExpressionUUID->"4f6b3056-5db3-4592-8f8f-59f44d39638c",
   CellTags->"Basic Principles"],
  Cell[46664, 1234, 926, 30, 76, "Text",ExpressionUUID->"4954ea25-961d-46e1-99e9-ff177b7100a0",
   CellTags->"Basic Principles"],
  Cell[47593, 1266, 710, 22, 76, "CodeText",ExpressionUUID->"f6900c73-ccdf-4bb2-9877-0036a0fc7933",
   CellTags->"Basic Principles"],
  Cell[48306, 1290, 174, 3, 51, "Input",ExpressionUUID->"de7113b3-a86d-4a2d-8e0c-d86c60009a7d",
   CellTags->"Basic Principles"],
  Cell[48483, 1295, 168, 3, 51, "Input",ExpressionUUID->"d83c2188-0595-4863-8960-37323b99d19e",
   CellTags->"Basic Principles"],
  Cell[48927, 1312, 209, 3, 230, "Section",ExpressionUUID->"7bb0db35-475a-487a-b7d2-deed95d8abc2",
   CellTags->"Basic Principles"],
  Cell[49139, 1317, 449, 11, 76, "Text",ExpressionUUID->"ee9f2bb0-3d85-429b-abd1-c05c77ac832b",
   CellTags->"Basic Principles"],
  Cell[49591, 1330, 267, 6, 44, "CodeText",ExpressionUUID->"904b0b20-31df-480a-acd6-d62eaf5ee3a7",
   CellTags->"Basic Principles"],
  Cell[49861, 1338, 311, 8, 51, "Input",ExpressionUUID->"87db0276-7c48-4dd3-b14f-b5e3c731393d",
   CellTags->"Basic Principles"],
  Cell[50175, 1348, 543, 16, 76, "CodeText",ExpressionUUID->"fe931ba0-d77d-4d04-ad26-0990cc0a156d",
   CellTags->"Basic Principles"],
  Cell[50721, 1366, 435, 12, 51, "Input",ExpressionUUID->"b037e2c5-8750-4f0b-a1ea-bb74a1495221",
   CellTags->"Basic Principles"],
  Cell[51159, 1380, 297, 6, 76, "Text",ExpressionUUID->"14e791ad-9fcf-46e0-aec6-0f91719b3f0d",
   CellTags->"Basic Principles"],
  Cell[51459, 1388, 615, 17, 76, "CodeText",ExpressionUUID->"0425955e-5f16-4aa1-8065-ebf1e7217397",
   CellTags->"Basic Principles"],
  Cell[52077, 1407, 477, 13, 51, "Input",ExpressionUUID->"86c79fc6-674c-42ef-b1e3-a636fc691f1b",
   CellTags->"Basic Principles"],
  Cell[52830, 1434, 226, 4, 139, "Section",ExpressionUUID->"d46f7570-0999-48ec-93fe-b420fb4aab36",
   CellTags->"Basic Principles"],
  Cell[53059, 1440, 347, 7, 76, "Text",ExpressionUUID->"fc6a0588-b6df-4fca-83c8-eace8a3fbad9",
   CellTags->"Basic Principles"],
  Cell[53409, 1449, 133, 2, 44, "Item",ExpressionUUID->"0ddedcfc-6864-4ecf-88f2-93735d4e9480",
   CellTags->"Basic Principles"],
  Cell[53545, 1453, 164, 2, 44, "Item",ExpressionUUID->"042ec9e7-2136-4d01-9a65-4cd39f22f659",
   CellTags->"Basic Principles"],
  Cell[53712, 1457, 164, 2, 44, "Item",ExpressionUUID->"3e392e29-9830-40f5-9bf4-ce897998d2fe",
   CellTags->"Basic Principles"],
  Cell[53879, 1461, 160, 2, 44, "Item",ExpressionUUID->"ebc169b3-54f4-4c80-8242-84f0f72746c0",
   CellTags->"Basic Principles"],
  Cell[54042, 1465, 363, 10, 44, "Text",ExpressionUUID->"bdbfb77b-3514-423d-8421-82b450ffb46e",
   CellTags->"Basic Principles"]},
 "Functional Programming"->{
  Cell[54681, 1489, 214, 4, 230, "Section",ExpressionUUID->"b09e7296-e615-4cc4-baad-66e7cd9bbc54",
   CellTags->"Functional Programming"],
  Cell[54898, 1495, 193, 4, 44, "Item",ExpressionUUID->"b12e7cf7-dfd1-4706-a7c4-ab93f7537498",
   CellTags->"Functional Programming"],
  Cell[55094, 1501, 195, 4, 44, "Item",ExpressionUUID->"0c5a3466-566f-4f50-bf24-e48e92616123",
   CellTags->"Functional Programming"],
  Cell[55292, 1507, 202, 4, 44, "Item",ExpressionUUID->"1bdc2516-0979-445b-965a-ee1bfaafeb08",
   CellTags->"Functional Programming"],
  Cell[55497, 1513, 189, 4, 44, "Item",ExpressionUUID->"9b4343b6-5fb9-454d-9c0a-24760e5e6eed",
   CellTags->"Functional Programming"],
  Cell[55962, 1531, 198, 4, 139, "Section",ExpressionUUID->"ec82a80f-3b02-4881-b22b-addca8ab30ad",
   CellTags->"Functional Programming"],
  Cell[56163, 1537, 497, 13, 76, "Text",ExpressionUUID->"e9297ed1-feac-459d-bcda-789a748439a9",
   CellTags->"Functional Programming"],
  Cell[56663, 1552, 260, 6, 44, "CodeText",ExpressionUUID->"5d5d7094-2f4a-4e1d-9fce-a7ac17ecfa03",
   CellTags->"Functional Programming"],
  Cell[56926, 1560, 212, 5, 51, "Input",ExpressionUUID->"4c83b34c-a3ac-4544-820c-f5eab569337a",
   CellTags->"Functional Programming"],
  Cell[57141, 1567, 297, 7, 76, "CodeText",ExpressionUUID->"249c4a60-99ed-4cc8-9417-7b241119d93b",
   CellTags->"Functional Programming"],
  Cell[57441, 1576, 242, 6, 51, "Input",ExpressionUUID->"2b2e0fd4-28e7-4b86-9137-8bf03a477ce2",
   CellTags->"Functional Programming"],
  Cell[57686, 1584, 298, 7, 76, "CodeText",ExpressionUUID->"7ca094f2-7cdc-40c7-9a18-2aceee519864",
   CellTags->"Functional Programming"],
  Cell[57987, 1593, 219, 5, 51, "Input",ExpressionUUID->"080ebd5d-4d17-42d0-9024-936f4ae6f5a2",
   CellTags->"Functional Programming"],
  Cell[58209, 1600, 162, 3, 51, "Input",ExpressionUUID->"7f1bde0a-edfc-4955-aead-4131dc15d486",
   CellTags->"Functional Programming"],
  Cell[58374, 1605, 244, 7, 44, "CodeText",ExpressionUUID->"752f6528-0a1f-4045-8668-606acd1c1e81",
   CellTags->"Functional Programming"],
  Cell[58621, 1614, 174, 3, 51, "Input",ExpressionUUID->"3de4f171-c29b-4895-bdf1-b32476d9e05e",
   CellTags->"Functional Programming"],
  Cell[59071, 1631, 208, 4, 139, "Section",ExpressionUUID->"cb16aea4-f1ab-436f-98c4-d896c48cf91c",
   CellTags->"Functional Programming"],
  Cell[59282, 1637, 308, 9, 76, "Text",ExpressionUUID->"e447b1cc-40ee-4bc1-b77f-80d9a5a1d58c",
   CellTags->"Functional Programming"],
  Cell[59593, 1648, 273, 7, 44, "CodeText",ExpressionUUID->"4e032594-c106-40c0-ba43-29402ab13e5c",
   CellTags->"Functional Programming"],
  Cell[59869, 1657, 176, 4, 51, "Input",ExpressionUUID->"51bb4670-a0aa-476f-acf3-05a6c510e62c",
   CellTags->"Functional Programming"],
  Cell[60048, 1663, 257, 6, 44, "CodeText",ExpressionUUID->"92ee22bf-5e11-45cd-9421-5697713c153d",
   CellTags->"Functional Programming"],
  Cell[60308, 1671, 217, 5, 51, "Input",ExpressionUUID->"7b234eba-1905-4b61-b0f2-d2bc385442b2",
   CellTags->"Functional Programming"],
  Cell[60528, 1678, 324, 7, 76, "CodeText",ExpressionUUID->"925e42c2-fb53-452a-9548-cc7b6e80f7f3",
   CellTags->"Functional Programming"],
  Cell[60855, 1687, 230, 6, 51, "Input",ExpressionUUID->"571f54aa-a621-4533-8959-99a3c4a1ccd5",
   CellTags->"Functional Programming"],
  Cell[61088, 1695, 247, 6, 51, "Input",ExpressionUUID->"48d0bc60-e8fd-41ff-8676-a83b8566314f",
   CellTags->"Functional Programming"],
  Cell[61338, 1703, 321, 8, 44, "CodeText",ExpressionUUID->"a3daa1cf-c401-4b23-927c-419a8b27d34f",
   CellTags->"Functional Programming"],
  Cell[61662, 1713, 291, 8, 51, "Input",ExpressionUUID->"265cd74c-3374-4776-ac20-c966164b22f9",
   CellTags->"Functional Programming"],
  Cell[62229, 1735, 167, 4, 139, "Section",ExpressionUUID->"2dbead05-5141-4a0a-b85c-3aa88883ac20",
   CellTags->"Functional Programming"],
  Cell[62399, 1741, 281, 9, 44, "Text",ExpressionUUID->"c644a6a8-5197-48bf-a517-2c47bf8cf030",
   CellTags->"Functional Programming"],
  Cell[62683, 1752, 209, 4, 44, "Item",ExpressionUUID->"053eab3a-d939-4e36-aa4d-589dc554d209",
   CellTags->"Functional Programming"],
  Cell[64097, 1795, 248, 7, 44, "Item",ExpressionUUID->"9eca06bd-2eaf-4aa9-837c-a3f0054f021c",
   CellTags->"Functional Programming"],
  Cell[65683, 1844, 226, 6, 44, "Item",ExpressionUUID->"f386ae2a-fccd-4c59-a360-61fb79de1341",
   CellTags->"Functional Programming"],
  Cell[67264, 1892, 672, 22, 44, "Item",ExpressionUUID->"48d1acfe-d58f-404c-8dd7-2cc9875c51fb",
   CellTags->"Functional Programming"],
  Cell[70290, 1986, 206, 4, 139, "Section",ExpressionUUID->"abc8fe01-4c43-4d5c-b8e0-e3b65d44290e",
   CellTags->"Functional Programming"],
  Cell[70499, 1992, 505, 17, 76, "Text",ExpressionUUID->"fad42bfe-133b-4188-9953-1a816db4dda5",
   CellTags->"Functional Programming"],
  Cell[71007, 2011, 258, 6, 44, "CodeText",ExpressionUUID->"71d0bce7-d9c4-42ab-82d6-6c980984c5e2",
   CellTags->"Functional Programming"],
  Cell[71268, 2019, 310, 9, 51, "Input",ExpressionUUID->"4c7c338b-631e-49dd-8185-db81f0e33250",
   CellTags->"Functional Programming"],
  Cell[71581, 2030, 426, 12, 44, "CodeText",ExpressionUUID->"a5bb1f3c-5b14-4d06-b941-10949b03533e",
   CellTags->"Functional Programming"],
  Cell[72010, 2044, 490, 14, 55, "Input",ExpressionUUID->"ebd5b2cd-0372-4603-972a-46a2b248cff2",
   CellTags->"Functional Programming"],
  Cell[72503, 2060, 426, 11, 76, "Text",ExpressionUUID->"9ec04d7c-f2bc-4444-9b5a-e457a0f7c230",
   CellTags->"Functional Programming"],
  Cell[72932, 2073, 414, 12, 44, "CodeText",ExpressionUUID->"356bd304-ec8f-4e3c-ab20-8faaaa52db7c",
   CellTags->"Functional Programming"],
  Cell[73349, 2087, 587, 17, 84, "Input",ExpressionUUID->"e701e483-51f6-4bc0-bfc9-c27569220ec5",
   CellTags->"Functional Programming"],
  Cell[73939, 2106, 540, 14, 76, "CodeText",ExpressionUUID->"acdc4f2f-9dd4-4578-b4a3-c16109767776",
   CellTags->"Functional Programming"],
  Cell[88732, 2426, 488, 15, 80, "Input",ExpressionUUID->"71f04d3f-aedb-4dee-80d8-8af51f20aca9",
   CellTags->"Functional Programming"],
  Cell[89223, 2443, 256, 6, 44, "CodeText",ExpressionUUID->"54fab873-392b-417a-a05b-c71dda0dd405",
   CellTags->"Functional Programming"],
  Cell[89482, 2451, 195, 4, 51, "Input",ExpressionUUID->"4fe80fe7-f845-42db-ad1c-c620f685ea4b",
   CellTags->"Functional Programming"],
  Cell[89680, 2457, 311, 8, 44, "CodeText",ExpressionUUID->"66a85f7e-ac70-456e-8b9e-c805c4c6e52d",
   CellTags->"Functional Programming"],
  Cell[89994, 2467, 266, 8, 55, "Input",ExpressionUUID->"bb7fd396-5b50-4b6b-86ad-0832aea3daa6",
   CellTags->"Functional Programming"],
  Cell[90536, 2489, 226, 4, 230, "Section",ExpressionUUID->"dec9e1b5-ec06-42a6-8558-31f5bad23a7a",
   CellTags->"Functional Programming"],
  Cell[90765, 2495, 282, 7, 76, "Text",ExpressionUUID->"c0c5aeb3-bb23-4701-904c-cd144dfa8e60",
   CellTags->"Functional Programming"],
  Cell[91050, 2504, 510, 14, 76, "CodeText",ExpressionUUID->"160daa40-5a33-47c9-8ba4-68e66c95b1a1",
   CellTags->"Functional Programming"],
  Cell[91563, 2520, 438, 13, 71, "Input",ExpressionUUID->"65efe0dc-76df-4417-b84f-5ce170b15bb3",
   CellTags->"Functional Programming"],
  Cell[92858, 2557, 242, 4, 44, "CodeText",ExpressionUUID->"aa4470cf-51d6-4658-90a5-0a5ff2ef280d",
   CellTags->"Functional Programming"],
  Cell[93103, 2563, 548, 15, 116, "Input",ExpressionUUID->"3294d1eb-251f-4e91-9e9c-f5e5a899dbaf",
   CellTags->"Functional Programming"],
  Cell[93654, 2580, 265, 6, 44, "CodeText",ExpressionUUID->"b8b05ca0-c545-4d52-931c-c32a4d97293a",
   CellTags->"Functional Programming"],
  Cell[93922, 2588, 665, 18, 116, "Input",ExpressionUUID->"df334a64-923e-4e6d-98c9-fa3c326bc2fe",
   CellTags->"Functional Programming"],
  Cell[94863, 2620, 242, 4, 321, "Section",ExpressionUUID->"c69febd3-839e-4120-bc63-f8841bb498b3",
   CellTags->"Functional Programming"],
  Cell[95108, 2626, 619, 18, 76, "Text",ExpressionUUID->"02c127ca-c2f6-40fb-9ee5-deb90a6266ff",
   CellTags->"Functional Programming"],
  Cell[96697, 2681, 835, 24, 76, "CodeText",ExpressionUUID->"2f168c63-f203-4bc7-ab74-c38bf19dacea",
   CellTags->"Functional Programming"],
  Cell[97535, 2707, 793, 23, 91, "Input",ExpressionUUID->"d032f0b2-5228-4968-9a4f-1d6e89cb2cd4",
   CellTags->"Functional Programming"],
  Cell[98331, 2732, 941, 29, 108, "CodeText",ExpressionUUID->"ba8f06d9-ad7c-4bbe-92fd-68fa547fa8dc",
   CellTags->"Functional Programming"],
  Cell[100433, 2803, 204, 4, 139, "Section",ExpressionUUID->"1b421f36-022d-436a-8abe-1c12b83436d3",
   CellTags->"Functional Programming"],
  Cell[100640, 2809, 188, 5, 44, "Text",ExpressionUUID->"1fa60dd4-099d-43a4-b2fe-a46e9f27a9d4",
   CellTags->"Functional Programming"],
  Cell[100831, 2816, 158, 3, 44, "Item",ExpressionUUID->"b560e226-06d6-40cc-9d18-ce92b1313c4f",
   CellTags->"Functional Programming"],
  Cell[100992, 2821, 202, 6, 44, "Item",ExpressionUUID->"64902565-9d72-49eb-8ccf-eceffedfe802",
   CellTags->"Functional Programming"],
  Cell[101197, 2829, 153, 3, 44, "Item",ExpressionUUID->"183a71f9-9e0f-43b9-a457-0f2da58a6a32",
   CellTags->"Functional Programming"],
  Cell[101353, 2834, 442, 14, 44, "CodeText",ExpressionUUID->"98f69873-80a6-46ab-a194-38493b2d43a6",
   CellTags->"Functional Programming"],
  Cell[101798, 2850, 342, 10, 51, "Input",ExpressionUUID->"50b7efa7-1825-477e-b9c0-b3b62d442eef",
   CellTags->"Functional Programming"],
  Cell[102143, 2862, 499, 14, 76, "CodeText",ExpressionUUID->"45846869-3736-4aed-8404-c708d27eecdb",
   CellTags->"Functional Programming"],
  Cell[102645, 2878, 376, 11, 51, "Input",ExpressionUUID->"af36f5fe-0b98-4168-b6ca-b84366e5be28",
   CellTags->"Functional Programming"],
  Cell[103024, 2891, 446, 14, 44, "CodeText",ExpressionUUID->"dbe165d8-7f45-49eb-9a5a-691f730a5f14",
   CellTags->"Functional Programming"],
  Cell[103473, 2907, 344, 10, 51, "Input",ExpressionUUID->"db07c2ed-cd8f-4213-ba2b-34e3f2213fa6",
   CellTags->"Functional Programming"],
  Cell[103820, 2919, 443, 12, 76, "CodeText",ExpressionUUID->"1de0deeb-5838-4bf9-8291-d629bc508b32",
   CellTags->"Functional Programming"],
  Cell[104266, 2933, 378, 11, 51, "Input",ExpressionUUID->"5226a759-f971-4d30-84d8-a6e434c5e0dd",
   CellTags->"Functional Programming"],
  Cell[104920, 2958, 221, 4, 230, "Section",ExpressionUUID->"95a2e919-4e8f-43a0-8f53-5fadfce8ec95",
   CellTags->"Functional Programming"],
  Cell[105144, 2964, 309, 7, 76, "Text",ExpressionUUID->"ef5f8f6b-f561-453a-931a-0067c12185b4",
   CellTags->"Functional Programming"],
  Cell[105456, 2973, 268, 6, 44, "CodeText",ExpressionUUID->"ac8c9149-a5c0-4c9f-92d6-cd3a7cb45742",
   CellTags->"Functional Programming"],
  Cell[105727, 2981, 367, 11, 51, "Input",ExpressionUUID->"fbddccac-da6d-4ee7-868f-3f06eb26b6f2",
   CellTags->"Functional Programming"],
  Cell[106097, 2994, 260, 6, 44, "CodeText",ExpressionUUID->"18a0e812-bba9-4a68-bb26-e75cbcaa2c32",
   CellTags->"Functional Programming"],
  Cell[106360, 3002, 469, 14, 51, "Input",ExpressionUUID->"9cc6b9cd-11c3-429b-a590-02561728bee3",
   CellTags->"Functional Programming"],
  Cell[106832, 3018, 470, 13, 76, "CodeText",ExpressionUUID->"206c5fca-2e88-48bc-b054-f8772bf9966c",
   CellTags->"Functional Programming"],
  Cell[107305, 3033, 193, 4, 51, "Input",ExpressionUUID->"78c99de4-5abb-457f-9226-4eb486a68db0",
   CellTags->"Functional Programming"],
  Cell[107501, 3039, 225, 4, 44, "CodeText",ExpressionUUID->"b67b493c-0a05-4a13-9aac-96c9dfd81ae0",
   CellTags->"Functional Programming"],
  Cell[107729, 3045, 287, 8, 51, "Input",ExpressionUUID->"7745d7a5-6582-4b9b-80e5-1ca5608e7b23",
   CellTags->"Functional Programming"],
  Cell[108292, 3067, 226, 4, 230, "Section",ExpressionUUID->"ef880ebd-7375-4b8f-8efd-daa4e1a71f80",
   CellTags->"Functional Programming"],
  Cell[108521, 3073, 264, 6, 44, "CodeText",ExpressionUUID->"f1ef7572-d5d8-4af7-bf3b-124580719f25",
   CellTags->"Functional Programming"],
  Cell[108788, 3081, 367, 11, 51, "Input",ExpressionUUID->"15e5b918-226f-4294-83b3-51e84ce3c034",
   CellTags->"Functional Programming"],
  Cell[109158, 3094, 255, 6, 44, "CodeText",ExpressionUUID->"ca4cd071-4b38-4090-b536-ecc7bfdfc0bb",
   CellTags->"Functional Programming"],
  Cell[109416, 3102, 439, 13, 51, "Input",ExpressionUUID->"9c514f68-db6e-49b7-8f4e-4bb56d4ae86c",
   CellTags->"Functional Programming"],
  Cell[109858, 3117, 239, 4, 44, "CodeText",ExpressionUUID->"37ed0ee5-f0cc-4df6-a5f6-5a22cf422f31",
   CellTags->"Functional Programming"],
  Cell[110100, 3123, 227, 5, 51, "Input",ExpressionUUID->"12cf3087-a902-4931-b780-8b8884ebddc9",
   CellTags->"Functional Programming"],
  Cell[110330, 3130, 224, 4, 44, "CodeText",ExpressionUUID->"9f47479e-f1d5-4959-a7e9-4afdeb30d961",
   CellTags->"Functional Programming"],
  Cell[110557, 3136, 274, 7, 51, "Input",ExpressionUUID->"e417f4bb-ceee-4701-a820-4342ef1d9e03",
   CellTags->"Functional Programming"],
  Cell[111107, 3157, 232, 4, 230, "Section",ExpressionUUID->"326cb7e0-35b8-444c-b274-5476959e5d0f",
   CellTags->"Functional Programming"],
  Cell[111342, 3163, 610, 18, 76, "CodeText",ExpressionUUID->"982e0a1d-0ee9-4b90-b4f4-522224a2f7ec",
   CellTags->"Functional Programming"],
  Cell[111955, 3183, 336, 8, 51, "Input",ExpressionUUID->"deabd01e-054c-4339-8287-a9cabc4ca54c",
   CellTags->"Functional Programming"],
  Cell[112294, 3193, 366, 10, 51, "Input",ExpressionUUID->"a2ecd791-f8e3-4303-9e58-7bfd52faa315",
   CellTags->"Functional Programming"],
  Cell[112663, 3205, 261, 6, 44, "CodeText",ExpressionUUID->"f59f9edc-c48e-499b-9d90-8a7920ca0f2a",
   CellTags->"Functional Programming"],
  Cell[112927, 3213, 259, 6, 51, "Input",ExpressionUUID->"40f4c13e-f90b-4b28-ac05-9db0d42dedef",
   CellTags->"Functional Programming"],
  Cell[113189, 3221, 405, 12, 44, "CodeText",ExpressionUUID->"5e10c3c0-38cd-46f9-813a-70c12b2f9277",
   CellTags->"Functional Programming"],
  Cell[113597, 3235, 237, 5, 51, "Input",ExpressionUUID->"0f406cdf-a622-4678-bcdb-1ce4f4807359",
   CellTags->"Functional Programming"],
  Cell[113837, 3242, 386, 12, 44, "CodeText",ExpressionUUID->"efa9d418-4e9b-4704-a58c-39edeed00daf",
   CellTags->"Functional Programming"],
  Cell[114226, 3256, 236, 5, 51, "Input",ExpressionUUID->"3ad91556-62ee-49b9-8e91-d7dd1aef4d79",
   CellTags->"Functional Programming"],
  Cell[115058, 3282, 588, 19, 76, "CodeText",ExpressionUUID->"a26d88e4-2b16-41ec-aca0-1d4bcec2e1f5",
   CellTags->"Functional Programming"],
  Cell[115649, 3303, 236, 5, 51, "Input",ExpressionUUID->"75f1b418-b643-4b81-90dc-bc0122fa0ad6",
   CellTags->"Functional Programming"]},
 "Options and Messages"->{
  Cell[116161, 3322, 210, 4, 230, "Section",ExpressionUUID->"bcbe3f4d-86d1-4b44-8141-420cdc2c161e",
   CellTags->"Options and Messages"],
  Cell[116374, 3328, 192, 4, 44, "Item",ExpressionUUID->"2dde8249-225d-426c-afde-9f632cbfd4ff",
   CellTags->"Options and Messages"],
  Cell[116569, 3334, 525, 16, 44, "Item",ExpressionUUID->"7f21b060-d692-4f85-83bf-84098beebafd",
   CellTags->"Options and Messages"],
  Cell[117097, 3352, 185, 4, 44, "Item",ExpressionUUID->"87c579f7-2b82-4108-ac44-74c9bec3fa28",
   CellTags->"Options and Messages"],
  Cell[117285, 3358, 180, 4, 44, "Item",ExpressionUUID->"521e249a-7eb3-477a-97d1-810bbbd8151f",
   CellTags->"Options and Messages"],
  Cell[117468, 3364, 169, 4, 44, "Item",ExpressionUUID->"76c05132-266c-48f1-8cf8-776bce6153d0",
   CellTags->"Options and Messages"],
  Cell[117913, 3382, 163, 4, 139, "Section",ExpressionUUID->"e67a6a1e-16a3-4ae4-85e5-ec5168c5a725",
   CellTags->"Options and Messages"],
  Cell[118079, 3388, 382, 8, 108, "Text",ExpressionUUID->"887b61a1-9bd8-45f2-a709-fde0c36bc6a9",
   CellTags->"Options and Messages"],
  Cell[118464, 3398, 761, 25, 76, "CodeText",ExpressionUUID->"30858268-c3c1-49d7-a3d2-3a445dc69d84",
   CellTags->"Options and Messages"],
  Cell[119228, 3425, 184, 5, 51, "Input",ExpressionUUID->"c533d533-3c99-470f-bd2d-8e6b8263ce53",
   CellTags->"Options and Messages"],
  Cell[119415, 3432, 627, 19, 76, "CodeText",ExpressionUUID->"d81090cb-3c03-4df1-bf6f-8f463d5ad6a7",
   CellTags->"Options and Messages"],
  Cell[120045, 3453, 442, 13, 62, "Input",ExpressionUUID->"b67a9d88-2b6d-45d7-8961-bfc14338c4ca",
   CellTags->"Options and Messages"],
  Cell[120763, 3480, 196, 4, 139, "Section",ExpressionUUID->"7e6ac3ea-9d52-408f-9e89-2d8815ab7903",
   CellTags->"Options and Messages"],
  Cell[120962, 3486, 288, 7, 76, "Text",ExpressionUUID->"6a003f37-a49a-4a9d-a920-01302dff83b3",
   CellTags->"Options and Messages"],
  Cell[121253, 3495, 383, 12, 76, "CodeText",ExpressionUUID->"e2235856-e391-43fb-9d62-1f6d9726d4d4",
   CellTags->"Options and Messages"],
  Cell[121639, 3509, 311, 8, 51, "Input",ExpressionUUID->"64ceef36-f9fc-4463-8b52-efdd27240f20",
   CellTags->"Options and Messages"],
  Cell[121953, 3519, 650, 20, 76, "CodeText",ExpressionUUID->"4941d61a-5279-4406-86ba-c36997e357af",
   CellTags->"Options and Messages"],
  Cell[122606, 3541, 410, 11, 80, "Input",ExpressionUUID->"2bb9decd-b572-49fb-822b-f511d0c7ab9f",
   CellTags->"Options and Messages"],
  Cell[123019, 3554, 317, 8, 44, "CodeText",ExpressionUUID->"94625aae-aa1b-48c8-ba8b-5136dd712955",
   CellTags->"Options and Messages"],
  Cell[123339, 3564, 167, 3, 51, "Input",ExpressionUUID->"1a0e47e9-172f-466d-81d7-1604cc9390c4",
   CellTags->"Options and Messages"],
  Cell[123509, 3569, 292, 7, 76, "CodeText",ExpressionUUID->"2e46edcb-11e9-4866-a7ec-a1dd48189cc2",
   CellTags->"Options and Messages"],
  Cell[123804, 3578, 279, 6, 51, "Input",ExpressionUUID->"d16896a8-dd54-4a72-952e-928dbea7e45e",
   CellTags->"Options and Messages"],
  Cell[124359, 3598, 228, 5, 139, "Section",ExpressionUUID->"63df9f1b-3491-4993-ae06-64d4aa4a2f2f",
   CellTags->"Options and Messages"],
  Cell[124590, 3605, 360, 10, 76, "Text",ExpressionUUID->"c1c9fce2-d8f1-49d5-8a1b-c37d18b4850e",
   CellTags->"Options and Messages"],
  Cell[124953, 3617, 852, 24, 140, "CodeText",ExpressionUUID->"47669f05-a3c2-445d-84ea-fc8eebafe370",
   CellTags->"Options and Messages"],
  Cell[125808, 3643, 380, 11, 51, "Input",ExpressionUUID->"fd285d65-f769-43a0-b706-1309dd638ede",
   CellTags->"Options and Messages"],
  Cell[126191, 3656, 655, 20, 84, "Input",ExpressionUUID->"09be267f-ff76-42c5-a97d-c003d39feb35",
   CellTags->"Options and Messages"],
  Cell[126849, 3678, 498, 14, 76, "CodeText",ExpressionUUID->"fb4039e1-8e70-4095-8a18-7937dff62562",
   CellTags->"Options and Messages"],
  Cell[127350, 3694, 271, 7, 51, "Input",ExpressionUUID->"b98528c0-3595-401c-9a57-c58517ee60bc",
   CellTags->"Options and Messages"],
  Cell[127624, 3703, 484, 14, 44, "CodeText",ExpressionUUID->"21996930-ab0a-4e53-8227-2d01d7cdc051",
   CellTags->"Options and Messages"],
  Cell[128111, 3719, 177, 3, 51, "Input",ExpressionUUID->"bdca0c09-d991-477a-8262-910bbf95c6db",
   CellTags->"Options and Messages"],
  Cell[128291, 3724, 391, 11, 76, "CodeText",ExpressionUUID->"301965d9-0c78-406f-ba65-82e89002d551",
   CellTags->"Options and Messages"],
  Cell[128941, 3745, 505, 13, 84, "Input",ExpressionUUID->"159b5036-055a-4fd9-a001-63842d4f265e",
   CellTags->"Options and Messages"],
  Cell[129449, 3760, 320, 9, 44, "CodeText",ExpressionUUID->"60dcda93-0b39-4dee-b503-d5639803b999",
   CellTags->"Options and Messages"],
  Cell[129772, 3771, 178, 3, 51, "Input",ExpressionUUID->"02bce44e-138b-445d-a136-02f48a4ae37c",
   CellTags->"Options and Messages"],
  Cell[129953, 3776, 322, 9, 44, "CodeText",ExpressionUUID->"db9b5ff6-53c4-45b7-bcb7-7842dfbfd5cf",
   CellTags->"Options and Messages"],
  Cell[130278, 3787, 239, 5, 51, "Input",ExpressionUUID->"6bb0888b-c0fd-43f7-aa0c-278dda8be763",
   CellTags->"Options and Messages"],
  Cell[130520, 3794, 292, 6, 51, "Input",ExpressionUUID->"bc5ef6f0-c670-43d1-a8b7-b70732362b17",
   CellTags->"Options and Messages"],
  Cell[131088, 3814, 200, 4, 139, "Section",ExpressionUUID->"fbb1ad78-6977-4a76-973e-095f64bf522b",
   CellTags->"Options and Messages"],
  Cell[131291, 3820, 437, 13, 76, "Text",ExpressionUUID->"043fecba-cfa1-41c2-9406-ef46d3925590",
   CellTags->"Options and Messages"],
  Cell[132210, 3851, 230, 5, 51, "Input",ExpressionUUID->"0b570194-8a57-4149-9e96-dd0c911cc704",
   CellTags->"Options and Messages"],
  Cell[132443, 3858, 450, 11, 108, "Text",ExpressionUUID->"d5a4f09a-4e96-456a-ad91-fe089edfc01a",
   CellTags->"Options and Messages"],
  Cell[132896, 3871, 325, 9, 44, "CodeText",ExpressionUUID->"691d3750-496c-4fac-9133-8cf0091f6863",
   CellTags->"Options and Messages"],
  Cell[133224, 3882, 361, 12, 51, "Input",ExpressionUUID->"16a68b53-41b0-4aad-a05b-23ace5a39965",
   CellTags->"Options and Messages"],
  Cell[133588, 3896, 636, 21, 84, "Input",ExpressionUUID->"8de96331-636e-49dc-9960-80e65e94a2fd",
   CellTags->"Options and Messages"],
  Cell[134461, 3927, 486, 14, 84, "Input",ExpressionUUID->"88a5b31a-593d-40ba-9a44-1d256b1b4f1b",
   CellTags->"Options and Messages"],
  Cell[135631, 3965, 165, 4, 51, "Input",ExpressionUUID->"377c2f23-a073-4eab-b8f4-c41a29db881c",
   CellTags->"Options and Messages"],
  Cell[135799, 3971, 501, 14, 76, "CodeText",ExpressionUUID->"f8596d62-f721-4a48-aefd-80087409983c",
   CellTags->"Options and Messages"],
  Cell[136303, 3987, 279, 8, 84, "Input",ExpressionUUID->"8997969f-ed14-430e-9022-65ae8c922507",
   CellTags->"Options and Messages"],
  Cell[136585, 3997, 690, 23, 76, "CodeText",ExpressionUUID->"966339b0-397a-4e14-b8ef-4c60becce0dd",
   CellTags->"Options and Messages"],
  Cell[137512, 4030, 940, 25, 244, "Input",ExpressionUUID->"fbad8590-f709-4bab-ba79-4d0086c4ca07",
   CellTags->"Options and Messages"],
  Cell[138823, 4071, 143, 4, 51, "Input",ExpressionUUID->"256619b0-f31a-4c32-b130-83c03868105f",
   CellTags->"Options and Messages"],
  Cell[139297, 4088, 158, 4, 51, "Input",ExpressionUUID->"e75f81ce-abd2-4fe5-83f0-75c01cf4e1f1",
   CellTags->"Options and Messages"],
  Cell[139458, 4094, 222, 6, 51, "Input",ExpressionUUID->"5f05d720-bdf9-4bb9-a27e-2947e8ff0d8e",
   CellTags->"Options and Messages"],
  Cell[139956, 4114, 194, 4, 139, "Section",ExpressionUUID->"30ed55c0-1955-49aa-995d-4b9d2df4e4c6",
   CellTags->"Options and Messages"],
  Cell[140153, 4120, 326, 9, 76, "Text",ExpressionUUID->"26609986-f9ac-45cf-a7f7-5726a2dd461a",
   CellTags->"Options and Messages"],
  Cell[140482, 4131, 396, 12, 44, "CodeText",ExpressionUUID->"3a176cfe-6853-405b-8808-b4240406abca",
   CellTags->"Options and Messages"],
  Cell[140881, 4145, 150, 4, 51, "Input",ExpressionUUID->"9b850fc1-7dae-42b8-94c5-5b5572a0e8eb",
   CellTags->"Options and Messages"],
  Cell[141034, 4151, 288, 7, 76, "CodeText",ExpressionUUID->"6e47781c-82cd-4a35-93e0-7fd265b1ba14",
   CellTags->"Options and Messages"],
  Cell[141325, 4160, 395, 9, 148, "Input",ExpressionUUID->"9152b1bc-6f9b-455b-8d48-8c53bf01b37d",
   CellTags->"Options and Messages"],
  Cell[141723, 4171, 392, 9, 76, "CodeText",ExpressionUUID->"fd325e3f-42c1-4544-84df-1eefcc00bf4a",
   CellTags->"Options and Messages"],
  Cell[142118, 4182, 148, 4, 51, "Input",ExpressionUUID->"a87361aa-a135-4352-9efc-5dade47227b8",
   CellTags->"Options and Messages"],
  Cell[142269, 4188, 351, 10, 76, "Text",ExpressionUUID->"b12f2afa-fd66-45bd-9d75-4489a6dcd4b2",
   CellTags->"Options and Messages"]},
 "Efficiency"->{
  Cell[142896, 4212, 112, 2, 139, "Section",ExpressionUUID->"6e521c99-f826-4a9d-a86c-4765ee0992fe",
   CellTags->"Efficiency"],
  Cell[143011, 4216, 273, 6, 76, "Text",ExpressionUUID->"998d59af-1e24-4220-b275-45fd119be89c",
   CellTags->"Efficiency"],
  Cell[143287, 4224, 171, 3, 44, "Item",ExpressionUUID->"011d68cc-57ca-41b3-9f7d-fc7ec961ec66",
   CellTags->"Efficiency"],
  Cell[143461, 4229, 233, 6, 44, "Item",ExpressionUUID->"38e49911-fb53-4537-8438-ad6b86826a0c",
   CellTags->"Efficiency"],
  Cell[143697, 4237, 193, 3, 44, "Item",ExpressionUUID->"fcece4fa-841a-4323-ad35-650a9dcbeddc",
   CellTags->"Efficiency"],
  Cell[144086, 4252, 192, 3, 139, "Section",ExpressionUUID->"59adc369-0772-4a3a-a9a9-dd2721e4c92f",
   CellTags->"Efficiency"],
  Cell[144281, 4257, 217, 5, 76, "Text",ExpressionUUID->"51fceb91-2493-437a-ba99-c96f6dbd7c17",
   CellTags->"Efficiency"],
  Cell[144501, 4264, 256, 6, 44, "Text",ExpressionUUID->"bef57ffd-a484-4b6f-95d9-df50f28c85fc",
   CellTags->"Efficiency"],
  Cell[145193, 4286, 520, 14, 116, "Input",ExpressionUUID->"ed328a36-eced-4b3b-82cd-373e2668c767",
   CellTags->"Efficiency"],
  Cell[145716, 4302, 244, 5, 44, "CodeText",ExpressionUUID->"e33a8589-69bf-4529-922b-ab1b6138c20d",
   CellTags->"Efficiency"],
  Cell[145963, 4309, 602, 17, 148, "Input",ExpressionUUID->"387be70f-cacc-4cab-b08f-8f2379e7a8d9",
   CellTags->"Efficiency"],
  Cell[146568, 4328, 587, 17, 76, "CodeText",ExpressionUUID->"bbacb5f9-f620-4c45-b3b9-237d8fc8ba80",
   CellTags->"Efficiency"],
  Cell[147158, 4347, 563, 15, 116, "Input",ExpressionUUID->"3758c398-811d-421b-ae35-4e04112677f0",
   CellTags->"Efficiency"],
  Cell[147997, 4376, 191, 3, 139, "Section",ExpressionUUID->"be212968-1029-4dd7-809f-e39bd18a375b",
   CellTags->"Efficiency"],
  Cell[148191, 4381, 325, 6, 76, "Text",ExpressionUUID->"fb61cf92-2ee0-4f87-bc62-55e9a6c04263",
   CellTags->"Efficiency"],
  Cell[148519, 4389, 278, 6, 74, "Item",ExpressionUUID->"62031956-01a6-4328-9c5b-f661bcee61d2",
   CellTags->"Efficiency"],
  Cell[148800, 4397, 230, 5, 74, "Item",ExpressionUUID->"2fd88d41-90a5-4545-af56-d407bb918b71",
   CellTags->"Efficiency"],
  Cell[149306, 4416, 198, 3, 139, "Section",ExpressionUUID->"1e101bd1-5f3d-46bb-b32a-fb59a03c4f34",
   CellTags->"Efficiency"],
  Cell[149507, 4421, 174, 4, 44, "Text",ExpressionUUID->"bb1f4fea-1174-4cfa-8a0a-d2b7ebe8c2f7",
   CellTags->"Efficiency"],
  Cell[149684, 4427, 183, 3, 44, "CodeText",ExpressionUUID->"ca46c4f2-f048-4f6d-ad9a-3d398072d866",
   CellTags->"Efficiency"],
  Cell[149870, 4432, 347, 10, 141, "Input",ExpressionUUID->"fced44d0-723d-48a0-9efe-cc91f023f111",
   CellTags->"Efficiency"],
  Cell[150220, 4444, 494, 12, 76, "CodeText",ExpressionUUID->"95470c33-a5d5-4852-974e-2fa80d9e4b7b",
   CellTags->"Efficiency"],
  Cell[150717, 4458, 529, 15, 84, "Input",ExpressionUUID->"41b150a5-9e05-4567-994e-4ad09426ec4f",
   CellTags->"Efficiency"],
  Cell[151249, 4475, 652, 20, 76, "CodeText",ExpressionUUID->"72b48b07-4068-4d40-a02c-ed943d3f2b95",
   CellTags->"Efficiency"],
  Cell[151904, 4497, 342, 9, 84, "Input",ExpressionUUID->"a6527030-1d49-4b5a-9dd9-58829e2ff8b9",
   CellTags->"Efficiency"],
  Cell[152249, 4508, 240, 5, 44, "CodeText",ExpressionUUID->"6c95430c-841a-44ce-8a0e-2404b3878fad",
   CellTags->"Efficiency"],
  Cell[152492, 4515, 442, 13, 55, "Input",ExpressionUUID->"b243b77c-0649-457b-82ac-ad31ce3fbe85",
   CellTags->"Efficiency"],
  Cell[152937, 4530, 517, 14, 116, "Input",ExpressionUUID->"4853b433-108a-494a-ad72-20373de806f8",
   CellTags->"Efficiency"],
  Cell[153457, 4546, 309, 7, 116, "Input",ExpressionUUID->"225aa32d-ff30-4ac8-90ee-fd8cfcb8f3a4",
   CellTags->"Efficiency"],
  Cell[153769, 4555, 362, 9, 116, "Input",ExpressionUUID->"1794b9e3-a02f-496a-9f99-b7f4703d5b06",
   CellTags->"Efficiency"],
  Cell[154134, 4566, 245, 5, 76, "Text",ExpressionUUID->"225930b4-d12c-4a01-9038-9a21a2ba53e7",
   CellTags->"Efficiency"],
  Cell[154382, 4573, 553, 16, 76, "CodeText",ExpressionUUID->"a9318dcb-f81d-45ca-9b95-65b7b6bc6b19",
   CellTags->"Efficiency"],
  Cell[154938, 4591, 1230, 38, 215, "Input",ExpressionUUID->"f14a0097-7ad5-49c3-be66-9537489d0a72",
   CellTags->"Efficiency"],
  Cell[156171, 4631, 292, 9, 44, "CodeText",ExpressionUUID->"d22b3db8-e3c0-42a5-a31c-2367e81a0a43",
   CellTags->"Efficiency"],
  Cell[156466, 4642, 196, 5, 51, "Input",ExpressionUUID->"b3007fc9-a540-4b73-81c9-acf00d9fecd0",
   CellTags->"Efficiency"],
  Cell[156938, 4661, 189, 3, 139, "Section",ExpressionUUID->"e973b2a7-7f05-4bc8-83b2-e62733d96c28",
   CellTags->"Efficiency"],
  Cell[164028, 4897, 200, 3, 230, "Section",ExpressionUUID->"1d59e946-ff2f-4333-8e6d-7de93497e5ab",
   CellTags->"Efficiency"],
  Cell[164231, 4902, 253, 5, 76, "Text",ExpressionUUID->"58ffce00-be9e-4756-a750-f5ecd521d4a4",
   CellTags->"Efficiency"],
  Cell[164487, 4909, 354, 7, 76, "CodeText",ExpressionUUID->"58bf75d3-6003-4153-b10f-f75089c29940",
   CellTags->"Efficiency"],
  Cell[164844, 4918, 423, 14, 80, "Input",ExpressionUUID->"ec26320e-fa6a-4446-8eb8-030219ebe67a",
   CellTags->"Efficiency"],
  Cell[165270, 4934, 316, 7, 76, "CodeText",ExpressionUUID->"7cfc1ba2-41ed-44d7-a451-aa6d8b985a81",
   CellTags->"Efficiency"],
  Cell[165589, 4943, 167, 4, 51, "Input",ExpressionUUID->"f3595f94-949c-4dcc-9613-0f6572aa1f40",
   CellTags->"Efficiency"],
  Cell[165759, 4949, 305, 6, 76, "CodeText",ExpressionUUID->"858862ff-e552-4ce7-a8d3-8bc17910a797",
   CellTags->"Efficiency"],
  Cell[166067, 4957, 339, 11, 80, "Input",ExpressionUUID->"8bbe6bcc-03af-40dc-9be6-3651f8297191",
   CellTags->"Efficiency"],
  Cell[166409, 4970, 295, 6, 76, "CodeText",ExpressionUUID->"3549491b-464c-4d57-a6f5-6a0167fbfddf",
   CellTags->"Efficiency"],
  Cell[166707, 4978, 477, 15, 80, "Input",ExpressionUUID->"5c97c333-ab10-42fb-a67e-56a63b2fe315",
   CellTags->"Efficiency"],
  Cell[167187, 4995, 390, 12, 80, "Input",ExpressionUUID->"f92d123d-0c36-4b4f-9d4b-ddd4b3e7a206",
   CellTags->"Efficiency"],
  Cell[167580, 5009, 464, 8, 172, "Text",ExpressionUUID->"2ff42857-a728-4e0e-aef2-ad468a7e00f6",
   CellTags->"Efficiency"]},
 "Exercises"->{
  Cell[168320, 5031, 169, 2, 139, "Section",ExpressionUUID->"233bed71-f56f-473c-84fb-1eb6f734c6d0",
   CounterAssignments->{{"Chapter", 6}, {"ExerciseNumber", 0}},
   CellTags->"Exercises"],
  Cell[168514, 5037, 264, 9, 91, "Subsection",ExpressionUUID->"460bdb6e-0fd1-4cb9-bde2-2d2a0367fbc3",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[168781, 5048, 248, 8, 44, "Text",ExpressionUUID->"1fb825ae-8d94-48fc-af39-4bb5a9a0d80e",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[169032, 5058, 547, 15, 76, "Text",ExpressionUUID->"51409615-827f-4428-bdf5-36f69866b51d",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[169582, 5075, 929, 30, 76, "CodeText",ExpressionUUID->"1c52a726-d0c2-4c11-9842-bd0501cd831a",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[170514, 5107, 198, 5, 51, "Input",ExpressionUUID->"ff60fee8-1749-4ecf-a615-eb6509bbfb43",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[170715, 5114, 535, 14, 76, "CodeText",ExpressionUUID->"b872ed02-f773-496a-96de-577dad826497",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[171253, 5130, 197, 5, 51, "Input",ExpressionUUID->"05d379c3-5c24-4e16-9162-24932558873c",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[173781, 5200, 197, 5, 51, "Input",ExpressionUUID->"d49d1da0-7dff-4118-b9b7-206f28782956",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[177405, 5293, 242, 7, 51, "Input",ExpressionUUID->"22c187cc-dc62-4032-9077-85699b0c7fcc",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[179808, 5363, 224, 6, 51, "Input",ExpressionUUID->"c77188c0-bc74-497c-8d5d-a20fd150c8a6",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[182501, 5436, 308, 9, 51, "Input",ExpressionUUID->"bca72515-f547-4f30-aaf2-7c344b05c9e8",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[185709, 5523, 256, 7, 51, "Input",ExpressionUUID->"f85ebfbe-8c2d-4786-8e77-93df3fe8fb7d",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[188727, 5605, 254, 7, 51, "Input",ExpressionUUID->"63330ea9-e177-45bf-928b-4252ed4a7926",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[191713, 5685, 264, 8, 51, "Input",ExpressionUUID->"f33d5bbf-0d63-4dc3-994c-e3cfb6b6628b",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[194655, 5765, 325, 10, 44, "Item",ExpressionUUID->"5f9d6f25-dbfe-43c3-9425-91f157214ee5",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[196005, 5809, 257, 10, 55, "Subsection",ExpressionUUID->"b712b4ff-9d23-4f89-a469-9cac59d58555",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[196265, 5821, 253, 5, 44, "CodeText",ExpressionUUID->"437ba67d-3025-4903-8c62-952addce6cc0",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[196521, 5828, 703, 14, 148, "Input",ExpressionUUID->"5756fb38-4bec-4581-b191-ded845b04af8",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[197227, 5844, 466, 13, 76, "CodeText",ExpressionUUID->"26231579-2e4a-4ff8-afa2-4db05c10830b",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[197696, 5859, 240, 7, 51, "Input",ExpressionUUID->"eaaf2900-18e9-4dde-afc7-c2897fc9f851",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[197939, 5868, 636, 20, 76, "Text",ExpressionUUID->"8a5eab9d-ecbf-4f8b-9f56-75bf8b97fa23",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[204364, 6037, 249, 9, 55, "Subsection",ExpressionUUID->"926afb49-14fc-4d47-b80a-2f7ac7e43627",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[204616, 6048, 300, 8, 44, "CodeText",ExpressionUUID->"f9757f34-2830-4418-b975-0908aecc4963",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[204919, 6058, 597, 17, 51, "Input",ExpressionUUID->"316b6933-fd5e-40e6-bdca-bf67ad8df361",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[205519, 6077, 538, 15, 76, "CodeText",ExpressionUUID->"3b1b9855-5679-4257-9f3d-3b3ec497801f",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206060, 6094, 223, 6, 51, "Input",ExpressionUUID->"57928568-12e9-47dd-b66a-38004f32eb0a",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206286, 6102, 353, 8, 44, "CodeText",ExpressionUUID->"ca47bb0a-9166-408c-b121-12822b600f48",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206642, 6112, 320, 9, 51, "Input",ExpressionUUID->"00fef218-f164-49e6-9a73-dfdff11417b0",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206965, 6123, 878, 27, 108, "Text",ExpressionUUID->"f9ad8e47-4806-47fd-b943-e7c3842cc95c",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[214501, 6332, 265, 10, 55, "Subsection",ExpressionUUID->"f1d64c1e-e6d0-4efe-bdbd-01dd16df59f6",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[214769, 6344, 579, 16, 76, "Text",ExpressionUUID->"99b1acf6-d278-430c-8150-28139eb928ac",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[215351, 6362, 692, 22, 55, "Input",ExpressionUUID->"9f2b47f4-8a54-45b1-bea5-55cd33732c58",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[216046, 6386, 274, 7, 44, "CodeText",ExpressionUUID->"167ac253-0aa8-4e53-9000-9f93074d2013",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[216323, 6395, 280, 9, 51, "Input",ExpressionUUID->"e4eb675d-64d2-47dc-b345-aa009ea56c30",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[216606, 6406, 447, 13, 44, "CodeText",ExpressionUUID->"5157c807-eb38-4576-a8b9-2f6c0b3ed796",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[217056, 6421, 284, 9, 51, "Input",ExpressionUUID->"6f68e9d6-ee25-480d-a7a4-8310e41acb82",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[217343, 6432, 246, 7, 44, "Text",ExpressionUUID->"f6c965eb-d689-4185-8472-72e165b88c48",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[221029, 6534, 266, 10, 55, "Subsection",ExpressionUUID->"3125c2b6-952a-48c4-9c7f-c9ab79c8d1d2",
   CellTags->{"Exercises", "Working with Pure Functions"}],
  Cell[221298, 6546, 784, 23, 44, "CodeText",ExpressionUUID->"958eb617-a2ca-4951-b41a-846c5a0c559b",
   CellTags->{"Exercises", "Working with Pure Functions"}],
  Cell[222085, 6571, 728, 23, 84, "Input",ExpressionUUID->"674157f7-71dd-4932-b7c6-46acd35b9ccf",
   CellTags->{"Exercises", "Working with Pure Functions"}],
  Cell[222816, 6596, 1108, 34, 140, "Text",ExpressionUUID->"a42b7b9a-d260-4cde-b36c-18404b7c288a",
   CellTags->{"Exercises", "Working with Pure Functions"}],
  Cell[226117, 6692, 246, 10, 55, "Subsection",ExpressionUUID->"fe501e8c-3c59-4573-bf52-cd8bf3b0d279",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[226366, 6704, 310, 8, 76, "CodeText",ExpressionUUID->"5cef4eb4-37f8-47f1-b849-4dca12480f13",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[226679, 6714, 765, 27, 51, "Input",ExpressionUUID->"9cc0dfe3-8361-43b5-83c2-1ebf2e61a888",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[227447, 6743, 476, 16, 51, "Input",ExpressionUUID->"5c460460-b35a-4a31-bad1-e07c3c5c6933",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[227926, 6761, 497, 13, 108, "Text",ExpressionUUID->"0c86265d-b1ca-462e-a7b5-2baa6a88e6d5",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[235303, 6952, 291, 8, 76, "Text",ExpressionUUID->"acdc5970-14a3-4bdd-a2bc-5825b83d5b51",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[238171, 7033, 483, 13, 76, "Text",ExpressionUUID->"0b24a10e-c37c-40c8-aae2-68ed1c209d73",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[247697, 7263, 260, 10, 55, "Subsection",ExpressionUUID->"a8298410-ac83-4bea-80c2-b53be21467ed",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[247960, 7275, 650, 17, 76, "CodeText",ExpressionUUID->"60728bbe-bc67-46e9-a5b6-c51e5a18e371",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[248613, 7294, 354, 10, 51, "Input",ExpressionUUID->"1592c10d-88a1-473b-96e7-70911128ffc6",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[248970, 7306, 254, 8, 51, "Input",ExpressionUUID->"75fdb892-d060-4f25-9425-e3babaef0964",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[249227, 7316, 704, 19, 108, "CodeText",ExpressionUUID->"409bd70f-cfca-4c7b-abba-78e7bbb40544",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[249934, 7337, 835, 28, 116, "Input",ExpressionUUID->"bea88754-e0c2-4e47-a6e4-a7d6f62b412b",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[250772, 7367, 177, 5, 51, "Input",ExpressionUUID->"bb92feda-61a9-4609-8b50-55a3b243654d",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[250952, 7374, 465, 11, 108, "CodeText",ExpressionUUID->"af78f7da-9972-450d-8163-f5dfddeb4c99",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[251420, 7387, 323, 11, 51, "Input",ExpressionUUID->"92ce9980-632a-4a73-a288-64e72d5695c3",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[251746, 7400, 299, 8, 76, "Text",ExpressionUUID->"2d09590b-56c5-4371-97ac-57e6b5198e77",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[259052, 7606, 250, 10, 55, "Subsection",ExpressionUUID->"ed63be7b-1fd2-432e-930f-d4cd6cb9c426",
   CellTags->{"Exercises", "Matrix Manipulation"}],
  Cell[270336, 7926, 262, 10, 55, "Subsection",ExpressionUUID->"8553669d-b0a3-44e9-bb23-bc36eefced95",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[270601, 7938, 319, 9, 44, "CodeText",ExpressionUUID->"d089fa6a-0bb8-4134-991a-647e48b6443c",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[270923, 7949, 1061, 31, 116, "Input",ExpressionUUID->"2224577e-6477-4cfb-a312-4834d52ebdb9",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[271987, 7982, 344, 10, 76, "Text",ExpressionUUID->"ea3cb7ab-c42d-4c21-b76b-729ae37069d8",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[272334, 7994, 216, 5, 44, "CodeText",ExpressionUUID->"e961c4d2-78ef-4190-80f8-68af5568214f",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[272553, 8001, 390, 10, 75, "Output",ExpressionUUID->"791cb4f3-d384-46fa-b707-e325a66a65fe",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[278033, 8151, 236, 9, 55, "Subsection",ExpressionUUID->"94629abf-332e-4c9b-9ef7-2d3889897f39",
   CellTags->{"Exercises", "Using Options"}],
  Cell[278272, 8162, 562, 14, 76, "Text",ExpressionUUID->"70e86e89-163d-423c-a81c-9ca180d11d9a",
   CellTags->{"Exercises", "Using Options"}],
  Cell[278837, 8178, 1592, 48, 110, "Input",ExpressionUUID->"f4543c79-7fde-486d-8f70-f00cf2594d99",
   CellTags->{"Exercises", "Using Options"}],
  Cell[280432, 8228, 988, 29, 108, "Text",ExpressionUUID->"17d23993-9a47-4624-9f87-3a14ab914d71",
   CellTags->{"Exercises", "Using Options"}],
  Cell[281423, 8259, 920, 28, 76, "Text",ExpressionUUID->"9c0f44c9-f2a0-4c3f-ab52-a871536541af",
   CellTags->{"Exercises", "Using Options"}],
  Cell[287369, 8421, 254, 10, 55, "Subsection",ExpressionUUID->"a8e4eab8-b200-4fe5-9147-c5a6ea7ad691",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[287626, 8433, 1181, 35, 108, "Text",ExpressionUUID->"e9923155-679b-480e-a022-d52985fb0469",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[291798, 8556, 683, 18, 108, "CodeText",ExpressionUUID->"94336364-b7ae-4fee-94e3-fa1ce540f89e",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[292484, 8576, 215, 5, 51, "Input",ExpressionUUID->"ebf19626-5603-458c-b9fd-19b6e0943c7f",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[292702, 8583, 714, 20, 51, "Input",ExpressionUUID->"a98155cc-d02c-4fc6-b85e-a02d84467ed8",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[293419, 8605, 204, 4, 51, "Input",ExpressionUUID->"f75433f9-adb8-4dda-abd3-0d1c62b631b2",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[293660, 8614, 246, 10, 55, "Subsection",ExpressionUUID->"76451480-ceb1-4e8b-ba49-d715a9d3b470",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[293909, 8626, 231, 5, 44, "CodeText",ExpressionUUID->"29dd218e-f426-4165-8d1a-bb6a6dacf25e",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[294143, 8633, 265, 7, 51, "Input",ExpressionUUID->"a8335970-4637-4d17-94a5-0fcda0723d04",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[294411, 8642, 364, 11, 51, "Input",ExpressionUUID->"efb20d9f-fb80-48bb-8beb-3e359757ec78",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[294778, 8655, 397, 12, 44, "Text",ExpressionUUID->"210fe2c1-bdda-47ad-bcd5-cb56ac43eeb3",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[300978, 8832, 248, 10, 55, "Subsection",ExpressionUUID->"b8d4fced-23f5-41a2-8500-0f8e21e58b33",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[301229, 8844, 419, 10, 76, "CodeText",ExpressionUUID->"1a539bc8-c4bd-45cd-9616-0d132660d0cb",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[301651, 8856, 1303, 37, 212, "Input",ExpressionUUID->"975a2eaa-cc13-4cb6-863b-809be5871647",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[302957, 8895, 318, 9, 44, "CodeText",ExpressionUUID->"376ab4bb-8856-4740-a4db-0a362a58af3d",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[303278, 8906, 264, 8, 51, "Input",ExpressionUUID->"fd14fa4b-a110-4747-84c5-09bc98413691",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[303545, 8916, 351, 8, 76, "Text",ExpressionUUID->"c2d85e5c-a5d2-4038-8634-1f4532894c75",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[303899, 8926, 287, 9, 76, "Text",ExpressionUUID->"8c8e861b-fd77-46af-ae29-2d939805da54",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[307477, 9021, 285, 7, 76, "Text",ExpressionUUID->"58c55bfb-5858-439c-acda-5d124c978fef",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[307765, 9030, 368, 10, 108, "Text",ExpressionUUID->"25d753e4-bdcd-4dad-97b3-e87840186c64",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[314279, 9214, 272, 10, 55, "Subsection",ExpressionUUID->"e9287866-d904-4dea-ac35-00ae7de10fb1",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[315835, 9266, 351, 9, 44, "CodeText",ExpressionUUID->"74ad5368-e7b3-424f-888d-0b627ecde99a",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[317189, 9314, 597, 18, 76, "Text",ExpressionUUID->"33da3aba-92c2-45ba-afea-995e29673dfc",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[322863, 9470, 523, 18, 44, "Text",ExpressionUUID->"cfa4444d-8d48-4df6-b04d-72d155d8dd9e",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[326415, 9570, 302, 8, 76, "Text",ExpressionUUID->"c969266b-0b14-410f-a666-a1269df368af",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[334086, 9763, 246, 9, 55, "Subsection",ExpressionUUID->"9fcbfffa-fda4-450c-80ed-405d260e88c0",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[334335, 9774, 744, 21, 76, "CodeText",ExpressionUUID->"5bb5e424-209d-40f0-95a0-d5c6668df205",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[335082, 9797, 973, 32, 84, "Input",ExpressionUUID->"3db5033c-60a9-4778-8f4d-73f01604e35b",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[336058, 9831, 250, 6, 51, "Input",ExpressionUUID->"90e340bd-588e-4e57-9a06-ccc11b6ccec3",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[336311, 9839, 498, 14, 76, "Text",ExpressionUUID->"ec7433c4-66da-418e-afa8-c17d433f67c7",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[340810, 9969, 234, 9, 55, "Subsection",ExpressionUUID->"2ffdba79-c8fc-4f0c-9a5f-78348c17556d",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[341047, 9980, 314, 9, 44, "Text",ExpressionUUID->"85f09082-0221-4492-8023-6b3cef8ec26b",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[341364, 9991, 471, 13, 76, "CodeText",ExpressionUUID->"95217338-b8a0-4d60-9119-8a50f050acb0",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[341838, 10006, 455, 15, 51, "Input",ExpressionUUID->"d6277317-53ca-4191-863f-01615141bcbe",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[342296, 10023, 491, 16, 51, "Input",ExpressionUUID->"fb04d708-5e82-485c-a9c2-c49e19f4507f",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[342790, 10041, 388, 12, 44, "Text",ExpressionUUID->"5f9c8fcd-9e0f-481b-a4c3-d5676e195e4f",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[343181, 10055, 794, 25, 76, "Text",ExpressionUUID->"fd0a772d-63ba-4121-ad9d-ee4ce3cfa1ef",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[343978, 10082, 720, 23, 76, "Text",ExpressionUUID->"d1a0ca50-6ae2-4260-9e79-c89ef7dfaa3e",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[344701, 10107, 1172, 37, 108, "Text",ExpressionUUID->"98c685b1-10ed-465a-9e3b-b09035ffba3d",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[345876, 10146, 300, 8, 76, "Text",ExpressionUUID->"2d77efe8-0bd4-458c-af3e-e15ae44975c3",
   CellTags->{"Exercises", "More Patterns"}]},
 "Pattern Matching"->{
  Cell[168514, 5037, 264, 9, 91, "Subsection",ExpressionUUID->"460bdb6e-0fd1-4cb9-bde2-2d2a0367fbc3",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[168781, 5048, 248, 8, 44, "Text",ExpressionUUID->"1fb825ae-8d94-48fc-af39-4bb5a9a0d80e",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[169032, 5058, 547, 15, 76, "Text",ExpressionUUID->"51409615-827f-4428-bdf5-36f69866b51d",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[169582, 5075, 929, 30, 76, "CodeText",ExpressionUUID->"1c52a726-d0c2-4c11-9842-bd0501cd831a",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[170514, 5107, 198, 5, 51, "Input",ExpressionUUID->"ff60fee8-1749-4ecf-a615-eb6509bbfb43",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[170715, 5114, 535, 14, 76, "CodeText",ExpressionUUID->"b872ed02-f773-496a-96de-577dad826497",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[171253, 5130, 197, 5, 51, "Input",ExpressionUUID->"05d379c3-5c24-4e16-9162-24932558873c",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[173781, 5200, 197, 5, 51, "Input",ExpressionUUID->"d49d1da0-7dff-4118-b9b7-206f28782956",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[177405, 5293, 242, 7, 51, "Input",ExpressionUUID->"22c187cc-dc62-4032-9077-85699b0c7fcc",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[179808, 5363, 224, 6, 51, "Input",ExpressionUUID->"c77188c0-bc74-497c-8d5d-a20fd150c8a6",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[182501, 5436, 308, 9, 51, "Input",ExpressionUUID->"bca72515-f547-4f30-aaf2-7c344b05c9e8",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[185709, 5523, 256, 7, 51, "Input",ExpressionUUID->"f85ebfbe-8c2d-4786-8e77-93df3fe8fb7d",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[188727, 5605, 254, 7, 51, "Input",ExpressionUUID->"63330ea9-e177-45bf-928b-4252ed4a7926",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[191713, 5685, 264, 8, 51, "Input",ExpressionUUID->"f33d5bbf-0d63-4dc3-994c-e3cfb6b6628b",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[194655, 5765, 325, 10, 44, "Item",ExpressionUUID->"5f9d6f25-dbfe-43c3-9425-91f157214ee5",
   CellTags->{"Exercises", "Pattern Matching"}]},
 "Discarding Outliers"->{
  Cell[196005, 5809, 257, 10, 55, "Subsection",ExpressionUUID->"b712b4ff-9d23-4f89-a469-9cac59d58555",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[196265, 5821, 253, 5, 44, "CodeText",ExpressionUUID->"437ba67d-3025-4903-8c62-952addce6cc0",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[196521, 5828, 703, 14, 148, "Input",ExpressionUUID->"5756fb38-4bec-4581-b191-ded845b04af8",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[197227, 5844, 466, 13, 76, "CodeText",ExpressionUUID->"26231579-2e4a-4ff8-afa2-4db05c10830b",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[197696, 5859, 240, 7, 51, "Input",ExpressionUUID->"eaaf2900-18e9-4dde-afc7-c2897fc9f851",
   CellTags->{"Exercises", "Discarding Outliers"}],
  Cell[197939, 5868, 636, 20, 76, "Text",ExpressionUUID->"8a5eab9d-ecbf-4f8b-9f56-75bf8b97fa23",
   CellTags->{"Exercises", "Discarding Outliers"}]},
 "Finding Elements"->{
  Cell[204364, 6037, 249, 9, 55, "Subsection",ExpressionUUID->"926afb49-14fc-4d47-b80a-2f7ac7e43627",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[204616, 6048, 300, 8, 44, "CodeText",ExpressionUUID->"f9757f34-2830-4418-b975-0908aecc4963",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[204919, 6058, 597, 17, 51, "Input",ExpressionUUID->"316b6933-fd5e-40e6-bdca-bf67ad8df361",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[205519, 6077, 538, 15, 76, "CodeText",ExpressionUUID->"3b1b9855-5679-4257-9f3d-3b3ec497801f",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206060, 6094, 223, 6, 51, "Input",ExpressionUUID->"57928568-12e9-47dd-b66a-38004f32eb0a",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206286, 6102, 353, 8, 44, "CodeText",ExpressionUUID->"ca47bb0a-9166-408c-b121-12822b600f48",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206642, 6112, 320, 9, 51, "Input",ExpressionUUID->"00fef218-f164-49e6-9a73-dfdff11417b0",
   CellTags->{"Exercises", "Finding Elements"}],
  Cell[206965, 6123, 878, 27, 108, "Text",ExpressionUUID->"f9ad8e47-4806-47fd-b943-e7c3842cc95c",
   CellTags->{"Exercises", "Finding Elements"}]},
 "Selecting Solutions"->{
  Cell[214501, 6332, 265, 10, 55, "Subsection",ExpressionUUID->"f1d64c1e-e6d0-4efe-bdbd-01dd16df59f6",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[214769, 6344, 579, 16, 76, "Text",ExpressionUUID->"99b1acf6-d278-430c-8150-28139eb928ac",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[215351, 6362, 692, 22, 55, "Input",ExpressionUUID->"9f2b47f4-8a54-45b1-bea5-55cd33732c58",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[216046, 6386, 274, 7, 44, "CodeText",ExpressionUUID->"167ac253-0aa8-4e53-9000-9f93074d2013",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[216323, 6395, 280, 9, 51, "Input",ExpressionUUID->"e4eb675d-64d2-47dc-b345-aa009ea56c30",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[216606, 6406, 447, 13, 44, "CodeText",ExpressionUUID->"5157c807-eb38-4576-a8b9-2f6c0b3ed796",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[217056, 6421, 284, 9, 51, "Input",ExpressionUUID->"6f68e9d6-ee25-480d-a7a4-8310e41acb82",
   CellTags->{"Exercises", "Selecting Solutions"}],
  Cell[217343, 6432, 246, 7, 44, "Text",ExpressionUUID->"f6c965eb-d689-4185-8472-72e165b88c48",
   CellTags->{"Exercises", "Selecting Solutions"}]},
 "Working with Pure Functions"->{
  Cell[221029, 6534, 266, 10, 55, "Subsection",ExpressionUUID->"3125c2b6-952a-48c4-9c7f-c9ab79c8d1d2",
   CellTags->{"Exercises", "Working with Pure Functions"}],
  Cell[221298, 6546, 784, 23, 44, "CodeText",ExpressionUUID->"958eb617-a2ca-4951-b41a-846c5a0c559b",
   CellTags->{"Exercises", "Working with Pure Functions"}],
  Cell[222085, 6571, 728, 23, 84, "Input",ExpressionUUID->"674157f7-71dd-4932-b7c6-46acd35b9ccf",
   CellTags->{"Exercises", "Working with Pure Functions"}],
  Cell[222816, 6596, 1108, 34, 140, "Text",ExpressionUUID->"a42b7b9a-d260-4cde-b36c-18404b7c288a",
   CellTags->{"Exercises", "Working with Pure Functions"}]},
 "Distance Function"->{
  Cell[226117, 6692, 246, 10, 55, "Subsection",ExpressionUUID->"fe501e8c-3c59-4573-bf52-cd8bf3b0d279",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[226366, 6704, 310, 8, 76, "CodeText",ExpressionUUID->"5cef4eb4-37f8-47f1-b849-4dca12480f13",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[226679, 6714, 765, 27, 51, "Input",ExpressionUUID->"9cc0dfe3-8361-43b5-83c2-1ebf2e61a888",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[227447, 6743, 476, 16, 51, "Input",ExpressionUUID->"5c460460-b35a-4a31-bad1-e07c3c5c6933",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[227926, 6761, 497, 13, 108, "Text",ExpressionUUID->"0c86265d-b1ca-462e-a7b5-2baa6a88e6d5",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[235303, 6952, 291, 8, 76, "Text",ExpressionUUID->"acdc5970-14a3-4bdd-a2bc-5825b83d5b51",
   CellTags->{"Exercises", "Distance Function"}],
  Cell[238171, 7033, 483, 13, 76, "Text",ExpressionUUID->"0b24a10e-c37c-40c8-aae2-68ed1c209d73",
   CellTags->{"Exercises", "Distance Function"}]},
 "Selecting Columns"->{
  Cell[247697, 7263, 260, 10, 55, "Subsection",ExpressionUUID->"a8298410-ac83-4bea-80c2-b53be21467ed",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[247960, 7275, 650, 17, 76, "CodeText",ExpressionUUID->"60728bbe-bc67-46e9-a5b6-c51e5a18e371",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[248613, 7294, 354, 10, 51, "Input",ExpressionUUID->"1592c10d-88a1-473b-96e7-70911128ffc6",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[248970, 7306, 254, 8, 51, "Input",ExpressionUUID->"75fdb892-d060-4f25-9425-e3babaef0964",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[249227, 7316, 704, 19, 108, "CodeText",ExpressionUUID->"409bd70f-cfca-4c7b-abba-78e7bbb40544",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[249934, 7337, 835, 28, 116, "Input",ExpressionUUID->"bea88754-e0c2-4e47-a6e4-a7d6f62b412b",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[250772, 7367, 177, 5, 51, "Input",ExpressionUUID->"bb92feda-61a9-4609-8b50-55a3b243654d",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[250952, 7374, 465, 11, 108, "CodeText",ExpressionUUID->"af78f7da-9972-450d-8163-f5dfddeb4c99",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[251420, 7387, 323, 11, 51, "Input",ExpressionUUID->"92ce9980-632a-4a73-a288-64e72d5695c3",
   CellTags->{"Exercises", "Selecting Columns"}],
  Cell[251746, 7400, 299, 8, 76, "Text",ExpressionUUID->"2d09590b-56c5-4371-97ac-57e6b5198e77",
   CellTags->{"Exercises", "Selecting Columns"}]},
 "Matrix Manipulation"->{
  Cell[259052, 7606, 250, 10, 55, "Subsection",ExpressionUUID->"ed63be7b-1fd2-432e-930f-d4cd6cb9c426",
   CellTags->{"Exercises", "Matrix Manipulation"}],
  Cell[259305, 7618, 1493, 45, 140, "Text",ExpressionUUID->"758af97e-e1da-4d64-8e74-f7299d83bc5c",
   CellTags->"Matrix Manipulation"],
  Cell[260801, 7665, 416, 11, 44, "CodeText",ExpressionUUID->"4150f4ad-b3e9-4481-ac99-62ae9a09dc82",
   CellTags->"Matrix Manipulation"],
  Cell[261220, 7678, 283, 9, 51, "Input",ExpressionUUID->"9e217a58-afef-4f13-b929-a1783803b658",
   CellTags->"Matrix Manipulation"]},
 "Operating on Elements"->{
  Cell[270336, 7926, 262, 10, 55, "Subsection",ExpressionUUID->"8553669d-b0a3-44e9-bb23-bc36eefced95",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[270601, 7938, 319, 9, 44, "CodeText",ExpressionUUID->"d089fa6a-0bb8-4134-991a-647e48b6443c",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[270923, 7949, 1061, 31, 116, "Input",ExpressionUUID->"2224577e-6477-4cfb-a312-4834d52ebdb9",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[271987, 7982, 344, 10, 76, "Text",ExpressionUUID->"ea3cb7ab-c42d-4c21-b76b-729ae37069d8",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[272334, 7994, 216, 5, 44, "CodeText",ExpressionUUID->"e961c4d2-78ef-4190-80f8-68af5568214f",
   CellTags->{"Exercises", "Operating on Elements"}],
  Cell[272553, 8001, 390, 10, 75, "Output",ExpressionUUID->"791cb4f3-d384-46fa-b707-e325a66a65fe",
   CellTags->{"Exercises", "Operating on Elements"}]},
 "Using Options"->{
  Cell[278033, 8151, 236, 9, 55, "Subsection",ExpressionUUID->"94629abf-332e-4c9b-9ef7-2d3889897f39",
   CellTags->{"Exercises", "Using Options"}],
  Cell[278272, 8162, 562, 14, 76, "Text",ExpressionUUID->"70e86e89-163d-423c-a81c-9ca180d11d9a",
   CellTags->{"Exercises", "Using Options"}],
  Cell[278837, 8178, 1592, 48, 110, "Input",ExpressionUUID->"f4543c79-7fde-486d-8f70-f00cf2594d99",
   CellTags->{"Exercises", "Using Options"}],
  Cell[280432, 8228, 988, 29, 108, "Text",ExpressionUUID->"17d23993-9a47-4624-9f87-3a14ab914d71",
   CellTags->{"Exercises", "Using Options"}],
  Cell[281423, 8259, 920, 28, 76, "Text",ExpressionUUID->"9c0f44c9-f2a0-4c3f-ab52-a871536541af",
   CellTags->{"Exercises", "Using Options"}]},
 "Recursive Definitions"->{
  Cell[287369, 8421, 254, 10, 55, "Subsection",ExpressionUUID->"a8e4eab8-b200-4fe5-9147-c5a6ea7ad691",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[287626, 8433, 1181, 35, 108, "Text",ExpressionUUID->"e9923155-679b-480e-a022-d52985fb0469",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[291798, 8556, 683, 18, 108, "CodeText",ExpressionUUID->"94336364-b7ae-4fee-94e3-fa1ce540f89e",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[292484, 8576, 215, 5, 51, "Input",ExpressionUUID->"ebf19626-5603-458c-b9fd-19b6e0943c7f",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[292702, 8583, 714, 20, 51, "Input",ExpressionUUID->"a98155cc-d02c-4fc6-b85e-a02d84467ed8",
   CellTags->{"Exercises", "Recursive Definitions"}],
  Cell[293419, 8605, 204, 4, 51, "Input",ExpressionUUID->"f75433f9-adb8-4dda-abd3-0d1c62b631b2",
   CellTags->{"Exercises", "Recursive Definitions"}]},
 "Using Listability"->{
  Cell[293660, 8614, 246, 10, 55, "Subsection",ExpressionUUID->"76451480-ceb1-4e8b-ba49-d715a9d3b470",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[293909, 8626, 231, 5, 44, "CodeText",ExpressionUUID->"29dd218e-f426-4165-8d1a-bb6a6dacf25e",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[294143, 8633, 265, 7, 51, "Input",ExpressionUUID->"a8335970-4637-4d17-94a5-0fcda0723d04",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[294411, 8642, 364, 11, 51, "Input",ExpressionUUID->"efb20d9f-fb80-48bb-8beb-3e359757ec78",
   CellTags->{"Exercises", "Using Listability"}],
  Cell[294778, 8655, 397, 12, 44, "Text",ExpressionUUID->"210fe2c1-bdda-47ad-bcd5-cb56ac43eeb3",
   CellTags->{"Exercises", "Using Listability"}]},
 "Debugging a Program"->{
  Cell[300978, 8832, 248, 10, 55, "Subsection",ExpressionUUID->"b8d4fced-23f5-41a2-8500-0f8e21e58b33",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[301229, 8844, 419, 10, 76, "CodeText",ExpressionUUID->"1a539bc8-c4bd-45cd-9616-0d132660d0cb",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[301651, 8856, 1303, 37, 212, "Input",ExpressionUUID->"975a2eaa-cc13-4cb6-863b-809be5871647",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[302957, 8895, 318, 9, 44, "CodeText",ExpressionUUID->"376ab4bb-8856-4740-a4db-0a362a58af3d",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[303278, 8906, 264, 8, 51, "Input",ExpressionUUID->"fd14fa4b-a110-4747-84c5-09bc98413691",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[303545, 8916, 351, 8, 76, "Text",ExpressionUUID->"c2d85e5c-a5d2-4038-8634-1f4532894c75",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[303899, 8926, 287, 9, 76, "Text",ExpressionUUID->"8c8e861b-fd77-46af-ae29-2d939805da54",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[307477, 9021, 285, 7, 76, "Text",ExpressionUUID->"58c55bfb-5858-439c-acda-5d124c978fef",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[307765, 9030, 368, 10, 108, "Text",ExpressionUUID->"25d753e4-bdcd-4dad-97b3-e87840186c64",
   CellTags->{"Exercises", "Debugging a Program"}]},
 "Extracting Array Elements"->{
  Cell[314279, 9214, 272, 10, 55, "Subsection",ExpressionUUID->"e9287866-d904-4dea-ac35-00ae7de10fb1",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[314554, 9226, 300, 5, 44, "CodeText",ExpressionUUID->"4f0e6cc4-8d5b-48cf-aaa5-cab4dcb3d1d1",
   CellTags->"Extracting Array Elements"],
  Cell[314857, 9233, 396, 12, 84, "Input",ExpressionUUID->"7edd4801-43ee-481e-824f-089d7247a9ad",
   CellTags->"Extracting Array Elements"],
  Cell[315256, 9247, 576, 17, 76, "Text",ExpressionUUID->"3ad98ff6-7f6b-4abb-852d-11037af68e56",
   CellTags->"Extracting Array Elements"],
  Cell[315835, 9266, 351, 9, 44, "CodeText",ExpressionUUID->"74ad5368-e7b3-424f-888d-0b627ecde99a",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[316189, 9277, 287, 9, 51, "Input",ExpressionUUID->"89af4c17-d9f3-47a1-b867-86f0bdee1d2d",
   CellTags->"Extracting Array Elements"],
  Cell[316479, 9288, 379, 12, 44, "CodeText",ExpressionUUID->"64f4364f-acc9-429d-8340-418107b39c7c",
   CellTags->"Extracting Array Elements"],
  Cell[316861, 9302, 325, 10, 51, "Input",ExpressionUUID->"d682758f-ae16-4256-8a7b-11cc55796151",
   CellTags->"Extracting Array Elements"],
  Cell[317189, 9314, 597, 18, 76, "Text",ExpressionUUID->"33da3aba-92c2-45ba-afea-995e29673dfc",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[322068, 9445, 324, 7, 76, "CodeText",ExpressionUUID->"b1dc74ff-1ab7-4a2e-a2d3-51c495e859b2",
   CellTags->"Extracting Array Elements"],
  Cell[322395, 9454, 465, 14, 51, "Input",ExpressionUUID->"8beeef22-109e-4540-ab89-3cf093b5b0be",
   CellTags->"Extracting Array Elements"],
  Cell[322863, 9470, 523, 18, 44, "Text",ExpressionUUID->"cfa4444d-8d48-4df6-b04d-72d155d8dd9e",
   CellTags->{"Exercises", "Extracting Array Elements"}],
  Cell[326415, 9570, 302, 8, 76, "Text",ExpressionUUID->"c969266b-0b14-410f-a666-a1269df368af",
   CellTags->{"Exercises", "Extracting Array Elements"}]},
 "Using Levels"->{
  Cell[334086, 9763, 246, 9, 55, "Subsection",ExpressionUUID->"9fcbfffa-fda4-450c-80ed-405d260e88c0",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[334335, 9774, 744, 21, 76, "CodeText",ExpressionUUID->"5bb5e424-209d-40f0-95a0-d5c6668df205",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[335082, 9797, 973, 32, 84, "Input",ExpressionUUID->"3db5033c-60a9-4778-8f4d-73f01604e35b",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[336058, 9831, 250, 6, 51, "Input",ExpressionUUID->"90e340bd-588e-4e57-9a06-ccc11b6ccec3",
   CellTags->{"Exercises", "Using Levels"}],
  Cell[336311, 9839, 498, 14, 76, "Text",ExpressionUUID->"ec7433c4-66da-418e-afa8-c17d433f67c7",
   CellTags->{"Exercises", "Using Levels"}]},
 "More Patterns"->{
  Cell[340810, 9969, 234, 9, 55, "Subsection",ExpressionUUID->"2ffdba79-c8fc-4f0c-9a5f-78348c17556d",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[341047, 9980, 314, 9, 44, "Text",ExpressionUUID->"85f09082-0221-4492-8023-6b3cef8ec26b",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[341364, 9991, 471, 13, 76, "CodeText",ExpressionUUID->"95217338-b8a0-4d60-9119-8a50f050acb0",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[341838, 10006, 455, 15, 51, "Input",ExpressionUUID->"d6277317-53ca-4191-863f-01615141bcbe",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[342296, 10023, 491, 16, 51, "Input",ExpressionUUID->"fb04d708-5e82-485c-a9c2-c49e19f4507f",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[342790, 10041, 388, 12, 44, "Text",ExpressionUUID->"5f9c8fcd-9e0f-481b-a4c3-d5676e195e4f",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[343181, 10055, 794, 25, 76, "Text",ExpressionUUID->"fd0a772d-63ba-4121-ad9d-ee4ce3cfa1ef",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[343978, 10082, 720, 23, 76, "Text",ExpressionUUID->"d1a0ca50-6ae2-4260-9e79-c89ef7dfaa3e",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[344701, 10107, 1172, 37, 108, "Text",ExpressionUUID->"98c685b1-10ed-465a-9e3b-b09035ffba3d",
   CellTags->{"Exercises", "More Patterns"}],
  Cell[345876, 10146, 300, 8, 76, "Text",ExpressionUUID->"2d77efe8-0bd4-458c-af3e-e15ae44975c3",
   CellTags->{"Exercises", "More Patterns"}]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 382966, 10985},
 {"Overview", 388498, 11062},
 {"Basic Principles", 389002, 11071},
 {"Functional Programming", 401421, 11262},
 {"Options and Messages", 415933, 11473},
 {"Efficiency", 424546, 11600},
 {"Exercises", 430630, 11697},
 {"Pattern Matching", 447293, 11921},
 {"Discarding Outliers", 449522, 11952},
 {"Finding Elements", 450455, 11965},
 {"Selecting Solutions", 451667, 11982},
 {"Working with Pure Functions", 452907, 11999},
 {"Distance Function", 453573, 12008},
 {"Selecting Columns", 454638, 12023},
 {"Matrix Manipulation", 456158, 12044},
 {"Operating on Elements", 456750, 12053},
 {"Using Options", 457694, 12066},
 {"Recursive Definitions", 458447, 12077},
 {"Using Listability", 459392, 12090},
 {"Debugging a Program", 460164, 12101},
 {"Extracting Array Elements", 461552, 12120},
 {"Using Levels", 463488, 12147},
 {"More Patterns", 464229, 12158}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[614, 23, 136, 2, 5, "SlideShowNavigationBar",ExpressionUUID->"ae861ed8-5fa1-4088-84fd-2651cc7b368a",
 CellTags->"SlideShowHeader"],
Cell[753, 27, 15061, 253, 142, "Title",ExpressionUUID->"059f49ae-49fc-4f44-80e6-ab700841b96e"],
Cell[15817, 282, 504, 8, 143, "Title",ExpressionUUID->"1243965a-40ce-482a-9c91-36878f955d76"],
Cell[16324, 292, 463, 7, 63, "Subtitle",ExpressionUUID->"abd2714b-c40b-491d-9b98-1f3d249655e3"],
Cell[16790, 301, 298, 6, 152, "Text",ExpressionUUID->"f86fa7d0-ff30-468c-8c9f-8c98448569b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17125, 312, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"8b4f6692-9aa6-4d88-b922-bfb6817f7bea",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[17272, 318, 152, 3, 139, "Section",ExpressionUUID->"34a6e573-a88e-498f-ba06-a4971943ab3c"],
Cell[17427, 323, 257, 5, 44, "Item",ExpressionUUID->"097bd3e1-6d23-4edc-8cfd-4c7f2a7da2e9",
 CellTags->"Overview"],
Cell[17687, 330, 207, 4, 44, "Item",ExpressionUUID->"0f855d13-c830-47a0-afa3-cfd01e617810",
 CellTags->"Overview"],
Cell[17897, 336, 248, 5, 74, "Item",ExpressionUUID->"1b807f4b-4e58-47aa-86f8-e5fc087aa641",
 CellTags->"Overview"],
Cell[18148, 343, 249, 5, 74, "Item",ExpressionUUID->"1dabf61c-7b2f-4f80-846c-fd0e08c34608",
 CellTags->"Overview"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[18446, 354, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"23087012-ee4a-4f73-aa14-369b6e916e58",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[18593, 360, 199, 3, 139, "Section",ExpressionUUID->"6547c9cf-3045-4d2d-bd22-c8f5a8f2c939",
 CellTags->"Basic Principles"],
Cell[18795, 365, 200, 3, 44, "Item",ExpressionUUID->"e0de7613-c62c-4670-a3db-eb6595190f99",
 CellTags->"Basic Principles"],
Cell[18998, 370, 202, 3, 44, "Item",ExpressionUUID->"eaa8af17-aca1-4abc-a0ba-3ac28dfd24f7",
 CellTags->"Basic Principles"],
Cell[19203, 375, 217, 5, 44, "Item",ExpressionUUID->"eb003f88-d93b-4f5b-aef6-1d714c55b7b7",
 CellTags->"Basic Principles"],
Cell[19423, 382, 170, 3, 44, "Item",ExpressionUUID->"aa3888c2-0b37-4c83-97d2-00078fab9706",
 CellTags->"Basic Principles"],
Cell[19596, 387, 77, 0, 136, "EndOfSlide",ExpressionUUID->"b5b4098a-0a29-4340-884b-0b5eedfcd3b4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19722, 393, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"d8a49b2a-7e7d-4481-b628-87db01f46c0c",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[19869, 399, 175, 3, 139, "Section",ExpressionUUID->"fe70d8b3-9907-4a67-a216-240b94015c4f",
 CellTags->"Basic Principles"],
Cell[20047, 404, 395, 8, 76, "Text",ExpressionUUID->"3703421c-b532-4acc-a62f-3c1239c2f75b",
 CellTags->"Basic Principles"],
Cell[20445, 414, 133, 2, 44, "Item",ExpressionUUID->"539a94a2-87a4-435a-806f-9801745c3b57",
 CellTags->"Basic Principles"],
Cell[20581, 418, 164, 2, 44, "Item",ExpressionUUID->"8e9a1874-8b3d-4b25-9c75-61080c00e14a",
 CellTags->"Basic Principles"],
Cell[20748, 422, 164, 2, 44, "Item",ExpressionUUID->"6299fc6f-6631-4ab4-ba8b-f2ca6aad0502",
 CellTags->"Basic Principles"],
Cell[20915, 426, 160, 2, 44, "Item",ExpressionUUID->"085639ba-9116-4e0a-8d44-ac67dc17c938",
 CellTags->"Basic Principles"],
Cell[21078, 430, 77, 0, 136, "EndOfSlide",ExpressionUUID->"82a05744-27b5-47a9-a2aa-a2873a4bd908"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21204, 436, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"25d0d358-9498-41e4-85c8-3372e18496f4",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[21351, 442, 161, 3, 139, "Section",ExpressionUUID->"73fdea96-3393-4e31-8f5e-2cb29ede9bcf",
 CellTags->"Basic Principles"],
Cell[21515, 447, 485, 11, 108, "Text",ExpressionUUID->"c75d9116-b3cd-405c-8fb4-0258f9daf94c",
 CellTags->"Basic Principles"],
Cell[22003, 460, 629, 20, 71, "Program",ExpressionUUID->"f2eabd31-efbd-497c-a3da-1eb1e861777d",
 CellTags->"Basic Principles"],
Cell[22635, 482, 550, 14, 76, "Text",ExpressionUUID->"e26d03ae-fa78-4d5a-bf43-56ae971e128b",
 CellTags->"Basic Principles"],
Cell[23188, 498, 380, 10, 44, "CodeText",ExpressionUUID->"d128125a-fe72-46ad-8d8f-e9b165c1f974",
 CellTags->"Basic Principles"],
Cell[23571, 510, 208, 5, 51, "Input",ExpressionUUID->"abad0e95-f906-41dd-ac7a-2c600efab24a",
 CellTags->"Basic Principles"],
Cell[23782, 517, 349, 9, 44, "CodeText",ExpressionUUID->"45aeeb14-dcaf-4a49-a1b8-61c865e00f16",
 CellTags->"Basic Principles"],
Cell[24134, 528, 210, 5, 51, "Input",ExpressionUUID->"bd80c726-e521-4d99-a7ea-ce30c75d5a1b",
 CellTags->"Basic Principles"],
Cell[24347, 535, 348, 7, 76, "CodeText",ExpressionUUID->"cc88f324-e1f3-43ce-8a21-a8c15d062f60",
 CellTags->"Basic Principles"],
Cell[24698, 544, 183, 4, 51, "Input",ExpressionUUID->"156f921f-4101-4b5a-84f0-d01c7a0a4ab1",
 CellTags->"Basic Principles"],
Cell[24884, 550, 207, 5, 51, "Input",ExpressionUUID->"18e5d46d-82b3-496f-85b6-2344a785d1d2",
 CellTags->"Basic Principles"],
Cell[25094, 557, 639, 11, 172, "Text",ExpressionUUID->"1eaf0896-32e2-41b1-a601-ae90443cb4e2",
 CellTags->"Basic Principles"],
Cell[25736, 570, 77, 0, 136, "EndOfSlide",ExpressionUUID->"86d9aabc-7c96-48c3-ba38-092096d2590b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[25862, 576, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"4975a638-a87a-464b-b866-d5d81754be6a",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[26009, 582, 192, 3, 139, "Section",ExpressionUUID->"ab3a095d-8a99-4413-84ac-81f8edc3d8b2",
 CellTags->"Basic Principles"],
Cell[26204, 587, 318, 6, 76, "Text",ExpressionUUID->"74962d8c-9e9d-47b5-8e23-bb65469a603a",
 CellTags->"Basic Principles"],
Cell[26525, 595, 430, 12, 44, "CodeText",ExpressionUUID->"abb2323e-ec23-4830-a1a5-daa3b6743099",
 CellTags->"Basic Principles"],
Cell[26958, 609, 183, 4, 70, "Input",ExpressionUUID->"46322c69-6d21-4ec5-b571-01af6b72c48f",
 CellTags->"Basic Principles"],
Cell[27144, 615, 159, 2, 44, "Text",ExpressionUUID->"c3137097-0f8e-4a73-9d33-59131c70304c",
 CellTags->"Basic Principles"],
Cell[27306, 619, 492, 15, 76, "CodeText",ExpressionUUID->"1c58e23f-b997-4fac-b052-2895cd9ba2e1",
 CellTags->"Basic Principles"],
Cell[27801, 636, 138, 3, 51, "Input",ExpressionUUID->"1b326d72-cf7c-459c-be61-f52359edb6a0",
 CellTags->"Basic Principles"],
Cell[27942, 641, 156, 4, 51, "Input",ExpressionUUID->"b3869cba-db7e-4ed2-bf16-7a73b08be8e4",
 CellTags->"Basic Principles"],
Cell[28101, 647, 780, 23, 76, "CodeText",ExpressionUUID->"de1296f9-f8ba-44af-8545-12b168aa68bd",
 CellTags->"Basic Principles"],
Cell[28884, 672, 198, 5, 51, "Input",ExpressionUUID->"12ce20db-9833-4445-8821-f25df8fd9ef2",
 CellTags->"Basic Principles"],
Cell[29085, 679, 143, 3, 51, "Input",ExpressionUUID->"2c3f790f-8956-43bf-9f1b-df0fa3b8f659",
 CellTags->"Basic Principles"],
Cell[29231, 684, 271, 8, 44, "CodeText",ExpressionUUID->"528afe8e-6258-4f43-bc4a-a71c7b10ced4",
 CellTags->"Basic Principles"],
Cell[29505, 694, 190, 4, 51, "Input",ExpressionUUID->"5124396f-1498-4a6c-a2bf-2e169e02aca0",
 CellTags->"Basic Principles"],
Cell[29698, 700, 77, 0, 136, "EndOfSlide",ExpressionUUID->"0c1324a8-f7c8-4b3e-b2fa-f75701625bb7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[29824, 706, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"d0f4281c-db8d-42b1-96fa-7fbe40972e0d",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[29971, 712, 203, 3, 139, "Section",ExpressionUUID->"49480b99-919f-4b89-b487-5e04c06395e7",
 CellTags->"Basic Principles"],
Cell[30177, 717, 243, 5, 44, "Text",ExpressionUUID->"534276ea-671a-4685-ad9c-bc2ad98164fc",
 CellTags->"Basic Principles"],
Cell[30423, 724, 279, 7, 44, "CodeText",ExpressionUUID->"97412820-2c79-4558-88a4-4e5c9b9d9890"],
Cell[30705, 733, 254, 5, 51, "Input",ExpressionUUID->"9b463b50-bd5e-436a-8530-41334251a9ff"],
Cell[30962, 740, 301, 6, 51, "Input",ExpressionUUID->"3e97dc39-56f2-46b6-add0-ccf7b5c636cc"],
Cell[31266, 748, 298, 6, 51, "Input",ExpressionUUID->"2e9ca631-d694-444c-a42f-9762d8985425"],
Cell[31567, 756, 315, 7, 51, "Input",ExpressionUUID->"dd1682b0-2fd5-4d1b-be92-0660829f6cdf"],
Cell[31885, 765, 310, 7, 44, "Text",ExpressionUUID->"276e45ce-4728-4794-b663-c27c3b0a5bdb"],
Cell[32198, 774, 327, 7, 76, "Text",ExpressionUUID->"82fdf861-f489-448c-a0e3-4ff904d86b97"],
Cell[32528, 783, 288, 7, 76, "CodeText",ExpressionUUID->"628a53bc-22bb-4428-981d-5c0e8a388d56"],
Cell[32819, 792, 419, 10, 51, "Input",ExpressionUUID->"3ba21e57-14e6-4ba9-a7b7-53c95be5027c",
 CellTags->"Basic Principles"],
Cell[33241, 804, 387, 9, 55, "Input",ExpressionUUID->"c275feeb-dbf2-45a9-b85d-dc33a139297d",
 CellTags->"Basic Principles"],
Cell[33631, 815, 263, 5, 55, "Input",ExpressionUUID->"787767e7-a3bb-46a6-a1d2-0359216e2c63"],
Cell[33897, 822, 435, 12, 44, "CodeText",ExpressionUUID->"aa099a4f-edcb-469a-9536-d60959e3a93f",
 CellTags->"Basic Principles"],
Cell[34335, 836, 211, 5, 51, "Input",ExpressionUUID->"704662ef-4422-493a-9b64-82ebf718a593",
 CellTags->"Basic Principles"],
Cell[34549, 843, 397, 11, 44, "CodeText",ExpressionUUID->"a7795a4c-0979-4692-b680-61c9032f54e7",
 CellTags->"Basic Principles"],
Cell[34949, 856, 216, 4, 51, "Input",ExpressionUUID->"920e97eb-577e-4a07-96b8-50d58c728728",
 CellTags->"Basic Principles"],
Cell[35168, 862, 403, 11, 44, "CodeText",ExpressionUUID->"25e12dbc-a29b-443a-b6fe-9c218828e0d6",
 CellTags->"Basic Principles"],
Cell[35574, 875, 259, 5, 51, "Input",ExpressionUUID->"6a7bac3a-3dd6-49a9-a7cf-1e9aa4c4fe4d",
 CellTags->"Basic Principles"],
Cell[35836, 882, 284, 7, 44, "CodeText",ExpressionUUID->"a066bd8d-2a16-41bf-b2f8-2460ae3794f3",
 CellTags->"Basic Principles"],
Cell[36123, 891, 146, 3, 51, "Input",ExpressionUUID->"3103cece-50f8-4412-ad41-4af3c0560084",
 CellTags->"Basic Principles"],
Cell[36272, 896, 183, 3, 51, "Input",ExpressionUUID->"81472b1e-10da-44f6-92b4-11c2448c9985"],
Cell[36458, 901, 77, 0, 136, "EndOfSlide",ExpressionUUID->"f416e799-6b2f-401c-b31c-57f45bb4b574"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36584, 907, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"ccc76b58-b570-43c0-8b14-a9ec75ae4534",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[36731, 913, 193, 3, 139, "Section",ExpressionUUID->"bb5aebd8-a366-47f8-9466-34ab08dd7ebf",
 CellTags->"Basic Principles"],
Cell[36927, 918, 454, 8, 108, "Text",ExpressionUUID->"cc30ff61-d4c6-40ac-8cfb-aa9d0d7eebf8",
 CellTags->"Basic Principles"],
Cell[37384, 928, 752, 23, 108, "CodeText",ExpressionUUID->"e630a18f-a374-4bff-8b03-e82d2823a7d3",
 CellTags->"Basic Principles"],
Cell[38139, 953, 153, 3, 51, "Input",ExpressionUUID->"c0d2c50d-8ee4-448d-a454-a4edfd6a8355",
 CellTags->"Basic Principles"],
Cell[38295, 958, 153, 3, 51, "Input",ExpressionUUID->"f254ffe8-174c-4cfe-b213-b2a5ba97bd7a",
 CellTags->"Basic Principles"],
Cell[38451, 963, 152, 3, 51, "Input",ExpressionUUID->"b576c128-e001-4a9d-81fe-4c4d9f1dca7e",
 CellTags->"Basic Principles"],
Cell[38606, 968, 265, 7, 44, "CodeText",ExpressionUUID->"ed42ad3a-0279-4e0d-a330-38e34eb756c9",
 CellTags->"Basic Principles"],
Cell[38874, 977, 117, 2, 51, "Input",ExpressionUUID->"9c3f4b6b-6cdc-4e83-90ac-9fe70510f60c",
 CellTags->"Basic Principles"],
Cell[38994, 981, 300, 10, 44, "CodeText",ExpressionUUID->"3745f6cd-dbf3-4e2e-b98c-1203244d7df3",
 CellTags->"Basic Principles"],
Cell[39297, 993, 214, 4, 51, "Input",ExpressionUUID->"a0478e87-3108-4790-895f-59c7a03d0648",
 CellTags->"Basic Principles"],
Cell[39514, 999, 77, 0, 136, "EndOfSlide",ExpressionUUID->"f7a0b572-8b2d-43ce-9278-8f032acc00a6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39640, 1005, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"2b5368c4-1e42-41b7-910d-8b25856a83a0",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[39787, 1011, 197, 3, 139, "Section",ExpressionUUID->"15152988-f1af-4ee5-9042-51f8815c2313",
 CellTags->"Basic Principles"],
Cell[39987, 1016, 241, 5, 76, "Text",ExpressionUUID->"5b61d40c-71cd-4900-997c-eb9e168addd9",
 CellTags->"Basic Principles"],
Cell[40231, 1023, 263, 5, 76, "Text",ExpressionUUID->"c58d2df0-0a78-4016-bcd7-261910f18618",
 CellTags->"Basic Principles"],
Cell[40497, 1030, 318, 6, 108, "Text",ExpressionUUID->"ba02f09d-c65b-47a9-9872-c7153934fb8a",
 CellTags->"Basic Principles"],
Cell[40818, 1038, 77, 0, 136, "EndOfSlide",ExpressionUUID->"dfe19f9c-4b11-465a-a2cf-c2639de89f6b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[40944, 1044, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"6860f40b-352c-47d3-9d50-fa74f6142fc8",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[41091, 1050, 195, 3, 139, "Section",ExpressionUUID->"6c5e3794-47da-4730-8194-6fa0fec5a0ba",
 CellTags->"Basic Principles"],
Cell[41289, 1055, 237, 5, 76, "Text",ExpressionUUID->"70d95ebf-f182-4d78-b7a3-73bf9edd8ea6",
 CellTags->"Basic Principles"],
Cell[41529, 1062, 526, 17, 44, "CodeText",ExpressionUUID->"fe3b4507-cc08-485f-a84e-67b5471fd095",
 CellTags->"Basic Principles"],
Cell[42058, 1081, 182, 4, 51, "Input",ExpressionUUID->"c446788b-23e6-4312-b092-df1e2c57d6d8",
 CellTags->"Basic Principles"],
Cell[42243, 1087, 835, 28, 44, "Text",ExpressionUUID->"4133367e-6a05-4077-b24e-5baf00028dad",
 CellTags->"Basic Principles"],
Cell[43081, 1117, 77, 0, 136, "EndOfSlide",ExpressionUUID->"a9baf7c6-75eb-4323-9663-7b27fd5ce110"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[43207, 1123, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"4c15f63c-259d-45fe-9b61-30e2842d532f",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[43354, 1129, 200, 3, 139, "Section",ExpressionUUID->"880c13d1-a84e-4d88-9b81-b97b99fcaf40",
 CellTags->"Basic Principles"],
Cell[43557, 1134, 296, 6, 108, "Text",ExpressionUUID->"071c0a32-af43-4c84-a53b-c6e9c1e17616",
 CellTags->"Basic Principles"],
Cell[43856, 1142, 625, 17, 76, "CodeText",ExpressionUUID->"f4a154ce-fa04-4b74-a70e-91a3ccd756eb",
 CellTags->"Basic Principles"],
Cell[44484, 1161, 330, 9, 51, "Input",ExpressionUUID->"d38e8e87-a148-4b43-97a3-d662aec13816",
 CellTags->"Basic Principles"],
Cell[44817, 1172, 412, 11, 44, "Text",ExpressionUUID->"d4d087ef-ec4e-4225-b4e7-c779db09cd5a",
 CellTags->"Basic Principles"],
Cell[45232, 1185, 468, 12, 76, "CodeText",ExpressionUUID->"201401d6-58d9-4314-9b23-1ac2e28b3191"],
Cell[45703, 1199, 278, 7, 51, "Input",ExpressionUUID->"64c62ce2-2f7f-4eac-8800-18952b37fa6c",
 CellTags->"Basic Principles"],
Cell[45984, 1208, 77, 0, 136, "EndOfSlide",ExpressionUUID->"f16b43b7-2ec5-43cc-ac49-273ddfedd47d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46110, 1214, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"66418b67-e742-443b-8130-db11265c9a63",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[46257, 1220, 199, 3, 139, "Section",ExpressionUUID->"878195e8-414f-4cf3-ad4e-0df29dae0406",
 CellTags->"Basic Principles"],
Cell[46459, 1225, 202, 7, 44, "Text",ExpressionUUID->"4f6b3056-5db3-4592-8f8f-59f44d39638c",
 CellTags->"Basic Principles"],
Cell[46664, 1234, 926, 30, 76, "Text",ExpressionUUID->"4954ea25-961d-46e1-99e9-ff177b7100a0",
 CellTags->"Basic Principles"],
Cell[47593, 1266, 710, 22, 76, "CodeText",ExpressionUUID->"f6900c73-ccdf-4bb2-9877-0036a0fc7933",
 CellTags->"Basic Principles"],
Cell[48306, 1290, 174, 3, 51, "Input",ExpressionUUID->"de7113b3-a86d-4a2d-8e0c-d86c60009a7d",
 CellTags->"Basic Principles"],
Cell[48483, 1295, 168, 3, 51, "Input",ExpressionUUID->"d83c2188-0595-4863-8960-37323b99d19e",
 CellTags->"Basic Principles"],
Cell[48654, 1300, 77, 0, 136, "EndOfSlide",ExpressionUUID->"eb3606ee-5147-4afd-86c6-4c634e91de81"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48780, 1306, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"3d6a97af-f5d6-472a-a5c7-037210392e27",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[48927, 1312, 209, 3, 230, "Section",ExpressionUUID->"7bb0db35-475a-487a-b7d2-deed95d8abc2",
 CellTags->"Basic Principles"],
Cell[49139, 1317, 449, 11, 76, "Text",ExpressionUUID->"ee9f2bb0-3d85-429b-abd1-c05c77ac832b",
 CellTags->"Basic Principles"],
Cell[49591, 1330, 267, 6, 44, "CodeText",ExpressionUUID->"904b0b20-31df-480a-acd6-d62eaf5ee3a7",
 CellTags->"Basic Principles"],
Cell[49861, 1338, 311, 8, 51, "Input",ExpressionUUID->"87db0276-7c48-4dd3-b14f-b5e3c731393d",
 CellTags->"Basic Principles"],
Cell[50175, 1348, 543, 16, 76, "CodeText",ExpressionUUID->"fe931ba0-d77d-4d04-ad26-0990cc0a156d",
 CellTags->"Basic Principles"],
Cell[50721, 1366, 435, 12, 51, "Input",ExpressionUUID->"b037e2c5-8750-4f0b-a1ea-bb74a1495221",
 CellTags->"Basic Principles"],
Cell[51159, 1380, 297, 6, 76, "Text",ExpressionUUID->"14e791ad-9fcf-46e0-aec6-0f91719b3f0d",
 CellTags->"Basic Principles"],
Cell[51459, 1388, 615, 17, 76, "CodeText",ExpressionUUID->"0425955e-5f16-4aa1-8065-ebf1e7217397",
 CellTags->"Basic Principles"],
Cell[52077, 1407, 477, 13, 51, "Input",ExpressionUUID->"86c79fc6-674c-42ef-b1e3-a636fc691f1b",
 CellTags->"Basic Principles"],
Cell[52557, 1422, 77, 0, 136, "EndOfSlide",ExpressionUUID->"2b745339-3a6f-463a-a1a5-69d7146afb36"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[52683, 1428, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"3fd03f9a-a483-4b9d-8111-313e7c490cd3",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[52830, 1434, 226, 4, 139, "Section",ExpressionUUID->"d46f7570-0999-48ec-93fe-b420fb4aab36",
 CellTags->"Basic Principles"],
Cell[53059, 1440, 347, 7, 76, "Text",ExpressionUUID->"fc6a0588-b6df-4fca-83c8-eace8a3fbad9",
 CellTags->"Basic Principles"],
Cell[53409, 1449, 133, 2, 44, "Item",ExpressionUUID->"0ddedcfc-6864-4ecf-88f2-93735d4e9480",
 CellTags->"Basic Principles"],
Cell[53545, 1453, 164, 2, 44, "Item",ExpressionUUID->"042ec9e7-2136-4d01-9a65-4cd39f22f659",
 CellTags->"Basic Principles"],
Cell[53712, 1457, 164, 2, 44, "Item",ExpressionUUID->"3e392e29-9830-40f5-9bf4-ce897998d2fe",
 CellTags->"Basic Principles"],
Cell[53879, 1461, 160, 2, 44, "Item",ExpressionUUID->"ebc169b3-54f4-4c80-8242-84f0f72746c0",
 CellTags->"Basic Principles"],
Cell[54042, 1465, 363, 10, 44, "Text",ExpressionUUID->"bdbfb77b-3514-423d-8421-82b450ffb46e",
 CellTags->"Basic Principles"],
Cell[54408, 1477, 77, 0, 136, "EndOfSlide",ExpressionUUID->"602f08d7-de60-45bd-8e95-acdef2ed986f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[54534, 1483, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"a77e6653-5abb-4a0c-bceb-fc005a49a619",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[54681, 1489, 214, 4, 230, "Section",ExpressionUUID->"b09e7296-e615-4cc4-baad-66e7cd9bbc54",
 CellTags->"Functional Programming"],
Cell[54898, 1495, 193, 4, 44, "Item",ExpressionUUID->"b12e7cf7-dfd1-4706-a7c4-ab93f7537498",
 CellTags->"Functional Programming"],
Cell[55094, 1501, 195, 4, 44, "Item",ExpressionUUID->"0c5a3466-566f-4f50-bf24-e48e92616123",
 CellTags->"Functional Programming"],
Cell[55292, 1507, 202, 4, 44, "Item",ExpressionUUID->"1bdc2516-0979-445b-965a-ee1bfaafeb08",
 CellTags->"Functional Programming"],
Cell[55497, 1513, 189, 4, 44, "Item",ExpressionUUID->"9b4343b6-5fb9-454d-9c0a-24760e5e6eed",
 CellTags->"Functional Programming"],
Cell[55689, 1519, 77, 0, 136, "EndOfSlide",ExpressionUUID->"633e8859-0ab5-4aa2-9320-950678b01e1f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[55815, 1525, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"41006e41-64e1-4d1e-b84e-60fd20cb4b24",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[55962, 1531, 198, 4, 139, "Section",ExpressionUUID->"ec82a80f-3b02-4881-b22b-addca8ab30ad",
 CellTags->"Functional Programming"],
Cell[56163, 1537, 497, 13, 76, "Text",ExpressionUUID->"e9297ed1-feac-459d-bcda-789a748439a9",
 CellTags->"Functional Programming"],
Cell[56663, 1552, 260, 6, 44, "CodeText",ExpressionUUID->"5d5d7094-2f4a-4e1d-9fce-a7ac17ecfa03",
 CellTags->"Functional Programming"],
Cell[56926, 1560, 212, 5, 51, "Input",ExpressionUUID->"4c83b34c-a3ac-4544-820c-f5eab569337a",
 CellTags->"Functional Programming"],
Cell[57141, 1567, 297, 7, 76, "CodeText",ExpressionUUID->"249c4a60-99ed-4cc8-9417-7b241119d93b",
 CellTags->"Functional Programming"],
Cell[57441, 1576, 242, 6, 51, "Input",ExpressionUUID->"2b2e0fd4-28e7-4b86-9137-8bf03a477ce2",
 CellTags->"Functional Programming"],
Cell[57686, 1584, 298, 7, 76, "CodeText",ExpressionUUID->"7ca094f2-7cdc-40c7-9a18-2aceee519864",
 CellTags->"Functional Programming"],
Cell[57987, 1593, 219, 5, 51, "Input",ExpressionUUID->"080ebd5d-4d17-42d0-9024-936f4ae6f5a2",
 CellTags->"Functional Programming"],
Cell[58209, 1600, 162, 3, 51, "Input",ExpressionUUID->"7f1bde0a-edfc-4955-aead-4131dc15d486",
 CellTags->"Functional Programming"],
Cell[58374, 1605, 244, 7, 44, "CodeText",ExpressionUUID->"752f6528-0a1f-4045-8668-606acd1c1e81",
 CellTags->"Functional Programming"],
Cell[58621, 1614, 174, 3, 51, "Input",ExpressionUUID->"3de4f171-c29b-4895-bdf1-b32476d9e05e",
 CellTags->"Functional Programming"],
Cell[58798, 1619, 77, 0, 136, "EndOfSlide",ExpressionUUID->"8511ee69-9db2-4fb9-977b-2c4340e50e16"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[58924, 1625, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"65eacc6d-e609-435c-84bc-e78ea015c2b6",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[59071, 1631, 208, 4, 139, "Section",ExpressionUUID->"cb16aea4-f1ab-436f-98c4-d896c48cf91c",
 CellTags->"Functional Programming"],
Cell[59282, 1637, 308, 9, 76, "Text",ExpressionUUID->"e447b1cc-40ee-4bc1-b77f-80d9a5a1d58c",
 CellTags->"Functional Programming"],
Cell[59593, 1648, 273, 7, 44, "CodeText",ExpressionUUID->"4e032594-c106-40c0-ba43-29402ab13e5c",
 CellTags->"Functional Programming"],
Cell[59869, 1657, 176, 4, 51, "Input",ExpressionUUID->"51bb4670-a0aa-476f-acf3-05a6c510e62c",
 CellTags->"Functional Programming"],
Cell[60048, 1663, 257, 6, 44, "CodeText",ExpressionUUID->"92ee22bf-5e11-45cd-9421-5697713c153d",
 CellTags->"Functional Programming"],
Cell[60308, 1671, 217, 5, 51, "Input",ExpressionUUID->"7b234eba-1905-4b61-b0f2-d2bc385442b2",
 CellTags->"Functional Programming"],
Cell[60528, 1678, 324, 7, 76, "CodeText",ExpressionUUID->"925e42c2-fb53-452a-9548-cc7b6e80f7f3",
 CellTags->"Functional Programming"],
Cell[60855, 1687, 230, 6, 51, "Input",ExpressionUUID->"571f54aa-a621-4533-8959-99a3c4a1ccd5",
 CellTags->"Functional Programming"],
Cell[61088, 1695, 247, 6, 51, "Input",ExpressionUUID->"48d0bc60-e8fd-41ff-8676-a83b8566314f",
 CellTags->"Functional Programming"],
Cell[61338, 1703, 321, 8, 44, "CodeText",ExpressionUUID->"a3daa1cf-c401-4b23-927c-419a8b27d34f",
 CellTags->"Functional Programming"],
Cell[61662, 1713, 291, 8, 51, "Input",ExpressionUUID->"265cd74c-3374-4776-ac20-c966164b22f9",
 CellTags->"Functional Programming"],
Cell[61956, 1723, 77, 0, 136, "EndOfSlide",ExpressionUUID->"9c6d0244-4577-4e97-b1e4-8f4d62d79950"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[62082, 1729, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b471fa55-4757-4b9c-b999-b9680fe40270",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[62229, 1735, 167, 4, 139, "Section",ExpressionUUID->"2dbead05-5141-4a0a-b85c-3aa88883ac20",
 CellTags->"Functional Programming"],
Cell[62399, 1741, 281, 9, 44, "Text",ExpressionUUID->"c644a6a8-5197-48bf-a517-2c47bf8cf030",
 CellTags->"Functional Programming"],
Cell[62683, 1752, 209, 4, 44, "Item",ExpressionUUID->"053eab3a-d939-4e36-aa4d-589dc554d209",
 CellTags->"Functional Programming"],
Cell[62895, 1758, 1199, 35, 43, "Text",ExpressionUUID->"092cf541-60a1-46e9-8c60-0540b28a857a"],
Cell[64097, 1795, 248, 7, 44, "Item",ExpressionUUID->"9eca06bd-2eaf-4aa9-837c-a3f0054f021c",
 CellTags->"Functional Programming"],
Cell[64348, 1804, 1332, 38, 43, "Text",ExpressionUUID->"fd77bd92-d3bc-4f0c-8793-82f64faadd96"],
Cell[65683, 1844, 226, 6, 44, "Item",ExpressionUUID->"f386ae2a-fccd-4c59-a360-61fb79de1341",
 CellTags->"Functional Programming"],
Cell[65912, 1852, 1349, 38, 43, "Text",ExpressionUUID->"dea67524-7b91-4189-8443-cbc882a58db5"],
Cell[67264, 1892, 672, 22, 44, "Item",ExpressionUUID->"48d1acfe-d58f-404c-8dd7-2cc9875c51fb",
 CellTags->"Functional Programming"],
Cell[67939, 1916, 2075, 56, 43, "Text",ExpressionUUID->"e4673936-519c-42e9-a83b-da471522017a"],
Cell[70017, 1974, 77, 0, 136, "EndOfSlide",ExpressionUUID->"05bd06aa-abb6-4d67-b7c4-09f8e0f3557b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[70143, 1980, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"f85737dd-1189-4313-ae83-c413c6f54c08",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[70290, 1986, 206, 4, 139, "Section",ExpressionUUID->"abc8fe01-4c43-4d5c-b8e0-e3b65d44290e",
 CellTags->"Functional Programming"],
Cell[70499, 1992, 505, 17, 76, "Text",ExpressionUUID->"fad42bfe-133b-4188-9953-1a816db4dda5",
 CellTags->"Functional Programming"],
Cell[71007, 2011, 258, 6, 44, "CodeText",ExpressionUUID->"71d0bce7-d9c4-42ab-82d6-6c980984c5e2",
 CellTags->"Functional Programming"],
Cell[71268, 2019, 310, 9, 51, "Input",ExpressionUUID->"4c7c338b-631e-49dd-8185-db81f0e33250",
 CellTags->"Functional Programming"],
Cell[71581, 2030, 426, 12, 44, "CodeText",ExpressionUUID->"a5bb1f3c-5b14-4d06-b941-10949b03533e",
 CellTags->"Functional Programming"],
Cell[72010, 2044, 490, 14, 55, "Input",ExpressionUUID->"ebd5b2cd-0372-4603-972a-46a2b248cff2",
 CellTags->"Functional Programming"],
Cell[72503, 2060, 426, 11, 76, "Text",ExpressionUUID->"9ec04d7c-f2bc-4444-9b5a-e457a0f7c230",
 CellTags->"Functional Programming"],
Cell[72932, 2073, 414, 12, 44, "CodeText",ExpressionUUID->"356bd304-ec8f-4e3c-ab20-8faaaa52db7c",
 CellTags->"Functional Programming"],
Cell[73349, 2087, 587, 17, 84, "Input",ExpressionUUID->"e701e483-51f6-4bc0-bfc9-c27569220ec5",
 CellTags->"Functional Programming"],
Cell[73939, 2106, 540, 14, 76, "CodeText",ExpressionUUID->"acdc4f2f-9dd4-4578-b4a3-c16109767776",
 CellTags->"Functional Programming"],
Cell[74482, 2122, 14247, 302, 43, "Text",ExpressionUUID->"295efc09-8b5b-4500-9f2a-7033d36c9222"],
Cell[88732, 2426, 488, 15, 80, "Input",ExpressionUUID->"71f04d3f-aedb-4dee-80d8-8af51f20aca9",
 CellTags->"Functional Programming"],
Cell[89223, 2443, 256, 6, 44, "CodeText",ExpressionUUID->"54fab873-392b-417a-a05b-c71dda0dd405",
 CellTags->"Functional Programming"],
Cell[89482, 2451, 195, 4, 51, "Input",ExpressionUUID->"4fe80fe7-f845-42db-ad1c-c620f685ea4b",
 CellTags->"Functional Programming"],
Cell[89680, 2457, 311, 8, 44, "CodeText",ExpressionUUID->"66a85f7e-ac70-456e-8b9e-c805c4c6e52d",
 CellTags->"Functional Programming"],
Cell[89994, 2467, 266, 8, 55, "Input",ExpressionUUID->"bb7fd396-5b50-4b6b-86ad-0832aea3daa6",
 CellTags->"Functional Programming"],
Cell[90263, 2477, 77, 0, 136, "EndOfSlide",ExpressionUUID->"c23090cd-fed2-41ac-9622-a361671db1f7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[90389, 2483, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"85c56189-4f08-46c5-9075-a4fa7ea05e48",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[90536, 2489, 226, 4, 230, "Section",ExpressionUUID->"dec9e1b5-ec06-42a6-8558-31f5bad23a7a",
 CellTags->"Functional Programming"],
Cell[90765, 2495, 282, 7, 76, "Text",ExpressionUUID->"c0c5aeb3-bb23-4701-904c-cd144dfa8e60",
 CellTags->"Functional Programming"],
Cell[91050, 2504, 510, 14, 76, "CodeText",ExpressionUUID->"160daa40-5a33-47c9-8ba4-68e66c95b1a1",
 CellTags->"Functional Programming"],
Cell[91563, 2520, 438, 13, 71, "Input",ExpressionUUID->"65efe0dc-76df-4417-b84f-5ce170b15bb3",
 CellTags->"Functional Programming"],
Cell[92004, 2535, 205, 3, 44, "CodeText",ExpressionUUID->"44b2d937-9588-4239-ba8f-0da2a9fa2cf8"],
Cell[92212, 2540, 643, 15, 218, "Input",ExpressionUUID->"f1ae1a0b-4b92-4703-816a-f8b103e20546"],
Cell[92858, 2557, 242, 4, 44, "CodeText",ExpressionUUID->"aa4470cf-51d6-4658-90a5-0a5ff2ef280d",
 CellTags->"Functional Programming"],
Cell[93103, 2563, 548, 15, 116, "Input",ExpressionUUID->"3294d1eb-251f-4e91-9e9c-f5e5a899dbaf",
 CellTags->"Functional Programming"],
Cell[93654, 2580, 265, 6, 44, "CodeText",ExpressionUUID->"b8b05ca0-c545-4d52-931c-c32a4d97293a",
 CellTags->"Functional Programming"],
Cell[93922, 2588, 665, 18, 116, "Input",ExpressionUUID->"df334a64-923e-4e6d-98c9-fa3c326bc2fe",
 CellTags->"Functional Programming"],
Cell[94590, 2608, 77, 0, 136, "EndOfSlide",ExpressionUUID->"8473f7ac-2ef7-4fd0-a646-951fd548ccd8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[94716, 2614, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9d8f8c6c-7a25-4184-9811-052fb4a4e7be",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[94863, 2620, 242, 4, 321, "Section",ExpressionUUID->"c69febd3-839e-4120-bc63-f8841bb498b3",
 CellTags->"Functional Programming"],
Cell[95108, 2626, 619, 18, 76, "Text",ExpressionUUID->"02c127ca-c2f6-40fb-9ee5-deb90a6266ff",
 CellTags->"Functional Programming"],
Cell[95730, 2646, 379, 13, 76, "CodeText",ExpressionUUID->"3e3d8a06-2c99-4154-9d6c-3b5a95cbc517"],
Cell[96112, 2661, 582, 18, 65, "Input",ExpressionUUID->"8077f004-fe9d-4821-8118-ff68ae359697"],
Cell[96697, 2681, 835, 24, 76, "CodeText",ExpressionUUID->"2f168c63-f203-4bc7-ab74-c38bf19dacea",
 CellTags->"Functional Programming"],
Cell[97535, 2707, 793, 23, 91, "Input",ExpressionUUID->"d032f0b2-5228-4968-9a4f-1d6e89cb2cd4",
 CellTags->"Functional Programming"],
Cell[98331, 2732, 941, 29, 108, "CodeText",ExpressionUUID->"ba8f06d9-ad7c-4bbe-92fd-68fa547fa8dc",
 CellTags->"Functional Programming"],
Cell[99275, 2763, 882, 26, 84, "Input",ExpressionUUID->"428ef240-96d5-4857-b595-9b95b5d30a5a"],
Cell[100160, 2791, 77, 0, 136, "EndOfSlide",ExpressionUUID->"54578211-73df-4cd2-81e0-03fa0e98f82f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[100286, 2797, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9a764fa0-6e32-4787-b369-c8a01a386437",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[100433, 2803, 204, 4, 139, "Section",ExpressionUUID->"1b421f36-022d-436a-8abe-1c12b83436d3",
 CellTags->"Functional Programming"],
Cell[100640, 2809, 188, 5, 44, "Text",ExpressionUUID->"1fa60dd4-099d-43a4-b2fe-a46e9f27a9d4",
 CellTags->"Functional Programming"],
Cell[100831, 2816, 158, 3, 44, "Item",ExpressionUUID->"b560e226-06d6-40cc-9d18-ce92b1313c4f",
 CellTags->"Functional Programming"],
Cell[100992, 2821, 202, 6, 44, "Item",ExpressionUUID->"64902565-9d72-49eb-8ccf-eceffedfe802",
 CellTags->"Functional Programming"],
Cell[101197, 2829, 153, 3, 44, "Item",ExpressionUUID->"183a71f9-9e0f-43b9-a457-0f2da58a6a32",
 CellTags->"Functional Programming"],
Cell[101353, 2834, 442, 14, 44, "CodeText",ExpressionUUID->"98f69873-80a6-46ab-a194-38493b2d43a6",
 CellTags->"Functional Programming"],
Cell[101798, 2850, 342, 10, 51, "Input",ExpressionUUID->"50b7efa7-1825-477e-b9c0-b3b62d442eef",
 CellTags->"Functional Programming"],
Cell[102143, 2862, 499, 14, 76, "CodeText",ExpressionUUID->"45846869-3736-4aed-8404-c708d27eecdb",
 CellTags->"Functional Programming"],
Cell[102645, 2878, 376, 11, 51, "Input",ExpressionUUID->"af36f5fe-0b98-4168-b6ca-b84366e5be28",
 CellTags->"Functional Programming"],
Cell[103024, 2891, 446, 14, 44, "CodeText",ExpressionUUID->"dbe165d8-7f45-49eb-9a5a-691f730a5f14",
 CellTags->"Functional Programming"],
Cell[103473, 2907, 344, 10, 51, "Input",ExpressionUUID->"db07c2ed-cd8f-4213-ba2b-34e3f2213fa6",
 CellTags->"Functional Programming"],
Cell[103820, 2919, 443, 12, 76, "CodeText",ExpressionUUID->"1de0deeb-5838-4bf9-8291-d629bc508b32",
 CellTags->"Functional Programming"],
Cell[104266, 2933, 378, 11, 51, "Input",ExpressionUUID->"5226a759-f971-4d30-84d8-a6e434c5e0dd",
 CellTags->"Functional Programming"],
Cell[104647, 2946, 77, 0, 136, "EndOfSlide",ExpressionUUID->"fc7316a0-824d-4cb9-bba1-7b9bf8a0f3c4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[104773, 2952, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"291df447-2d4a-4e81-97b3-99963d98119b",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[104920, 2958, 221, 4, 230, "Section",ExpressionUUID->"95a2e919-4e8f-43a0-8f53-5fadfce8ec95",
 CellTags->"Functional Programming"],
Cell[105144, 2964, 309, 7, 76, "Text",ExpressionUUID->"ef5f8f6b-f561-453a-931a-0067c12185b4",
 CellTags->"Functional Programming"],
Cell[105456, 2973, 268, 6, 44, "CodeText",ExpressionUUID->"ac8c9149-a5c0-4c9f-92d6-cd3a7cb45742",
 CellTags->"Functional Programming"],
Cell[105727, 2981, 367, 11, 51, "Input",ExpressionUUID->"fbddccac-da6d-4ee7-868f-3f06eb26b6f2",
 CellTags->"Functional Programming"],
Cell[106097, 2994, 260, 6, 44, "CodeText",ExpressionUUID->"18a0e812-bba9-4a68-bb26-e75cbcaa2c32",
 CellTags->"Functional Programming"],
Cell[106360, 3002, 469, 14, 51, "Input",ExpressionUUID->"9cc6b9cd-11c3-429b-a590-02561728bee3",
 CellTags->"Functional Programming"],
Cell[106832, 3018, 470, 13, 76, "CodeText",ExpressionUUID->"206c5fca-2e88-48bc-b054-f8772bf9966c",
 CellTags->"Functional Programming"],
Cell[107305, 3033, 193, 4, 51, "Input",ExpressionUUID->"78c99de4-5abb-457f-9226-4eb486a68db0",
 CellTags->"Functional Programming"],
Cell[107501, 3039, 225, 4, 44, "CodeText",ExpressionUUID->"b67b493c-0a05-4a13-9aac-96c9dfd81ae0",
 CellTags->"Functional Programming"],
Cell[107729, 3045, 287, 8, 51, "Input",ExpressionUUID->"7745d7a5-6582-4b9b-80e5-1ca5608e7b23",
 CellTags->"Functional Programming"],
Cell[108019, 3055, 77, 0, 136, "EndOfSlide",ExpressionUUID->"dbfeb722-2fc4-4f01-a39d-620e141512f8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108145, 3061, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"94172dd2-2ac7-4c60-9a62-f45c75440363",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[108292, 3067, 226, 4, 230, "Section",ExpressionUUID->"ef880ebd-7375-4b8f-8efd-daa4e1a71f80",
 CellTags->"Functional Programming"],
Cell[108521, 3073, 264, 6, 44, "CodeText",ExpressionUUID->"f1ef7572-d5d8-4af7-bf3b-124580719f25",
 CellTags->"Functional Programming"],
Cell[108788, 3081, 367, 11, 51, "Input",ExpressionUUID->"15e5b918-226f-4294-83b3-51e84ce3c034",
 CellTags->"Functional Programming"],
Cell[109158, 3094, 255, 6, 44, "CodeText",ExpressionUUID->"ca4cd071-4b38-4090-b536-ecc7bfdfc0bb",
 CellTags->"Functional Programming"],
Cell[109416, 3102, 439, 13, 51, "Input",ExpressionUUID->"9c514f68-db6e-49b7-8f4e-4bb56d4ae86c",
 CellTags->"Functional Programming"],
Cell[109858, 3117, 239, 4, 44, "CodeText",ExpressionUUID->"37ed0ee5-f0cc-4df6-a5f6-5a22cf422f31",
 CellTags->"Functional Programming"],
Cell[110100, 3123, 227, 5, 51, "Input",ExpressionUUID->"12cf3087-a902-4931-b780-8b8884ebddc9",
 CellTags->"Functional Programming"],
Cell[110330, 3130, 224, 4, 44, "CodeText",ExpressionUUID->"9f47479e-f1d5-4959-a7e9-4afdeb30d961",
 CellTags->"Functional Programming"],
Cell[110557, 3136, 274, 7, 51, "Input",ExpressionUUID->"e417f4bb-ceee-4701-a820-4342ef1d9e03",
 CellTags->"Functional Programming"],
Cell[110834, 3145, 77, 0, 136, "EndOfSlide",ExpressionUUID->"846ff346-00ad-48a3-808d-a3aae8657c72"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[110960, 3151, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"70fc80e3-2d4d-4903-8855-2e70bfeaeb3a",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[111107, 3157, 232, 4, 230, "Section",ExpressionUUID->"326cb7e0-35b8-444c-b274-5476959e5d0f",
 CellTags->"Functional Programming"],
Cell[111342, 3163, 610, 18, 76, "CodeText",ExpressionUUID->"982e0a1d-0ee9-4b90-b4f4-522224a2f7ec",
 CellTags->"Functional Programming"],
Cell[111955, 3183, 336, 8, 51, "Input",ExpressionUUID->"deabd01e-054c-4339-8287-a9cabc4ca54c",
 CellTags->"Functional Programming"],
Cell[112294, 3193, 366, 10, 51, "Input",ExpressionUUID->"a2ecd791-f8e3-4303-9e58-7bfd52faa315",
 CellTags->"Functional Programming"],
Cell[112663, 3205, 261, 6, 44, "CodeText",ExpressionUUID->"f59f9edc-c48e-499b-9d90-8a7920ca0f2a",
 CellTags->"Functional Programming"],
Cell[112927, 3213, 259, 6, 51, "Input",ExpressionUUID->"40f4c13e-f90b-4b28-ac05-9db0d42dedef",
 CellTags->"Functional Programming"],
Cell[113189, 3221, 405, 12, 44, "CodeText",ExpressionUUID->"5e10c3c0-38cd-46f9-813a-70c12b2f9277",
 CellTags->"Functional Programming"],
Cell[113597, 3235, 237, 5, 51, "Input",ExpressionUUID->"0f406cdf-a622-4678-bcdb-1ce4f4807359",
 CellTags->"Functional Programming"],
Cell[113837, 3242, 386, 12, 44, "CodeText",ExpressionUUID->"efa9d418-4e9b-4704-a58c-39edeed00daf",
 CellTags->"Functional Programming"],
Cell[114226, 3256, 236, 5, 51, "Input",ExpressionUUID->"3ad91556-62ee-49b9-8e91-d7dd1aef4d79",
 CellTags->"Functional Programming"],
Cell[114465, 3263, 365, 10, 44, "CodeText",ExpressionUUID->"7f83d2d6-a58c-46da-b8dc-311bf33d8076"],
Cell[114833, 3275, 222, 5, 51, "Input",ExpressionUUID->"8c7cdefc-4ece-4d2f-b481-21f4586e589a"],
Cell[115058, 3282, 588, 19, 76, "CodeText",ExpressionUUID->"a26d88e4-2b16-41ec-aca0-1d4bcec2e1f5",
 CellTags->"Functional Programming"],
Cell[115649, 3303, 236, 5, 51, "Input",ExpressionUUID->"75f1b418-b643-4b81-90dc-bc0122fa0ad6",
 CellTags->"Functional Programming"],
Cell[115888, 3310, 77, 0, 136, "EndOfSlide",ExpressionUUID->"f54030a4-8401-40f2-8db2-86ce60a516d9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116014, 3316, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"14322b82-75a3-4201-aef2-678e121b31e8",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[116161, 3322, 210, 4, 230, "Section",ExpressionUUID->"bcbe3f4d-86d1-4b44-8141-420cdc2c161e",
 CellTags->"Options and Messages"],
Cell[116374, 3328, 192, 4, 44, "Item",ExpressionUUID->"2dde8249-225d-426c-afde-9f632cbfd4ff",
 CellTags->"Options and Messages"],
Cell[116569, 3334, 525, 16, 44, "Item",ExpressionUUID->"7f21b060-d692-4f85-83bf-84098beebafd",
 CellTags->"Options and Messages"],
Cell[117097, 3352, 185, 4, 44, "Item",ExpressionUUID->"87c579f7-2b82-4108-ac44-74c9bec3fa28",
 CellTags->"Options and Messages"],
Cell[117285, 3358, 180, 4, 44, "Item",ExpressionUUID->"521e249a-7eb3-477a-97d1-810bbbd8151f",
 CellTags->"Options and Messages"],
Cell[117468, 3364, 169, 4, 44, "Item",ExpressionUUID->"76c05132-266c-48f1-8cf8-776bce6153d0",
 CellTags->"Options and Messages"],
Cell[117640, 3370, 77, 0, 136, "EndOfSlide",ExpressionUUID->"4de48b50-a754-4a9a-8c3d-e68e4a3669e4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[117766, 3376, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"01e5aac3-942f-401e-90ae-9e9544e28963",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[117913, 3382, 163, 4, 139, "Section",ExpressionUUID->"e67a6a1e-16a3-4ae4-85e5-ec5168c5a725",
 CellTags->"Options and Messages"],
Cell[118079, 3388, 382, 8, 108, "Text",ExpressionUUID->"887b61a1-9bd8-45f2-a709-fde0c36bc6a9",
 CellTags->"Options and Messages"],
Cell[118464, 3398, 761, 25, 76, "CodeText",ExpressionUUID->"30858268-c3c1-49d7-a3d2-3a445dc69d84",
 CellTags->"Options and Messages"],
Cell[119228, 3425, 184, 5, 51, "Input",ExpressionUUID->"c533d533-3c99-470f-bd2d-8e6b8263ce53",
 CellTags->"Options and Messages"],
Cell[119415, 3432, 627, 19, 76, "CodeText",ExpressionUUID->"d81090cb-3c03-4df1-bf6f-8f463d5ad6a7",
 CellTags->"Options and Messages"],
Cell[120045, 3453, 442, 13, 62, "Input",ExpressionUUID->"b67a9d88-2b6d-45d7-8961-bfc14338c4ca",
 CellTags->"Options and Messages"],
Cell[120490, 3468, 77, 0, 136, "EndOfSlide",ExpressionUUID->"e19069d0-3c69-463d-9d23-196e26e522b9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[120616, 3474, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b2e5fb60-d33d-420b-8df0-3c1b8648303a",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[120763, 3480, 196, 4, 139, "Section",ExpressionUUID->"7e6ac3ea-9d52-408f-9e89-2d8815ab7903",
 CellTags->"Options and Messages"],
Cell[120962, 3486, 288, 7, 76, "Text",ExpressionUUID->"6a003f37-a49a-4a9d-a920-01302dff83b3",
 CellTags->"Options and Messages"],
Cell[121253, 3495, 383, 12, 76, "CodeText",ExpressionUUID->"e2235856-e391-43fb-9d62-1f6d9726d4d4",
 CellTags->"Options and Messages"],
Cell[121639, 3509, 311, 8, 51, "Input",ExpressionUUID->"64ceef36-f9fc-4463-8b52-efdd27240f20",
 CellTags->"Options and Messages"],
Cell[121953, 3519, 650, 20, 76, "CodeText",ExpressionUUID->"4941d61a-5279-4406-86ba-c36997e357af",
 CellTags->"Options and Messages"],
Cell[122606, 3541, 410, 11, 80, "Input",ExpressionUUID->"2bb9decd-b572-49fb-822b-f511d0c7ab9f",
 CellTags->"Options and Messages"],
Cell[123019, 3554, 317, 8, 44, "CodeText",ExpressionUUID->"94625aae-aa1b-48c8-ba8b-5136dd712955",
 CellTags->"Options and Messages"],
Cell[123339, 3564, 167, 3, 51, "Input",ExpressionUUID->"1a0e47e9-172f-466d-81d7-1604cc9390c4",
 CellTags->"Options and Messages"],
Cell[123509, 3569, 292, 7, 76, "CodeText",ExpressionUUID->"2e46edcb-11e9-4866-a7ec-a1dd48189cc2",
 CellTags->"Options and Messages"],
Cell[123804, 3578, 279, 6, 51, "Input",ExpressionUUID->"d16896a8-dd54-4a72-952e-928dbea7e45e",
 CellTags->"Options and Messages"],
Cell[124086, 3586, 77, 0, 136, "EndOfSlide",ExpressionUUID->"6abafe8d-7859-4483-b948-46a5dffcdfb5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[124212, 3592, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"7ad5570d-3d39-4ba2-94b3-ffdfbb0651ad",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[124359, 3598, 228, 5, 139, "Section",ExpressionUUID->"63df9f1b-3491-4993-ae06-64d4aa4a2f2f",
 CellTags->"Options and Messages"],
Cell[124590, 3605, 360, 10, 76, "Text",ExpressionUUID->"c1c9fce2-d8f1-49d5-8a1b-c37d18b4850e",
 CellTags->"Options and Messages"],
Cell[124953, 3617, 852, 24, 140, "CodeText",ExpressionUUID->"47669f05-a3c2-445d-84ea-fc8eebafe370",
 CellTags->"Options and Messages"],
Cell[125808, 3643, 380, 11, 51, "Input",ExpressionUUID->"fd285d65-f769-43a0-b706-1309dd638ede",
 CellTags->"Options and Messages"],
Cell[126191, 3656, 655, 20, 84, "Input",ExpressionUUID->"09be267f-ff76-42c5-a97d-c003d39feb35",
 CellTags->"Options and Messages"],
Cell[126849, 3678, 498, 14, 76, "CodeText",ExpressionUUID->"fb4039e1-8e70-4095-8a18-7937dff62562",
 CellTags->"Options and Messages"],
Cell[127350, 3694, 271, 7, 51, "Input",ExpressionUUID->"b98528c0-3595-401c-9a57-c58517ee60bc",
 CellTags->"Options and Messages"],
Cell[127624, 3703, 484, 14, 44, "CodeText",ExpressionUUID->"21996930-ab0a-4e53-8227-2d01d7cdc051",
 CellTags->"Options and Messages"],
Cell[128111, 3719, 177, 3, 51, "Input",ExpressionUUID->"bdca0c09-d991-477a-8262-910bbf95c6db",
 CellTags->"Options and Messages"],
Cell[128291, 3724, 391, 11, 76, "CodeText",ExpressionUUID->"301965d9-0c78-406f-ba65-82e89002d551",
 CellTags->"Options and Messages"],
Cell[128685, 3737, 253, 6, 51, "Input",ExpressionUUID->"c6047a0c-5412-4033-8ba2-5dc12b5075ce"],
Cell[128941, 3745, 505, 13, 84, "Input",ExpressionUUID->"159b5036-055a-4fd9-a001-63842d4f265e",
 CellTags->"Options and Messages"],
Cell[129449, 3760, 320, 9, 44, "CodeText",ExpressionUUID->"60dcda93-0b39-4dee-b503-d5639803b999",
 CellTags->"Options and Messages"],
Cell[129772, 3771, 178, 3, 51, "Input",ExpressionUUID->"02bce44e-138b-445d-a136-02f48a4ae37c",
 CellTags->"Options and Messages"],
Cell[129953, 3776, 322, 9, 44, "CodeText",ExpressionUUID->"db9b5ff6-53c4-45b7-bcb7-7842dfbfd5cf",
 CellTags->"Options and Messages"],
Cell[130278, 3787, 239, 5, 51, "Input",ExpressionUUID->"6bb0888b-c0fd-43f7-aa0c-278dda8be763",
 CellTags->"Options and Messages"],
Cell[130520, 3794, 292, 6, 51, "Input",ExpressionUUID->"bc5ef6f0-c670-43d1-a8b7-b70732362b17",
 CellTags->"Options and Messages"],
Cell[130815, 3802, 77, 0, 136, "EndOfSlide",ExpressionUUID->"bdde44e9-b3ca-47b2-9908-8a69159a9d1f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130941, 3808, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9452aa05-632a-4743-b1c1-735a152d0a21",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[131088, 3814, 200, 4, 139, "Section",ExpressionUUID->"fbb1ad78-6977-4a76-973e-095f64bf522b",
 CellTags->"Options and Messages"],
Cell[131291, 3820, 437, 13, 76, "Text",ExpressionUUID->"043fecba-cfa1-41c2-9406-ef46d3925590",
 CellTags->"Options and Messages"],
Cell[131731, 3835, 476, 14, 76, "CodeText",ExpressionUUID->"5b23e5b3-ee0b-43a7-9cf7-3a5f5aa71582"],
Cell[132210, 3851, 230, 5, 51, "Input",ExpressionUUID->"0b570194-8a57-4149-9e96-dd0c911cc704",
 CellTags->"Options and Messages"],
Cell[132443, 3858, 450, 11, 108, "Text",ExpressionUUID->"d5a4f09a-4e96-456a-ad91-fe089edfc01a",
 CellTags->"Options and Messages"],
Cell[132896, 3871, 325, 9, 44, "CodeText",ExpressionUUID->"691d3750-496c-4fac-9133-8cf0091f6863",
 CellTags->"Options and Messages"],
Cell[133224, 3882, 361, 12, 51, "Input",ExpressionUUID->"16a68b53-41b0-4aad-a05b-23ace5a39965",
 CellTags->"Options and Messages"],
Cell[133588, 3896, 636, 21, 84, "Input",ExpressionUUID->"8de96331-636e-49dc-9960-80e65e94a2fd",
 CellTags->"Options and Messages"],
Cell[134227, 3919, 231, 6, 51, "Input",ExpressionUUID->"4bad55fb-dabf-4ff1-8b3b-5e98dcc19ae4"],
Cell[134461, 3927, 486, 14, 84, "Input",ExpressionUUID->"88a5b31a-593d-40ba-9a44-1d256b1b4f1b",
 CellTags->"Options and Messages"],
Cell[134950, 3943, 678, 20, 76, "CodeText",ExpressionUUID->"67a29513-ef1c-41dd-8330-b66c47cf9adf"],
Cell[135631, 3965, 165, 4, 51, "Input",ExpressionUUID->"377c2f23-a073-4eab-b8f4-c41a29db881c",
 CellTags->"Options and Messages"],
Cell[135799, 3971, 501, 14, 76, "CodeText",ExpressionUUID->"f8596d62-f721-4a48-aefd-80087409983c",
 CellTags->"Options and Messages"],
Cell[136303, 3987, 279, 8, 84, "Input",ExpressionUUID->"8997969f-ed14-430e-9022-65ae8c922507",
 CellTags->"Options and Messages"],
Cell[136585, 3997, 690, 23, 76, "CodeText",ExpressionUUID->"966339b0-397a-4e14-b8ef-4c60becce0dd",
 CellTags->"Options and Messages"],
Cell[137278, 4022, 231, 6, 51, "Input",ExpressionUUID->"66ac30c1-fa74-4070-900e-bdab773306d4"],
Cell[137512, 4030, 940, 25, 244, "Input",ExpressionUUID->"fbad8590-f709-4bab-ba79-4d0086c4ca07",
 CellTags->"Options and Messages"],
Cell[138455, 4057, 365, 12, 44, "CodeText",ExpressionUUID->"507c0807-cbb9-41e4-8961-ac110e94075f"],
Cell[138823, 4071, 143, 4, 51, "Input",ExpressionUUID->"256619b0-f31a-4c32-b130-83c03868105f",
 CellTags->"Options and Messages"],
Cell[138969, 4077, 325, 9, 76, "CodeText",ExpressionUUID->"37e483b7-1e9f-42f3-b664-2cf939e51132"],
Cell[139297, 4088, 158, 4, 51, "Input",ExpressionUUID->"e75f81ce-abd2-4fe5-83f0-75c01cf4e1f1",
 CellTags->"Options and Messages"],
Cell[139458, 4094, 222, 6, 51, "Input",ExpressionUUID->"5f05d720-bdf9-4bb9-a27e-2947e8ff0d8e",
 CellTags->"Options and Messages"],
Cell[139683, 4102, 77, 0, 136, "EndOfSlide",ExpressionUUID->"3dca64a6-ae03-42cf-85d0-0a47e6a75b0c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[139809, 4108, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"e350a97b-0c2e-43f3-b780-6e9dcba7f299",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[139956, 4114, 194, 4, 139, "Section",ExpressionUUID->"30ed55c0-1955-49aa-995d-4b9d2df4e4c6",
 CellTags->"Options and Messages"],
Cell[140153, 4120, 326, 9, 76, "Text",ExpressionUUID->"26609986-f9ac-45cf-a7f7-5726a2dd461a",
 CellTags->"Options and Messages"],
Cell[140482, 4131, 396, 12, 44, "CodeText",ExpressionUUID->"3a176cfe-6853-405b-8808-b4240406abca",
 CellTags->"Options and Messages"],
Cell[140881, 4145, 150, 4, 51, "Input",ExpressionUUID->"9b850fc1-7dae-42b8-94c5-5b5572a0e8eb",
 CellTags->"Options and Messages"],
Cell[141034, 4151, 288, 7, 76, "CodeText",ExpressionUUID->"6e47781c-82cd-4a35-93e0-7fd265b1ba14",
 CellTags->"Options and Messages"],
Cell[141325, 4160, 395, 9, 148, "Input",ExpressionUUID->"9152b1bc-6f9b-455b-8d48-8c53bf01b37d",
 CellTags->"Options and Messages"],
Cell[141723, 4171, 392, 9, 76, "CodeText",ExpressionUUID->"fd325e3f-42c1-4544-84df-1eefcc00bf4a",
 CellTags->"Options and Messages"],
Cell[142118, 4182, 148, 4, 51, "Input",ExpressionUUID->"a87361aa-a135-4352-9efc-5dade47227b8",
 CellTags->"Options and Messages"],
Cell[142269, 4188, 351, 10, 76, "Text",ExpressionUUID->"b12f2afa-fd66-45bd-9d75-4489a6dcd4b2",
 CellTags->"Options and Messages"],
Cell[142623, 4200, 77, 0, 136, "EndOfSlide",ExpressionUUID->"a95e6fb9-6d4e-4e1d-957d-bdf42789e5ac"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[142749, 4206, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"306f6466-fe2f-4c0a-bf84-c9170bc018b4",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[142896, 4212, 112, 2, 139, "Section",ExpressionUUID->"6e521c99-f826-4a9d-a86c-4765ee0992fe",
 CellTags->"Efficiency"],
Cell[143011, 4216, 273, 6, 76, "Text",ExpressionUUID->"998d59af-1e24-4220-b275-45fd119be89c",
 CellTags->"Efficiency"],
Cell[143287, 4224, 171, 3, 44, "Item",ExpressionUUID->"011d68cc-57ca-41b3-9f7d-fc7ec961ec66",
 CellTags->"Efficiency"],
Cell[143461, 4229, 233, 6, 44, "Item",ExpressionUUID->"38e49911-fb53-4537-8438-ad6b86826a0c",
 CellTags->"Efficiency"],
Cell[143697, 4237, 193, 3, 44, "Item",ExpressionUUID->"fcece4fa-841a-4323-ad35-650a9dcbeddc",
 CellTags->"Efficiency"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[143939, 4246, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"c2a86170-7f44-460d-bf40-a4f651125d5d",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[144086, 4252, 192, 3, 139, "Section",ExpressionUUID->"59adc369-0772-4a3a-a9a9-dd2721e4c92f",
 CellTags->"Efficiency"],
Cell[144281, 4257, 217, 5, 76, "Text",ExpressionUUID->"51fceb91-2493-437a-ba99-c96f6dbd7c17",
 CellTags->"Efficiency"],
Cell[144501, 4264, 256, 6, 44, "Text",ExpressionUUID->"bef57ffd-a484-4b6f-95d9-df50f28c85fc",
 CellTags->"Efficiency"],
Cell[144760, 4272, 430, 12, 76, "CodeText",ExpressionUUID->"546dfcc2-607f-4e73-97f2-bd68c9dccfee"],
Cell[145193, 4286, 520, 14, 116, "Input",ExpressionUUID->"ed328a36-eced-4b3b-82cd-373e2668c767",
 CellTags->"Efficiency"],
Cell[145716, 4302, 244, 5, 44, "CodeText",ExpressionUUID->"e33a8589-69bf-4529-922b-ab1b6138c20d",
 CellTags->"Efficiency"],
Cell[145963, 4309, 602, 17, 148, "Input",ExpressionUUID->"387be70f-cacc-4cab-b08f-8f2379e7a8d9",
 CellTags->"Efficiency"],
Cell[146568, 4328, 587, 17, 76, "CodeText",ExpressionUUID->"bbacb5f9-f620-4c45-b3b9-237d8fc8ba80",
 CellTags->"Efficiency"],
Cell[147158, 4347, 563, 15, 116, "Input",ExpressionUUID->"3758c398-811d-421b-ae35-4e04112677f0",
 CellTags->"Efficiency"],
Cell[147724, 4364, 77, 0, 136, "EndOfSlide",ExpressionUUID->"cef53c3f-5290-4f4c-bfa4-94d59b3b9b01"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[147850, 4370, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"0992b897-6a93-4375-922a-b5685a15f362",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[147997, 4376, 191, 3, 139, "Section",ExpressionUUID->"be212968-1029-4dd7-809f-e39bd18a375b",
 CellTags->"Efficiency"],
Cell[148191, 4381, 325, 6, 76, "Text",ExpressionUUID->"fb61cf92-2ee0-4f87-bc62-55e9a6c04263",
 CellTags->"Efficiency"],
Cell[148519, 4389, 278, 6, 74, "Item",ExpressionUUID->"62031956-01a6-4328-9c5b-f661bcee61d2",
 CellTags->"Efficiency"],
Cell[148800, 4397, 230, 5, 74, "Item",ExpressionUUID->"2fd88d41-90a5-4545-af56-d407bb918b71",
 CellTags->"Efficiency"],
Cell[149033, 4404, 77, 0, 136, "EndOfSlide",ExpressionUUID->"ce39ff86-d0fb-40f3-af82-7b0db1bf7728"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[149159, 4410, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"aeef65a3-211c-49a0-89cb-32b751ce0ab5",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[149306, 4416, 198, 3, 139, "Section",ExpressionUUID->"1e101bd1-5f3d-46bb-b32a-fb59a03c4f34",
 CellTags->"Efficiency"],
Cell[149507, 4421, 174, 4, 44, "Text",ExpressionUUID->"bb1f4fea-1174-4cfa-8a0a-d2b7ebe8c2f7",
 CellTags->"Efficiency"],
Cell[149684, 4427, 183, 3, 44, "CodeText",ExpressionUUID->"ca46c4f2-f048-4f6d-ad9a-3d398072d866",
 CellTags->"Efficiency"],
Cell[149870, 4432, 347, 10, 141, "Input",ExpressionUUID->"fced44d0-723d-48a0-9efe-cc91f023f111",
 CellTags->"Efficiency"],
Cell[150220, 4444, 494, 12, 76, "CodeText",ExpressionUUID->"95470c33-a5d5-4852-974e-2fa80d9e4b7b",
 CellTags->"Efficiency"],
Cell[150717, 4458, 529, 15, 84, "Input",ExpressionUUID->"41b150a5-9e05-4567-994e-4ad09426ec4f",
 CellTags->"Efficiency"],
Cell[151249, 4475, 652, 20, 76, "CodeText",ExpressionUUID->"72b48b07-4068-4d40-a02c-ed943d3f2b95",
 CellTags->"Efficiency"],
Cell[151904, 4497, 342, 9, 84, "Input",ExpressionUUID->"a6527030-1d49-4b5a-9dd9-58829e2ff8b9",
 CellTags->"Efficiency"],
Cell[152249, 4508, 240, 5, 44, "CodeText",ExpressionUUID->"6c95430c-841a-44ce-8a0e-2404b3878fad",
 CellTags->"Efficiency"],
Cell[152492, 4515, 442, 13, 55, "Input",ExpressionUUID->"b243b77c-0649-457b-82ac-ad31ce3fbe85",
 CellTags->"Efficiency"],
Cell[152937, 4530, 517, 14, 116, "Input",ExpressionUUID->"4853b433-108a-494a-ad72-20373de806f8",
 CellTags->"Efficiency"],
Cell[153457, 4546, 309, 7, 116, "Input",ExpressionUUID->"225aa32d-ff30-4ac8-90ee-fd8cfcb8f3a4",
 CellTags->"Efficiency"],
Cell[153769, 4555, 362, 9, 116, "Input",ExpressionUUID->"1794b9e3-a02f-496a-9f99-b7f4703d5b06",
 CellTags->"Efficiency"],
Cell[154134, 4566, 245, 5, 76, "Text",ExpressionUUID->"225930b4-d12c-4a01-9038-9a21a2ba53e7",
 CellTags->"Efficiency"],
Cell[154382, 4573, 553, 16, 76, "CodeText",ExpressionUUID->"a9318dcb-f81d-45ca-9b95-65b7b6bc6b19",
 CellTags->"Efficiency"],
Cell[154938, 4591, 1230, 38, 215, "Input",ExpressionUUID->"f14a0097-7ad5-49c3-be66-9537489d0a72",
 CellTags->"Efficiency"],
Cell[156171, 4631, 292, 9, 44, "CodeText",ExpressionUUID->"d22b3db8-e3c0-42a5-a31c-2367e81a0a43",
 CellTags->"Efficiency"],
Cell[156466, 4642, 196, 5, 51, "Input",ExpressionUUID->"b3007fc9-a540-4b73-81c9-acf00d9fecd0",
 CellTags->"Efficiency"],
Cell[156665, 4649, 77, 0, 136, "EndOfSlide",ExpressionUUID->"adff284a-e59a-4797-9fbc-8bd3a3162904"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[156791, 4655, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"fc0287d3-bda2-48b5-9c09-dde1fff6e4dc",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[156938, 4661, 189, 3, 139, "Section",ExpressionUUID->"e973b2a7-7f05-4bc8-83b2-e62733d96c28",
 CellTags->"Efficiency"],
Cell[157130, 4666, 356, 7, 108, "Text",ExpressionUUID->"4c1b0a08-069b-415a-8f2f-856a6d6f6c48"],
Cell[157489, 4675, 836, 22, 84, "Text",ExpressionUUID->"822f198e-7edc-4388-892d-383b6c5cf1d1"],
Cell[158328, 4699, 228, 5, 44, "CodeText",ExpressionUUID->"e4708363-88e5-4e93-bdec-54d355262f99"],
Cell[158559, 4706, 603, 20, 84, "Input",ExpressionUUID->"659fec00-b3a8-465b-8e88-dea03d5aaa00"],
Cell[159165, 4728, 168, 3, 44, "CodeText",ExpressionUUID->"c7194e17-edc7-491f-bdb6-506aadd7ea12"],
Cell[159336, 4733, 426, 14, 65, "Input",ExpressionUUID->"ec0cf161-5a10-4dbb-9327-58f55efa7c18"],
Cell[159765, 4749, 183, 3, 44, "CodeText",ExpressionUUID->"33d69907-f48e-4870-9195-e299d034fb04"],
Cell[159951, 4754, 365, 12, 65, "Input",ExpressionUUID->"8a9cec64-5560-4e67-a973-88c3ac92b280"],
Cell[160319, 4768, 198, 5, 51, "Input",ExpressionUUID->"4b546570-393f-4947-ae94-04fd901abb26"],
Cell[160520, 4775, 441, 12, 76, "CodeText",ExpressionUUID->"a32b03ab-68ee-46cd-942a-4f2b93e423bd"],
Cell[160964, 4789, 658, 23, 130, "Input",ExpressionUUID->"850ddaae-0b2d-47d7-8393-ec7e6373cd9d"],
Cell[161625, 4814, 200, 3, 44, "CodeText",ExpressionUUID->"15a82142-3462-499a-99ca-b43da12b6d5d"],
Cell[161828, 4819, 358, 12, 55, "Input",ExpressionUUID->"37f2a2f0-ec68-4ac2-8b97-d7aeb4536568"],
Cell[162189, 4833, 461, 15, 65, "Input",ExpressionUUID->"8dc6dcbd-9ee4-4ad9-9933-e3fb5166436c"],
Cell[162653, 4850, 228, 7, 51, "Input",ExpressionUUID->"bf7036c2-f109-4d3d-b785-76f97107e395"],
Cell[162884, 4859, 719, 20, 216, "Input",ExpressionUUID->"41370aa1-8c48-48cc-87a2-acf87c02019e"],
Cell[163606, 4881, 146, 2, 44, "Text",ExpressionUUID->"a3c957df-014e-46f3-a783-c5aa3a1d03da"],
Cell[163755, 4885, 77, 0, 136, "EndOfSlide",ExpressionUUID->"ce1ba122-4941-42e2-8157-9a7e99cb4194"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[163881, 4891, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"509e7005-bc68-4ef8-bade-6c9288168e53",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[164028, 4897, 200, 3, 230, "Section",ExpressionUUID->"1d59e946-ff2f-4333-8e6d-7de93497e5ab",
 CellTags->"Efficiency"],
Cell[164231, 4902, 253, 5, 76, "Text",ExpressionUUID->"58ffce00-be9e-4756-a750-f5ecd521d4a4",
 CellTags->"Efficiency"],
Cell[164487, 4909, 354, 7, 76, "CodeText",ExpressionUUID->"58bf75d3-6003-4153-b10f-f75089c29940",
 CellTags->"Efficiency"],
Cell[164844, 4918, 423, 14, 80, "Input",ExpressionUUID->"ec26320e-fa6a-4446-8eb8-030219ebe67a",
 CellTags->"Efficiency"],
Cell[165270, 4934, 316, 7, 76, "CodeText",ExpressionUUID->"7cfc1ba2-41ed-44d7-a451-aa6d8b985a81",
 CellTags->"Efficiency"],
Cell[165589, 4943, 167, 4, 51, "Input",ExpressionUUID->"f3595f94-949c-4dcc-9613-0f6572aa1f40",
 CellTags->"Efficiency"],
Cell[165759, 4949, 305, 6, 76, "CodeText",ExpressionUUID->"858862ff-e552-4ce7-a8d3-8bc17910a797",
 CellTags->"Efficiency"],
Cell[166067, 4957, 339, 11, 80, "Input",ExpressionUUID->"8bbe6bcc-03af-40dc-9be6-3651f8297191",
 CellTags->"Efficiency"],
Cell[166409, 4970, 295, 6, 76, "CodeText",ExpressionUUID->"3549491b-464c-4d57-a6f5-6a0167fbfddf",
 CellTags->"Efficiency"],
Cell[166707, 4978, 477, 15, 80, "Input",ExpressionUUID->"5c97c333-ab10-42fb-a67e-56a63b2fe315",
 CellTags->"Efficiency"],
Cell[167187, 4995, 390, 12, 80, "Input",ExpressionUUID->"f92d123d-0c36-4b4f-9d4b-ddd4b3e7a206",
 CellTags->"Efficiency"],
Cell[167580, 5009, 464, 8, 172, "Text",ExpressionUUID->"2ff42857-a728-4e0e-aef2-ad468a7e00f6",
 CellTags->"Efficiency"],
Cell[168047, 5019, 77, 0, 136, "EndOfSlide",ExpressionUUID->"347f99bb-df30-4da8-affb-7c047735208a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168173, 5025, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b51a1512-1cfe-459b-ad01-d5ca8034a168",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[168320, 5031, 169, 2, 139, "Section",ExpressionUUID->"233bed71-f56f-473c-84fb-1eb6f734c6d0",
 CounterAssignments->{{"Chapter", 6}, {"ExerciseNumber", 0}},
 CellTags->"Exercises"],
Cell[CellGroupData[{
Cell[168514, 5037, 264, 9, 91, "Subsection",ExpressionUUID->"460bdb6e-0fd1-4cb9-bde2-2d2a0367fbc3",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[168781, 5048, 248, 8, 44, "Text",ExpressionUUID->"1fb825ae-8d94-48fc-af39-4bb5a9a0d80e",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[169032, 5058, 547, 15, 76, "Text",ExpressionUUID->"51409615-827f-4428-bdf5-36f69866b51d",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[169582, 5075, 929, 30, 76, "CodeText",ExpressionUUID->"1c52a726-d0c2-4c11-9842-bd0501cd831a",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[170514, 5107, 198, 5, 51, "Input",ExpressionUUID->"ff60fee8-1749-4ecf-a615-eb6509bbfb43",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[170715, 5114, 535, 14, 76, "CodeText",ExpressionUUID->"b872ed02-f773-496a-96de-577dad826497",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[171253, 5130, 197, 5, 51, "Input",ExpressionUUID->"05d379c3-5c24-4e16-9162-24932558873c",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[171453, 5137, 1343, 31, 43, "Text",ExpressionUUID->"e2afd1db-a254-4cce-b258-94f44cfe3fca"],
Cell[172799, 5170, 979, 28, 43, "Text",ExpressionUUID->"841ba6b2-bb26-43af-b35b-2a7cd9db3837"],
Cell[173781, 5200, 197, 5, 51, "Input",ExpressionUUID->"d49d1da0-7dff-4118-b9b7-206f28782956",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[173981, 5207, 1371, 31, 43, "Text",ExpressionUUID->"467c759f-2deb-47d6-9524-1314adc8cd96"],
Cell[175355, 5240, 2047, 51, 43, "Text",ExpressionUUID->"92927779-7a76-4fbf-a2e8-33e769cccec7"],
Cell[177405, 5293, 242, 7, 51, "Input",ExpressionUUID->"22c187cc-dc62-4032-9077-85699b0c7fcc",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[177650, 5302, 888, 21, 43, "Text",ExpressionUUID->"f5e3148d-93f1-433b-8801-7150ffb860c4"],
Cell[178541, 5325, 1264, 36, 43, "Text",ExpressionUUID->"114a7e52-464b-4d22-9eaa-f1c41cbc4a74"],
Cell[179808, 5363, 224, 6, 51, "Input",ExpressionUUID->"c77188c0-bc74-497c-8d5d-a20fd150c8a6",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[180035, 5371, 1450, 33, 43, "Text",ExpressionUUID->"61aea367-73fa-4823-9ca8-75fb353e625c"],
Cell[181488, 5406, 1010, 28, 43, "Text",ExpressionUUID->"7b33164e-0b3d-400f-aa30-bb19bf37cc43"],
Cell[182501, 5436, 308, 9, 51, "Input",ExpressionUUID->"bca72515-f547-4f30-aaf2-7c344b05c9e8",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[182812, 5447, 1360, 31, 43, "Text",ExpressionUUID->"b46f7b0f-960f-47c8-88c4-6c5dcd48771c"],
Cell[184175, 5480, 1531, 41, 43, "Text",ExpressionUUID->"b7ff6f9d-442d-4796-af7a-afa94ccd15a0"],
Cell[185709, 5523, 256, 7, 51, "Input",ExpressionUUID->"f85ebfbe-8c2d-4786-8e77-93df3fe8fb7d",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[185968, 5532, 1583, 37, 43, "Text",ExpressionUUID->"e78fc297-7a4e-4409-8ea8-c1b759545d42"],
Cell[187554, 5571, 1170, 32, 43, "Text",ExpressionUUID->"0f84af77-6ec1-4393-88cf-a5fdf90dd124"],
Cell[188727, 5605, 254, 7, 51, "Input",ExpressionUUID->"63330ea9-e177-45bf-928b-4252ed4a7926",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[188984, 5614, 1693, 40, 43, "Text",ExpressionUUID->"dff725b1-51b1-41c5-b111-8613cb5273b6"],
Cell[190680, 5656, 1030, 27, 43, "Text",ExpressionUUID->"a6598975-8427-49a3-9111-ee0efa0f3700"],
Cell[191713, 5685, 264, 8, 51, "Input",ExpressionUUID->"f33d5bbf-0d63-4dc3-994c-e3cfb6b6628b",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[191980, 5695, 1771, 41, 43, "Text",ExpressionUUID->"f0fefa44-9d46-423d-b8eb-9314b24ce29e"],
Cell[193754, 5738, 898, 25, 43, "Text",ExpressionUUID->"962ccee0-af20-47a6-9660-bf9e4c872a27"],
Cell[194655, 5765, 325, 10, 44, "Item",ExpressionUUID->"5f9d6f25-dbfe-43c3-9425-91f157214ee5",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[194983, 5777, 985, 27, 43, "Text",ExpressionUUID->"20d7d20a-85ed-4e33-a103-85827fbb71ab"]
}, Closed]],
Cell[CellGroupData[{
Cell[196005, 5809, 257, 10, 55, "Subsection",ExpressionUUID->"b712b4ff-9d23-4f89-a469-9cac59d58555",
 CellTags->{"Exercises", "Discarding Outliers"}],
Cell[196265, 5821, 253, 5, 44, "CodeText",ExpressionUUID->"437ba67d-3025-4903-8c62-952addce6cc0",
 CellTags->{"Exercises", "Discarding Outliers"}],
Cell[196521, 5828, 703, 14, 148, "Input",ExpressionUUID->"5756fb38-4bec-4581-b191-ded845b04af8",
 CellTags->{"Exercises", "Discarding Outliers"}],
Cell[197227, 5844, 466, 13, 76, "CodeText",ExpressionUUID->"26231579-2e4a-4ff8-afa2-4db05c10830b",
 CellTags->{"Exercises", "Discarding Outliers"}],
Cell[197696, 5859, 240, 7, 51, "Input",ExpressionUUID->"eaaf2900-18e9-4dde-afc7-c2897fc9f851",
 CellTags->{"Exercises", "Discarding Outliers"}],
Cell[197939, 5868, 636, 20, 76, "Text",ExpressionUUID->"8a5eab9d-ecbf-4f8b-9f56-75bf8b97fa23",
 CellTags->{"Exercises", "Discarding Outliers"}],
Cell[198578, 5890, 3279, 75, 43, "Text",ExpressionUUID->"cedb46ba-57a5-4bde-84ad-5e7a78c461a5"],
Cell[201860, 5967, 2467, 65, 43, "Text",ExpressionUUID->"0d0b9efc-c8ec-43d0-a31f-d093556e330e"]
}, Closed]],
Cell[CellGroupData[{
Cell[204364, 6037, 249, 9, 55, "Subsection",ExpressionUUID->"926afb49-14fc-4d47-b80a-2f7ac7e43627",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[204616, 6048, 300, 8, 44, "CodeText",ExpressionUUID->"f9757f34-2830-4418-b975-0908aecc4963",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[204919, 6058, 597, 17, 51, "Input",ExpressionUUID->"316b6933-fd5e-40e6-bdca-bf67ad8df361",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[205519, 6077, 538, 15, 76, "CodeText",ExpressionUUID->"3b1b9855-5679-4257-9f3d-3b3ec497801f",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[206060, 6094, 223, 6, 51, "Input",ExpressionUUID->"57928568-12e9-47dd-b66a-38004f32eb0a",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[206286, 6102, 353, 8, 44, "CodeText",ExpressionUUID->"ca47bb0a-9166-408c-b121-12822b600f48",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[206642, 6112, 320, 9, 51, "Input",ExpressionUUID->"00fef218-f164-49e6-9a73-dfdff11417b0",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[206965, 6123, 878, 27, 108, "Text",ExpressionUUID->"f9ad8e47-4806-47fd-b943-e7c3842cc95c",
 CellTags->{"Exercises", "Finding Elements"}],
Cell[207846, 6152, 2834, 65, 43, "Text",ExpressionUUID->"7ffd01f3-da16-4118-af51-a3c87b86c9f6"],
Cell[210683, 6219, 3781, 108, 43, "Text",ExpressionUUID->"b250f9fb-3e95-47cc-90ea-03d9471ad165"]
}, Closed]],
Cell[CellGroupData[{
Cell[214501, 6332, 265, 10, 55, "Subsection",ExpressionUUID->"f1d64c1e-e6d0-4efe-bdbd-01dd16df59f6",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[214769, 6344, 579, 16, 76, "Text",ExpressionUUID->"99b1acf6-d278-430c-8150-28139eb928ac",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[215351, 6362, 692, 22, 55, "Input",ExpressionUUID->"9f2b47f4-8a54-45b1-bea5-55cd33732c58",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[216046, 6386, 274, 7, 44, "CodeText",ExpressionUUID->"167ac253-0aa8-4e53-9000-9f93074d2013",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[216323, 6395, 280, 9, 51, "Input",ExpressionUUID->"e4eb675d-64d2-47dc-b345-aa009ea56c30",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[216606, 6406, 447, 13, 44, "CodeText",ExpressionUUID->"5157c807-eb38-4576-a8b9-2f6c0b3ed796",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[217056, 6421, 284, 9, 51, "Input",ExpressionUUID->"6f68e9d6-ee25-480d-a7a4-8310e41acb82",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[217343, 6432, 246, 7, 44, "Text",ExpressionUUID->"f6c965eb-d689-4185-8472-72e165b88c48",
 CellTags->{"Exercises", "Selecting Solutions"}],
Cell[217592, 6441, 3400, 88, 43, "Text",ExpressionUUID->"d6d71c1f-7752-4608-bc64-fec7c51e9411"]
}, Closed]],
Cell[CellGroupData[{
Cell[221029, 6534, 266, 10, 55, "Subsection",ExpressionUUID->"3125c2b6-952a-48c4-9c7f-c9ab79c8d1d2",
 CellTags->{"Exercises", "Working with Pure Functions"}],
Cell[221298, 6546, 784, 23, 44, "CodeText",ExpressionUUID->"958eb617-a2ca-4951-b41a-846c5a0c559b",
 CellTags->{"Exercises", "Working with Pure Functions"}],
Cell[222085, 6571, 728, 23, 84, "Input",ExpressionUUID->"674157f7-71dd-4932-b7c6-46acd35b9ccf",
 CellTags->{"Exercises", "Working with Pure Functions"}],
Cell[222816, 6596, 1108, 34, 140, "Text",ExpressionUUID->"a42b7b9a-d260-4cde-b36c-18404b7c288a",
 CellTags->{"Exercises", "Working with Pure Functions"}],
Cell[223927, 6632, 2153, 55, 43, "Text",ExpressionUUID->"2bf6e540-28a6-4871-a0a5-2ce7c2a00f54"]
}, Closed]],
Cell[CellGroupData[{
Cell[226117, 6692, 246, 10, 55, "Subsection",ExpressionUUID->"fe501e8c-3c59-4573-bf52-cd8bf3b0d279",
 CellTags->{"Exercises", "Distance Function"}],
Cell[226366, 6704, 310, 8, 76, "CodeText",ExpressionUUID->"5cef4eb4-37f8-47f1-b849-4dca12480f13",
 CellTags->{"Exercises", "Distance Function"}],
Cell[226679, 6714, 765, 27, 51, "Input",ExpressionUUID->"9cc0dfe3-8361-43b5-83c2-1ebf2e61a888",
 CellTags->{"Exercises", "Distance Function"}],
Cell[227447, 6743, 476, 16, 51, "Input",ExpressionUUID->"5c460460-b35a-4a31-bad1-e07c3c5c6933",
 CellTags->{"Exercises", "Distance Function"}],
Cell[227926, 6761, 497, 13, 108, "Text",ExpressionUUID->"0c86265d-b1ca-462e-a7b5-2baa6a88e6d5",
 CellTags->{"Exercises", "Distance Function"}],
Cell[228426, 6776, 6874, 174, 43, "Text",ExpressionUUID->"997cb156-7890-4eb7-bee7-e562978579c9"],
Cell[235303, 6952, 291, 8, 76, "Text",ExpressionUUID->"acdc5970-14a3-4bdd-a2bc-5825b83d5b51",
 CellTags->{"Exercises", "Distance Function"}],
Cell[235597, 6962, 2571, 69, 43, "Text",ExpressionUUID->"10b6ee71-afd2-4e4b-95ca-17a6615ecad1"],
Cell[238171, 7033, 483, 13, 76, "Text",ExpressionUUID->"0b24a10e-c37c-40c8-aae2-68ed1c209d73",
 CellTags->{"Exercises", "Distance Function"}],
Cell[238657, 7048, 9003, 210, 43, "Text",ExpressionUUID->"6a769de8-efcc-4e52-8e93-bdc460b87b32"]
}, Closed]],
Cell[CellGroupData[{
Cell[247697, 7263, 260, 10, 55, "Subsection",ExpressionUUID->"a8298410-ac83-4bea-80c2-b53be21467ed",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[247960, 7275, 650, 17, 76, "CodeText",ExpressionUUID->"60728bbe-bc67-46e9-a5b6-c51e5a18e371",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[248613, 7294, 354, 10, 51, "Input",ExpressionUUID->"1592c10d-88a1-473b-96e7-70911128ffc6",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[248970, 7306, 254, 8, 51, "Input",ExpressionUUID->"75fdb892-d060-4f25-9425-e3babaef0964",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[249227, 7316, 704, 19, 108, "CodeText",ExpressionUUID->"409bd70f-cfca-4c7b-abba-78e7bbb40544",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[249934, 7337, 835, 28, 116, "Input",ExpressionUUID->"bea88754-e0c2-4e47-a6e4-a7d6f62b412b",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[250772, 7367, 177, 5, 51, "Input",ExpressionUUID->"bb92feda-61a9-4609-8b50-55a3b243654d",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[250952, 7374, 465, 11, 108, "CodeText",ExpressionUUID->"af78f7da-9972-450d-8163-f5dfddeb4c99",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[251420, 7387, 323, 11, 51, "Input",ExpressionUUID->"92ce9980-632a-4a73-a288-64e72d5695c3",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[251746, 7400, 299, 8, 76, "Text",ExpressionUUID->"2d09590b-56c5-4371-97ac-57e6b5198e77",
 CellTags->{"Exercises", "Selecting Columns"}],
Cell[252048, 7410, 2544, 59, 43, "Text",ExpressionUUID->"a5a56dfd-76c8-4146-a9be-b8874c6ea614"],
Cell[254595, 7471, 4420, 130, 43, "Text",ExpressionUUID->"0cfa18be-1839-443f-baad-f7b6cbf91457"]
}, Closed]],
Cell[CellGroupData[{
Cell[259052, 7606, 250, 10, 55, "Subsection",ExpressionUUID->"ed63be7b-1fd2-432e-930f-d4cd6cb9c426",
 CellTags->{"Exercises", "Matrix Manipulation"}],
Cell[259305, 7618, 1493, 45, 140, "Text",ExpressionUUID->"758af97e-e1da-4d64-8e74-f7299d83bc5c",
 CellTags->"Matrix Manipulation"],
Cell[260801, 7665, 416, 11, 44, "CodeText",ExpressionUUID->"4150f4ad-b3e9-4481-ac99-62ae9a09dc82",
 CellTags->"Matrix Manipulation"],
Cell[261220, 7678, 283, 9, 51, "Input",ExpressionUUID->"9e217a58-afef-4f13-b929-a1783803b658",
 CellTags->"Matrix Manipulation"],
Cell[261506, 7689, 8793, 232, 43, "Text",ExpressionUUID->"23395110-f57e-467a-997c-c8cdac85722b"]
}, Closed]],
Cell[CellGroupData[{
Cell[270336, 7926, 262, 10, 55, "Subsection",ExpressionUUID->"8553669d-b0a3-44e9-bb23-bc36eefced95",
 CellTags->{"Exercises", "Operating on Elements"}],
Cell[270601, 7938, 319, 9, 44, "CodeText",ExpressionUUID->"d089fa6a-0bb8-4134-991a-647e48b6443c",
 CellTags->{"Exercises", "Operating on Elements"}],
Cell[270923, 7949, 1061, 31, 116, "Input",ExpressionUUID->"2224577e-6477-4cfb-a312-4834d52ebdb9",
 CellTags->{"Exercises", "Operating on Elements"}],
Cell[271987, 7982, 344, 10, 76, "Text",ExpressionUUID->"ea3cb7ab-c42d-4c21-b76b-729ae37069d8",
 CellTags->{"Exercises", "Operating on Elements"}],
Cell[272334, 7994, 216, 5, 44, "CodeText",ExpressionUUID->"e961c4d2-78ef-4190-80f8-68af5568214f",
 CellTags->{"Exercises", "Operating on Elements"}],
Cell[272553, 8001, 390, 10, 75, "Output",ExpressionUUID->"791cb4f3-d384-46fa-b707-e325a66a65fe",
 CellTags->{"Exercises", "Operating on Elements"}],
Cell[272946, 8013, 2883, 68, 43, "Text",ExpressionUUID->"5a53829d-2335-4f7f-a7d6-20bc6a17eb97"],
Cell[275832, 8083, 2164, 63, 43, "Text",ExpressionUUID->"2c8d6bbd-71d8-4f66-a4f3-b3eb8c044d69"]
}, Closed]],
Cell[CellGroupData[{
Cell[278033, 8151, 236, 9, 55, "Subsection",ExpressionUUID->"94629abf-332e-4c9b-9ef7-2d3889897f39",
 CellTags->{"Exercises", "Using Options"}],
Cell[278272, 8162, 562, 14, 76, "Text",ExpressionUUID->"70e86e89-163d-423c-a81c-9ca180d11d9a",
 CellTags->{"Exercises", "Using Options"}],
Cell[278837, 8178, 1592, 48, 110, "Input",ExpressionUUID->"f4543c79-7fde-486d-8f70-f00cf2594d99",
 CellTags->{"Exercises", "Using Options"}],
Cell[280432, 8228, 988, 29, 108, "Text",ExpressionUUID->"17d23993-9a47-4624-9f87-3a14ab914d71",
 CellTags->{"Exercises", "Using Options"}],
Cell[281423, 8259, 920, 28, 76, "Text",ExpressionUUID->"9c0f44c9-f2a0-4c3f-ab52-a871536541af",
 CellTags->{"Exercises", "Using Options"}],
Cell[282346, 8289, 4986, 127, 43, "Text",ExpressionUUID->"2bd6bd96-39c8-4258-913d-69a3dd7708a1"]
}, Closed]],
Cell[CellGroupData[{
Cell[287369, 8421, 254, 10, 55, "Subsection",ExpressionUUID->"a8e4eab8-b200-4fe5-9147-c5a6ea7ad691",
 CellTags->{"Exercises", "Recursive Definitions"}],
Cell[287626, 8433, 1181, 35, 108, "Text",ExpressionUUID->"e9923155-679b-480e-a022-d52985fb0469",
 CellTags->{"Exercises", "Recursive Definitions"}],
Cell[288810, 8470, 1322, 35, 43, "Text",ExpressionUUID->"9582a943-6cd0-4879-9064-23793ee6b767"],
Cell[290135, 8507, 1660, 47, 43, "Text",ExpressionUUID->"9ca24fc6-a82d-4d27-ae8b-2c95ddb7ab12"],
Cell[291798, 8556, 683, 18, 108, "CodeText",ExpressionUUID->"94336364-b7ae-4fee-94e3-fa1ce540f89e",
 CellTags->{"Exercises", "Recursive Definitions"}],
Cell[292484, 8576, 215, 5, 51, "Input",ExpressionUUID->"ebf19626-5603-458c-b9fd-19b6e0943c7f",
 CellTags->{"Exercises", "Recursive Definitions"}],
Cell[292702, 8583, 714, 20, 51, "Input",ExpressionUUID->"a98155cc-d02c-4fc6-b85e-a02d84467ed8",
 CellTags->{"Exercises", "Recursive Definitions"}],
Cell[293419, 8605, 204, 4, 51, "Input",ExpressionUUID->"f75433f9-adb8-4dda-abd3-0d1c62b631b2",
 CellTags->{"Exercises", "Recursive Definitions"}]
}, Closed]],
Cell[CellGroupData[{
Cell[293660, 8614, 246, 10, 55, "Subsection",ExpressionUUID->"76451480-ceb1-4e8b-ba49-d715a9d3b470",
 CellTags->{"Exercises", "Using Listability"}],
Cell[293909, 8626, 231, 5, 44, "CodeText",ExpressionUUID->"29dd218e-f426-4165-8d1a-bb6a6dacf25e",
 CellTags->{"Exercises", "Using Listability"}],
Cell[294143, 8633, 265, 7, 51, "Input",ExpressionUUID->"a8335970-4637-4d17-94a5-0fcda0723d04",
 CellTags->{"Exercises", "Using Listability"}],
Cell[294411, 8642, 364, 11, 51, "Input",ExpressionUUID->"efb20d9f-fb80-48bb-8beb-3e359757ec78",
 CellTags->{"Exercises", "Using Listability"}],
Cell[294778, 8655, 397, 12, 44, "Text",ExpressionUUID->"210fe2c1-bdda-47ad-bcd5-cb56ac43eeb3",
 CellTags->{"Exercises", "Using Listability"}],
Cell[295178, 8669, 2468, 62, 43, "Text",ExpressionUUID->"9b91611e-8c8b-41df-b0bf-efc10f2a81bd"],
Cell[297649, 8733, 3292, 94, 43, "Text",ExpressionUUID->"0855fcd6-4143-4f8c-9800-23277707e16c"]
}, Closed]],
Cell[CellGroupData[{
Cell[300978, 8832, 248, 10, 55, "Subsection",ExpressionUUID->"b8d4fced-23f5-41a2-8500-0f8e21e58b33",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[301229, 8844, 419, 10, 76, "CodeText",ExpressionUUID->"1a539bc8-c4bd-45cd-9616-0d132660d0cb",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[301651, 8856, 1303, 37, 212, "Input",ExpressionUUID->"975a2eaa-cc13-4cb6-863b-809be5871647",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[302957, 8895, 318, 9, 44, "CodeText",ExpressionUUID->"376ab4bb-8856-4740-a4db-0a362a58af3d",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[303278, 8906, 264, 8, 51, "Input",ExpressionUUID->"fd14fa4b-a110-4747-84c5-09bc98413691",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[303545, 8916, 351, 8, 76, "Text",ExpressionUUID->"c2d85e5c-a5d2-4038-8634-1f4532894c75",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[303899, 8926, 287, 9, 76, "Text",ExpressionUUID->"8c8e861b-fd77-46af-ae29-2d939805da54",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[304189, 8937, 885, 20, 43, "Text",ExpressionUUID->"d456f879-e4d8-4f43-9eb3-82cabb48d40f"],
Cell[305077, 8959, 2397, 60, 43, "Text",ExpressionUUID->"39f60191-5b6b-43d9-96b3-f5724c6042b6"],
Cell[307477, 9021, 285, 7, 76, "Text",ExpressionUUID->"58c55bfb-5858-439c-acda-5d124c978fef",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[307765, 9030, 368, 10, 108, "Text",ExpressionUUID->"25d753e4-bdcd-4dad-97b3-e87840186c64",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[308136, 9042, 2273, 61, 43, "Text",ExpressionUUID->"eafcf0e1-a018-422a-9d12-c26545dc787e"],
Cell[310412, 9105, 3830, 104, 43, "Text",ExpressionUUID->"f2ef8d62-8cfa-4bfd-8deb-0285f1d148ab"]
}, Closed]],
Cell[CellGroupData[{
Cell[314279, 9214, 272, 10, 55, "Subsection",ExpressionUUID->"e9287866-d904-4dea-ac35-00ae7de10fb1",
 CellTags->{"Exercises", "Extracting Array Elements"}],
Cell[314554, 9226, 300, 5, 44, "CodeText",ExpressionUUID->"4f0e6cc4-8d5b-48cf-aaa5-cab4dcb3d1d1",
 CellTags->"Extracting Array Elements"],
Cell[314857, 9233, 396, 12, 84, "Input",ExpressionUUID->"7edd4801-43ee-481e-824f-089d7247a9ad",
 CellTags->"Extracting Array Elements"],
Cell[315256, 9247, 576, 17, 76, "Text",ExpressionUUID->"3ad98ff6-7f6b-4abb-852d-11037af68e56",
 CellTags->"Extracting Array Elements"],
Cell[315835, 9266, 351, 9, 44, "CodeText",ExpressionUUID->"74ad5368-e7b3-424f-888d-0b627ecde99a",
 CellTags->{"Exercises", "Extracting Array Elements"}],
Cell[316189, 9277, 287, 9, 51, "Input",ExpressionUUID->"89af4c17-d9f3-47a1-b867-86f0bdee1d2d",
 CellTags->"Extracting Array Elements"],
Cell[316479, 9288, 379, 12, 44, "CodeText",ExpressionUUID->"64f4364f-acc9-429d-8340-418107b39c7c",
 CellTags->"Extracting Array Elements"],
Cell[316861, 9302, 325, 10, 51, "Input",ExpressionUUID->"d682758f-ae16-4256-8a7b-11cc55796151",
 CellTags->"Extracting Array Elements"],
Cell[317189, 9314, 597, 18, 76, "Text",ExpressionUUID->"33da3aba-92c2-45ba-afea-995e29673dfc",
 CellTags->{"Exercises", "Extracting Array Elements"}],
Cell[317789, 9334, 4276, 109, 43, "Text",ExpressionUUID->"01ecd206-2719-4e21-804c-d6b4014e7cdf"],
Cell[322068, 9445, 324, 7, 76, "CodeText",ExpressionUUID->"b1dc74ff-1ab7-4a2e-a2d3-51c495e859b2",
 CellTags->"Extracting Array Elements"],
Cell[322395, 9454, 465, 14, 51, "Input",ExpressionUUID->"8beeef22-109e-4540-ab89-3cf093b5b0be",
 CellTags->"Extracting Array Elements"],
Cell[322863, 9470, 523, 18, 44, "Text",ExpressionUUID->"cfa4444d-8d48-4df6-b04d-72d155d8dd9e",
 CellTags->{"Exercises", "Extracting Array Elements"}],
Cell[323389, 9490, 3023, 78, 43, "Text",ExpressionUUID->"ae720462-21c6-4d4c-a662-ab83a5805eae"],
Cell[326415, 9570, 302, 8, 76, "Text",ExpressionUUID->"c969266b-0b14-410f-a666-a1269df368af",
 CellTags->{"Exercises", "Extracting Array Elements"}],
Cell[326720, 9580, 7329, 178, 43, "Text",ExpressionUUID->"e4062b8d-1f68-412c-9607-053be4d98368"]
}, Closed]],
Cell[CellGroupData[{
Cell[334086, 9763, 246, 9, 55, "Subsection",ExpressionUUID->"9fcbfffa-fda4-450c-80ed-405d260e88c0",
 CellTags->{"Exercises", "Using Levels"}],
Cell[334335, 9774, 744, 21, 76, "CodeText",ExpressionUUID->"5bb5e424-209d-40f0-95a0-d5c6668df205",
 CellTags->{"Exercises", "Using Levels"}],
Cell[335082, 9797, 973, 32, 84, "Input",ExpressionUUID->"3db5033c-60a9-4778-8f4d-73f01604e35b",
 CellTags->{"Exercises", "Using Levels"}],
Cell[336058, 9831, 250, 6, 51, "Input",ExpressionUUID->"90e340bd-588e-4e57-9a06-ccc11b6ccec3",
 CellTags->{"Exercises", "Using Levels"}],
Cell[336311, 9839, 498, 14, 76, "Text",ExpressionUUID->"ec7433c4-66da-418e-afa8-c17d433f67c7",
 CellTags->{"Exercises", "Using Levels"}],
Cell[336812, 9855, 162, 3, 44, "CodeText",ExpressionUUID->"37c21b77-6042-41cc-8aac-08643cb1ddf4"],
Cell[336977, 9860, 978, 30, 99, "Text",ExpressionUUID->"36afc843-bac5-4ed3-8416-4acf589997e6"],
Cell[337958, 9892, 1282, 30, 43, "Text",ExpressionUUID->"aad317db-ef6e-4eca-8f3b-cc12ff9d8288"],
Cell[339243, 9924, 1530, 40, 43, "Text",ExpressionUUID->"3fdfeee7-fc0f-436f-b87d-b3680eb3817e"]
}, Closed]],
Cell[CellGroupData[{
Cell[340810, 9969, 234, 9, 55, "Subsection",ExpressionUUID->"2ffdba79-c8fc-4f0c-9a5f-78348c17556d",
 CellTags->{"Exercises", "More Patterns"}],
Cell[341047, 9980, 314, 9, 44, "Text",ExpressionUUID->"85f09082-0221-4492-8023-6b3cef8ec26b",
 CellTags->{"Exercises", "More Patterns"}],
Cell[341364, 9991, 471, 13, 76, "CodeText",ExpressionUUID->"95217338-b8a0-4d60-9119-8a50f050acb0",
 CellTags->{"Exercises", "More Patterns"}],
Cell[341838, 10006, 455, 15, 51, "Input",ExpressionUUID->"d6277317-53ca-4191-863f-01615141bcbe",
 CellTags->{"Exercises", "More Patterns"}],
Cell[342296, 10023, 491, 16, 51, "Input",ExpressionUUID->"fb04d708-5e82-485c-a9c2-c49e19f4507f",
 CellTags->{"Exercises", "More Patterns"}],
Cell[342790, 10041, 388, 12, 44, "Text",ExpressionUUID->"5f9c8fcd-9e0f-481b-a4c3-d5676e195e4f",
 CellTags->{"Exercises", "More Patterns"}],
Cell[343181, 10055, 794, 25, 76, "Text",ExpressionUUID->"fd0a772d-63ba-4121-ad9d-ee4ce3cfa1ef",
 CellTags->{"Exercises", "More Patterns"}],
Cell[343978, 10082, 720, 23, 76, "Text",ExpressionUUID->"d1a0ca50-6ae2-4260-9e79-c89ef7dfaa3e",
 CellTags->{"Exercises", "More Patterns"}],
Cell[344701, 10107, 1172, 37, 108, "Text",ExpressionUUID->"98c685b1-10ed-465a-9e3b-b09035ffba3d",
 CellTags->{"Exercises", "More Patterns"}],
Cell[345876, 10146, 300, 8, 76, "Text",ExpressionUUID->"2d77efe8-0bd4-458c-af3e-e15ae44975c3",
 CellTags->{"Exercises", "More Patterns"}],
Cell[346179, 10156, 924, 21, 43, "Text",ExpressionUUID->"3e78b9ed-2e21-426c-ae54-4acb31b59fed"],
Cell[347106, 10179, 3027, 87, 43, "Text",ExpressionUUID->"d137536a-8aa9-4ee3-9a06-d42230d6cc81"],
Cell[350136, 10268, 77, 0, 136, "EndOfSlide",ExpressionUUID->"5960269b-64e2-47c3-b291-f2aabaa6556e"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)


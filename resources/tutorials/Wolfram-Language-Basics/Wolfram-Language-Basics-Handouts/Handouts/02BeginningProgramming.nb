(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    509628,      12426]
NotebookOptionsPosition[    316605,       9260]
NotebookOutlinePosition[    430066,      11169]
CellTagsIndexPosition[    429123,      11142]
WindowTitle->Beginning Programming
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar", "FirstSlide",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"f655b11a-8e79-4531-a47c-518fd5684ba0"],

Cell[BoxData[
 StyleBox[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
/w/qQILY
     "], {{0, 100}, {450, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{268.015625, Automatic},
   ImageSizeRaw->{450, 100},
   PlotRange->{{0, 450}, {0, 100}}], "Title"]], "Title",
 CellChangeTimes->{3.785141470231607*^9, 
  3.785141924332955*^9},ExpressionUUID->"af2101fb-ac2f-4eb4-ae84-\
19f6446a92fd"],

Cell[TextData[StyleBox["Wolfram Language Basics",
 FontTracking->-0.75]], "Title",
 CellChangeTimes->{{3.720193284509671*^9, 3.720193288595942*^9}, {
   3.726941915180914*^9, 3.726941915962871*^9}, 3.72805557420755*^9, {
   3.730591596400971*^9, 3.7305915992067432`*^9}, {3.785144430726679*^9, 
   3.7851444313967543`*^9}, {3.812802882143258*^9, 3.812802882905703*^9}, {
   3.814892360443033*^9, 3.814892372895254*^9}, {3.820847891745861*^9, 
   3.820847898696125*^9}},ExpressionUUID->"cf585ad3-2aab-46ae-b106-\
b9c289ee08bb"],

Cell["Beginning Programming", "Subtitle",
 CellChangeTimes->{{3.7201933391803827`*^9, 3.720193342066636*^9}, {
   3.726941908757318*^9, 3.7269419228992167`*^9}, {3.727530497787223*^9, 
   3.72753049862645*^9}, 3.728055577046837*^9, {3.730591604782598*^9, 
   3.73059161531714*^9}, {3.814892398152801*^9, 3.814892406904223*^9}, 
   3.8148924864887667`*^9, {3.820847902736121*^9, 3.820847905727799*^9}, {
   3.821184828298917*^9, 
   3.821184833539721*^9}},ExpressionUUID->"c7d3aa6a-4fbc-4b4b-b37c-\
03bc9861a341"],

Cell[TextData[StyleBox["\[WolframLanguageLogoCircle]",
 FontSize->108,
 FontColor->RGBColor[
  0.07357900358587015, 0.11967650873579004`, 0.19916075379568168`]]], "Text",
 CellChangeTimes->{{3.820847947788309*^9, 
  3.8208479747250233`*^9}},ExpressionUUID->"f4cb14ee-09c2-4894-a7de-\
9825406e3c86"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"5e1b7bef-b164-4a48-99aa-6bd141aae90a"],

Cell[CellGroupData[{

Cell["Outline ", "Section",
 CellChangeTimes->{{3.71994775976054*^9, 3.7199477622405987`*^9}, {
   3.720191968879251*^9, 3.720191974055264*^9}, {3.720894915481367*^9, 
   3.72089491754312*^9}, {3.720897534619431*^9, 3.72089753512813*^9}, 
   3.7269459274619637`*^9, 3.7270211412216473`*^9, {3.7851429534588127`*^9, 
   3.7851429570669117`*^9}},ExpressionUUID->"84dc8a8f-439c-4a50-a8af-\
5aefc862d9fd"],

Cell[CellGroupData[{

Cell["\<\
A Basic Introduction to Programming Concepts in the Wolfram Language\
\>", "Subsection",
 CellChangeTimes->{{3.820937031662833*^9, 3.820937044284556*^9}, 
   3.821184853058507*^9, 3.821284913764543*^9, {3.8212849511559887`*^9, 
   3.821284960833273*^9}},ExpressionUUID->"aef7d318-77a4-44a0-a551-\
29a58a156a94"],

Cell["Assignments and definitions", "Item",
 CellChangeTimes->{3.821210039354184*^9},
 CellTags->"Overview",ExpressionUUID->"fba3bd14-6e4b-4dd5-b529-c707fe1cd3a9"],

Cell["Procedural programming", "Item",
 CellChangeTimes->{3.821210043046981*^9},
 CellTags->"Overview",ExpressionUUID->"64b6eb60-99e8-4418-add4-6827421181a9"],

Cell["Functional programming", "Item",
 CellChangeTimes->{3.821210046215015*^9},
 CellTags->"Overview",ExpressionUUID->"aba4b964-005b-4f07-9fbb-223e6b31668d"],

Cell["Rule-based programming", "Item",
 CellChangeTimes->{3.821210049230165*^9},
 CellTags->"Overview",ExpressionUUID->"65fba048-9f15-4bdc-bcb0-cf4559a72102"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"8a9d8598-8309-414d-af67-d27cc434210a"],

Cell[CellGroupData[{

Cell["Assignments and Definitions: Overview", "Section",
 CellChangeTimes->{{3.720193671708353*^9, 3.720193680985561*^9}, 
   3.722963095470057*^9, {3.820849188989011*^9, 3.820849190233841*^9}, 
   3.820936730188545*^9, 3.8209370682386723`*^9, {3.822168126596038*^9, 
   3.822168128488545*^9}},ExpressionUUID->"f70853e2-e4b1-41a3-8150-\
41ae03bffad5"],

Cell["Defining and clearing symbols", "Item",
 CellChangeTimes->{{3.821285048683179*^9, 3.8212850491213617`*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"a3b8cb25-8b5d-4528-bf7c-371641113c47"],

Cell["Immediate and delayed assignments", "Item",
 CellChangeTimes->{{3.821285051593458*^9, 3.8212850520094213`*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"38cd6d1e-ff96-40ab-bf86-dc93a1989bfc"],

Cell["Making function definitions", "Item",
 CellChangeTimes->{{3.821285054202176*^9, 3.82128505460933*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"3d46425c-ead9-4726-b471-184cbc36abf1"],

Cell["", "EndOfSlide",ExpressionUUID->"59e34f4d-6167-4ef2-9b13-a2701efa05ff"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"9cec99c9-eaff-499a-a56d-d01580d0c736"],

Cell[CellGroupData[{

Cell["Definitions", "Section",
 CellChangeTimes->{{3.720193671708353*^9, 3.720193680985561*^9}, 
   3.722963095470057*^9, {3.820849188989011*^9, 3.820849190233841*^9}, 
   3.820936730188545*^9, 
   3.820937134186075*^9},ExpressionUUID->"6115eafa-fad5-409d-9f16-\
a5016f3658fb"],

Cell["\<\
The simplest programs are definitions. Definitions are introduced using \
assignments.\
\>", "Text",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"871d0776-be13-4300-b11f-750362dc6649"],

Cell[TextData[{
 "For example, the assignment ",
 Cell[BoxData[
  RowBox[{"x", "=", "3"}]], "Input",ExpressionUUID->
  "0b6f84a5-044b-4cbb-a459-b6940958e29c"],
 " assigns ",
 Cell[BoxData[
 "3"], "Input",ExpressionUUID->"621c779b-1aba-4e6d-bbf0-2a50a0e6831e"],
 " as the value of ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"5d386bc1-5f71-47b8-958b-f13a01c93cdf"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.82121008507509*^9, 3.821210085567772*^9}, {
  3.8212850634174843`*^9, 3.8212850930412407`*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"d58dd31b-f72b-46cb-9748-3eeceee47c26"],

Cell[BoxData[
 RowBox[{"x", "=", "3"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"e5f4e12a-bce6-42a1-be6e-3ffefc7a3a06"],

Cell[TextData[{
 "That assignment tells the Wolfram Language\[Trademark] to replace ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"48c8d29e-5227-4590-824e-44ca1872dcd8"],
 " by ",
 Cell[BoxData[
 "3"], "Input",ExpressionUUID->"da8b3e98-2cad-4e8e-a665-123fe5a63be2"],
 " whenever ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"ca516b91-6a9d-4729-8a4f-5007cd47cc95"],
 " is encountered during evaluation:"
}], "CodeText",
 CellChangeTimes->{
  3.821210104597424*^9, {3.821210179811968*^9, 3.821210180529483*^9}, {
   3.821285098315205*^9, 3.821285119255721*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"b562e99e-fc2d-4aa2-89a9-f7fa3cfc49ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   RowBox[{
    RowBox[{"3", " ", "x"}], "+", "5"}]}], "}"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"84c18bc6-01b8-4dfd-aee2-94b27418ff5b"],

Cell["\<\
It is good practice to clear assigned values when the definitions are no \
longer needed, so that assigned values will not interfere with subsequent \
calculations:\
\>", "CodeText",
 CellChangeTimes->{{3.821210182056189*^9, 3.821210182549226*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"06139443-e0b2-4459-b83e-a327b3278c0e"],

Cell["Clear[x]", "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"7c70cf30-2167-426a-b46d-404479a5f67a"],

Cell[TextData[{
 "After clearing this definition, ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"af18ad0e-e19d-4770-87b9-95c6dd1eec5f"],
 " will just evaluate to ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"29ee4bea-5c2d-4f7c-8e37-b266fa7e1205"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.82121023181874*^9, 3.821210232177641*^9}, {
  3.821285126747402*^9, 3.821285144632064*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"4dad9ab9-2f1a-4d99-aae9-7218bf7eeac8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   RowBox[{
    RowBox[{"3", " ", "x"}], "+", "5"}]}], "}"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"cccc8aa2-ca0d-4590-8f6c-3ba5e1c70009"],

Cell["", "EndOfSlide",ExpressionUUID->"1003262d-dc8d-40ee-babe-4f03a9bf65e6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"1bdcd0a8-6bfe-42eb-84f7-a69fe91681f5"],

Cell[CellGroupData[{

Cell["Immediate and Delayed Assignments", "Section",
 CellChangeTimes->{{3.720193671708353*^9, 3.720193680985561*^9}, 
   3.722963095470057*^9, {3.820849188989011*^9, 3.820849190233841*^9}, 
   3.820936730188545*^9, 3.820937208581065*^9, {3.82121022266121*^9, 
   3.821210224708371*^9}},ExpressionUUID->"d0add2b5-20ea-4b5e-af51-\
0d5efdd35665"],

Cell[TextData[{
 "Assignments can be ",
 StyleBox["immediate",
  FontSlant->"Italic"],
 " or ",
 StyleBox["delayed",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"655c1944-f9aa-4382-9adb-740b4464f8a1"],

Cell[TextData[{
 "In an immediate assignment (",
 Cell[BoxData[
  RowBox[{"lhs", "=", "rhs"}]], "Input",ExpressionUUID->
  "735950c3-e4e0-44ef-bbab-9473c685ba5c"],
 "), the right side of the assignment is evaluated ",
 StyleBox["before",
  FontSlant->"Italic"],
 " the definition is constructed."
}], "Item",
 CellChangeTimes->{{3.821285175444063*^9, 3.821285185724667*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"00c388a7-3139-4b25-b88c-1ddd05ce8c56"],

Cell[TextData[{
 "In a delayed assignment (",
 Cell[BoxData[
  RowBox[{"lhs", ":=", "rhs"}]], "Input",ExpressionUUID->
  "f9ff6d59-4c0d-481d-9bb1-012bf441791c"],
 "), the right side of the assignment is not evaluated until the definition \
is used."
}], "Item",
 CellChangeTimes->{{3.821285199093028*^9, 3.821285202188342*^9}, {
  3.821291494162381*^9, 3.8212915123338833`*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"f0f816e6-13c9-4f31-8ff9-e125699c408c"],

Cell["\<\
For example, here are two assignments that generate a random number between 0 \
and 1 using a uniform probability distribution:\
\>", "CodeText",
 CellChangeTimes->{{3.8212103566054373`*^9, 3.821210357110531*^9}, {
  3.821285215218659*^9, 3.821285232968748*^9}, {3.822168286757112*^9, 
  3.8221682895229063`*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"79c78257-1a06-4b8e-be0d-cea170f38e66"],

Cell[BoxData[
 RowBox[{"rand1", "=", 
  RowBox[{"RandomReal", "[", "]"}]}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"913c7b01-187c-455b-8da4-d0a5dd0772dc"],

Cell[BoxData[
 RowBox[{"rand2", ":=", 
  RowBox[{"RandomReal", "[", "]"}]}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"ec68d03e-ba10-4cf0-9416-d1190b6e3325"],

Cell[TextData[{
 "The only difference between the two assignments is that ",
 Cell[BoxData[
 "rand1"], "Input",ExpressionUUID->"a5b4a193-b0b3-4d1a-b6b9-76b0e0aaee1e"],
 " uses an immediate assignment and ",
 Cell[BoxData[
 "rand2"], "Input",ExpressionUUID->"241368b9-08d2-48ff-9f23-5a2271c216cf"],
 " uses a delayed assignment."
}], "Text",
 CellChangeTimes->{{3.8212103566054373`*^9, 3.821210357110531*^9}, {
  3.821285215218659*^9, 3.821285232968748*^9}, {3.822168286757112*^9, 
  3.822168301778903*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"8243e31b-3734-4d12-ac9d-29be891cf2c9"],

Cell[TextData[{
 "With a delayed assignment, the expansion on the right side of the \
definition is postponed until the definition is used. But with immediate \
assignments, the right-hand side of the assignment is evaluated at the time \
the definition is made, and that value is assigned to the symbol ",
 Cell[BoxData[
 "rand1"], "Input",ExpressionUUID->"6e22d16b-b91b-4bb4-ac29-7358ff8b4b02"],
 "."
}], "Text",
 CellChangeTimes->{{3.821210358944169*^9, 3.82121035952941*^9}, {
  3.821285245834676*^9, 3.821285251197839*^9}, {3.8221683166753607`*^9, 
  3.8221683194894733`*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"f05e34ef-fca6-4b9c-abeb-8daf2aabdced"],

Cell["This shows the result of repeatedly invoking both functions:", \
"CodeText",
 CellChangeTimes->{{3.821210358944169*^9, 3.82121035952941*^9}, {
  3.821285245834676*^9, 3.821285251197839*^9}, {3.8221683166753607`*^9, 
  3.822168384456262*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"d3102f20-3e5e-42b3-af1c-ba4df049f630"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"rand1", ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"5ecf312c-d5d9-44a7-b9be-7e80cf396e73"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"rand2", ",", 
   RowBox[{"{", "3", "}"}]}], "]"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"d205fb66-bfdb-40d4-9ab0-64b9a08d7120"],

Cell["Clear the definitions before continuing:", "CodeText",
 CellChangeTimes->{{3.821285253323441*^9, 3.821285253730122*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"b8c4e1e4-0959-440c-9bdb-475d1297fc3d"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"rand1", ",", "rand2", ",", "f", ",", "x"}], "]"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"d1969b1c-fc26-496a-a2d5-c3c51d4cac72"],

Cell["", "EndOfSlide",ExpressionUUID->"2ddaa8ae-0e42-4833-ab5a-b3b31a690a91"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"2575d893-5755-440c-90aa-37e71f39d38e"],

Cell[CellGroupData[{

Cell["Using Delayed Assignments", "Section",
 CellChangeTimes->{{3.720193671708353*^9, 3.720193680985561*^9}, 
   3.722963095470057*^9, {3.820849188989011*^9, 3.820849190233841*^9}, 
   3.820936730188545*^9, 3.820937229109531*^9, {3.821210370340375*^9, 
   3.8212103853707457`*^9}},ExpressionUUID->"b2885ae9-d7d0-49db-aced-\
12e7003afcf0"],

Cell["\<\
When making an assignment, you need to decide whether the right side of the \
rule should be evaluated immediately or when the rule is used, and then use \
the appropriate type of assignment.\
\>", "Text",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"2b7a1451-09a5-4501-a5a2-055f26ace25c"],

Cell["\<\
Assignments for constants or simple functions are usually done using \
immediate assignments, as there is no need in such cases to postpone \
evaluation of the right side of the assignment.\
\>", "Text",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"6b1bc352-3ab9-4056-8d5e-2c24b3613870"],

Cell["\<\
Assignments for nontrivial programs are usually done using delayed \
assignments, since most programs cannot run as intended until the values of \
the arguments are known.\
\>", "Text",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"1ce27c77-be1f-416a-9f5a-a6e2e1d3fedc"],

Cell[TextData[{
 "For example, the following immediate assignment produces an error message, \
since the right-hand side cannot be evaluated for unknown ",
 Cell[BoxData[
 "n"], "Input",ExpressionUUID->"172596d3-e6d5-4f74-bb1e-ff786ec07857"],
 " (or, if a rule for ",
 Cell[BoxData[
 "n"], "Input",ExpressionUUID->"2fd441ba-b9da-457a-b6c7-30851cd06296"],
 " has been previously set up, the wrong definition is made):"
}], "CodeText",
 CellChangeTimes->{{3.821285920332753*^9, 3.8212859434750566`*^9}, {
  3.821375127928603*^9, 3.821375141167974*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"665bff5b-977c-442b-800f-a4f71ac0f26b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g", "[", "n_", "]"}], "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    SuperscriptBox["i", "2"], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"7e681d16-1f8a-4cdf-be44-46551bd9c2f8"],

Cell["This definition is best made with a delayed assignment:", "CodeText",
 CellChangeTimes->{{3.821285937644711*^9, 3.821285938218767*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"92ca9513-6b09-4322-b634-c3d662405250"],

Cell[BoxData[
 RowBox[{
  RowBox[{"g2", "[", "n_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    SuperscriptBox["i", "2"], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"f07c1035-b103-4e1c-9557-acae4efeed02"],

Cell[BoxData[
 RowBox[{"g2", "[", "5", "]"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"520451c9-ae2c-4e16-8f6c-967237ab1040"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"g", ",", "g2"}], "]"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"d2fa5e6c-b76f-401f-8550-48558f0a6677"],

Cell[TextData[{
 StyleBox["Tip",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ": Notice the coloring of symbols in the preceding inputs. Put your cursor \
in one of the cells and select Why the Coloring? from the Help menu to see \
information about syntax coloring."
}], "Text",
 CellChangeTimes->{{3.8212859476277933`*^9, 
  3.821285971875218*^9}},ExpressionUUID->"f36206b1-2d90-4c3c-a4b0-\
d2eeaea94993"],

Cell[TextData[{
 StyleBox["Further information",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ": see the ",
 ButtonBox["Assignments guide page",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/Assignments"],
 "."
}], "Text",
 CellDingbat->
  "\[LightBulb]",ExpressionUUID->"2e70a502-392b-441e-b272-efe5e6963cf5"],

Cell["", "EndOfSlide",ExpressionUUID->"1f7b03f2-8e26-4776-a9a7-7d95faf2d870"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"9ce53682-4176-4050-9628-719b6bd6da17"],

Cell[CellGroupData[{

Cell["Defining Functions", "Section",
 CellChangeTimes->{{3.720193671708353*^9, 3.720193680985561*^9}, 
   3.722963095470057*^9, {3.820849188989011*^9, 3.820849190233841*^9}, 
   3.820936730188545*^9, 3.8209371751573677`*^9, 
   3.8212102133929996`*^9},ExpressionUUID->"8f8b528c-eba5-4234-9046-\
c2fdf84b5cdc"],

Cell["Delayed assignments are recommended for defining functions.", "Text",
 CellChangeTimes->{{3.821210399838294*^9, 3.821210437356913*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"1fb5faf3-4ded-418e-9a08-8fcab7dd19af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"x", " ", 
   RowBox[{"Sin", "[", "x", "]"}]}]}]], "Input",
 CellChangeTimes->{3.821210440879553*^9},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"4f0c932f-9ccb-41fc-b48a-1d0b8984e64f"],

Cell["\<\
This definition is used when the corresponding function is evaluated:\
\>", "CodeText",
 CellChangeTimes->{{3.8212104571584597`*^9, 3.821210460896345*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"11cc1172-7f68-4d77-b58a-f1d5d58465bb"],

Cell[BoxData[
 RowBox[{"f", "[", "3", "]"}]], "Input",
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"b09f3710-5d57-4fd9-9186-7afe73dc1e84"],

Cell[TextData[{
 "The expression ",
 Cell[BoxData[
  RowBox[{"f", "[", "x_", "]"}]], "Input",ExpressionUUID->
  "27b88f3b-3189-4c3b-9e3b-9aff083cbe3d"],
 " on the left side of this assignment is a ",
 StyleBox["pattern",
  FontSlant->"Italic"],
 " that specifies the class of expressions for which this definition should \
be used. The pattern ",
 Cell[BoxData[
  RowBox[{"f", "[", "x_", "]"}]], "Input",ExpressionUUID->
  "21f276f3-d4f9-434a-91b6-07b6a04a6808"],
 " matches  ",
 Cell[BoxData[
  RowBox[{"f", "[", 
   StyleBox[
    RowBox[{"any", " ", "expression"}],
    FontSlant->"Italic"], "]"}]], "Input",ExpressionUUID->
  "d9638179-1e2a-41c0-832b-93c6821ad5bb"],
 "."
}], "Text",
 CellChangeTimes->{{3.821285988348137*^9, 3.821286037997197*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"04df8c0e-61e9-41f8-9cca-1ff799b345e3"],

Cell[TextData[{
 "The definition  ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"f", "[", "x_", "]"}], ":=", 
   RowBox[{"x", " ", 
    RowBox[{"Sin", "[", "x", "]"}]}]}]], "Input",ExpressionUUID->
  "b9c75b4e-79bc-4301-a377-dcd6c82ccb26"],
 ": will be applied whenever an expression matching ",
 Cell[BoxData[
  RowBox[{"f", "[", "x_", "]"}]], "Input",ExpressionUUID->
  "0ee8ad76-a68e-4ea5-8dac-84e0488df59d"],
 " is encountered during evaluation."
}], "Text",
 CellChangeTimes->{{3.821210473977056*^9, 3.821210473977112*^9}, {
  3.82128604570857*^9, 3.821286130973529*^9}},
 CellTags->
  "Assignments and \
Definitions",ExpressionUUID->"59767219-1860-494b-addd-b90f83ca97c7"],

Cell["", "EndOfSlide",ExpressionUUID->"3d31f496-4693-4e26-86ba-f7a9605f3f44"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"9dc5aab8-890f-4c9f-aa16-a2e46cecaf98"],

Cell[CellGroupData[{

Cell["Procedural Programming: Overview", "Section",
 CellChangeTimes->{{3.720193671708353*^9, 3.720193680985561*^9}, 
   3.722963095470057*^9, {3.820849188989011*^9, 3.820849190233841*^9}, 
   3.820936730188545*^9, 3.8209372554921217`*^9, {3.822168566683167*^9, 
   3.822168568894153*^9}},ExpressionUUID->"6be1dc90-28bc-47ce-a2ed-\
62cbf3b43357"],

Cell["Brief discussion of procedures", "Item",
 CellChangeTimes->{{3.821286138324068*^9, 3.821286138724164*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"35524aff-91ed-4103-870e-b135c52bc1ec"],

Cell["Predicate functions", "Item",
 CellChangeTimes->{{3.8212861416985807`*^9, 3.8212861420184*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"bf695b03-61c4-42a0-ba9d-3c3023d97d72"],

Cell["Procedural constructs", "Item",
 CellChangeTimes->{{3.821286144204077*^9, 3.8212861565346127`*^9}, {
  3.8221692021628323`*^9, 3.822169207730627*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"13597ebb-75fc-436a-966c-ef5dbab5f4f7"],

Cell["Localizing variables", "Item",
 CellChangeTimes->{{3.82128615854077*^9, 3.821286166341599*^9}, {
  3.822169205674039*^9, 3.822169206095296*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"6dffacae-7a4c-4673-890b-ecee8344b7a8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"95b4fa32-e4a3-43b7-8a66-863a0ea92fe7"],

Cell[CellGroupData[{

Cell["Procedural Programming", "Section",
 CellChangeTimes->{{3.720193671708353*^9, 3.720193680985561*^9}, 
   3.722963095470057*^9, {3.820849188989011*^9, 3.820849190233841*^9}, 
   3.820936730188545*^9, 
   3.8209372554921217`*^9},ExpressionUUID->"bbeeb9a6-8e88-4a5b-934d-\
f4c7d92b63f6"],

Cell["\<\
Procedural programming means programming using loops, if statements and other \
functions that control the flow of execution through a program.\
\>", "Text",
 CellChangeTimes->{{3.821286171388817*^9, 3.8212861742911253`*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"3dd925a6-df4f-406c-8e9d-1b3a7e561e85"],

Cell["\<\
For example, a compound expression (a sequence of statements separated by \
semicolons) is a procedural program. \
\>", "Text",
 CellChangeTimes->{{3.8212105051285*^9, 3.82121050565626*^9}, 
   3.821286181428156*^9, 3.8221685950642853`*^9},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"3471edad-2ac2-4015-a28a-412bf2c0e896"],

Cell["\<\
In a compound expression, the flow of execution is to simply evaluate \
statements in the order given:\
\>", "CodeText",
 CellChangeTimes->{{3.8212105051285*^9, 3.82121050565626*^9}, 
   3.821286181428156*^9},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"db1d86bc-ca73-4b3e-b840-4c2c34c3e5cb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gene", "=", 
   TemplateBox[{"\"breast cancer 1, early onset\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Gene\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"BRCA1\"", ",", 
             RowBox[{"{", 
               RowBox[{"\"Species\"", "\[Rule]", "\"HomoSapiens\""}], "}"}]}],
            "}"}]}], "]"}], 
     "\"Entity[\\\"Gene\\\", {\\\"BRCA1\\\", {\\\"Species\\\" -> \
\\\"HomoSapiens\\\"}}]\"", "\"gene\""},
    "Entity"]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"chars", "=", 
   RowBox[{"Characters", "[", 
    RowBox[{"gene", "[", "\"\<ReferenceSequence\>\"", "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Counts", "[", "chars", "]"}]}], "Input",
 CellChangeTimes->{{3.821210519529318*^9, 3.8212105529405107`*^9}, {
  3.8212105853865843`*^9, 3.821210599717992*^9}},
 CellTags->"Procedural Programming",
 CellLabel->"",ExpressionUUID->"d7630bb1-b000-4323-ab8a-b5b53802b2b5"],

Cell["\<\
In most procedural programs, at least part of the flow of execution depends \
on the values of variables or on the results of various tests. One of the \
most common procedural constructs is the if control structure. In the Wolfram \
Language, the If function has the following syntax:\
\>", "Text",
 CellChangeTimes->{
  3.821210106585952*^9, {3.8212861940917377`*^9, 3.821286195275854*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"4cc430cb-899d-4396-ac9f-b7278b23165e"],

Cell["If[test, then, else]", "Program",
 CellChangeTimes->{3.821210624003161*^9},
 TextAlignment->Center,ExpressionUUID->"75462f57-bcd9-4aa6-8ac5-77db04fda88b"],

Cell[TextData[{
 "The following example demonstrates how the flow of execution depends on the \
result of the test ",
 Cell[BoxData[
  RowBox[{"x", ">", "\[Pi]"}]], "Input",ExpressionUUID->
  "75852868-f7ca-491f-9582-54846ba89546"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8212106594345293`*^9, 3.821210659939001*^9}, {
  3.821286207204414*^9, 3.821286221685419*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"a33387e4-495a-4e23-9d49-c655e34892a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", ">", "\[Pi]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"x", ",", "\"\< is larger than \[Pi]\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"x", ",", "\"\< is not larger than \[Pi]\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"a405f9ae-e269-4a7c-a689-41b13ae9836c"],

Cell[BoxData[
 RowBox[{"f", "[", "E", "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"5e152cac-48f1-43cf-99b5-9b571678d2b4"],

Cell[" ", "EndOfSlide",ExpressionUUID->"93fc370a-8ad2-4f6c-9e0f-f4736b26c2c4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"de6f74d7-7579-4404-9828-76bdebac0632"],

Cell[CellGroupData[{

Cell["Predicate Functions", "Section",
 CellChangeTimes->{{3.821210676242762*^9, 3.821210679176772*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"a77c00f2-233b-4ea5-963b-7da798d8f60c"],

Cell[TextData[{
 "Expressions such as ",
 Cell[BoxData[
  RowBox[{"Pi", ">", "\[ExponentialE]"}]], "Input",ExpressionUUID->
  "ad1b7170-f5ea-4e7c-8539-6b0f2d014208"],
 " that evaluate to ",
 StyleBox[ButtonBox["True",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/True"],
  FontWeight->"Bold"],
 " or ",
 StyleBox[ButtonBox["False",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/False"],
  FontWeight->"Bold"],
 " are called ",
 StyleBox["predicate",
  FontSlant->"Italic"],
 " functions. Many of the predicate functions available in the Wolfram \
Language are similar to those found in other programming languages."
}], "Text",
 CellChangeTimes->{
  3.8212101080291777`*^9, {3.8212862327729797`*^9, 3.8212862775575113`*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"2e0c3e6f-7f48-4ea5-8ff8-7b5383e1c762"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox[
      StyleBox["\<\"Predicate\"\>", "SR",
       StripOnInput->False,
       FontWeight->"Bold"],
      StripOnInput->False,
      FontWeight->"Bold"], 
     StyleBox[
      StyleBox["\<\"Examples\"\>", "SR",
       StripOnInput->False,
       FontWeight->"Bold"],
      StripOnInput->False,
      FontWeight->"Bold"]},
    {
     StyleBox["\<\"Inequalities\"\>", "SR",
      StripOnInput->False], 
     StyleBox[
      InterpretationBox["\<\"\\!\\(StandardForm\\`\\!\\(\\*StyleBox[\\\"\\\\\\\
\"x\\\\\\\"\\\", \\\"TI\\\", Rule[StripOnInput, False]]\\) \[LongEqual] \
\\!\\(\\*StyleBox[\\\"\\\\\\\"y\\\\\\\"\\\", \\\"TI\\\", Rule[StripOnInput, \
False]]\\)\\),  \
\\!\\(StandardForm\\`\\!\\(\\*StyleBox[\\\"\\\\\\\"x\\\\\\\"\\\", \\\"TI\\\", \
Rule[StripOnInput, False]]\\) > \\!\\(\\*StyleBox[\\\"\\\\\\\"y\\\\\\\"\\\", \
\\\"TI\\\", Rule[StripOnInput, False]]\\)\\),  \
\\!\\(StandardForm\\`\\!\\(\\*StyleBox[\\\"\\\\\\\"x\\\\\\\"\\\", \\\"TI\\\", \
Rule[StripOnInput, False]]\\) < \\!\\(\\*StyleBox[\\\"\\\\\\\"y\\\\\\\"\\\", \
\\\"TI\\\", Rule[StripOnInput, False]]\\)\\),  \
\\!\\(StandardForm\\`\\!\\(\\*StyleBox[\\\"\\\\\\\"x\\\\\\\"\\\", \\\"TI\\\", \
Rule[StripOnInput, False]]\\) \[LessEqual] \
\\!\\(\\*StyleBox[\\\"\\\\\\\"y\\\\\\\"\\\", \\\"TI\\\", Rule[StripOnInput, \
False]]\\)\\),  \
\\!\\(StandardForm\\`\\!\\(\\*StyleBox[\\\"\\\\\\\"x\\\\\\\"\\\", \\\"TI\\\", \
Rule[StripOnInput, False]]\\) \[GreaterEqual] \\!\\(\\*StyleBox[\\\"\\\\\\\"y\
\\\\\\\"\\\", \\\"TI\\\", Rule[StripOnInput, False]]\\)\\),\[Ellipsis]\"\>",
       StringForm[
       "\!\(StandardForm\``1` \[LongEqual] `2`\),  \!\(StandardForm\``1` > \
`2`\),  \!\(StandardForm\``1` < `2`\),  \!\(StandardForm\``1` \[LessEqual] \
`2`\),  \!\(StandardForm\``1` \[GreaterEqual] `2`\),\[Ellipsis]", 
        Style["x", "TI"], 
        Style["y", "TI"]],
       Editable->False], "TR",
      StripOnInput->False]},
    {
     StyleBox["\<\"Built-in predicates\"\>", "SR",
      StripOnInput->False], 
     InterpretationBox["\<\"IntegerQ[\\!\\(\\*StyleBox[\\\"\\\\\\\"n\\\\\\\"\\\
\", \\\"TI\\\", Rule[StripOnInput, False]]\\)], Positive[\\!\\(\\*StyleBox[\\\
\"\\\\\\\"m\\\\\\\"\\\", \\\"TI\\\", Rule[StripOnInput, False]]\\)], NumberQ[\
\\!\\(\\*StyleBox[\\\"\\\\\\\"x\\\\\\\"\\\", \\\"TI\\\", Rule[StripOnInput, \
False]]\\)],\[Ellipsis]\"\>",
      StringForm["IntegerQ[`1`], Positive[`2`], NumberQ[`3`],\[Ellipsis]", 
       Style["n", "TI"], 
       Style["m", "TI"], 
       Style["x", "TI"]],
      Editable->False]},
    {
     StyleBox["\<\"Logical connectives\"\>", "SR",
      StripOnInput->False], 
     StyleBox[
      InterpretationBox["\<\"\\!\\(StandardForm\\`\\*SubscriptBox[\\(\\!\\(\\*\
StyleBox[\\\"\\\\\\\"expr\\\\\\\"\\\", \\\"TI\\\", Rule[StripOnInput, False]]\
\\)\\), \\(\\!\\(\\*StyleBox[\\\"\\\\\\\"1\\\\\\\"\\\", \\\"TR\\\", \
Rule[StripOnInput, False]]\\)\\)] && \
\\*SubscriptBox[\\(\\!\\(\\*StyleBox[\\\"\\\\\\\"expr\\\\\\\"\\\", \
\\\"TI\\\", Rule[StripOnInput, False]]\\)\\), \\(\\!\\(\\*StyleBox[\\\"\\\\\\\
\"2\\\\\\\"\\\", \\\"TR\\\", Rule[StripOnInput, False]]\\)\\)]\\) (logical \
AND)\"\>",
       StringForm[
       "\!\(StandardForm\`\*SubscriptBox[\(`1`\), \(`2`\)] && \*SubscriptBox[\
\(`1`\), \(`3`\)]\) (logical AND)", 
        Style["expr", "TI"], 
        Style["1", "TR"], 
        Style["2", "TR"]],
       Editable->False], "TR",
      StripOnInput->False]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 0.85]}}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {1 -> GrayLevel[0.5]}, 
     "RowsIndexed" -> {2 -> GrayLevel[0.5], 3 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 4 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}}},
   GridBoxFrame->{"Columns" -> False, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{1}}, "Rows" -> {{0.9}}}],
  "Grid"]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.821201773134531*^9},
 ShowStringCharacters->
  False,ExpressionUUID->"7d3f2cc4-16da-49d3-8a32-e5ea2db6edd1"],

Cell[TextData[{
 "For example, ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"IntegerQ", "[", "n", "]"}], "&&", 
   RowBox[{"n", "\[GreaterEqual]", "0"}]}]], "Input",ExpressionUUID->
  "5bb912be-bd0b-4d2a-aa6b-5bd5cf82fe6e"],
 " returns True if ",
 Cell[BoxData[
  StyleBox["n", "MR"]], "Input",ExpressionUUID->
  "cd484090-f011-4f5f-bfa9-6a47645274b9"],
 " is an integer and ",
 Cell[BoxData[
  StyleBox["n", "MR"]], "Input",ExpressionUUID->
  "7dd29dda-d56d-40e6-b106-9a8307ae9ec2"],
 " is greater than or equal to zero:"
}], "CodeText",
 CellChangeTimes->{{3.821286290444331*^9, 3.8212863441177273`*^9}, {
  3.8213735445801687`*^9, 3.8213735508763027`*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"4b990410-ec6e-41ef-847c-70001c036d50"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IntegerQ", "[", "5", "]"}], "&&", 
  RowBox[{"5", "\[GreaterEqual]", "0"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"557e5431-3091-4406-a355-06d95b099390"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IntegerQ", "[", 
   RowBox[{"-", "7"}], "]"}], "&&", 
  RowBox[{
   RowBox[{"-", "7"}], "\[GreaterEqual]", "0"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"85b62202-6006-4c89-b5bd-249dcbbedf56"],

Cell["Of course, you can define your own predicate functions:", "CodeText",
 CellChangeTimes->{{3.8212863462749853`*^9, 3.821286346948393*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"8446be08-a568-4c8a-8d0f-11c10cefed8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"myFilterQ", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Abs", "[", "x", "]"}], "\[LessEqual]", "1"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"b1ef4ae9-1782-4da4-a34c-8f287aa929b7"],

Cell[BoxData[
 RowBox[{"myFilterQ", "[", "1.5", "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"263b6844-6a8b-40a5-ad0c-0aa72c988ae4"],

Cell[TextData[{
 StyleBox["Further information",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ": see the tutorial section ",
 ButtonBox["Putting Constraints on Patterns",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/Patterns#1615"],
 " for an explanation of the  general mechanism for specifying constraints on \
patterns."
}], "Text",
 CellDingbat->"\[LightBulb]",
 CellChangeTimes->{{3.821368284672637*^9, 3.8213682846764307`*^9}, {
  3.821368404478211*^9, 3.8213684214203*^9}, {3.821372546223077*^9, 
  3.821372547380061*^9}},ExpressionUUID->"0d6ea1d1-1415-4d5a-b36c-\
3b72199e8628"],

Cell[" ", "EndOfSlide",ExpressionUUID->"7a0657ec-5b28-4255-9b65-292dabefc121"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"719583de-4f5e-454e-b5e5-7880a749034b"],

Cell[CellGroupData[{

Cell["Procedural Programming Functions ", "Section",
 CellChangeTimes->{
  3.821209259465941*^9, {3.8212106890275993`*^9, 3.8212106958156347`*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"b714ac71-f0aa-4265-a64b-47f43bc2c5ff"],

Cell["\<\
The basic elements of procedural programming are functions used for:\
\>", "Text",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"9acb43cb-fced-4b2d-915d-2bb9cfa91b02"],

Cell[TextData[{
 "Evaluating a sequence of expressions (called a ",
 StyleBox["compound expression",
  FontSlant->"Italic"],
 "):"
}], "Item",
 CellChangeTimes->{{3.821286358444448*^9, 3.821286360348357*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"9b950539-1b8c-46df-8511-dfd38fc819fc"],

Cell[TextData[{
 "      ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["expr", "1"], ";", 
    SubscriptBox["expr", "2"], ";", 
    SubscriptBox["expr", "3"], ";", "\[Ellipsis]"}], TraditionalForm]],
  ExpressionUUID->"f3ab94d8-6c7a-44fe-afe8-3d0a362a2047"]
}], "Item",
 CellDingbat->None,
 CellChangeTimes->{{3.821286462749584*^9, 3.82128656838022*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"6990a760-7c38-476d-b59d-63ae2cce81f9"],

Cell[CellGroupData[{

Cell["Loops:", "Item",
 CellChangeTimes->{{3.8212863636602173`*^9, 3.821286364082775*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"215cbba3-f7ae-4f8d-aa92-463605261ff2"],

Cell[TextData[{
 StyleBox[ButtonBox["Do",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Do"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["For",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/For"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["While",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/While"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Table",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Table"],
  FontWeight->"Bold"],
 ", \[Ellipsis]"
}], "Subitem",
 CellDingbat->None,
 CellChangeTimes->{{3.82128637339651*^9, 3.821286401489184*^9}, {
   3.821291798645096*^9, 3.821291807153219*^9}, 3.822169222026208*^9},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"7f123810-295d-4e25-ab3f-6f85bd0661b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Branching (or jumping), depending on a test or condition:", "Item",
 CellChangeTimes->{{3.821286368156302*^9, 3.821286369028458*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"53c2c620-2175-4082-831b-819bc1627a8b"],

Cell[TextData[{
 StyleBox[ButtonBox["If",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/If"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Which",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Which"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Switch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Switch"],
  FontWeight->"Bold"]
}], "Subitem",
 CellDingbat->None,
 CellChangeTimes->{{3.821286403461458*^9, 3.82128644772462*^9}, {
   3.8212918115239067`*^9, 3.8212918147764378`*^9}, 3.82216922599761*^9},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"ed30b51b-cc81-47c7-a4b9-202efc679ff5"]
}, Open  ]],

Cell[" ", "EndOfSlide",ExpressionUUID->"881bd8cd-ef2e-437a-8093-411a1b9e8f94"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"74757f48-3053-4a6d-aab8-18ebbeafba40"],

Cell[CellGroupData[{

Cell["Example: Summing Integers", "Section",
 CellChangeTimes->{{3.821210745392724*^9, 3.8212107533034163`*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"d920c804-7970-465c-8263-5971e870eb78"],

Cell[TextData[{
 "Here is a procedural program that computes the sum of the integers 1 \
through ",
 Cell[BoxData[
 "n"], "Input",ExpressionUUID->"2892bc74-e6f0-4c71-84ce-ec82e1a70143"],
 ". The value of ",
 Cell[BoxData[
 "n"], "Input",ExpressionUUID->"2df537c3-6567-46f3-811c-4d5f6d83f2f2"],
 " is assigned in the first line of the program."
}], "Text",
 CellChangeTimes->{{3.821286627465822*^9, 3.821286635397909*^9}, {
  3.821291851119223*^9, 3.821291865293462*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"be187282-15b6-477f-92de-2b8ddbea902d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"result", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"result", "+", "k"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", "result"}], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"acbf57e2-6e06-4ea0-9791-fd3be54f4f30"],

Cell["\<\
By putting this program on the right side of an assignment, this program can \
become the definition of a function:\
\>", "CodeText",
 CellChangeTimes->{{3.8212866411901484`*^9, 3.821286642269009*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"064520ab-4ec8-489c-abba-ebda0b9e3aae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"result", "=", 
       RowBox[{"result", "+", "k"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"8401f89c-1baa-461f-8f0e-e216d92ce8de"],

Cell[TextData[{
 "You \[OpenCurlyDoubleQuote]run\[CloseCurlyDoubleQuote] this program by \
evaluating an expression that matches ",
 Cell[BoxData[
  RowBox[{"f", "[", "n_", "]"}]], "Input",ExpressionUUID->
  "3cfd797c-bb82-4531-8142-eedda22d7d55"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821286645716111*^9, 3.821286659780777*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"61c69596-3ed2-4a72-b978-0015f257276e"],

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"bef51c61-c875-4eb0-9538-709955025a8e"],

Cell[TextData[{
 "Clear the definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"e3d7609d-9886-4f5d-9f80-62dc36afbb82"],
 " before continuing:"
}], "CodeText",
 CellChangeTimes->{{3.821286665212524*^9, 3.821286676701168*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"f3fdf67e-fc73-4fb4-bc94-b55b12299a97"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "n", ",", "result"}], "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"4025be61-e7cb-4a98-bea9-27f2046017aa"],

Cell[" ", "EndOfSlide",ExpressionUUID->"367ebe85-4fce-41ae-9d6c-0f16c15c9143"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"509be803-9a38-4a21-9e3b-1305c5768d79"],

Cell[CellGroupData[{

Cell["Example: Checking Arguments", "Section",
 CellChangeTimes->{{3.82121076490467*^9, 3.82121077309235*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"d3d02f9a-cc94-47a6-abd4-08c9663fe78b"],

Cell["\<\
One common use of predicate functions is to check the arguments of functions.\
\
\>", "Text",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"643d550a-daf6-4d19-a3ef-c022f2b4eeff"],

Cell[TextData[{
 "Note that the previous definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"69ca1638-8a96-4c23-ac2a-9fb0ff76b3ea"],
 " can give incorrect results if the argument is not a positive integer:"
}], "CodeText",
 CellChangeTimes->{{3.821286684927638*^9, 3.8212866945162477`*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"ec405718-e817-4071-add7-0068ea614494"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"result", "=", 
       RowBox[{"result", "+", "k"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"7c5ffe38-c62e-43c6-af95-f70739e6a18b"],

Cell[TextData[{
 "Here is a modification of this program, which checks that ",
 Cell[BoxData[
 "n"], "Input",ExpressionUUID->"fdd62965-aa6a-4ef8-b744-e4f662f2ed29"],
 " is a positive integer before doing the calculation:"
}], "CodeText",
 CellChangeTimes->{{3.8212866993480988`*^9, 3.8212867067569513`*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"41a7f6b2-c6e2-432e-9ac2-e04ef7b46258"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerQ", "[", "n", "]"}], "&&", 
     RowBox[{"n", ">", "0"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"n", ",", " ", "\"\< is not a positive integer.\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"805ca13e-bd01-4c6b-8a2e-c026b1bfefde"],

Cell["\<\
If the argument is not a positive integer, the print statement in the ELSE \
clause is evaluated:\
\>", "CodeText",
 CellChangeTimes->{{3.821286710652835*^9, 3.821286711140705*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"8ff12398-f559-4127-9b56-9191cf0fd1d3"],

Cell[BoxData[
 RowBox[{"f", "[", "Pi", "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"4e40b9d5-e73d-4bc0-9873-cd8bfe251091"],

Cell[BoxData[
 RowBox[{"f", "[", "9", "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"495faa3a-cb9d-4380-853b-5ed6f065ceef"],

Cell[TextData[{
 "Clear the definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"33c5e688-40d0-4546-8510-8e7eb31fe606"],
 " before continuing:"
}], "CodeText",
 CellChangeTimes->{{3.821286715435917*^9, 3.821286722013245*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"f4af14ff-dc9c-4961-8a90-3477cddf1334"],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"03e32f93-1a5f-4114-a6da-2da31b9ed891"],

Cell[" ", "EndOfSlide",ExpressionUUID->"7271b0e0-8846-4542-a711-1bda82585d76"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"28da5543-6600-41b0-ac87-178009490de1"],

Cell[CellGroupData[{

Cell["Local Variables", "Section",
 CellChangeTimes->{{3.821210782432047*^9, 3.821210786952701*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"9f291494-483c-458b-bb8a-ed9d273b7340"],

Cell[TextData[{
 "When assignments to temporary variables are used for keeping track of \
intermediate results, it is common practice, especially in larger programs, \
to ",
 StyleBox["localize",
  FontSlant->"Italic"],
 " those variables to avoid conflicts with other parts of the program."
}], "Text",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"9462c3d6-b050-4a20-8ee9-b28eeef50142"],

Cell[TextData[{
 "For example, the assignment to ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"bb301d9c-ee78-4be0-8bc8-25c098125c76"],
 " in the following definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"8cfdd205-b7c0-40c9-b936-d776322a2da5"],
 " could lead to difficulty if ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"2fe40acd-5969-40da-a06a-5847eefb55fb"],
 " is called from a program that also uses ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"e1bae13d-8318-4be1-a97c-a08425301802"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821210796551165*^9, 3.821210796928681*^9}, {
  3.821286734583143*^9, 3.821286768016769*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"9834d53c-6211-4e77-9ee7-e925c8468fc1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{"result", "=", 
       RowBox[{"result", "+", "k"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
    "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", 
   ")"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"cb9c051a-24d3-4270-b32b-40734f793682"],

Cell[TextData[{
 "Variables can be localized using the ",
 StyleBox[ButtonBox["Module",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Module"],
  FontWeight->"Bold"],
 " function. The first argument in Module is a list of variables to localize, \
and the second argument is the expression to evaluate."
}], "Text",
 CellChangeTimes->{{3.821286771750877*^9, 3.821286781348716*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"781fa167-39d9-49a2-8076-ee6760cbfb8f"],

Cell[TextData[{
 StyleBox["Module[{vars},\n ", "Input"],
 StyleBox["body_of_function", "Input",
  FontSlant->"Italic"],
 StyleBox["\n  \[Ellipsis]]", "Input"]
}], "Text",
 CellChangeTimes->{{3.821201789833243*^9, 
  3.8212018065275717`*^9}},ExpressionUUID->"2f41bc11-5c4f-445a-84f6-\
9aa970fbf5bd"],

Cell[TextData[{
 "Here is a definition in which the variable ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"fc762f56-dadc-416d-89a7-6f7e52258525"],
 " is localized using Module:"
}], "CodeText",
 CellChangeTimes->{{3.821210802220893*^9, 3.821210803039877*^9}, {
  3.82128678763058*^9, 3.821286801250183*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"11f5275b-e21d-45c6-b4d8-a31412bf78e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"aa29308c-be68-4e2a-88cd-717302a5ca32"],

Cell[TextData[{
 "With this definition, evaluation of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"3914d3b9-4ad2-4dd3-83d4-d702e9e86fe9"],
 " will leave existing values of ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"5e3a008b-95c6-4c0f-ab4e-c961bba019f9"],
 " unchanged:"
}], "CodeText",
 CellChangeTimes->{{3.821286805301013*^9, 3.821286822669046*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"b3e7d0ab-7f6b-4cfc-b3a0-be063aecba11"],

Cell[BoxData[
 RowBox[{"result", "=", "99"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"7ef0f8e8-3938-4612-aba1-bfe01b6f6ba1"],

Cell[BoxData[
 RowBox[{"f", "[", "9", "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"bd134429-de2d-4ac2-9471-61710b9ead4e"],

Cell[BoxData["result"], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"03d0bb4a-21da-4916-806b-cd4a8e1c8481"],

Cell[TextData[{
 "Variables that have not been localized are called ",
 StyleBox["global",
  FontSlant->"Italic"],
 " variables."
}], "Text",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"e9ee2afb-4c18-4b78-898a-1d578ef44d2f"],

Cell["\<\
The Module function can be used to leave global definitions unchanged.\
\>", "Text",
 CellChangeTimes->{{3.821286832110158*^9, 3.821286834524626*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"f8e55fc6-c2f2-4a60-823f-ad5879b8814f"],

Cell[TextData[{
 "Clear ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"bec9eaaf-7168-4096-a7cd-33a6ee1c495b"],
 " and ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"60ce3367-388c-4bf8-a43b-821e57f2cc2a"],
 " before continuing:"
}], "CodeText",
 CellChangeTimes->{{3.821286840741146*^9, 3.821286853620421*^9}},
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"a9e40c3d-66db-45fc-94c3-3923b9fcfd24"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "result"}], "]"}]], "Input",
 CellTags->
  "Procedural \
Programming",ExpressionUUID->"bd43b0aa-9b9e-4d5f-b64d-9850d31d7702"],

Cell[TextData[{
 StyleBox["Further information",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ": see the ",
 ButtonBox["Procedural Programming guide page",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/ProceduralProgramming"],
 "."
}], "Text",
 CellDingbat->
  "\[LightBulb]",ExpressionUUID->"cd2d941f-bf66-4ca9-ac44-ba5623df58c1"],

Cell[" ", "EndOfSlide",ExpressionUUID->"cdcfae88-4902-4a04-8b3d-b7b303e2289c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"159aa23e-4beb-40ff-8b26-b38d67b9cab4"],

Cell[CellGroupData[{

Cell["Functional Programming: Overview", "Section",
 CellChangeTimes->{{3.822169300357234*^9, 3.8221693023365183`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b2a75dfd-09af-418a-a699-f6441b3b61d6"],

Cell["Description of the functional style of programming", "Item",
 CellChangeTimes->{{3.821286863698658*^9, 3.82128686408218*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"7cc06320-eb4e-4743-99fd-3b48ef361ef8"],

Cell[TextData[{
 "Functional constructs such as ",
 StyleBox[ButtonBox["Map",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Map"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Apply",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Apply"],
  FontWeight->"Bold"],
 " and ",
 StyleBox[ButtonBox["Nest",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Nest"],
  FontWeight->"Bold"]
}], "Item",
 CellChangeTimes->{{3.8212868662391768`*^9, 3.821286882431862*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"d307fbf5-e11c-4573-8a8b-e3bf733c3256"],

Cell["Expressions: atomic and normal (or compound)", "Item",
 CellChangeTimes->{{3.821286884716095*^9, 3.821286885234836*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ca241773-425c-4927-92a8-719c26c00e3e"],

Cell["Comparison of programming styles", "Item",
 CellChangeTimes->{{3.821286888085047*^9, 3.8212868886534653`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f7a7452e-05dd-4908-832a-4521c2e05196"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"09667d6f-2474-4be0-a2aa-665244744e7f"],

Cell[CellGroupData[{

Cell["Functional Programming", "Section",
 CellChangeTimes->{{3.822169300357234*^9, 3.822169322939362*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"6635e80c-ca43-4211-9199-28f623f0749c"],

Cell["\<\
Functional programming can be thought of as programming using functions as \
the arguments of other functions. In this paradigm, computation is viewed as \
the evaluation of functions.\
\>", "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"2aec1187-1d4c-4d87-85e5-2fa2f113b5c0"],

Cell["For example, here is a short procedural program:", "CodeText",
 CellChangeTimes->{{3.8212868947185173`*^9, 3.82128689556698*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"cc5c70d1-5b15-40cc-a566-e733b5b9e4f7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"gene", "=", 
   TemplateBox[{"\"breast cancer 1, early onset\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"Gene\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"BRCA1\"", ",", 
             RowBox[{"{", 
               RowBox[{"\"Species\"", "\[Rule]", "\"HomoSapiens\""}], "}"}]}],
            "}"}]}], "]"}], 
     "\"Entity[\\\"Gene\\\", {\\\"BRCA1\\\", {\\\"Species\\\" -> \
\\\"HomoSapiens\\\"}}]\"", "\"gene\""},
    "Entity"]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"chars", "=", 
   RowBox[{"Characters", "[", 
    RowBox[{"gene", "[", "\"\<ReferenceSequence\>\"", "]"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"Counts", "[", "chars", "]"}]}], "Input",
 CellChangeTimes->{3.8212109581038094`*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"eac4ddee-b3aa-47da-8202-1e40690e09d8"],

Cell["Here is a functional program that does the same calculation:", \
"CodeText",
 CellChangeTimes->{{3.82128689838356*^9, 3.821286898865356*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"cba8c846-f485-4dc7-a8b3-8130b2a8c97a"],

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"Characters", "[", 
   RowBox[{
    TemplateBox[{"\"breast cancer 1, early onset\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Gene\"", ",", 
          RowBox[{"{", 
            RowBox[{"\"BRCA1\"", ",", 
              RowBox[{"{", 
                RowBox[{"\"Species\"", "\[Rule]", "\"HomoSapiens\""}], 
                "}"}]}], "}"}]}], "]"}], 
      "\"Entity[\\\"Gene\\\", {\\\"BRCA1\\\", {\\\"Species\\\" -> \
\\\"HomoSapiens\\\"}}]\"", "\"gene\""},
     "Entity"], "[", "\"\<ReferenceSequence\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.82121096423314*^9, 3.8212109809091797`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"364e1a89-5526-491f-be17-57ab13b8f33d"],

Cell[" ", "EndOfSlide",ExpressionUUID->"639419ea-8639-43b6-a403-f1d705f91bbc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"cc695b10-5885-4d72-9fd6-d5ea573ec45d"],

Cell[CellGroupData[{

Cell["Introducing New Functions", "Section",
 CellChangeTimes->{{3.82121099320306*^9, 3.8212109992980213`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b2c8542a-df56-4574-9336-a5e0741e0d51"],

Cell["\<\
Most nontrivial functional programs require introducing new functions.\
\>", "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"93ac0623-cea2-4408-a5b1-b1b9a705739d"],

Cell["\<\
For example, consider the task of computing the future value of a principal \
amount using the formula for compound interest. As a concrete example, \
consider an interest rate of 5% compounded monthly.\
\>", "Text",
 CellChangeTimes->{{3.821211004281122*^9, 3.8212110046528378`*^9}, 
   3.8221693779148483`*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"719f9769-f1fe-4620-be16-f72f2751c1d2"],

Cell["\<\
If you start with $1000, this gives the value of your account after one month:\
\>", "CodeText",
 CellChangeTimes->{{3.821211004281122*^9, 3.8212110046528378`*^9}, 
   3.822169380121748*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"fd4836db-ee7a-422a-97e5-89aff993f9f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"value", "[", "p_", "]"}], ":=", 
  RowBox[{"p", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     FractionBox[".05", "12"]}], ")"}]}]}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"3b4de242-87b2-4857-9672-e3d07760b538"],

Cell[BoxData[
 RowBox[{"value", "[", "1000", "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"dd809758-b554-4e9f-a198-9e7200e62258"],

Cell["Here is the value after two months:", "CodeText",
 CellChangeTimes->{{3.8212110066104937`*^9, 3.821211007070531*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"7b4b3594-62e9-44d3-b36b-6d86c987c9f7"],

Cell[BoxData[
 RowBox[{"value", "[", 
  RowBox[{"value", "[", "1000", "]"}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f3bc0de2-4a49-4d87-947f-e46e0976ae7c"],

Cell["And after three months, here is the value of your account:", "CodeText",
 CellChangeTimes->{{3.821211008477974*^9, 3.821211008849242*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"bd7038bb-44eb-4da1-b140-ca664b7549d2"],

Cell[BoxData[
 RowBox[{"value", "[", 
  RowBox[{"value", "[", 
   RowBox[{"value", "[", "1000", "]"}], "]"}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"205d9f0f-c6f1-45b8-8683-894510cdd872"],

Cell["The Nest function is used to iterate functions. ", "Text",
 CellChangeTimes->{{3.8212110108287287`*^9, 3.821211011199136*^9}, {
   3.8212869316546307`*^9, 3.821286941210614*^9}, 3.822169408414941*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"fc99a6be-82ce-4ae6-a414-b8ddd8e52e67"],

Cell["\<\
It takes three arguments: the function to iterate, the initial value to pass \
this function and the number of iterations to perform:\
\>", "CodeText",
 CellChangeTimes->{{3.8212110108287287`*^9, 3.821211011199136*^9}, {
  3.8212869316546307`*^9, 3.821286941210614*^9}, {3.822169415125143*^9, 
  3.822169416243464*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"8d5716aa-bd5f-4e2c-9980-a4774499329b"],

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"f", ",", 
   SubscriptBox["x", "0"], ",", "3"}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"e3df103a-afd5-4bce-b58d-49ffb89bbcc5"],

Cell["\<\
So this computation of future value can be simply done using the function \
Nest:\
\>", "CodeText",
 CellChangeTimes->{{3.821211013900337*^9, 3.821211014258992*^9}, {
  3.821286945986772*^9, 3.821286951181343*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"8eb7808a-e0c8-4a50-ac0a-53ff951dfa19"],

Cell[BoxData[
 RowBox[{"Nest", "[", 
  RowBox[{"value", ",", "1000", ",", "3"}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"04cf384d-463a-42d9-b161-e3819652b23e"],

Cell["\<\
Here are all the intermediate values for the first 12 months:\
\>", "CodeText",
 CellChangeTimes->{{3.8212110162067747`*^9, 3.821211016636613*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"d54c3222-7521-492d-bd28-a26cff703e58"],

Cell[BoxData[
 RowBox[{"NestList", "[", 
  RowBox[{"value", ",", "1000", ",", "12"}], "]"}]], "Input",
 CellChangeTimes->{{3.821211020133586*^9, 3.821211021166957*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"a5ace270-2dc1-4f16-bcd3-6dd448f6549c"],

Cell[TextData[{
 "The basic structure of this example, with a function (like ",
 Cell[BoxData[
 "value"], "Input",ExpressionUUID->"df627143-c459-4f88-ab7b-25d566435193"],
 ") that performs a task and another function (like Nest) that invokes the \
first function, is common to essentially all functional programs. The next \
few sections explore the most common use of functional constructs using Map \
and Apply."
}], "Text",
 CellChangeTimes->{{3.8212869580044928`*^9, 3.821286975988941*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"eb2332a7-37d3-43fd-b0f4-7a13dd0b869f"],

Cell[" ", "EndOfSlide",ExpressionUUID->"8c865de7-ac15-477f-9e29-28797ed8dcfe"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"01f524f3-db14-4236-b760-53465f589ca3"],

Cell[CellGroupData[{

Cell["Map", "Section",
 CellChangeTimes->{3.821211035388349*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"7ce816e5-7bb2-46a0-a39d-5bd0a9cc7c31"],

Cell["\<\
There are many useful functional constructs, like Nest, that are included in \
the Wolfram Language. One of the most frequently used functions is Map.\
\>", "Text",
 CellChangeTimes->{{3.821210132583317*^9, 3.82121013509161*^9}, {
  3.8212869819269133`*^9, 3.8212869928849897`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"cc3eb8db-db6d-410f-af28-b42e332dd909"],

Cell["\<\
Here is an example that illustrates the basic behavior of Map:\
\>", "CodeText",
 CellChangeTimes->{{3.821211039044279*^9, 3.82121104095673*^9}, {
  3.8212869958928947`*^9, 3.8212869969393587`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"bdff6e3f-d4e5-4386-8251-0274d70ce178"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "3", ",", 
     RowBox[{"-", "1"}], ",", "5", ",", 
     RowBox[{"-", "2"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"155efb98-8c74-4fd2-bed7-f5bf0568ab65"],

Cell[TextData[{
 "Mapping ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"35018cd7-d98b-4847-a861-f7e16c8735ff"],
 " across more general expressions should help you to see that ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"6c961aac-f574-43c0-ae00-f4f83e51cadf"],
 " is operating on the ",
 StyleBox["elements",
  FontSlant->"Italic"],
 " of the expressions on the right:"
}], "CodeText",
 CellChangeTimes->{{3.821211042687315*^9, 3.82121104390443*^9}, {
  3.821286999484721*^9, 3.821287015726316*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"4d530a51-33dd-4991-8e48-d693b622773d"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"g", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}]}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f4a2f119-4907-4217-8163-bf2a71eb9419"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"a", "+", "b", "+", "c"}]}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ba71da35-2343-4106-bd3e-4ee3054cc1a0"],

Cell["\<\
Now consider the task of using Map to replace all of the small numbers \
(defined as close to 0) in a list by their squares.\
\>", "Text",
 CellChangeTimes->{{3.821287020071065*^9, 3.821287024171248*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"89acda73-2bd5-453c-a69f-c2bbb0af9183"],

Cell[TextData[{
 "First define a function that returns the square of a number if the argument \
is between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "1"}], TraditionalForm]],ExpressionUUID->
  "6037c76c-cd2b-412a-9f9e-654fe180922c"],
 " and 1:"
}], "CodeText",
 CellChangeTimes->{{3.821211047718685*^9, 3.821211048167996*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"5732ee63-0163-4dbd-985d-d23c3ce32c94"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "1"}], "<", "x", "<", "1"}], ",", 
    SuperscriptBox["x", "2"], ",", "x"}], "]"}]}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b3d502d5-7b02-468e-be27-b1f4eb388f4d"],

Cell[TextData[{
 "Map the function ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"37fa2075-d589-420f-ae53-7f580bd9e0a6"],
 " over the elements of a list:"
}], "CodeText",
 CellChangeTimes->{{3.821211049336399*^9, 3.8212110497434673`*^9}, {
  3.821287033908847*^9, 3.8212870389587584`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"e70d8116-771a-41b7-a520-24de80ada014"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", ".25", ",", 
     RowBox[{"-", "4"}], ",", 
     RowBox[{"-", "1"}], ",", 
     RowBox[{"-", ".9"}], ",", "0"}], "}"}]}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b4b3dd29-a4e1-4814-be3e-7cbec403ddef"],

Cell[BoxData[
 ButtonBox[
  RowBox[{"Map", " ", "hint"}],
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
      "Using symbolic parameters can make it easier to see what is changing \
under the operation of the map. ", "Text"], 
      Cell[
       TextData[{"For example, here is a function ", 
         Cell[
          BoxData["f"], "Input"], 
         " that operates on its argument if it passes the ", 
         StyleBox[
          ButtonBox[
          "Negative", BaseStyle -> "Link", ButtonData -> 
           "paclet:ref/Negative"], FontWeight -> "Bold"], 
         " test. By using a symbolic parameter, ", 
         Cell[
          BoxData["a"], "Input"], 
         ", in the THEN clause, you can see what has changed under the \
mapping operation:"}], "CodeText", 
       CellChangeTimes -> {{3.821373737884759*^9, 3.821373818145999*^9}}], 
      Cell[
       BoxData[
        RowBox[{"Clear", "[", 
          RowBox[{"f", ",", "x", ",", "a"}], "]"}]], "Input", CellLabel -> 
       "In[1]:="], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"f", "[", "x_", "]"}], ":=", 
          RowBox[{"If", "[", 
            RowBox[{
              RowBox[{"Negative", "[", "x", "]"}], ",", 
              SuperscriptBox[
               RowBox[{"(", 
                 RowBox[{"a", "+", "x"}], ")"}], "2"], ",", "x"}], "]"}]}]], 
       "Input", 
       CellChangeTimes -> {{3.4931190135682163`*^9, 3.493119038982236*^9}}, 
       CellLabel -> "In[2]:="], 
      Cell[
       CellGroupData[{
         Cell[
          BoxData[
           RowBox[{"Map", "[", 
             RowBox[{"f", ",", 
               RowBox[{"{", 
                 RowBox[{"3", ",", ".25", ",", 
                   RowBox[{"-", "4"}], ",", 
                   RowBox[{"-", "1"}], ",", 
                   RowBox[{"-", ".9"}], ",", "0"}], "}"}]}], "]"}]], "Input", 
          CellLabel -> "In[3]:="], 
         Cell[
          BoxData[
           RowBox[{"{", 
             RowBox[{"3", ",", "0.25`", ",", 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", "4"}], "+", "a"}], ")"}], "2"], ",", 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", "1"}], "+", "a"}], ")"}], "2"], ",", 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"-", "0.9`"}], "+", "a"}], ")"}], "2"], ",", 
               "0"}], "}"}]], "Output", 
          CellChangeTimes -> {3.821201835712232*^9}, CellLabel -> "Out[3]="]},
         Open]]}, All]),
  Evaluator->Automatic,
  ImageSize->{85, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"4d54a6aa-b7dd-4eba-841f-5d8c37268b0f"],

Cell[TextData[{
 "This maps the ",
 StyleBox[ButtonBox["StringLength",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringLength"],
  FontWeight->"Bold"],
 " function over a list of strings:"
}], "CodeText",
 CellChangeTimes->{{3.821211052026464*^9, 3.821211052465467*^9}, {
  3.821287043140835*^9, 3.821287049216065*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"a6e83c03-9c7b-40f1-96d5-ddb457a77cbe"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"StringLength", ",", 
   RowBox[{"{", 
    RowBox[{
    "\"\<How\>\"", ",", "\"\<I\>\"", ",", "\"\<wish\>\"", ",", "\"\<I\>\"", 
     ",", "\"\<could\>\"", ",", "\"\<recollect\>\"", ",", "\"\<pi\>\"", ",", 
     "\"\<easily\>\""}], "}"}]}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"5e8c270f-c97f-46a4-9dbb-b15a6b9c9532"],

Cell["\<\
To clearly describe Map and many similar operations, it is convenient to \
introduce a bit of terminology.\
\>", "Text",
 CellChangeTimes->{{3.821287052165962*^9, 3.8212870557251997`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"2ad06a17-bdf6-419c-afe9-f306b5627c80"],

Cell[TextData[{
 "Clear the definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"90f55884-d4b8-408c-b2e6-e9edeb3be442"],
 " before continuing:"
}], "CodeText",
 CellChangeTimes->{{3.8212110558968477`*^9, 3.821211056335599*^9}, {
  3.821287059461025*^9, 3.821287063909834*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"0beb6a30-6c62-49bb-8f2b-1bdef4f4f284"],

Cell["Clear[f]", "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"c03cab70-c6bf-45db-89ad-856c2ced291a"],

Cell[" ", "EndOfSlide",ExpressionUUID->"46643aff-8c7c-4e6c-8ee5-93de74bf7532"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"cb226865-4947-410b-add2-4f55d984f482"],

Cell[CellGroupData[{

Cell["Atomic Expressions", "Section",
 CellChangeTimes->{{3.82121106125183*^9, 3.8212110648293543`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"09bd646f-84af-4c2f-bf2e-255ab097ff2d"],

Cell[TextData[{
 "All visible information in the Wolfram Language is represented using ",
 StyleBox["expressions",
  FontSlant->"Italic"],
 ". Expressions are either ",
 StyleBox["atomic expressions",
  FontSlant->"Italic"],
 " or ",
 StyleBox["normal expressions",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{3.821210143631639*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f0f3b97c-a1d4-4eba-b6cc-eb368df10193"],

Cell["\<\
Numbers, symbols and strings are all atomic expressions; they are the basic \
building blocks of expressions.\
\>", "Text",
 CellChangeTimes->{3.821287098511734*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b0e12a86-6978-4df6-83cb-fc76754d0b1d"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox[
      StyleBox["\<\"Atom\"\>", "SR",
       StripOnInput->False,
       FontWeight->"Bold"],
      StripOnInput->False,
      FontWeight->"Bold"], 
     StyleBox[
      StyleBox["\<\"Example\"\>", "SR",
       StripOnInput->False,
       FontWeight->"Bold"],
      StripOnInput->False,
      FontWeight->"Bold"]},
    {"\<\"Symbol\"\>", "\<\"Integrate\"\>"},
    {"\<\"Integer\"\>", "\<\"28\"\>"},
    {"\<\"Real\"\>", "\<\"4.5771\"\>"},
    {"\<\"Rational\"\>", "\<\"\\!\\(\\*FractionBox[\\(2\\), \
\\(9\\)]\\)\"\>"},
    {"\<\"Complex\"\>", 
     RowBox[{"3", "+", 
      RowBox[{"5", " ", "\[ImaginaryI]"}]}]},
    {"\<\"String\"\>", 
     StyleBox["\"\<The rain in Spain\>\"", "TR",
      StripOnInput->False,
      ShowStringCharacters->True]},
    {"\<\"Graph\"\>", 
     GraphicsBox[
      NamespaceBox["NetworkGraphics",
       DynamicModuleBox[{Typeset`graph = HoldComplete[
         Graph[{1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, {
          Null, {{1, 2}, {3, 1}, {4, 2}, {5, 1}, {6, 2}, {7, 1}, {8, 2}, {9, 
           1}, {10, 2}, {11, 1}, {12, 2}, {13, 1}}}]], Typeset`boxes, 
        Typeset`boxes$s2d = GraphicsGroupBox[{{
           Directive[
            Hue[0.6, 0.2, 0.8], 
            EdgeForm[
             Directive[
              GrayLevel[0], 
              Opacity[0.7]]]], 
           TagBox[
            
            DiskBox[{2.449489742783178, 0.9797958971132712}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$1"], 
           TagBox[
            
            DiskBox[{0.9797958971132712, 0.4898979485566356}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$2"], 
           TagBox[
            
            DiskBox[{1.4696938456699067`, 0.4898979485566356}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$3"], 
           TagBox[
            DiskBox[{0., 0.}, 0.0364873624842231], "DynamicName", BoxID -> 
            "VertexID$4"], 
           TagBox[
            
            DiskBox[{1.9595917942265424`, 0.4898979485566356}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$5"], 
           TagBox[
            DiskBox[{0.4898979485566356, 0.}, 0.0364873624842231], 
            "DynamicName", BoxID -> "VertexID$6"], 
           TagBox[
            
            DiskBox[{2.449489742783178, 0.4898979485566356}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$7"], 
           TagBox[
            DiskBox[{0.9797958971132712, 0.}, 0.0364873624842231], 
            "DynamicName", BoxID -> "VertexID$8"], 
           TagBox[
            
            DiskBox[{2.9393876913398134`, 0.4898979485566356}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$9"], 
           TagBox[
            DiskBox[{1.4696938456699067`, 0.}, 0.0364873624842231], 
            "DynamicName", BoxID -> "VertexID$10"], 
           TagBox[
            
            DiskBox[{3.4292856398964493`, 0.4898979485566356}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$11"], 
           TagBox[
            DiskBox[{1.9595917942265424`, 0.}, 0.0364873624842231], 
            "DynamicName", BoxID -> "VertexID$12"], 
           TagBox[
            
            DiskBox[{3.919183588453085, 0.4898979485566356}, 
             0.0364873624842231], "DynamicName", BoxID -> "VertexID$13"]}, {
           Directive[
            Opacity[0.7], 
            Hue[0.6, 0.7, 0.5]], 
           LineBox[{{
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$2", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$3", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$5", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$7", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$9", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$11", Automatic, Center]}, {
              DynamicLocation["VertexID$1", Automatic, Center], 
              DynamicLocation["VertexID$13", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$4", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$6", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$8", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$10", Automatic, Center]}, {
              DynamicLocation["VertexID$2", Automatic, Center], 
              DynamicLocation["VertexID$12", Automatic, Center]}}]}}], 
        Typeset`data}, 
        TagBox[
         DynamicBox[GraphComputation`NetworkGraphicsBox[
          2, Typeset`graph, Typeset`boxes], {
          CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
           SynchronousUpdating -> False, TrackedSymbols :> {}},
          
          ImageSizeCache->{{2.580000000000001, 
           176.42000000000002`}, {-26.563199999999988`, 20.752664125506755`}}],
         MouseAppearanceTag["NetworkGraphics"]],
        AllowKernelInitialization->False,
        UnsavedVariables:>{Typeset`data}]],
      DefaultBaseStyle->{
       "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> 
        Hue[0.8, 1., 0.6]},
      FrameTicks->None]},
    {"\<\"SparseArray\"\>", 
     TagBox[
      FormBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"1", "0", "0", "0"},
          {"0", "0", "0", "1"},
          {"0", "1", "1", "0"},
          {"0", "0", "0", "1"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
       TraditionalForm],
      TraditionalForm,
      Editable->True]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 0.85]}}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {1 -> GrayLevel[0.5]}, 
     "RowsIndexed" -> {2 -> GrayLevel[0.5], 3 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 4 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 5 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 6 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 7 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 8 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 9 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}}},
   GridBoxFrame->{"Columns" -> False, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0.62}}}],
  "Grid"]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.8212020339676523`*^9},
 ShowStringCharacters->
  False,ExpressionUUID->"ebb018c0-9ae6-4da2-9f9e-71a46a6976e7"],

Cell[TextData[{
 "The head of an atomic expression is simply the type of object that it is. \
The ",
 StyleBox[ButtonBox["FullForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/FullForm"],
  FontWeight->"Bold"],
 " of an atomic expression is simply that expression:"
}], "CodeText",
 CellChangeTimes->{{3.8212110861871567`*^9, 3.82121108677822*^9}, {
  3.821287106133356*^9, 3.8212871139724207`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"c6bb0d2c-733e-4186-a2dd-8c9ccc5f395f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Head", "[", "17", "]"}], ",", 
   RowBox[{"FullForm", "[", "17", "]"}]}], "}"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"26f8494c-db9a-45db-8f1b-9123fdaa7708"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Head", "[", "result", "]"}], ",", 
   RowBox[{"FullForm", "[", "result", "]"}]}], "}"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"a093aac0-bb35-4f19-9808-a7241e048dc9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Head", "[", "\"\<Hello\>\"", "]"}], ",", 
   RowBox[{"FullForm", "[", "\"\<Hello\>\"", "]"}]}], "}"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"7a06008a-325a-454c-802a-246e055efce7"],

Cell[" ", "EndOfSlide",ExpressionUUID->"6f8ecca1-2fd7-4161-b049-ba84928c568c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"bce6d04e-bda2-4c2f-9aa6-dc871bf95290"],

Cell[CellGroupData[{

Cell["Normal Expressions", "Section",
 CellChangeTimes->{{3.8212110902881536`*^9, 3.821211093347728*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"415f6552-f66e-4bc8-8ab4-c5da6fb88dab"],

Cell[TextData[{
 "All other expressions are built up from atomic expressions. These compound \
expressions are usually called ",
 StyleBox["normal expressions",
  FontSlant->"Italic"],
 " and share a common structure: normal expressions have a ",
 StyleBox["head",
  FontSlant->"Italic"],
 " and zero or more ",
 StyleBox["elements",
  FontSlant->"Italic"],
 ". All normal expressions are of the following form:"
}], "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"cffb7a70-e24f-4a1e-b6f0-5e15e923418a"],

Cell[BoxData[
 RowBox[{
  StyleBox["h", "TI"], "[", 
  RowBox[{
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["1", "TR"]], ",", 
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["2", "TR"]], ",", "\[Ellipsis]", ",", 
   SubscriptBox[
    StyleBox["e", "TI"], 
    StyleBox["n", "TI"]]}], "]"}]], "Program",
 CellChangeTimes->{{3.821202053419429*^9, 3.8212020767035007`*^9}},
 TextAlignment->Center,ExpressionUUID->"48c6cae4-ee0a-4673-bc15-54d89bd11111"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox["h", TraditionalForm]],ExpressionUUID->
  "274ca2b5-6620-4503-aea9-39eb47326264"],
 " is called the ",
 StyleBox["head",
  FontSlant->"Italic"],
 " of the expression and the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["e", "i"], TraditionalForm]],ExpressionUUID->
  "a3586c92-b180-466b-a214-fc9eefd494ff"],
 " are the ",
 StyleBox["elements",
  FontSlant->"Italic"],
 ". Both the head and the elements of a normal expression can be either \
atomic expressions or normal expressions themselves."
}], "Text",
 CellChangeTimes->{{3.821287133613545*^9, 3.821287139917399*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"1ed3051d-52d8-440f-9a56-005f9d533f0a"],

Cell[TextData[{
 "For example, the expression ",
 Cell[BoxData[
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}]], "Input",ExpressionUUID->
  "1949ecc3-7182-41ed-9dac-776945d5bc2b"],
 " is a normal expression with head ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"100815c3-c8e0-4ff1-90de-307fa38733b8"],
 " and with three (atomic) elements. The ",
 StyleBox[ButtonBox["Head",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Head"],
  FontWeight->"Bold"],
 " function returns the head of its argument:"
}], "CodeText",
 CellChangeTimes->{{3.821211122375244*^9, 3.821211123273262*^9}, {
   3.821287150238241*^9, 3.821287176989113*^9}, 3.821292059336401*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"9288b92c-dc9b-4b98-a82a-8ea7a191ced5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], "//", "Head"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"efeb8009-598d-4fb1-98df-2ba6eae7f355"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"a", ",", "b", ",", "c"}], "]"}], "//", "Length"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"936eeb55-fb05-459d-92a7-e72e692fa44b"],

Cell[BoxData[
 ButtonBox[
  RowBox[{"Postfix", " ", "operators"}],
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"You can use a postfix notation by using the ", 
         StyleBox["//", "MR"], " operator. So, ", 
         StyleBox["expr", "IT"], 
         StyleBox["//f", "MR"], " is the same as ", 
         StyleBox["f[", "MR"], 
         StyleBox["expr", "IT"], 
         StyleBox["]", "MR"], "."}], "Text"], 
      Cell[
       BoxData[
        RowBox[{"Clear", "[", 
          RowBox[{"x", ",", "f"}], "]"}]], "Input", CellLabel -> "In[1]:="], 
      Cell[
       CellGroupData[{
         Cell[
          BoxData[
           RowBox[{"x", "//", "f"}]], "Input", CellLabel -> "In[2]:="], 
         Cell[
          BoxData[
           RowBox[{"f", "[", "x", "]"}]], "Output", 
          CellChangeTimes -> {3.821202200012446*^9}, CellLabel -> "Out[2]="]},
         Open]], 
      Cell[
       CellGroupData[{
         Cell[
          BoxData[
           RowBox[{"\[Pi]", "//", "N"}]], "Input", CellLabel -> "In[3]:="], 
         Cell[
          BoxData["3.141592653589793`"], "Output", 
          CellChangeTimes -> {3.821202200024914*^9}, CellLabel -> "Out[3]="]},
         Open]]}, All]),
  Evaluator->Automatic,
  ImageSize->{125, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"3bf43bf5-13aa-4df5-bc6a-89c191e6d1d5"],

Cell[TextData[{
 "With ",
 StyleBox[ButtonBox["Part",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Part"],
  FontWeight->"Bold"],
 ", you can extract any elements:"
}], "CodeText",
 CellChangeTimes->{{3.821211744397979*^9, 3.821211744937367*^9}, {
  3.821287182804626*^9, 
  3.821287207526169*^9}},ExpressionUUID->"71eecc87-d4e5-4a42-971b-\
932813a8f641"],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"a", ",", "b", ",", "c"}], "]"}], ",", "2"}], "]"}]], "Input",Expr\
essionUUID->"e70fd795-ffb9-4ff7-a519-07bed80c17a7"],

Cell["\<\
It can be a bit more difficult to see the structure of more complicated \
expressions. For example, here is a nested list of lists, a matrix:\
\>", "CodeText",
 CellChangeTimes->{{3.821211746916624*^9, 3.8212117474907513`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"ae125166-eb59-436b-ac13-4af3cc7b15dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"g", ",", "h"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"35c0dec6-ae24-4f80-bdd3-ba259a78f7c1"],

Cell[TextData[{
 "The FullForm or ",
 StyleBox[ButtonBox["TreeForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TreeForm"],
  FontWeight->"Bold"],
 " of ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"2f730508-7192-4a35-991e-ec389195b94f"],
 " shows its structure:"
}], "CodeText",
 CellChangeTimes->{{3.821211750348179*^9, 3.821211750775964*^9}, {
  3.821287192935837*^9, 3.8212872191432333`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"8f03cb0b-a5b1-40e0-a3c0-571fc944e9b1"],

Cell[BoxData[
 RowBox[{"FullForm", "[", "mat", "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"7a62ae9a-e955-470b-bf70-b7ef272a696c"],

Cell[BoxData[
 RowBox[{"TreeForm", "[", "mat", "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"c611d3b4-2d6e-4a10-bac1-ddf3d12338c8"],

Cell[BoxData[
 RowBox[{"Head", "[", "mat", "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f88d7ff3-2494-41a3-a168-4df8337eceb4"],

Cell[TextData[{
 "Each of the elements of ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"02276f14-80a0-40f1-a22e-895227ebe34c"],
 " is a list of length 2; there are three of them:"
}], "CodeText",
 CellChangeTimes->{{3.821211753194476*^9, 3.821211754094458*^9}, {
  3.821287226782731*^9, 3.821287231307393*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"2987e792-8904-409d-b329-fd27936da544"],

Cell[BoxData[
 RowBox[{"Length", "[", "mat", "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"9804b3e3-8819-45b7-b54f-d8f4b63642db"],

Cell["Again, Part is used to extract elements of the expression:", "CodeText",
 CellChangeTimes->{{3.821211755601763*^9, 3.821211756085669*^9}, {
  3.8212872362548733`*^9, 
  3.8212872404458427`*^9}},ExpressionUUID->"395d8de6-9626-49ef-a6a3-\
f79af6ebc0f3"],

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"mat", ",", "2"}], "]"}]], "Input",ExpressionUUID->"d9102f75-f3ee-\
4587-a20c-cff92f9a1479"],

Cell["\<\
Of course, expressions can get quite a bit more complicated to untangle:\
\>", "CodeText",
 CellChangeTimes->{{3.8212117582455797`*^9, 3.821211758695758*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"e656a132-1a6e-4792-a79a-b9b172deadcf"],

Cell[BoxData[
 RowBox[{"TreeForm", "[", 
  RowBox[{"poly", "=", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", " ", "x", " ", "y"}], "+", 
    SuperscriptBox["y", "2"], "-", 
    RowBox[{"2", " ", "x", " ", "z"}], "-", 
    RowBox[{"2", " ", "y", " ", "z"}], "+", 
    SuperscriptBox["z", "2"]}]}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f053727a-5d78-47b8-a97f-efbd74fb63c8"],

Cell["Here is the third part of this expression:", "CodeText",
 CellChangeTimes->{{3.821211760079318*^9, 3.821211760495686*^9}, {
  3.821287246309894*^9, 3.821287246870687*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f889f32f-dc26-4d9b-81e1-16dacbaa2be0"],

Cell[BoxData[
 RowBox[{"poly", "[", 
  RowBox[{"[", "3", "]"}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"0d328326-549a-46d9-a18b-c08b09a02011"],

Cell["\<\
This uniform structure is what makes functional programming so powerful and \
easy to use.\
\>", "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"86837990-0f03-4211-86a4-722f6e5262f5"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"mat", ",", "poly"}], "]"}]], "Input",ExpressionUUID->"54710cc0-\
ff76-4842-a7af-c3d39616cf93"],

Cell[" ", "EndOfSlide",ExpressionUUID->"9a7db5be-6256-402c-b0af-575d44c2acec"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"34e49375-e900-4629-b4fd-2640e88cd294"],

Cell[CellGroupData[{

Cell["Apply", "Section",
 CellChangeTimes->{3.821211811684618*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"83515889-61b3-41b2-8ecd-166eedbb9328"],

Cell["\<\
In addition to Map, another frequently used function is Apply.\
\>", "Text",
 CellChangeTimes->{{3.8212872585763073`*^9, 3.8212872713584538`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"9bd9b0be-dcdd-4df7-ae48-0ae43296ff4f"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"Apply", "[", 
   RowBox[{"f", ",", "expr"}], "]"}]], "Input",ExpressionUUID->
  "74d19e7f-9ec2-4b30-be99-e103f97a39e3"],
 " replaces the head of ",
 Cell[BoxData[
 "expr"], "Input",ExpressionUUID->"7231fa4e-a9d9-44db-bc82-39541582c37a"],
 " with ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"d0dd112c-32e0-49cf-9011-cd972d65e2c9"],
 "."
}], "Text",
 CellChangeTimes->{{3.821287274286293*^9, 3.821287311593692*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"2a5f977b-d67f-41e5-8ca4-2c4b4cf7e4ba"],

Cell["\<\
Basically, think of using Map when you want to operate on the elements of an \
expression; use Apply when you want to change the structure of the expression.\
\>", "Text",
 CellChangeTimes->{{3.821287314823491*^9, 
  3.8212873204624863`*^9}},ExpressionUUID->"c76d3422-871d-4e5e-8c88-\
ebdb9760cc25"],

Cell["This example illustrates the basic behavior of Apply:", "CodeText",
 CellChangeTimes->{{3.821211816205653*^9, 3.821211816565764*^9}, {
  3.821287324095745*^9, 3.82128732602322*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"6202b33e-a577-4511-8f14-77a64dcc3557"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"f", ",", 
   RowBox[{"g", "[", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}]}], 
  "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"51610350-972c-4773-87b2-7f16e5a69f6c"],

Cell[TextData[{
 "This input uses the Apply function to multiply the elements in a list. \
Replacing the head of ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Input",
  ExpressionUUID->"82315adf-9385-488a-86c1-69ef60eab3fc"],
 " with ",
 StyleBox[ButtonBox["Times",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Times"],
  FontWeight->"Bold"],
 " gives ",
 Cell[BoxData[
  RowBox[{"Times", "[", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}]], "Input",
  ExpressionUUID->"cdf16e17-d9db-4496-8de7-6eba85c1055c"],
 " as an intermediate result, which then evaluates to the product:"
}], "CodeText",
 CellChangeTimes->{{3.821211820098578*^9, 3.8212118206496696`*^9}, {
  3.821287329630891*^9, 3.821287372839476*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"5601029a-457c-49be-ad4e-b9b754d98902"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}], 
  "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"66f03453-4656-46f4-a2e0-831c2457dc57"],

Cell[TextData[{
 "Using this approach, here is how you might compute ",
 Cell[BoxData[
  FormBox[
   RowBox[{"10", "!"}], TraditionalForm]],ExpressionUUID->
  "b85ea735-19f9-47c7-9f28-30c06a5da551"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8212118227979937`*^9, 3.821211823372085*^9}, 
   3.821287386031876*^9},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"f8d86d5a-5e5f-4aec-bb9d-194cfdb2519d"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Times", ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"30de7607-a676-4bf1-8eff-fda6c686dbbe"],

Cell["\<\
Recalling the example from the previous section on procedural programming, \
here is a functional approach to adding up the first 10 integers:\
\>", "CodeText",
 CellChangeTimes->{{3.821211826285977*^9, 
  3.821211826780851*^9}},ExpressionUUID->"cf434fc7-fe6e-46be-8db5-\
6f20a093e6be"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Plus", ",", 
   RowBox[{"Range", "[", "10", "]"}]}], "]"}]], "Input",ExpressionUUID->\
"a7d2ce34-15d2-4bd7-ba8e-dc3f600e6ade"],

Cell[TextData[{
 "Alternatively, you could use ",
 Cell[BoxData[
  RowBox[{"Total", "[", "lis", "]"}]], "Input",ExpressionUUID->
  "9d8f96d3-7a60-4dc1-8065-8b6b237525c2"],
 ", which adds up the elements of ",
 Cell[BoxData[
 "lis"], "Input",ExpressionUUID->"566b70b8-0110-443d-a6f5-739ca7ec9b38"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821211828997177*^9, 3.821211857662355*^9}, {
  3.82121189324714*^9, 3.821211893247209*^9}, {3.8212873955587053`*^9, 
  3.821287419171686*^9}},ExpressionUUID->"55caa19a-7a43-4db7-bc00-\
a186279ba680"],

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"Range", "[", "10", "]"}], "]"}]], "Input",ExpressionUUID->\
"1bebd262-2d8e-48be-8572-5743c751cd3e"],

Cell[" ", "EndOfSlide",ExpressionUUID->"07b2120b-b488-4e5e-97db-cce6d854846f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"c7e1e7ce-db45-40d9-aded-efbcb36f69cd"],

Cell[CellGroupData[{

Cell["Programming Styles", "Section",
 CellChangeTimes->{{3.821211901504369*^9, 3.8212119069053583`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b8775166-7320-4e66-b47d-cc7ed6c6ff06"],

Cell["\<\
Many simple calculations that might otherwise be done using loops or other \
procedural programming constructs can be written more succinctly and \
efficiently as functional programs.\
\>", "Text",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"175d3f28-67bb-4099-81d4-8a548b07c961"],

Cell["\<\
For example, consider the task of finding the largest element in each row of \
the following matrix:\
\>", "CodeText",
 CellChangeTimes->{{3.821211913585977*^9, 3.821211914440865*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"45258354-ae4e-4025-a5b8-4e5760794fe0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "9", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "7", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "1"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"fa3e60ee-a11f-48e2-88cf-6f0e72a0f4d1"],

Cell["Here is a procedural program to do this:", "CodeText",
 CellChangeTimes->{{3.821211916555901*^9, 3.821211917028625*^9}, {
  3.821287436350767*^9, 3.8212874541721697`*^9}, {3.8221696857854977`*^9, 
  3.822169687488388*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"d6e55f2b-d110-4823-b180-491cd7ba9b5d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"Append", "[", 
      RowBox[{"result", ",", 
       RowBox[{"Max", "[", 
        RowBox[{"mat", "[", 
         RowBox[{"[", "k", "]"}], "]"}], "]"}]}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", "3"}], "}"}]}], "]"}], 
  ";"}], "\n", "result"}], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"5514ea4d-a32b-4e2e-bcb3-9fc54663d3f9"],

Cell[TextData[{
 "The notation ",
 Cell[BoxData[
  RowBox[{"mat", "[", 
   RowBox[{"[", "k", "]"}], "]"}]], "Input",ExpressionUUID->
  "3db21cee-aa9e-46f5-97fb-a46e746ccbd4"],
 " in this program corresponds to a function that picks out row ",
 Cell[BoxData[
 "k"], "Input",ExpressionUUID->"532729a6-63d0-44b3-b485-4a3bb5edaf20"],
 " of the matrix:"
}], "Text",
 CellChangeTimes->{{3.821211916555901*^9, 3.821211917028625*^9}, {
  3.821287436350767*^9, 3.8212874541721697`*^9}, {3.8221696857854977`*^9, 
  3.822169689433711*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"b687df86-1077-4cd3-8a4c-5ea0b35afc93"],

Cell["Here is a functional program that does the same calculation:", \
"CodeText",
 CellChangeTimes->{{3.821211918849547*^9, 3.8212119192685432`*^9}},
 CellTags->
  "Functional \
Programming",ExpressionUUID->"305f09a2-36ac-429c-a7bd-a6a9af258a46"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Max", ",", "mat"}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"3f8c53b4-f2b7-4da3-aa44-85bf447eb20f"],

Cell[BoxData[
 ButtonBox[
  RowBox[{"Map", " ", "Hint"}],
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"To better see what ", 
         Cell[
          BoxData[
           ButtonBox[
           "Map", BaseStyle -> "Link", ButtonData -> "paclet:ref/Map"]], 
          "InlineFormula"], 
         " is doing here, consider mapping a symbolic function, max, over the \
matrix."}], "Text"], 
      Cell[
       BoxData[
        RowBox[{"Clear", "[", "max", "]"}]], "Input", CellLabel -> "In[1]:="], 
      Cell[
       BoxData[
        RowBox[{
          RowBox[{"mat", "=", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"3", ",", "9", ",", "1"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"2", ",", "7", ",", "8"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"5", ",", "3", ",", "1"}], "}"}]}], "}"}]}], ";"}]],
        "Input", CellLabel -> "In[2]:="], 
      Cell[
       CellGroupData[{
         Cell[
          BoxData[
           RowBox[{"Map", "[", 
             RowBox[{"max", ",", "mat"}], "]"}]], "Input", CellLabel -> 
          "In[3]:="], 
         Cell[
          BoxData[
           RowBox[{"{", 
             RowBox[{
               RowBox[{"max", "[", 
                 RowBox[{"{", 
                   RowBox[{"3", ",", "9", ",", "1"}], "}"}], "]"}], ",", 
               RowBox[{"max", "[", 
                 RowBox[{"{", 
                   RowBox[{"2", ",", "7", ",", "8"}], "}"}], "]"}], ",", 
               RowBox[{"max", "[", 
                 RowBox[{"{", 
                   RowBox[{"5", ",", "3", ",", "1"}], "}"}], "]"}]}], "}"}]], 
          "Output", CellChangeTimes -> {3.821202429835392*^9}, CellLabel -> 
          "Out[3]="]}, Open]]}, All]),
  Evaluator->Automatic,
  ImageSize->{85, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"489033ce-f7dd-4ca1-a4a3-724c1cee1cfe"],

Cell[TextData[{
 "To better see what Map is doing here, consider mapping a symbolic function, \
",
 Cell[BoxData[
 "max"], "Input",ExpressionUUID->"3ae2c896-785f-448c-95da-b060346b4cd4"],
 ", over the matrix."
}], "Text",
 CellChangeTimes->{
  3.821287468482205*^9, {3.821292140952964*^9, 
   3.821292142299522*^9}},ExpressionUUID->"16f79ade-5e1d-48a4-aa5c-\
bce249114b06"],

Cell[BoxData[
 RowBox[{"Clear", "[", "max", "]"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"48374f1a-e02c-496c-ac1f-3b25038ccfea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "9", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "7", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "1"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"5a562a26-09c1-41f6-81b2-acb3760ba445"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"max", ",", "mat"}], "]"}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"ca9077ae-d7dc-4089-bd6e-e96d5f1d32bf"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"mat", ",", "result"}], "]"}]], "Input",
 CellTags->
  "Functional \
Programming",ExpressionUUID->"d4c68418-303d-42d9-b219-f44124b619f0"],

Cell[TextData[{
 StyleBox["Further information",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ": see the ",
 ButtonBox["Functional Programming guide page",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/FunctionalProgramming"],
 "."
}], "Text",
 CellDingbat->
  "\[LightBulb]",ExpressionUUID->"ced11aa1-398d-4142-b3af-96a4d1c1b451"],

Cell[" ", "EndOfSlide",ExpressionUUID->"23739937-4218-4aab-b1c7-6cb841ca6cd5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"5839ccb4-5145-42ba-bd72-fc04ab9a1974"],

Cell[CellGroupData[{

Cell["Programming with Rules: Overview", "Section",
 CellChangeTimes->{{3.822169735127597*^9, 3.822169737077922*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"59a9c990-09fb-46bd-ad83-672086f41476"],

Cell[TextData[{
 "Replacement rules using ",
 StyleBox[ButtonBox["ReplaceAll",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceAll"],
  FontWeight->"Bold"]
}], "Item",
 CellChangeTimes->{{3.821287984564867*^9, 3.821288001612995*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"632b5dcc-2777-4013-aeac-96789539f738"],

Cell["Pattern matching", "Item",
 CellChangeTimes->{{3.821287994080933*^9, 3.82128799439292*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"06cae940-5f75-4e4d-b749-3c6f9729e71d"],

Cell["Conditional patterns", "Item",
 CellChangeTimes->{{3.8212879974737587`*^9, 3.821287998138007*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"6c615900-9c9d-4ffa-9ec3-acaa43262052"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"503f19e9-c6d0-4e34-a21c-98328ac6804b"],

Cell[CellGroupData[{

Cell["Programming with Rules", "Section",
 CellChangeTimes->{{3.822169755844756*^9, 
  3.822169759983706*^9}},ExpressionUUID->"dc571107-7959-453c-ad55-\
da4a2546a3b1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.796495", ",", "\"\<N/A\>\"", ",", "0.070125", ",", 
       RowBox[{"-", "0.323573"}], ",", "0.806554"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<N/A\>\"", ",", 
       RowBox[{"-", "0.100365"}], ",", "0.992736", ",", 
       RowBox[{"-", "0.320560"}], ",", 
       RowBox[{"-", "0.0805351"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.473571", ",", "0.460741", ",", "0.030060", ",", 
       RowBox[{"-", "0.412400"}], ",", "0.788522"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.614974", ",", 
       RowBox[{"-", "0.503201"}], ",", "0.615744", ",", "0.966053", ",", 
       RowBox[{"-", "0.011776"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.828415"}], ",", "0.035514", ",", "0.8911617", ",", 
       "\"\<N/A\>\"", ",", 
       RowBox[{"-", "0.453926"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input",ExpressionUUID->"8f0efd5f-\
940e-44ec-abd4-4bd4b49f6b45"],

Cell[TextData[{
 "This replaces all elements in the matrix containing the string ",
 Cell[BoxData[
 "\"\<N/A\>\""], "Input",ExpressionUUID->
  "cb0e79f8-3bd9-4a3f-be5f-62532fc9f951"],
 " with ",
 Cell[BoxData[
 "0"], "Input",ExpressionUUID->"e0bf2603-5189-4108-811d-3f0e0be91a40"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821211941858079*^9, 3.8212119423520403`*^9}, {
  3.8212880134912577`*^9, 
  3.821288032047866*^9}},ExpressionUUID->"48341ba2-f5fa-4bd6-b7fd-\
2ebce841f8c1"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"mat", "/.", 
   RowBox[{"\"\<N/A\>\"", "\[Rule]", "0"}]}], "]"}]], "Input",ExpressionUUID->\
"a24e89be-08e9-4e85-a97a-47bb40ff5d4e"],

Cell["\<\
This section shows how to transform any Wolfram Language expression using \
rules.\
\>", "Text",
 CellChangeTimes->{
  3.8212101467957907`*^9, {3.821288037154901*^9, 
   3.82128803743441*^9}},ExpressionUUID->"ecc4fd7f-c7dc-4876-b181-\
4380a19ea406"],

Cell[" ", "EndOfSlide",ExpressionUUID->"2b173621-6bec-445a-99c0-b94f8879e149"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"a8ad3d41-6bd5-412c-93d7-bb333acd8f47"],

Cell[CellGroupData[{

Cell["Replacement Rules", "Section",
 CellChangeTimes->{{3.821211951779002*^9, 3.8212119564711027`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"490ba985-5235-4467-95b0-44d50930ec9d"],

Cell["\<\
Recall that when you make an assignment to a symbol, the value of that symbol \
is automatically substituted into any expression containing that symbol.\
\>", "Text",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"67ba1dcc-80e4-460d-a089-8a06eaa2be13"],

Cell[BoxData[
 RowBox[{"x", "=", "5"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"fc58ac1a-39d5-4532-b541-f932dc478a85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", "x"}], "+", 
  RowBox[{"x", " ", "y"}]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"ae68c13e-2922-4c14-9ddf-19d8302526e1"],

Cell["\<\
This computation can also be done without using definitions. Replacement \
rules can be used to make substitutions in other expressions without \
assigning values to symbols.\
\>", "Text",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"3a480a4c-63a3-434d-a899-ae9e70528a2b"],

Cell[TextData[{
 "For example, x \[RightArrow] 5 represents a rule for replacing ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"31d06d57-2bea-4402-b476-b0dcdb772b79"],
 " by ",
 Cell[BoxData[
 "5"], "Input",ExpressionUUID->"3af36ce7-f52a-4334-a06d-007ee597309c"],
 ". The \[RightArrow] operator is entered by typing \[LongDash] followed by \
>. "
}], "Text",
 CellChangeTimes->{{3.8212880496510878`*^9, 3.821288151258997*^9}, {
  3.821292230485929*^9, 3.821292329821261*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"66d8c6a0-21f6-479c-986e-87abdaf0867f"],

Cell[TextData[{
 "This input uses the ReplaceAll function and the rule x \[RightArrow] 5 to \
make a substitution for ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"608f6202-05bb-4c23-b802-6d07bf0cd0d2"],
 " in the expression ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"2", "x"}], "+", "xy"}]], "Input",ExpressionUUID->
  "926e6b75-72a5-4f0f-8f96-294d95bcd74f"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8212119932469893`*^9, 3.821211994000854*^9}, {
  3.821288159595908*^9, 3.821288207227366*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"68e412fb-531a-4844-a405-020afdff2d85"],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"b11aa85d-a778-4368-8fef-cae93135416a"],

Cell[BoxData[
 RowBox[{"ReplaceAll", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", "x"}], "+", 
    RowBox[{"x", " ", "y"}]}], ",", 
   RowBox[{"x", "\[Rule]", "5"}]}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"de7289a5-7d88-4fb6-aa8c-cf28a24a6c02"],

Cell["The basic syntax of ReplaceAll is:", "Text",
 CellChangeTimes->{{3.821288213179743*^9, 
  3.821288218491069*^9}},ExpressionUUID->"62176fd9-e69f-415e-acf7-\
536a7df9a95c"],

Cell["ReplaceAll[expr, pattern -> replacement]", "Program",
 CellChangeTimes->{3.821211974985194*^9},
 TextAlignment->Center,ExpressionUUID->"bc5c755f-b092-409a-9858-9cacd862ccd4"],

Cell[TextData[{
 "Here is the same input using the shorthand ",
 StyleBox["/.", "MR"],
 " operator for ReplaceAll:"
}], "CodeText",
 CellChangeTimes->{{3.821211990256154*^9, 3.8212119906620703`*^9}, {
  3.8212882228669863`*^9, 3.821288226651456*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"98c22267-e3da-4171-86b1-6a0eb9901e22"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"2", "x"}], "+", 
   RowBox[{"x", " ", "y"}]}], "/.", 
  RowBox[{"x", "\[Rule]", "5"}]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"db535cb1-0cf5-4e68-b517-52b551794b46"],

Cell["The basic syntax for the shorthand notation is:", "Text",ExpressionUUID->"42c60559-a206-429b-9c80-9acac4a47ba3"],

Cell["expr /. pattern -> replacement", "Program",
 CellChangeTimes->{3.82136849071859*^9},
 TextAlignment->Center,ExpressionUUID->"9b060d2e-2385-4e24-8cfa-b4a93719763e"],

Cell[TextData[{
 "Note that using this replacement rule does not assign any value to ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"7ead95cb-e2c7-430c-9b24-3dc7a7980083"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821212004373509*^9, 3.8212120064546127`*^9}, {
  3.821288237971346*^9, 3.821288242569005*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"cc9860bb-da2c-4606-b2a9-3fa66683e0de"],

Cell[BoxData[
 RowBox[{"?", "x"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"141f1d46-9b16-4e7c-b5e8-bda8bb4831b3"],

Cell[TextData[{
 "Replacement rules are often used for replacing elements in an array. This \
creates a sample ",
 Cell[BoxData[
  FormBox[
   RowBox[{"4", "\[Times]", "4"}], TraditionalForm]],ExpressionUUID->
  "449fb29f-a9b2-413b-92fc-bbf23926b5a4"],
 " array of random integers between 0 and 10:"
}], "CodeText",
 CellChangeTimes->{{3.8212120086480494`*^9, 3.821212009042005*^9}, {
  3.8212882481888533`*^9, 3.821288252092774*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"878fba70-c952-4b68-b0e4-658f6818816a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "245", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"mat", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "10"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}]}], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"e3177ded-389f-4d8a-a604-6a7958004821"],

Cell[TextData[{
 "This replaces all instances of ",
 Cell[BoxData[
 "5"], "Input",ExpressionUUID->"a696a014-7d39-479d-aa0f-a53ce1db5090"],
 " with ",
 Cell[BoxData[
 "\[Alpha]"], "Input",ExpressionUUID->
  "d5be1749-112a-48a8-9c3f-ce171a160d25"],
 " and of ",
 Cell[BoxData[
 "3"], "Input",ExpressionUUID->"e44438b7-06e1-4508-8e00-ac828206a9bd"],
 " with ",
 Cell[BoxData[
 "\[Beta]"], "Input",ExpressionUUID->"a2cbd981-564b-47a1-b960-1736a7eeebc7"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821212011965602*^9, 3.8212120123494453`*^9}, {
  3.821288260179248*^9, 3.821288286255538*^9}, {3.821374212934011*^9, 
  3.8213742134437723`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"0e7f5909-e5d4-4699-95f2-3ec10262d058"],

Cell[BoxData[
 RowBox[{"mat", "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"5", "\[Rule]", "\[Alpha]"}], ",", 
    RowBox[{"3", "\[Rule]", "\[Beta]"}]}], "}"}]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"2fa3e0f0-d896-41d1-bf77-90052bb32225"],

Cell["Here is an example of replacement on strings:", "CodeText",
 CellChangeTimes->{{3.821212015449484*^9, 3.821212015927297*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"0752ae16-06c9-4d01-954b-304517b71966"],

Cell[BoxData[
 RowBox[{"StringReplace", "[", 
  RowBox[{"\"\<the cat in the hat\>\"", ",", 
   RowBox[{"\"\<t\>\"", "\[Rule]", "\"\<T\>\""}]}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"bf378aa6-ca0c-4b4d-af2c-538e7ee794dd"],

Cell["\<\
In order to gain additional flexibility in transforming expressions, you need \
to be able to match expressions that satisfy any criteria you might be \
interested in. The next section looks at patterns, which give that capability.\
\>", "Text",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"dccb691d-3d90-4905-a42d-802b843a4b6c"],

Cell[BoxData[
 RowBox[{"Clear", "[", "mat", "]"}]], "Input",ExpressionUUID->"e4bcce5f-c201-4a1c-8e36-74976d012ed4"],

Cell[" ", "EndOfSlide",ExpressionUUID->"bfc5856f-6581-4044-9bd7-9840e7e70f8b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"b5bcc2aa-c5b4-4036-ae5b-2347c8d7148e"],

Cell[CellGroupData[{

Cell["Patterns", "Section",
 CellChangeTimes->{3.8212120236901903`*^9},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"bfb6a770-bed7-4958-82ee-408ed8ab4199"],

Cell[TextData[{
 "The expression on the left side of a rule or assignment is a ",
 StyleBox["pattern",
  FontSlant->"Italic"],
 ". This pattern determines the class of expressions to which the \
corresponding rule applies. "
}], "Text",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"dcb9265f-39bd-4cb0-bd16-6d30369c583e"],

Cell[TextData[{
 "For example, the pattern ",
 Cell[BoxData[
  RowBox[{"f", "[", "n_", "]"}]], "Input",ExpressionUUID->
  "3afe39cf-1ddf-4835-8019-7ea3c40f345b"],
 " in the following assignment introduces a rule that applies to ",
 Cell[BoxData[
  RowBox[{"f", "[", 
   StyleBox["anything",
    FontSlant->"Italic"], "]"}]], "Input",ExpressionUUID->
  "70b2668d-37be-479e-a487-7496cbb1d7b6"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8212883031815*^9, 3.821288336819826*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"63541948-165a-4f6d-9c1d-5765639db488"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  FractionBox["n", 
   RowBox[{"n", "+", "1"}]]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"35a9961f-94c7-42ec-846b-1dddeca7a8e6"],

Cell[BoxData[
 RowBox[{"f", "[", "5", "]"}]], "Input",ExpressionUUID->"cf089253-a2a5-4e1b-a246-674249a66d10"],

Cell[BoxData[
 RowBox[{"f", "[", 
  GraphicsBox[{{}, {}, 
    {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
      "]]}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->True,
   AxesOrigin->{0, 0},
   ImageSize->{143., Automatic},
   PlotRange->
    NCache[{{0, 2 Pi}, {-0.9999998592131705, 0.9999998782112116}}, {{
      0, 6.283185307179586}, {-0.9999998592131705, 0.9999998782112116}}],
   PlotRangeClipping->True,
   PlotRangePadding->{
     Scaled[0.02], 
     Scaled[0.02]}], "]"}]], "Input",ExpressionUUID->"cffbad4a-451c-46a0-81a5-\
a9b60fc8061b"],

Cell[TextData[{
 "Patterns can be constructed to match any class of expressions. This section \
uses ",
 StyleBox[ButtonBox["Cases",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Cases"],
  FontWeight->"Bold"],
 " to return all those elements from a list that match a pattern."
}], "Text",
 CellChangeTimes->{{3.821288341163789*^9, 3.8212883460867558`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"ecbb3e0d-a052-4b2e-bc7c-870783c3bc7d"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     StyleBox[
      StyleBox["\<\"Pattern\"\>", "SR",
       StripOnInput->False,
       FontWeight->"Bold"],
      StripOnInput->False,
      FontWeight->"Bold"], 
     StyleBox[
      StyleBox["\<\"Expressions that match\"\>", "SR",
       StripOnInput->False,
       FontWeight->"Bold"],
      StripOnInput->False,
      FontWeight->"Bold"], 
     StyleBox[
      StyleBox["\<\"Example\"\>", "SR",
       StripOnInput->False,
       FontWeight->"Bold"],
      StripOnInput->False,
      FontWeight->"Bold"]},
    {"\<\"_\"\>", 
     StyleBox["\<\"any expression\"\>", "TR",
      StripOnInput->False], "\<\"x, \\\"a string\\\", 45\"\>"},
    {"\<\"_Real\"\>", 
     StyleBox[
      InterpretationBox["\<\"expression with head \
\\!\\(\\*StyleBox[\\\"\\\\\\\"Real\\\\\\\"\\\", \\\"MR\\\", \
Rule[StripOnInput, False]]\\)\"\>",
       StringForm["expression with head `1`", 
        Style["Real", "MR"]],
       Editable->False], "TR",
      StripOnInput->False], "\<\"1.3528\"\>"},
    {"\<\"_?Negative\"\>", 
     StyleBox[
      InterpretationBox["\<\"expression that passes the \
\\!\\(\\*StyleBox[\\\"\\\\\\\"Negative\\\\\\\"\\\", \\\"MR\\\", \
Rule[StripOnInput, False]]\\) test\"\>",
       StringForm["expression that passes the `1` test", 
        Style["Negative", "MR"]],
       Editable->False], "TR",
      StripOnInput->False], "\<\"-129\"\>"},
    {"\<\"{p_,\[VeryThinSpace]\[VeryThinSpace]q_}\"\>", 
     StyleBox["\<\"list of two expressions\"\>", "TR",
      StripOnInput->False], "\<\"{Bob,-0.398}\"\>"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Center}}},
   GridBoxBackground->{"Columns" -> {{
        RGBColor[1, 1, 0.85]}}},
   GridBoxDividers->{
    "ColumnsIndexed" -> {1 -> GrayLevel[0.5]}, 
     "RowsIndexed" -> {2 -> GrayLevel[0.5], 3 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 4 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}, 5 -> {
         Thickness[Tiny], 
         GrayLevel[0.85]}}},
   GridBoxFrame->{"Columns" -> False, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0.62}}}],
  "Grid"]], "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{3.821202532437668*^9},
 ShowStringCharacters->
  False,ExpressionUUID->"18df57fe-64d2-4b3a-ad69-1e44a3c0ceed"],

Cell[BoxData[
 RowBox[{"?", "Cases"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"92eac2f4-3677-4831-9b5a-6cd4713e702e"],

Cell[TextData[{
 "The pattern ",
 StyleBox["_", "MR"],
 " (the underscore character) matches ",
 StyleBox["any",
  FontSlant->"Italic"],
 " expression:"
}], "CodeText",
 CellChangeTimes->{{3.8212883570206127`*^9, 3.821288358274835*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"ca539f3d-f49b-48f6-b460-950348661801"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", "_"}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"b6ae9217-6af7-40f5-be59-84fe622f317d"],

Cell[TextData[{
 "Named patterns: the pattern ",
 Cell[BoxData[
  RowBox[{"x_", " "}]], "Input",ExpressionUUID->
  "19c49c7a-cbea-4863-a808-d090cc7bc603"],
 " gives the matched expression the name ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"36bfaba6-0da1-4629-9511-b05481b22934"],
 ", so that expression can be used elsewhere in the rule."
}], "Text",
 CellChangeTimes->{{3.821288362714929*^9, 3.821288383012662*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"89ecd1cf-ee33-4081-889f-5f8750e8a9cd"],

Cell[TextData[{
 "Matching heads: the pattern ",
 Cell[BoxData[
 "_Real"], "Input",ExpressionUUID->"a66ec697-b7d5-42d8-bb45-f1f6866dac4a"],
 " matches any number with head Real:"
}], "CodeText",
 CellChangeTimes->{{3.8212883876519623`*^9, 3.82128840196524*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"1d35a17e-3679-400e-bb93-323a364be89d"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", "_Real"}], "]"}]], "Input",\

 CellTags->
  "Programming with \
Rules",ExpressionUUID->"05cd5756-78c9-4263-ac81-19b8d5431e13"],

Cell[TextData[{
 "Matching with predicates: the pattern ",
 Cell[BoxData[
  RowBox[{"x_", "/;", 
   RowBox[{"Negative", "[", "x", "]"}]}]], "Input",ExpressionUUID->
  "d7ab5855-46c6-4835-8238-327ed1933541"],
 "matches any negative number. "
}], "Text",
 CellChangeTimes->{{3.821288406628071*^9, 3.821288464347706*^9}, {
   3.821374265781402*^9, 3.821374267357354*^9}, 3.822169967551963*^9},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"e9ca7e75-10fb-4692-9825-3c387d532e27"],

Cell[TextData[{
 "The following can be read as, \"the pattern named ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"9531b11a-176e-4b28-a9c1-99bb983c96de"],
 " under the condition that ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"e36c4f1b-e72b-4212-aa67-26588cf8d766"],
 " passes the Negative test\":"
}], "CodeText",
 CellChangeTimes->{{3.821288406628071*^9, 3.821288464347706*^9}, {
  3.821374265781402*^9, 3.821374267357354*^9}, {3.8221699869626093`*^9, 
  3.8221699911744413`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"657618b7-b6a8-494a-bbb6-5bb6f713e124"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", 
   RowBox[{"n_", "/;", 
    RowBox[{"Negative", "[", "n", "]"}]}]}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"f5ca6f48-9fdc-4a15-af1d-365dca3a80f9"],

Cell[TextData[{
 "The shorthand notation  ",
 StyleBox["?", "Input"],
 " exists for a particular conditional pattern."
}], "Text",
 CellChangeTimes->{{3.8212884679243183`*^9, 3.8212884683805037`*^9}, {
  3.821292372355361*^9, 3.821292376734179*^9}, {3.822170010467594*^9, 
  3.822170027794766*^9}},ExpressionUUID->"0f1a9897-0615-412c-a27e-\
dbede855a043"],

Cell["\<\
Here is the test for the same pattern using the shorthand notation:\
\>", "CodeText",
 CellChangeTimes->{{3.822170053881653*^9, 
  3.822170069596302*^9}},ExpressionUUID->"82b3d585-ffba-4c1c-a07e-\
993d6827e6c7"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", 
   RowBox[{"_", "?", "Negative"}]}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"1371229e-c8bb-48e1-ad31-5e77861d3d1e"],

Cell[TextData[{
 "Matching a pair: the pattern ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"p_", ",", "q_"}], "}"}]], "Input",ExpressionUUID->
  "34579c70-669e-4f7b-85d7-94a4052f3270"],
 " matches any list containing any two expressions:"
}], "CodeText",
 CellChangeTimes->{{3.821288472364613*^9, 3.821288490004449*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"7c7c3440-e106-40da-be8e-205fec85344e"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"g", "[", "z", "]"}], ",", "\[Pi]", ",", "3.4", ",", 
     RowBox[{"-", "5"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}]}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"abac0362-d946-45d0-aa19-0d54fb0a7e8d"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "g"}], "]"}]], "Input",ExpressionUUID->"cb08ea36-d2b9-\
401a-9ee5-1c66aa620a24"],

Cell[TextData[{
 "See the tutorial section ",
 ButtonBox["Finding Expressions That Match a Pattern",
  BaseStyle->"Link",
  ButtonData->"paclet:tutorial/Patterns#7301"],
 " for a more complete description of pattern constructions. "
}], "Text",
 CellDingbat->"\[LightBulb]",
 CellChangeTimes->{{3.821368548670319*^9, 3.821368548674185*^9}, {
  3.821372575575252*^9, 3.82137257674207*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"b5c7deec-1c34-4e84-8ba1-2f4fbb204fd3"],

Cell[" ", "EndOfSlide",ExpressionUUID->"e5c2c41e-c599-4c36-b5c6-f52d0e1bbb46"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"bb9ca9cf-0260-442d-8bda-4ab6df532941"],

Cell[CellGroupData[{

Cell["Rules and Pattern Matching", "Section",
 CellChangeTimes->{{3.821212034667906*^9, 3.821212042601205*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"0df18db9-a116-4828-a3a4-a04e8ada43b0"],

Cell["\<\
Patterns can be used to prevent rules from being invoked unless certain \
criteria are met. Patterns are often used in this way to check the validity \
of arguments.\
\>", "Text",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"7bcbb960-4500-4bea-89a8-529ace0d3394"],

Cell["First, look at an example created earlier:", "CodeText",
 CellChangeTimes->{{3.821288556951274*^9, 3.821288557468861*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"051640d9-042f-45ca-97df-b2309ed76f85"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "n_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IntegerQ", "[", "n", "]"}], "&&", 
     RowBox[{"n", ">", "0"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", 
     RowBox[{"n", ",", " ", "\"\< is not a positive integer.\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",ExpressionUUID->"09bfd7b7-c2be-\
4faa-b075-698f6972f495"],

Cell["\<\
Using patterns, the rule can be set up so that it is used only when the \
argument is a positive integer:\
\>", "CodeText",
 CellChangeTimes->{{3.821288565692111*^9, 3.8212885782613897`*^9}, 
   3.822170108393413*^9, {3.822170139392639*^9, 3.822170140825799*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"895b2fac-1545-4780-ae15-c17f37e4f334"],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",ExpressionUUID->"1f23e68f-19ee-4c4b-be90-2c6accd22931"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"n_Integer", "?", "Positive"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"result", "=", "0"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"result", "+", "k"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "result"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{3.822170178045895*^9},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"6ac2be08-e69a-4db3-afec-780cdb6e6e80"],

Cell[TextData[{
 "Note also that the local variable ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"5b9823cb-2a72-451a-a004-aa4fbe75119d"],
 " has been initialized inside the Module."
}], "Text",
 CellChangeTimes->{{3.821288565692111*^9, 3.8212885782613897`*^9}, {
  3.822170130616783*^9, 3.822170131451106*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"958c5595-ba5f-48e1-a97c-f8bd344eca29"],

Cell[TextData[{
 "With these definitions, ",
 Cell[BoxData[
  RowBox[{"f", "[", "Pi", "]"}]], "Input",ExpressionUUID->
  "813c1e0b-7bb7-4268-8d85-cc2894e17f30"],
 " just evaluates to itself, since there are no rules that apply to this \
expression:"
}], "CodeText",
 CellChangeTimes->{{3.82128858120621*^9, 3.821288596373114*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"a559ea55-90cb-4c35-aec9-4dec9ab10096"],

Cell[BoxData[
 RowBox[{"f", "[", "Pi", "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"c241664b-d869-4b5b-ba9e-1ffa161d826e"],

Cell["\<\
If the argument is a positive integer, the sum is computed as before:\
\>", "CodeText",
 CellChangeTimes->{{3.821288598996793*^9, 3.821288599534169*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"fd72ece0-4230-414f-93ec-b97b9ee89700"],

Cell[BoxData[
 RowBox[{"f", "[", "100", "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"ceec7212-d90b-4724-8fce-b7df6f4d5a83"],

Cell[BoxData[
 RowBox[{"?", "f"}]], "Input",ExpressionUUID->"9b77c9a0-2d62-462c-9a39-d1e87bff9e02"],

Cell[TextData[{
 "Clear the definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"71804d97-1023-4a49-ac95-e05a296fbf02"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.82128860444477*^9, 3.8212886105744047`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"f2b6f127-5a2c-4cd2-900d-378714cf7eff"],

Cell["Clear[f]", "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"d1762d31-d0cc-403d-b249-0cf285022a93"],

Cell[" ", "EndOfSlide",ExpressionUUID->"d3fc5ab1-329d-4e35-82c7-ef3890adcc9a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"f9480773-d1ac-4592-be0b-20256affe867"],

Cell[CellGroupData[{

Cell["Pattern Examples", "Section",
 CellChangeTimes->{{3.82121205115096*^9, 3.821212054896976*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"8a76b50f-61b7-43d9-96f2-df80d28b09f4"],

Cell["\<\
One way to find out what a pattern matches and to see the pattern in action \
is to use the pattern in a rule and apply the rule. In this section, you will \
first use Cases to identify which elements in an expression actually match \
the given pattern.\
\>", "Text",
 CellChangeTimes->{{3.821288631862319*^9, 3.821288645765212*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"ec0f5ef7-cf9b-4644-b32c-afd75c1b8e0e"],

Cell[TextData[{
 "In this first example, Cases is used to extract all those elements in the \
list that match the pattern ",
 Cell[BoxData[
 "_Integer"], "Input",ExpressionUUID->
  "f25b5c8a-988c-474b-acd6-14866617abdf"],
 " (i.e. to return all expressions with head ",
 StyleBox[ButtonBox["Integer",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Integer"],
  FontWeight->"Bold"],
 "):"
}], "CodeText",
 CellChangeTimes->{{3.821212064988471*^9, 3.821212065303422*^9}, {
  3.82128865039889*^9, 3.8212886791628437`*^9}, {3.822170202427895*^9, 
  3.8221702267135487`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"53d65715-0d85-4711-bad7-c04a90e81156"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "23"}], ",", 
     RowBox[{"-", "3.5"}], ",", "4.1", ",", "7"}], "}"}], ",", "_Integer"}], 
  "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"b6f9aa2f-2fa5-422c-a54b-c3ae4277f879"],

Cell["This replaces the integers in the list by zero:", "CodeText",
 CellChangeTimes->{{3.8212120671920633`*^9, 3.8212120676432867`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"1595b17b-e83d-4fc7-a069-65add5e5b93f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"-", "23"}], ",", 
    RowBox[{"-", "3.5"}], ",", "4.1", ",", "7"}], "}"}], "/.", 
  "\[InvisibleSpace]", 
  RowBox[{"_Integer", "\[Rule]", "0"}]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"d66f81cb-9dfb-4d9f-a909-9ae3a79d5e19"],

Cell["\<\
In this next example, first identify all those elements in the list that pass \
the Negative test:\
\>", "CodeText",
 CellChangeTimes->{{3.821212069285288*^9, 3.821212069713201*^9}, {
   3.821288685548877*^9, 3.821288688565724*^9}, 3.821292434181859*^9, {
   3.821374314534175*^9, 3.821374316229252*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"309de650-303e-4993-8298-b870f8b16197"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "23"}], ",", 
     RowBox[{"-", "3.5"}], ",", "4.1", ",", "7"}], "}"}], ",", 
   RowBox[{"_", "?", "Negative"}]}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"d0c6b299-e7da-4c5a-ba07-d3674114d3a8"],

Cell["This replaces the negative numbers in the list by zero:", "CodeText",
 CellChangeTimes->{{3.821212070770591*^9, 3.8212120711419487`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"2c60e2aa-ecc0-4e8a-84ac-5b0c3fadf234"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", 
    RowBox[{"-", "23"}], ",", 
    RowBox[{"-", "3.5"}], ",", "4.1", ",", "7"}], "}"}], "/.", 
  "\[InvisibleSpace]", 
  RowBox[{
   RowBox[{"_", "?", "Negative"}], "\[Rule]", "0"}]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"fb4dd8f2-d921-4e84-b4b9-27c7d1fcbd6d"],

Cell["\<\
In this example, notice that each of the sublists matches the pattern \
consisting of a list with two arbitrary elements:\
\>", "CodeText",
 CellChangeTimes->{{3.821212073257025*^9, 3.8212120737293987`*^9}, 
   3.821288694245586*^9},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"de7787c0-9c27-4d16-b838-62dd51bd5ea5"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}]}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"447ec80c-72e5-4498-9518-b129f196fd5e"],

Cell["This reverses the elements in all lists of two elements:", "CodeText",
 CellChangeTimes->{{3.8212120762045918`*^9, 3.821212076823251*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"b853fb4c-4ada-4a03-8174-3cb8d7cf8117"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}]}], "}"}], "/.", "\[InvisibleSpace]", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"q", ",", "p"}], "}"}]}]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"eb088aa1-bda1-4c4e-a7cb-99cc301fb210"],

Cell["\<\
Although this last example seems to work well, what do you think would happen \
if the expression on the left were a list consisting of exactly two pairs of \
numbers?\
\>", "Text",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"a8c178f8-a8a4-410e-8ad1-a9499b4bbafa"],

Cell[" ", "EndOfSlide",ExpressionUUID->"99ee2833-dedd-4d57-a4fe-8eab90a62ca1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"bfb5a63f-6dc9-427f-b7cb-7868b6cd0105"],

Cell[CellGroupData[{

Cell["Conditions on Patterns", "Section",
 CellChangeTimes->{{3.821212084192198*^9, 3.8212120877133293`*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"f8ff6ba4-3246-4b9e-a8ab-c7c589f2ccbb"],

Cell["\<\
You can add conditions to your patterns so that a match only occurs when the \
condition is satisfied.\
\>", "Text",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"f8661456-395f-44df-bf5c-8ca12f632661"],

Cell[TextData[{
 "This pattern is only matched when the argument to ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"7f75bc4b-27b7-4630-9b72-a6ae0f982e63"],
 " is less than 0:"
}], "CodeText",
 CellChangeTimes->{{3.821212089421146*^9, 3.821212089827464*^9}, {
  3.8212887126471663`*^9, 3.821288718674938*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"0626e466-0916-463f-9f62-80b7600eaa67"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"x_", "/;", 
    RowBox[{"x", "<", "0"}]}], "]"}], ":=", 
  SuperscriptBox["x", "2"]}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"d1736030-bf35-4eaa-a40e-a2f1b53551bc"],

Cell[BoxData[
 RowBox[{"f", "[", "5", "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"542219c8-d7e7-4270-a6b3-c7a7081301d7"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"-", "5"}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"e94feb51-2ac0-494a-92f8-63b2744310d8"],

Cell[TextData[{
 "Conditions are particularly useful when specifying criteria for functions \
such as Cases. Here is some synthetic data to work with\[LongDash]a list of \
25 random integers between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "10"}], TraditionalForm]],ExpressionUUID->
  "3b610002-d17c-4d3e-90d3-e8d432bb2c81"],
 " and 10:"
}], "CodeText",
 CellChangeTimes->{{3.821212091775956*^9, 3.821212092157028*^9}, {
  3.821288722726883*^9, 3.821288724262051*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"6c6655d2-d26f-46db-b8bc-9f7cb678205f"],

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", "25"}], "]"}]}]], "Input",\

 CellTags->
  "Programming with \
Rules",ExpressionUUID->"277128dd-170a-40ca-81b5-12c18d5f9154"],

Cell[TextData[{
 "This returns all those elements in the list ",
 Cell[BoxData[
 "data"], "Input",ExpressionUUID->"41932e27-2931-4631-a0e6-1f7cadef5b20"],
 " that are between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "3"}], TraditionalForm]],ExpressionUUID->
  "fa5374cf-de4c-4567-bc36-848ebbb75d90"],
 " and 3:"
}], "CodeText",
 CellChangeTimes->{{3.8212120941269493`*^9, 3.821212094485482*^9}, {
  3.821288733398789*^9, 3.821288737633575*^9}},
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"dbad5e08-d60b-4879-a740-e0de625428c1"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"data", ",", 
   RowBox[{"p_", "/;", 
    RowBox[{
     RowBox[{"-", "3"}], "\[LessEqual]", "p", "\[LessEqual]", "3"}]}]}], 
  "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"fb27dc96-1bbe-4f62-bae9-2775d8a1fb9f"],

Cell["\<\
Alternatively, you can delete those elements that match the pattern:\
\>", "CodeText",
 CellChangeTimes->{{3.821212096443118*^9, 
  3.821212096881613*^9}},ExpressionUUID->"3f297640-b437-43b3-bb60-\
e3ec66512560"],

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{"data", ",", 
   RowBox[{"p_", "/;", 
    RowBox[{
     RowBox[{"-", "3"}], "\[LessEqual]", "p", "\[LessEqual]", "3"}]}]}], 
  "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"aa758d93-add9-4661-8dc5-118677e78594"],

Cell["\<\
Other functions use the same syntax as Cases, but return the number of \
elements that match the pattern or the positions of those elements that match \
the pattern:\
\>", "CodeText",
 CellChangeTimes->{{3.821212099042346*^9, 3.821212099491941*^9}, {
  3.8212887456317053`*^9, 
  3.8212887506703987`*^9}},ExpressionUUID->"8cfb681e-185a-4b14-bbb6-\
d7e944f46929"],

Cell[BoxData[
 RowBox[{"Count", "[", 
  RowBox[{"data", ",", 
   RowBox[{"p_", "/;", 
    RowBox[{
     RowBox[{"-", "3"}], "\[LessEqual]", "p", "\[LessEqual]", "3"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"9ad2ae52-50db-4462-bed3-121bf143418d"],

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{"data", ",", 
   RowBox[{"p_", "/;", 
    RowBox[{
     RowBox[{"-", "3"}], "\[LessEqual]", "p", "\[LessEqual]", "3"}]}]}], 
  "]"}]], "Input",ExpressionUUID->"ad2c39f7-8003-4e59-88d1-bebe7f4b0bd2"],

Cell[TextData[{
 "Extract those elements of ",
 Cell[BoxData[
 "data"], "Input",ExpressionUUID->"b00e82c6-9dc5-4f63-98e1-f68c1b428fb4"],
 " that live at these positions:"
}], "CodeText",
 CellChangeTimes->{{3.821212101370895*^9, 3.8212121018546953`*^9}, {
  3.821288762445763*^9, 
  3.821288767675311*^9}},ExpressionUUID->"9d4c649e-117b-42dd-b26f-\
347015f4418f"],

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"data", ",", 
   RowBox[{"Position", "[", 
    RowBox[{"data", ",", 
     RowBox[{"p_", "/;", 
      RowBox[{
       RowBox[{"-", "3"}], "\[LessEqual]", "p", "\[LessEqual]", "3"}]}]}], 
    "]"}]}], "]"}]], "Input",ExpressionUUID->"4f5ba16c-74db-48fe-9ba8-\
90836757ec55"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "data"}], "]"}]], "Input",
 CellTags->
  "Programming with \
Rules",ExpressionUUID->"24c05f7c-18ee-422e-beac-6e467efe8337"],

Cell[" ", "EndOfSlide",ExpressionUUID->"3c5e287a-a9c0-40b8-983d-4e9fed5396f6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"a70f0acb-165c-4d59-86d9-0f1423b0ca1f"],

Cell[CellGroupData[{

Cell["Comparing Programming Styles", "Section",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"8e4129fd-1225-42ec-bf5d-2eacbfe7cbeb"],

Cell["\<\
This section takes a step back and compares the three programming styles\
\[LongDash]procedural, functional and rule-based\[LongDash]introduced in this \
chapter through the use of a concrete example.\
\>", "Text",
 CellChangeTimes->{3.8212887762238398`*^9},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"79e0c76f-96d8-4c54-84fc-b657ce54fa9c"],

Cell["\<\
Nearly all nontrivial programs use a mixture of programming styles. No one \
style is always better than another. You should choose whatever programming \
style seems most natural for you or for what you want to do. A good start for \
learning how to make that decision is to see lots of examples comparing \
different styles of programming.\
\>", "Text",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"44bd361c-aea1-458a-8ca1-ca244fa89bf6"],

Cell["\<\
As a summary of this introduction to programming in the Wolfram Language, a \
small problem using three different styles\[LongDash]procedural, functional \
and rule-based\[LongDash]will be solved: given a list of pairs of numbers, \
return a list consisting of the sum of each pair.\
\>", "Text",
 CellChangeTimes->{
  3.821210149107931*^9, 3.821288799485815*^9, {3.822170282441428*^9, 
   3.822170292582398*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"43a94ef7-b81d-4647-bd45-3d3305699ba3"],

Cell["Here is a list of pairs of numbers:", "CodeText",
 CellChangeTimes->{{3.8212121231523447`*^9, 3.821212123746842*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"d24f45c0-08d6-499f-bbc9-8f0f11891646"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pairs", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"58", ",", "96"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"85", ",", "22"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"100", ",", "69"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"5", ",", "37"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"32", ",", "64"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"41", ",", "86"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"79", ",", "22"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"19045409-6080-4a30-afaf-369eb0b0cbdf"],

Cell[CellGroupData[{

Cell["The Procedural Approach", "Subsection",
 CellChangeTimes->{{3.8212121261208897`*^9, 3.821212126604535*^9}, {
  3.821288811558262*^9, 3.821288840372891*^9}, {3.822170319651513*^9, 
  3.8221703253581953`*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"830953a9-7327-4eae-afa9-dcbbd899659a"],

Cell[TextData[{
 "This is quite similar to what you would do in a language like C or Fortran: \
allocate an (empty or null) array, ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"70345f6b-679d-4268-b724-5da9773a5402"],
 ", of the same size as ",
 Cell[BoxData[
 "pairs"], "Input",ExpressionUUID->"c84f6009-c190-4b24-990a-3054605e049a"],
 ", then replace each element in ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"12e67862-224d-4022-9f80-d3b3a0d7e76c"],
 " by the sum of the first and second elements in each pair. Finally, return \
the value in ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"ca4bd78a-b55c-45cc-a5e7-25c702049131"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.8212121261208897`*^9, 3.821212126604535*^9}, {
  3.821288811558262*^9, 3.821288840372891*^9}, {3.822170327804014*^9, 
  3.8221703297718897`*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"63f33f37-ddb7-4624-99cc-79ce151863b1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "pairs", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"result", "[", 
     RowBox[{"[", "k", "]"}], "]"}], "=", 
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"pairs", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}], "+", 
     RowBox[{"Last", "[", 
      RowBox[{"pairs", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", 
     RowBox[{"Length", "[", "pairs", "]"}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", "result"}], "Input",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"682d710d-9987-4d5e-89ed-bc28d86dc6ef"],

Cell["Here is a structured procedure using Table:", "CodeText",
 CellChangeTimes->{{3.821212129271205*^9, 3.8212121297320423`*^9}, {
  3.821288845298374*^9, 3.821288846746542*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"4c0e1f96-2f66-4b89-bc29-a2dfeca19171"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"pairs", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "1"}], "]"}], "]"}], "+", 
    RowBox[{"pairs", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"Length", "[", "pairs", "]"}]}], "}"}]}], "]"}]], "Input",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"a4741f95-8144-4154-9970-e54918bd020c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Functional Approach", "Subsection",
 CellChangeTimes->{{3.8212121320718946`*^9, 3.821212132533162*^9}, {
  3.8221703483791313`*^9, 3.8221703578591843`*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"6d5fbda0-2edf-4439-a198-0d5f730db73a"],

Cell["\<\
This uses Map to apply the Total function to each pair of numbers in the \
inner lists:\
\>", "CodeText",
 CellChangeTimes->{{3.8221703750479527`*^9, 
  3.822170410431325*^9}},ExpressionUUID->"d9129160-4d2d-400f-b761-\
12282674bafc"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Total", ",", "pairs"}], "]"}]], "Input",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"002361e1-b8cb-4f10-998d-44865a753b23"],

Cell["This gives the column sums of the transpose of the matrix:", "CodeText",
 CellChangeTimes->{{3.821212133714415*^9, 3.8212121341081343`*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"fe9754c1-11b3-48b8-a170-e372a83e63c1"],

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"Transpose", "[", "pairs", "]"}], "]"}]], "Input",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"a2008383-2155-46f3-8163-67201cfca085"]
}, Open  ]],

Cell[CellGroupData[{

Cell["The Rule-based Approach", "Subsection",
 CellChangeTimes->{{3.821212143446142*^9, 3.821212145357539*^9}, {
  3.822170426693033*^9, 3.822170433202856*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"273502fe-5882-47b6-a221-23de6d7ab887"],

Cell["\<\
This is also quite compact; The pattern to match is any list consisting of a \
pair of expressions, and it will be replaced by the sum of that pair:\
\>", "CodeText",
 CellChangeTimes->{{3.821212143446142*^9, 3.821212145357539*^9}, {
  3.822170426693033*^9, 3.8221704521243267`*^9}},
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"0cedea23-6a7f-41f5-b953-d8a35696a515"],

Cell[BoxData[
 RowBox[{"pairs", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
   RowBox[{"p", "+", "q"}]}]}]], "Input",
 CellTags->
  "Comparing Programming \
Styles",ExpressionUUID->"d4c94941-4c44-4715-9885-21daec03101c"],

Cell[" ", "EndOfSlide",ExpressionUUID->"3f340c99-be90-415d-8152-61de5fc78c5a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"47c635df-5d13-4e51-b9b7-4005d28ee7ee"],

Cell[CellGroupData[{

Cell["Application: Cleaning Up Data", "Section",
 CellTags->
  "Application",ExpressionUUID->"042f08fe-d773-4f29-a251-0e3d77ba5824"],

Cell["\<\
Next, you will combine several of the tools that were introduced in this \
chapter and apply them to a problem involving raw data. It is not uncommon \
for data that has been collected in the field or from instruments to contain \
some non-numeric values. \
\>", "Text",
 CellChangeTimes->{{3.821288870425199*^9, 3.82128887263111*^9}, 
   3.82217046528863*^9},
 CellTags->
  "Application",ExpressionUUID->"e4e25f06-685a-4a67-9b5c-34f272a76282"],

Cell["\<\
The array at the beginning of this section is one such example:\
\>", "CodeText",
 CellChangeTimes->{{3.821288870425199*^9, 3.82128887263111*^9}, {
  3.8221704689963083`*^9, 3.822170469671105*^9}},
 CellTags->
  "Application",ExpressionUUID->"228a94a4-b9cc-4db0-aba1-026a927709ee"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.796495", ",", "\"\<N/A\>\"", ",", "0.070125", ",", 
       RowBox[{"-", "0.323573"}], ",", "0.806554"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<N/A\>\"", ",", 
       RowBox[{"-", "0.100365"}], ",", "0.992736", ",", 
       RowBox[{"-", "0.320560"}], ",", 
       RowBox[{"-", "0.0805351"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.473571", ",", "0.460741", ",", "0.030060", ",", 
       RowBox[{"-", "0.412400"}], ",", "0.788522"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.614974", ",", 
       RowBox[{"-", "0.503201"}], ",", "0.615744", ",", "0.966053", ",", 
       RowBox[{"-", "0.011776"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.828415"}], ",", "0.035514", ",", "0.8911617", ",", 
       "\"\<N/A\>\"", ",", 
       RowBox[{"-", "0.453926"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input",
 CellTags->
  "Application",ExpressionUUID->"e96f73f7-2237-4062-b28b-e8cceb1870ff"],

Cell[TextData[{
 "Suppose that you needed this matrix to contain all numeric values for \
subsequent work. With what should you replace the ",
 Cell[BoxData[
 "\"\<N/A\>\""], "Input",ExpressionUUID->
  "376f9918-5f44-4288-81b2-cb2134d83bab"],
 " entries? In this example, you will replace each ",
 Cell[BoxData[
 "\"\<N/A\>\""], "Input",ExpressionUUID->
  "3c8c063c-5505-4cbe-a0e8-0b4e5b9f54e2"],
 " with the column mean for each such entry; of course, other values could be \
used."
}], "Text",
 CellChangeTimes->{{3.8212888847764053`*^9, 3.821288905410486*^9}},
 CellTags->
  "Application",ExpressionUUID->"f465a2df-8626-4e7b-ae6c-207627bab95d"],

Cell[TextData[{
 "You will prototype on the first column and then extend that to operate on \
the entire matrix. Here is the first column of ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"114fd80a-2616-4eea-a23b-43c226297834"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821212153086776*^9, 3.821212153638187*^9}, {
  3.821288915113762*^9, 3.8212889194722652`*^9}},
 CellTags->
  "Application",ExpressionUUID->"3851da23-9c78-4410-a674-c489c14c461b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"col1", "=", 
   RowBox[{"mat", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "1"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "col1", "]"}]}], "Input",
 CellTags->
  "Application",ExpressionUUID->"f58f9ba2-95ca-4124-9a19-56fb9c7f08fd"],

Cell["This gives only the numeric values from the first column:", "CodeText",
 CellChangeTimes->{{3.821212155559783*^9, 3.821212158025754*^9}},
 CellTags->
  "Application",ExpressionUUID->"07e688f7-3a96-44f5-bbe3-cba191e026e7"],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{"col1", ",", 
   RowBox[{"_", "?", "NumberQ"}]}], "]"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"199c6e5b-cd91-4157-b77a-277a26c8330b"],

Cell["This is the mean of the numeric values:", "CodeText",
 CellChangeTimes->{{3.8212121601492577`*^9, 3.821212160534102*^9}},
 CellTags->
  "Application",ExpressionUUID->"62095aab-bb3d-412d-bb51-c8493a0b62bd"],

Cell[BoxData[
 RowBox[{"Mean", "[", 
  RowBox[{"Cases", "[", 
   RowBox[{"col1", ",", 
    RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"cb702703-2caa-41d5-987a-2a598e5164a0"],

Cell["This does the replacement on the first column:", "CodeText",
 CellChangeTimes->{{3.8212121620868807`*^9, 3.82121216248055*^9}},
 CellTags->
  "Application",ExpressionUUID->"14ec4499-6409-4ef0-b1fa-6f96e523508c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"col1", "/.", 
   RowBox[{"\"\<N/A\>\"", "\[Rule]", 
    RowBox[{"Mean", "[", 
     RowBox[{"Cases", "[", 
      RowBox[{"col1", ",", 
       RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]}]}], "//", 
  "MatrixForm"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"8b9f76b7-4bb7-4f46-9e4f-7de442ff5e5a"],

Cell[TextData[{
 "Write a function that performs this operation, but whose argument is the \
column number. Also, replace ",
 Cell[BoxData[
 "col1"], "Input",ExpressionUUID->"d8fd8651-a6bc-40b2-910e-83020b3b32b2"],
 " with the general term ",
 Cell[BoxData[
  RowBox[{"mat", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "col"}], "]"}], "]"}]], "Input",ExpressionUUID->
  "97c9d12b-f626-499d-a786-28e54b0703d6"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821212164832151*^9, 3.8212121652390537`*^9}, {
  3.821288928993926*^9, 3.821288964498074*^9}},
 CellTags->
  "Application",ExpressionUUID->"3b7dad43-79ae-45a4-a53d-316e91f3dd66"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fixcolumn", "[", "col_", "]"}], ":=", 
  RowBox[{
   RowBox[{"mat", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "col"}], "]"}], "]"}], "/.", 
   RowBox[{"\"\<N/A\>\"", "\[RuleDelayed]", 
    RowBox[{"Mean", "[", 
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"mat", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "col"}], "]"}], "]"}], ",", 
       RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]}]}]}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"314c13c9-2339-4d61-9ac7-4eef354784cb"],

Cell["Try this function out on column 1 of the matrix:", "CodeText",
 CellChangeTimes->{{3.821212167307165*^9, 3.821212167733634*^9}, {
  3.821288968585634*^9, 3.821288968992948*^9}},
 CellTags->
  "Application",ExpressionUUID->"06cebb52-deaf-44e4-81ea-72f841e2ffe5"],

Cell[BoxData[
 RowBox[{"fixcolumn", "[", "1", "]"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"b882e361-41b4-4c6f-93b0-c5815734c67d"],

Cell["You need to map this function across all of the columns:", "CodeText",
 CellChangeTimes->{{3.821212169473665*^9, 3.8212121706256847`*^9}},
 CellTags->
  "Application",ExpressionUUID->"e4a0447a-e47d-4c10-8e37-caca6990ecfe"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"fixcolumn", ",", 
   RowBox[{"Range", "[", 
    RowBox[{"Length", "[", "mat", "]"}], "]"}]}], "]"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"b583e775-ee5c-42c2-a318-70c84d8cec8e"],

Cell["\<\
The preceding computation operated on the columns, so the array is a list of \
the transformed column vectors. \
\>", "Text",
 CellChangeTimes->{{3.821212172122148*^9, 3.821212172481922*^9}, {
   3.821288975993663*^9, 3.821288978616824*^9}, 3.822170513804895*^9},
 CellTags->
  "Application",ExpressionUUID->"5d52ce8f-d23a-4ad5-b1ee-c6f8995c1e20"],

Cell["You need to transpose back to put things right:", "CodeText",
 CellChangeTimes->{{3.821212172122148*^9, 3.821212172481922*^9}, {
  3.821288975993663*^9, 3.821288978616824*^9}, {3.82217051913767*^9, 
  3.822170520159563*^9}},
 CellTags->
  "Application",ExpressionUUID->"d711653d-c42a-4f2b-a8a4-f2e5e064a207"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"Transpose", "[", "%", "]"}], "]"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"4d4adabe-4d79-4fa7-b09b-4f66b684289b"],

Cell[TextData[{
 "Next, turn this into a reusable function, ",
 Cell[BoxData[
 "FixMatrix"], "Input",ExpressionUUID->"85323cb2-acc0-49e3-8393-bff6eb44cfe6"],
 ":"
}], "CodeText",
 CellChangeTimes->{{3.821212797129181*^9, 3.8212127975555563`*^9}, {
  3.821288984881699*^9, 3.8212889921034107`*^9}},
 CellTags->
  "Application",ExpressionUUID->"1706281a-f213-4448-8013-0c052957eed9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixMatrix", "[", "mat_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "fixcolumn", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"fixcolumn", "[", "col_", "]"}], ":=", 
      RowBox[{
       RowBox[{"mat", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "col"}], "]"}], "]"}], "/.", 
       RowBox[{"\"\<N/A\>\"", "\[RuleDelayed]", 
        RowBox[{"Mean", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"mat", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "col"}], "]"}], "]"}], ",", 
           RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Map", "[", 
       RowBox[{"fixcolumn", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "mat", "]"}], "]"}]}], "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"54b2a6e1-f0ba-4d93-973b-e40d720534b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixMatrix", "[", "mat", "]"}], "//", "MatrixForm"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"cdbcd614-e209-4b03-a62a-99a01b94a37f"],

Cell[TextData[{
 "Now it might be the case that the non-numeric string is something different \
than ",
 Cell[BoxData[
 "\"\<N/A\>\""], "Input",ExpressionUUID->
  "4622f9b4-bfa0-4a80-b860-9da1a82776ef"],
 ". Here is a second definition for ",
 Cell[BoxData[
 "FixMatrix"], "Input",ExpressionUUID->"0cbb807f-1ab1-48f0-a370-553f345869ad"],
 " that takes a second argument that is the string to be replaced with its \
column mean:"
}], "CodeText",
 CellChangeTimes->{{3.8212128004132347`*^9, 3.821212800975101*^9}, {
  3.8212889982348967`*^9, 3.821289023444167*^9}},
 CellTags->
  "Application",ExpressionUUID->"75de2900-4d8f-4475-b72c-f522039f2cbd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixMatrix", "[", 
   RowBox[{"mat_", ",", "str_String"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "fixcolumn", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"fixcolumn", "[", "col_", "]"}], ":=", 
      RowBox[{
       RowBox[{"mat", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "col"}], "]"}], "]"}], "/.", 
       RowBox[{"str", "\[RuleDelayed]", 
        RowBox[{"Mean", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"mat", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "col"}], "]"}], "]"}], ",", 
           RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Map", "[", 
       RowBox[{"fixcolumn", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "mat", "]"}], "]"}]}], "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"74f74f58-1e33-4b66-a398-8731ffe473ad"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.796495", ",", "\"\<nan\>\"", ",", "0.070125", ",", 
       RowBox[{"-", "0.323573"}], ",", "0.806554"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<nan\>\"", ",", 
       RowBox[{"-", "0.100365"}], ",", "0.992736", ",", 
       RowBox[{"-", "0.320560"}], ",", 
       RowBox[{"-", "0.0805351"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.473571", ",", "0.460741", ",", "0.030060", ",", 
       RowBox[{"-", "0.412400"}], ",", "0.788522"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.614974", ",", 
       RowBox[{"-", "0.503201"}], ",", "0.615744", ",", "0.966053", ",", 
       RowBox[{"-", "0.011776"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.828415"}], ",", "0.035514", ",", "0.8911617", ",", 
       "\"\<nan\>\"", ",", 
       RowBox[{"-", "0.453926"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat2", "]"}]}], "Input",
 CellTags->
  "Application",ExpressionUUID->"db600a9d-c92c-46f4-9483-d54c04eff7d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixMatrix", "[", 
   RowBox[{"mat2", ",", "\"\<nan\>\""}], "]"}], "//", "MatrixForm"}]], "Input",\

 CellTags->
  "Application",ExpressionUUID->"e36f64a1-bee2-4481-a3c2-29f28d6ea29d"],

Cell[CellGroupData[{

Cell["Going Further", "Subsection",
 CellChangeTimes->{{3.821285020642959*^9, 3.821285021049149*^9}},
 CellTags->
  "Application",ExpressionUUID->"0226a4df-ad47-4c43-88f6-c0fe64db061e"],

Cell["\<\
If you want to check a list of different strings, you need to use a slightly \
different construction.\
\>", "Text",
 CellTags->
  "Application",ExpressionUUID->"47eeb2ca-e622-46e8-917b-4d48a0cce058"],

Cell[BoxData[
 RowBox[{
  RowBox[{"col", "=", 
   RowBox[{"{", 
    RowBox[{"0.796495", ",", "\"\<nan\>\"", ",", "0.070125", ",", 
     RowBox[{"-", "0.323573"}], ",", "\"\<N/A\>\""}], "}"}]}], ";"}]], "Input",\

 CellTags->
  "Application",ExpressionUUID->"961f3408-9b6e-472b-9754-102bddd72db1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"col", "/.", 
   RowBox[{
    RowBox[{"\"\<N/A\>\"", "|", "\"\<nan\>\""}], "\[Rule]", 
    RowBox[{"Mean", "[", 
     RowBox[{"Cases", "[", 
      RowBox[{
       RowBox[{"mat", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
       RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]}]}], "//", 
  "MatrixForm"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"05b905d7-6c07-4dab-9722-6e0a743c9671"],

Cell["\<\
Given a list of strings, you can convert that to a set of alternatives, using \
Apply:\
\>", "CodeText",
 CellChangeTimes->{{3.8212128092107363`*^9, 3.8212128102682943`*^9}, {
  3.8212890398910017`*^9, 3.821289043802209*^9}},
 CellTags->
  "Application",ExpressionUUID->"dfcc516f-e0d5-4da4-be82-063a5413b38e"],

Cell[BoxData[
 RowBox[{"Apply", "[", 
  RowBox[{"Alternatives", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<N/A\>\"", ",", "\"\<nan\>\"", ",", "\"\<nn\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"5c9f6d90-ffa0-48d3-8166-76dc1e8d4e19"],

Cell["\<\
Finally, here is a third definition that takes a list of strings as the \
second argument:\
\>", "CodeText",
 CellChangeTimes->{{3.821212811717581*^9, 3.821212812157699*^9}, {
  3.8212890494819603`*^9, 3.8212890496972837`*^9}},
 CellTags->
  "Application",ExpressionUUID->"3857b798-eafe-4c45-8dd9-7185b93b8111"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixMatrix", "[", 
   RowBox[{"mat_", ",", 
    RowBox[{"{", "strings__", "}"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "fixcolumn", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"fixcolumn", "[", "col_", "]"}], ":=", 
      RowBox[{
       RowBox[{"mat", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "col"}], "]"}], "]"}], "/.", 
       RowBox[{
        RowBox[{"Apply", "[", 
         RowBox[{"Alternatives", ",", 
          RowBox[{"{", "strings", "}"}]}], "]"}], "\[Rule]", 
        RowBox[{"Mean", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{"mat", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "col"}], "]"}], "]"}], ",", 
           RowBox[{"_", "?", "NumberQ"}]}], "]"}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Map", "[", 
       RowBox[{"fixcolumn", ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "mat", "]"}], "]"}]}], "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"9e2dfb0d-cb02-49bc-b6b1-1b08e821dca9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"mat3", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "0.796495", ",", "\"\<N/A\>\"", ",", "0.070125", ",", "\"\<N/A\>\"", 
       ",", "0.806554"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"\"\<nn\>\"", ",", 
       RowBox[{"-", "0.100365"}], ",", "0.992736", ",", 
       RowBox[{"-", "0.320560"}], ",", 
       RowBox[{"-", "0.0805351"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0.473571", ",", "0.460741", ",", "0.030060", ",", 
       RowBox[{"-", "0.412400"}], ",", "0.788522"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.614974", ",", 
       RowBox[{"-", "0.503201"}], ",", "0.615744", ",", "0.966053", ",", 
       RowBox[{"-", "0.011776"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "0.828415"}], ",", "0.035514", ",", "0.8911617", ",", 
       "\"\<nan\>\"", ",", 
       RowBox[{"-", "0.453926"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat3", "]"}]}], "Input",
 CellTags->
  "Application",ExpressionUUID->"b06e5b0a-f8df-4b6c-a815-366e8fe93a12"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FixMatrix", "[", 
   RowBox[{"mat3", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<N/A\>\"", ",", "\"\<nan\>\"", ",", "\"\<nn\>\""}], "}"}]}], 
   "]"}], "//", "MatrixForm"}]], "Input",
 CellTags->
  "Application",ExpressionUUID->"64696c65-9892-48bb-aaf6-16bfa0e317a6"],

Cell[" ", "EndOfSlide",
 CellTags->
  "Application",ExpressionUUID->"d582d137-3ca8-46ed-a6e6-bc97d4c1f699"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->
  "SlideShowHeader",ExpressionUUID->"5e53628d-ade3-4373-82db-4684c2ceff51"],

Cell[CellGroupData[{

Cell["Exercises", "Section",
 CellChangeTimes->{{3.821204026059764*^9, 3.8212040264421053`*^9}, 
   3.821204113005999*^9},ExpressionUUID->"1ff19fdb-e56c-4e61-a3aa-\
d084b9b4f3b7"],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Creating and Using Definitions"
}], "Subsection",
 CellChangeTimes->{{3.8212035317712812`*^9, 3.8212035477191353`*^9}, {
   3.821204018369083*^9, 3.821204049922646*^9}, 
   3.821204127305931*^9},ExpressionUUID->"8c90f385-68d5-48aa-94fb-\
21c8483f91e4"],

Cell[TextData[{
 "Define a function ",
 Cell[BoxData[
  RowBox[{"f", "[", "x", "]"}]], "Input",ExpressionUUID->
  "2ec3478b-fd62-4394-92f9-31c5c4e501c6"],
 " that returns ",
 Cell[BoxData[
  RowBox[{"x", "/", 
   RowBox[{"Sin", "[", "x", "]"}]}]], "Output",
  GeneratedCell->False,
  CellAutoOverwrite->False,ExpressionUUID->
  "c3dfb2bc-437e-40c1-a2cf-8549383f7263"],
 ". Evaluate ",
 Cell[BoxData[
  RowBox[{"f", "[", "x", "]"}]], "Input",ExpressionUUID->
  "ea5d9f5c-3b7f-4003-8f48-84c34980cdf2"],
 " for various values of ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"3948a1ba-9976-40af-95cc-e0a658e1d952"],
 " to verify that your definition is working."
}], "Item",
 CellChangeTimes->{{3.821289736257967*^9, 3.821289814934836*^9}},
 CellTags->{
  "Exercises", 
   "Creating \
Definitions"},ExpressionUUID->"ce390ce8-c1cf-43e0-a5b9-5fa36910b207"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell["Here is the definition using an immediate assignment.", "Text"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", "x_", "]"}], "=", 
         RowBox[{"x", " ", 
           RowBox[{"Sin", "[", "x", "]"}]}]}]], "Input"], 
     Cell["Here is the definition using a delayed assignment.", "Text"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", "x_", "]"}], ":=", 
         RowBox[{"x", " ", 
           RowBox[{"Sin", "[", "x", "]"}]}]}]], "Input"], 
     Cell[
      TextData[{"If ", 
        StyleBox["x", "Input"], 
        " does not already have a value, there is no significant difference \
between using an immediate assignment or a delayed assignment for this \
definition. But, it is generally safer to use delayed assignments (", 
        StyleBox[":=", "MR"], 
        ") in your function definitions in case you have forgotten that ", 
        StyleBox["x", "Input"], 
        " already had a value or the code you are writing creates a value for \
", 
        StyleBox["x", "Input"], 
        " before it enters the function definition."}], "Text", 
      CellChangeTimes -> {3.821368684866253*^9}]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"7d45106b-10ba-41b3-b965-9a4b7206d266"],

Cell[TextData[{
 "Plot ",
 Cell[BoxData[
  RowBox[{"f", "[", "\[Theta]", "]"}]], "Input",ExpressionUUID->
  "0b1d58a4-0c3e-4565-9ba3-664d90a98d84"],
 "for ",
 Cell[BoxData[
 "\[Theta]"], "Input",ExpressionUUID->
  "281570f4-8d0c-4c54-8c62-15ec874939cb"],
 " between ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "10"}], TraditionalForm]],ExpressionUUID->
  "2bfcdeff-b98b-4a42-8233-3b7ad1a3033e"],
 " and 10. Does it make any difference that the variable of the plot is ",
 Cell[BoxData[
 "\[Theta]"], "Input",ExpressionUUID->
  "1f790865-1887-4b3e-9cb7-b286cb40a89c"],
 " and not ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"30e3c864-3c34-411a-b589-5309e3a5a53e"],
 "?"
}], "Item",
 CellChangeTimes->{{3.8212898232959957`*^9, 3.821289867504402*^9}},
 CellTags->{
  "Exercises", 
   "Creating \
Definitions"},ExpressionUUID->"a9707219-295e-4c27-8adb-87ec9d01305d"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"Plot", "[", 
         RowBox[{
           RowBox[{"f", "[", "\[Theta]", "]"}], ",", 
           RowBox[{"{", 
             RowBox[{"\[Theta]", ",", 
               RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input"], 
     Cell[
      TextData[{"There is no significant difference between using ", 
        Cell[
         BoxData[
          StyleBox["x", "MR"]], "Input"], " and using ", 
        Cell[
         BoxData["\[Theta]"], "Input"], " as the variable of this plot."}], 
      "Text", CellChangeTimes -> {{3.821374511474964*^9, 
       3.8213745151762333`*^9}}]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"fbe5cc23-8852-4797-a9f8-100965261633"],

Cell[TextData[{
 "Clear your definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"f3faa71f-4488-4b2a-9267-21053b6902a4"],
 " before continuing."
}], "Item",
 CellChangeTimes->{{3.821289879695507*^9, 3.821289885122304*^9}},
 CellTags->{
  "Exercises", 
   "Creating \
Definitions"},ExpressionUUID->"94ddddca-41d8-4e6e-86b8-148c5b11d320"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"Evaluate ", 
        Cell[
         BoxData[
          RowBox[{"Clear", "[", "f", "]"}]], "Input"], 
        " to clear definitions for ", 
        Cell[
         BoxData["f"], "Input"], "."}], "Text", 
      CellChangeTimes -> {{3.8213745485590553`*^9, 3.821374571106752*^9}}], 
     Cell[
      BoxData[
       RowBox[{"Clear", "[", "f", "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"c24e0c62-86ba-4b05-aa05-8b7e4662e6c1"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Making a Table"
}], "Subsection",
 CellChangeTimes->{{3.493562530291525*^9, 3.493562530479971*^9}, 
   3.821204163092113*^9},
 CellTags->{
  "Exercises", 
   "Table I"},ExpressionUUID->"e980c3bd-6a22-493d-9dca-a7b37bdffbeb"],

Cell[TextData[{
 "A common exercise in programming textbooks is constructing a table of \
integers and squares of integers. There are many ways to do this in the \
Wolfram Language. One way is to use the Do function, the ",
 StyleBox[ButtonBox["Print",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Print"],
  FontWeight->"Bold"],
 " function and a string of spaces to separate the columns in the table."
}], "Text",
 CellChangeTimes->{
  3.821210151240409*^9, {3.821289893843782*^9, 3.8212899048643303`*^9}, 
   3.821292723464542*^9},
 CellTags->{
  "Exercises", 
   "Table I"},ExpressionUUID->"2c8b1d5c-d860-4b69-98cd-0ab160f8bf6a"],

Cell[CellGroupData[{

Cell["Evaluate the following input to see the table:", "Item",
 CellChangeTimes->{{3.821289908504448*^9, 3.821289909233925*^9}},
 CellTags->{
  "Exercises", 
   "Table I"},ExpressionUUID->"3e6b4c71-9afd-48cd-86e6-704b4466725f"],

Cell[BoxData[
 RowBox[{"Do", "[", 
  RowBox[{
   RowBox[{"Print", "[", 
    RowBox[{"i", ",", "\"\<   \>\"", ",", 
     RowBox[{"i", "^", "2"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Table I"},ExpressionUUID->"4816a02d-97d7-4c45-9f9f-207e54bf9023"]
}, Open  ]],

Cell["\<\
Modify this program to add a column that shows the cube of each integer.\
\>", "Item",
 CellTags->{
  "Exercises", 
   "Table I"},ExpressionUUID->"d68315c2-dbc9-4b2c-a4a9-b32054dd90d1"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     BoxData[
      RowBox[{"Do", "[", 
        RowBox[{
          RowBox[{"Print", "[", 
            RowBox[{"i", ",", "\"   \"", ",", 
              RowBox[{"i", "^", "2"}], ",", "\"    \"", ",", 
              RowBox[{"i", "^", "3"}]}], "]"}], ",", 
          RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input"], 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"2d3d1555-6e54-4882-bf72-e81c2185abd6"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Tables and Grids"
}], "Subsection",
 CellChangeTimes->{3.821204167772429*^9},
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"03bbec60-54f3-4135-8e97-6e1815993105"],

Cell[TextData[{
 "One problem with the table in Exercise 2.2 is that the columns are not \
properly aligned. One solution is to construct the entire table and let the \
computer align the columns. This can be done in the Wolfram Language using \
the ",
 StyleBox[ButtonBox["TableForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/TableForm"],
  FontWeight->"Bold"],
 " function to format the table."
}], "Text",
 CellChangeTimes->{
  3.821210153018083*^9, {3.821289920858605*^9, 3.821289926130621*^9}},
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"74596f60-51bb-4d73-83a3-5ec09bc8697f"],

Cell[CellGroupData[{

Cell["Evaluate the following input to see the table:", "Item",
 CellChangeTimes->{{3.821289929561388*^9, 3.8212899301598463`*^9}, {
  3.821292748072044*^9, 3.821292748651464*^9}},
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"44a6a099-3229-4555-876e-1868c67d0440"],

Cell[BoxData[
 RowBox[{"mat", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"i", "^", "2"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"05c9de89-581a-4ce4-a37d-2e73117b7e8d"]
}, Open  ]],

Cell["This formats the table using a tabular format:", "Text",
 CellChangeTimes->{{3.821289932520585*^9, 3.82128993302461*^9}},
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"ad536f5b-8379-4d0f-be32-0999d28e8621"],

Cell[BoxData[
 RowBox[{"TableForm", "[", "mat", "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"1f0f54cd-7282-46f9-a39f-5cccdb9b2598"],

Cell[TextData[{
 "You can get more control over the formatting of tabular data using ",
 StyleBox[ButtonBox["Grid",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Grid"],
  FontWeight->"Bold"],
 ":"
}], "Text",
 CellChangeTimes->{{3.821289935632922*^9, 3.821289940153501*^9}},
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"02328f14-7f5d-4458-831f-3c0d6bcdfd80"],

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{"mat", ",", 
   RowBox[{"Alignment", "\[Rule]", "Right"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"ee3002e6-0b09-436a-be46-d83e994a34cb"],

Cell["\<\
Modify this program to add a column that shows the cube of each integer.\
\>", "Item",
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"129243ed-1a23-4c09-bd5f-9ac0769a8a9c"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"vec", "=", 
            RowBox[{"Table", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"i", ",", 
                    RowBox[{"i", "^", "2"}], ",", 
                    RowBox[{"i", "^", "3"}]}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"2", ",", "4", ",", "8"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"3", ",", "9", ",", "27"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"4", ",", "16", ",", "64"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"5", ",", "25", ",", "125"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"6", ",", "36", ",", "216"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"7", ",", "49", ",", "343"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"8", ",", "64", ",", "512"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"9", ",", "81", ",", "729"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"10", ",", "100", ",", "1000"}], "}"}]}], "}"}]], 
         "Output"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"TableForm", "[", "vec", "]"}]], "Input"], 
        Cell[
         BoxData[
          TagBox[
           
           GridBox[{{"1", "1", "1"}, {"2", "4", "8"}, {"3", "9", "27"}, {
             "4", "16", "64"}, {"5", "25", "125"}, {"6", "36", "216"}, {
             "7", "49", "343"}, {"8", "64", "512"}, {"9", "81", "729"}, {
             "10", "100", "1000"}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
              "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.28], {
                 Offset[0.7]}, 
                Offset[0.28]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}, "RowsIndexed" -> {}}], 
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]], "Output"]}, Open]], 
     Cell[
      TextData[{"Alternately, you could use ", 
        StyleBox[
         ButtonBox[
         "Grid", BaseStyle -> "Link", ButtonData -> "paclet:ref/Grid"], 
         FontWeight -> "Bold"], " to format this two-dimensional list. "}], 
      "Text", CellChangeTimes -> {{3.8213688053177357`*^9, 
       3.8213688189948883`*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Grid", "[", "vec", "]"}]], "Input"], 
        Cell[
         BoxData[
          TagBox[
           
           GridBox[{{"1", "1", "1"}, {"2", "4", "8"}, {"3", "9", "27"}, {
             "4", "16", "64"}, {"5", "25", "125"}, {"6", "36", "216"}, {
             "7", "49", "343"}, {"8", "64", "512"}, {"9", "81", "729"}, {
             "10", "100", "1000"}}], "Grid"]], "Output"]}, Open]], 
     Cell[
     "Grid has the advantage that it has some very useful options that you \
can use to format your tables.", "Text", 
      CellChangeTimes -> {{3.8213688824546328`*^9, 3.8213688939071007`*^9}, {
       3.821372779109873*^9, 3.821372783404819*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Options", "[", "Grid", "]"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"Alignment", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"Center", ",", "Baseline"}], "}"}]}], ",", 
              RowBox[{"Background", "\[Rule]", "None"}], ",", 
              RowBox[{"BaselinePosition", "\[Rule]", "Automatic"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"DefaultBaseStyle", "\[Rule]", "\"Grid\""}], ",", 
              RowBox[{"DefaultElement", "\[Rule]", "\"\[Placeholder]\""}], 
              ",", 
              RowBox[{"Dividers", "\[Rule]", "None"}], ",", 
              RowBox[{"Frame", "\[Rule]", "None"}], ",", 
              RowBox[{"FrameStyle", "\[Rule]", "Automatic"}], ",", 
              RowBox[{"ItemSize", "\[Rule]", "Automatic"}], ",", 
              RowBox[{"ItemStyle", "\[Rule]", "None"}], ",", 
              RowBox[{"Spacings", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"0.8`", ",", "1.`"}], "}"}]}]}], "}"}]], "Output"]},
        Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Grid", "[", 
            RowBox[{"vec", ",", 
              RowBox[{"Alignment", "\[Rule]", "Right"}], ",", 
              RowBox[{"Dividers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}], ",", 
              RowBox[{"FrameStyle", "\[Rule]", "Blue"}], ",", 
              RowBox[{"BaseStyle", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"FontFamily", "\[Rule]", "\"Helvetica\""}], ",", 
                    RowBox[{"FontSize", "\[Rule]", "12"}]}], "}"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Background", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"LightGray", ",", "LightBlue"}], "}"}], "}"}]}], 
                  "}"}]}]}], "]"}]], "Input"], 
        Cell[
         BoxData[
          TagBox[
           
           GridBox[{{"1", "1", "1"}, {"2", "4", "8"}, {"3", "9", "27"}, {
             "4", "16", "64"}, {"5", "25", "125"}, {"6", "36", "216"}, {
             "7", "49", "343"}, {"8", "64", "512"}, {"9", "81", "729"}, {
             "10", "100", "1000"}}, AutoDelete -> False, 
            BaseStyle -> {FontFamily -> "Helvetica", FontSize -> 12}, 
            FrameStyle -> RGBColor[0, 0, 1], 
            GridBoxAlignment -> {"Columns" -> {{Right}}}, 
            GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {{
                 GrayLevel[0.85], 
                 RGBColor[0.87, 0.94, 1]}}}, 
            GridBoxDividers -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
         "Output"]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"eb300490-3579-4f74-879d-68df141e7978"],

Cell["\<\
Use replacement rules to modify the last result to add a fourth column that \
gives the sum of the square and cube in each row.\
\>", "Item",
 CellTags->{
  "Exercises", 
   "Table II"},ExpressionUUID->"006b9c96-5c97-4417-ab03-d180f33ccf20"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"vec", "=", " ", 
         RowBox[{"TableForm", "[", 
           RowBox[{"Table", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"i", ",", 
                   RowBox[{"i", "^", "2"}], ",", 
                   RowBox[{"i", "^", "3"}]}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}], "]"}]}]],
       "Input"], 
     Cell[
      BoxData[
       RowBox[{"vec", "/.", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"a_", ",", "b_", ",", "c_"}], "}"}], "\[Rule]", 
           RowBox[{"{", 
             RowBox[{"a", ",", "b", ",", "c", ",", 
               RowBox[{"b", "+", "c"}]}], "}"}]}]}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"8e80f023-8602-46f9-bafc-f5b55c08f2c8"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Matrix Operations"
}], "Subsection",
 CellChangeTimes->{3.821204173307927*^9},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"5b86380f-9aa1-46a7-86af-\
4b524ed10ab5"],

Cell[TextData[{
 "This creates a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"6", "\[Times]", "6"}], TraditionalForm]],ExpressionUUID->
  "a0c1e7cb-690c-4007-b2d8-352771eed063"],
 " matrix with symbolic elements."
}], "Text",
 CellChangeTimes->{{3.821289951292058*^9, 3.821289957986113*^9}, {
  3.8212927836483517`*^9, 3.821292784092216*^9}},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"145ce818-821f-4e84-99c5-\
4a8043100056"],

Cell[BoxData[
 RowBox[{"mat", "=", 
  RowBox[{"Array", "[", 
   RowBox[{"m", ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"7356623a-888c-46dd-98e9-\
3c0290a7a83e"],

Cell[TextData[{
 "You can display the matrix in a traditional form by using ",
 StyleBox[ButtonBox["MatrixForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/MatrixForm"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.821289963016878*^9, 3.821289983022232*^9}, {
  3.8212927854846497`*^9, 3.82129278685746*^9}},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"b535a21d-fa58-4e0b-9b44-\
3c02c052c448"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "mat", "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"e6007f37-7590-4554-80de-\
2b199bdd5591"],

Cell[TextData[{
 "Use the Part function to extract the fifth row of ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"56228b55-4d99-4eae-b407-a7a7e40fb1e7"],
 "."
}], "Item",
 CellChangeTimes->{{3.8212899873140583`*^9, 3.8212900044324703`*^9}},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"4b820ff8-b8af-4cfc-9368-\
49914f5e2527"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"mat", "=", 
         RowBox[{"Array", "[", 
           RowBox[{"m", ",", 
             RowBox[{"{", 
               RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}]], "Input", 
      CellTags -> {"Exercises", "Matrix Operations"}], 
     Cell[
      TextData[{"Here is the long form for ", 
        StyleBox[
         ButtonBox[
         "Part", BaseStyle -> "Link", ButtonData -> "paclet:ref/Part"], 
         FontWeight -> "Bold"], "."}], "Text", 
      CellChangeTimes -> {{3.821368958987588*^9, 3.821368963770439*^9}}], 
     Cell[
      BoxData[
       RowBox[{"Part", "[", 
         RowBox[{"mat", ",", "5"}], "]"}]], "Input"], 
     Cell["And this gives the shorthand notation.", "Text"], 
     Cell[
      BoxData[
       RowBox[{"mat", "[", 
         RowBox[{"[", "5", "]"}], "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"1ca7fbb6-4d98-485c-8d9f-375c536f9bed"],

Cell[TextData[{
 "Use the Part function to extract the third column of ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"2ff9218d-6abe-48d5-ac50-0d2897e08795"],
 "."
}], "Item",
 CellChangeTimes->{{3.821289994730077*^9, 3.821290015789652*^9}},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"3097ea22-881b-4058-81ce-\
d4585e1b0b0b"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"mat", "=", 
         RowBox[{"Array", "[", 
           RowBox[{"m", ",", 
             RowBox[{"{", 
               RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}]], "Input", 
      CellTags -> {"Exercises", "Matrix Operations"}], 
     Cell[
      BoxData[
       RowBox[{"Part", "[", 
         RowBox[{"mat", ",", "All", ",", "3"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"mat", "[", 
         RowBox[{"[", 
           RowBox[{"All", ",", "3"}], "]"}], "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"ccf8a8f8-5643-4c98-b639-9a9b977f965a"],

Cell[TextData[{
 "Use ",
 StyleBox[ButtonBox["Diagonal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Diagonal"],
  FontWeight->"Bold"],
 " to extract the main diagonal from ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"0a05e6c5-c62c-4b95-af3c-31df645f7e49"],
 "."
}], "Item",
 CellChangeTimes->{{3.8212900186508293`*^9, 3.8212900309853973`*^9}},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"f17513d7-160f-499f-9068-\
a26c71931c9d"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"mat", "=", 
         RowBox[{"Array", "[", 
           RowBox[{"m", ",", 
             RowBox[{"{", 
               RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}]], "Input", 
      CellTags -> {"Exercises", "Matrix Operations"}], 
     Cell[
      BoxData[
       RowBox[{"Diagonal", "[", "mat", "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"52b90617-52d0-4adc-a307-b11506accf55"],

Cell["\<\
Use Diagonal with a second argument to get the diagonal three rows below the \
main diagonal.\
\>", "Item",
 CellChangeTimes->{{3.821290033386845*^9, 3.821290035665847*^9}},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"0078461a-f9a4-4efd-b299-\
7697ccaaa405"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"mat", "=", 
         RowBox[{"Array", "[", 
           RowBox[{"m", ",", 
             RowBox[{"{", 
               RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}]], "Input", 
      CellTags -> {"Exercises", "Matrix Operations"}], 
     Cell[
      BoxData[
       RowBox[{"Diagonal", "[", 
         RowBox[{"mat", ",", 
           RowBox[{"-", "3"}]}], "]"}]], "Input"]}, WindowTitle -> "Solution",
     WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"ab39d013-e205-4488-81dd-64f017b46ba0"],

Cell["\<\
Use Diagonal (and other functions) to get the diagonal running from the upper \
right to the lower left.\
\>", "Item",
 CellChangeTimes->{{3.821290039688793*^9, 3.82129004112995*^9}},
 CellTags->{
  "Exercises", 
   "Matrix Operations"},ExpressionUUID->"7b29ec43-57fa-4a4b-91ec-\
f12fab713b1b"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{"mat", "=", 
         RowBox[{"Array", "[", 
           RowBox[{"m", ",", 
             RowBox[{"{", 
               RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}]], "Input", 
      CellTags -> {"Exercises", "Matrix Operations"}], 
     Cell[
      TextData[{"This first reverses the rows of ", 
        StyleBox["mat", "Input"], 
        " and then gives the diagonal of the result. "}], "Text"], 
     Cell[
      BoxData[
       RowBox[{"Diagonal", "[", 
         RowBox[{"Reverse", "[", "mat", "]"}], "]"}]], "Input"], 
     Cell[
     "You need to reverse this list once more to get the elements in the \
right order.", "Text", 
      CellChangeTimes -> {{3.821369046682214*^9, 3.8213690474457283`*^9}}], 
     Cell[
      BoxData[
       RowBox[{"Reverse", "[", 
         RowBox[{"Diagonal", "[", 
           RowBox[{"Reverse", "[", "mat", "]"}], "]"}], "]"}]], "Input"], 
     Cell[
     "You can also reverse each row and then take the diagonal.", "Text"], 
     Cell[
      BoxData[
       RowBox[{"Diagonal", "[", 
         RowBox[{"Map", "[", 
           RowBox[{"Reverse", ",", "mat"}], "]"}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"ae2a403e-bb39-432b-87df-652c7cab0832"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Picking Out Parts of a Matrix"
}], "Subsection",
 CellChangeTimes->{3.8212041775260067`*^9},
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"57671e0e-a060-4a99-91ee-5e799fcd81a2"],

Cell["\<\
Evaluate the following input to construct an array of integers and view it as \
a traditional matrix.\
\>", "Text",
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"1684db82-e917-4660-912f-7a9b42f2b0aa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "123", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mat", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input",ExpressionUUID->"f99a0882-\
c092-4498-ae95-1cf90892b503"],

Cell[TextData[{
 "Recall that ",
 Cell[BoxData[
  RowBox[{"mat", "[", 
   RowBox[{"[", "k", "]"}], "]"}]], "Input",ExpressionUUID->
  "34c217e3-e5dc-49af-8b6c-04cf20efcb51"],
 " picks out a row from a matrix and ",
 Cell[BoxData[
  RowBox[{"mat", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "k"}], "]"}], "]"}]], "Input",ExpressionUUID->
  "9c07600d-37f7-4897-828c-12d9f64d5b82"],
 " picks out a column from a matrix. (For more information and additional \
examples, see the documentation for Part in the Documentation Center.) For \
example, evaluate the following input to pick out the second column from the \
matrix ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"1723a6b1-6f75-488c-8f21-7740f792b470"],
 "."
}], "Text",
 CellChangeTimes->{{3.821290051059205*^9, 3.821290110825274*^9}},
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"531e8823-9816-487c-a284-844f92d77e44"],

Cell[BoxData[
 RowBox[{"mat", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "2"}], "]"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"cde50281-e384-4ca2-b50c-2f90db5f4544"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", "2"}], "]"}], "]"}], "//", "MatrixForm"}]], "Input",
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"16a73742-f201-423e-8133-98dabaeb4c3b"],

Cell[TextData[{
 "Often it is useful to pick out several elements from a list or several rows \
or columns from a matrix. This can be done by listing the positions of the \
desired elements. For example, evaluate the following input to get a list \
containing the first and second rows from the matrix ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"987ff793-c7c7-4c49-af46-2bd0afdef272"],
 "."
}], "Text",
 CellChangeTimes->{{3.821290100609975*^9, 3.821290114694909*^9}},
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"359a0489-64f7-4b07-9549-093078a0f38a"],

Cell[BoxData[
 RowBox[{"mat", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], "]"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"51fdb579-e5a4-4943-9e31-872ca15024d1"],

Cell[TextData[{
 "Evaluate the following input to get a list containing the first and second \
columns from the matrix ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"3450a580-55fd-4315-a454-9885319e724a"],
 "."
}], "Text",
 CellChangeTimes->{{3.821290106113282*^9, 3.8212901180593224`*^9}},
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"0095e783-c8d8-4e04-98e8-37b45d63e19b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mat", "[", 
   RowBox[{"[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"fa8c7099-c166-4d81-933d-d302cd04d5e2"],

Cell["\<\
Beginning with the first row, extract every other row in the matrix.\
\>", "Item",
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"df653f71-6e12-4a3f-bd15-978b4801c7b1"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      TextData[{"Consider using the ", 
        Cell[
         BoxData[
          ButtonBox[
          "Span", BaseStyle -> "Link", ButtonData -> "paclet:ref/Span"]], 
         "InlineFormula"], " function."}], "Text"], All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"0d2f0e8a-e8be-4a54-88ef-916496e84676"],

Cell[TextData[{
 "Consider using the ",
 StyleBox[ButtonBox["Span",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Span"],
  FontWeight->"Bold"],
 " function."
}], "Text",
 CellChangeTimes->{{3.821293480908079*^9, 
  3.82129349353507*^9}},ExpressionUUID->"b79d3c50-3ef3-4859-9c64-\
3504d4123049"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{
       "Here is some general code that gives every other row number in ", 
        StyleBox["mat", "Input"], ", starting with row 1."}], "Text"], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Range", "[", 
            RowBox[{"1", ",", 
              RowBox[{"Length", "[", "mat", "]"}], ",", "2"}], "]"}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            RowBox[{"1", ",", "3", ",", "5"}], "}"}]], "Output"]}, Open]], 
     Cell[
     "And this extracts those rows:", "CodeText", 
      CellChangeTimes -> {{3.8213747055035973`*^9, 3.821374706406096*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"Part", "[", 
              RowBox[{"mat", ",", 
                RowBox[{"Range", "[", 
                  RowBox[{"1", ",", 
                    RowBox[{"Length", "[", "mat", "]"}], ",", "2"}], "]"}]}], 
              "]"}], "//", "MatrixForm"}]], "Input"], 
        Cell[
         BoxData[
          TagBox[
           RowBox[{"(", "\[NoBreak]", 
             
             GridBox[{{"4", "0", "3", "3", "1", "5"}, {
               "0", "4", "5", "7", "7", "5"}, {"5", "8", "1", "0", "7", "1"}},
               GridBoxAlignment -> {
               "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
              GridBoxSpacings -> {"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.7]}, 
                  Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                "Rows" -> {
                  Offset[0.2], {
                   Offset[0.4]}, 
                  Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]], "Output"]}, Open]], 
     Cell[
      TextData[{"Using ", 
        StyleBox[
         ButtonBox[
         "Span", BaseStyle -> "Link", ButtonData -> "paclet:ref/Span"], 
         FontWeight -> "Bold"], 
        ", you can accomplish the same thing more compactly."}], "Text", 
      CellChangeTimes -> {{3.821369220238472*^9, 3.821369225579472*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{
            RowBox[{"mat", "[", 
              RowBox[{"[", 
                RowBox[{"1", ";;", 
                  RowBox[{"-", "1"}], ";;", "2"}], "]"}], "]"}], "//", 
            "MatrixForm"}]], "Input"], 
        Cell[
         BoxData[
          TagBox[
           RowBox[{"(", "\[NoBreak]", 
             
             GridBox[{{"4", "0", "3", "3", "1", "5"}, {
               "0", "4", "5", "7", "7", "5"}, {"5", "8", "1", "0", "7", "1"}},
               GridBoxAlignment -> {
               "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                "Rows" -> {{Baseline}}, "RowsIndexed" -> {}}, 
              GridBoxSpacings -> {"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.7]}, 
                  Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                "Rows" -> {
                  Offset[0.2], {
                   Offset[0.4]}, 
                  Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], 
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]], "Output"]}, Open]]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"f4a7536a-ec79-42e3-a16f-ca29b16d915f"],

Cell[TextData[{
 "Assign a value of 0 to each of the elements in the last column of matrix ",
 Cell[BoxData[
 "mat"], "Input",ExpressionUUID->"cb9fe67e-c23f-4674-83a7-416f7277e711"],
 "."
}], "Item",
 CellChangeTimes->{{3.821290127356202*^9, 3.8212901314675837`*^9}},
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"936179e1-def4-471f-bbfd-2802c4895933"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[{
        RowBox[{
          RowBox[{"SeedRandom", "[", "123", "]"}], ";"}], 
        "\[IndentingNewLine]", 
        RowBox[{
          RowBox[{"mat", "=", 
            RowBox[{"RandomInteger", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"1", ",", "9"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}], ";"}], 
        "\[IndentingNewLine]", 
        RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"mat", "[", 
           RowBox[{"[", 
             RowBox[{"All", ",", 
               RowBox[{"-", "1"}]}], "]"}], "]"}], "=", "0"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"MatrixForm", "[", "mat", "]"}]], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"f7f7689d-3820-4990-be90-af88bc9a9860"],

Cell["\<\
Assign a value of 0 to each of the elements on the \
\[OpenCurlyDoubleQuote]border\[CloseCurlyDoubleQuote] of the matrix, that is, \
the elements in the first and last rows and the first and last columns.\
\>", "Item",
 CellChangeTimes->{{3.82129282801895*^9, 3.821292828829639*^9}},
 CellTags->{
  "Exercises", 
   "Picking Parts"},ExpressionUUID->"a2d72b1b-2c43-4057-b917-4a756151aec1"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[{
        RowBox[{
          RowBox[{"SeedRandom", "[", "123", "]"}], ";"}], 
        "\[IndentingNewLine]", 
        RowBox[{
          RowBox[{"mat", "=", 
            RowBox[{"RandomInteger", "[", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"1", ",", "9"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"6", ",", "6"}], "}"}]}], "]"}]}], ";"}], 
        "\[IndentingNewLine]", 
        RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input"], 
     Cell["The first and last rows:", "Text"], 
     Cell[
      BoxData[{
        RowBox[{
          RowBox[{
            RowBox[{"mat", "[", 
              RowBox[{"[", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "All"}], "]"}], "]"}], 
            "=", "0"}], ";"}], "\[IndentingNewLine]", 
        RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input"], 
     Cell["The first and last columns:", "Text"], 
     Cell[
      BoxData[{
        RowBox[{
          RowBox[{
            RowBox[{"mat", "[", 
              RowBox[{"[", 
                RowBox[{"All", ",", 
                  RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "]"}], "]"}], "=", "0"}], 
          ";"}], "\[IndentingNewLine]", 
        RowBox[{"MatrixForm", "[", "mat", "]"}]}], "Input"]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"80b8f57a-05a5-4837-9195-5065b70f976b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Immediate and Delayed Assignments"
}], "Subsection",
 CellChangeTimes->{3.821204183252247*^9},
 CellTags->{
  "Exercises", 
   "Immediate and \
Delayed"},ExpressionUUID->"099fa7d2-dc8c-42af-be25-7351835124f5"],

Cell[TextData[{
 "Suppose ",
 Cell[BoxData[
  RowBox[{"f", "[", "x", "]"}]], "Input",ExpressionUUID->
  "cfeae78a-a02d-4244-9c86-70fea87fc295"],
 " is defined as follows:"
}], "Text",
 CellChangeTimes->{{3.821290141468124*^9, 3.821290149110979*^9}},
 CellTags->{
  "Exercises", 
   "Immediate and \
Delayed"},ExpressionUUID->"af744ca4-1183-4f5d-bb24-1c2776a27661"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{"3", " ", 
    SuperscriptBox["x", "2"]}], "-", 
   RowBox[{"2", " ", "x"}]}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Immediate and \
Delayed"},ExpressionUUID->"0be4a84f-b110-4194-8a02-7e40ff478a47"],

Cell[TextData[{
 "Define the derivative of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"3acc4427-468b-4c91-b9bf-89665ac36d64"],
 " as a function of ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"d0017686-e27e-4370-b2ab-131ad270bc77"],
 ". You can use either immediate assignments (",
 StyleBox["=", "MR"],
 ") or a delayed assignment (",
 StyleBox[":=", "MR"],
 "), but only one of these will work properly with arbitrary arguments. Which \
type of assignment works correctly and why?"
}], "Item",
 CellChangeTimes->{{3.8212901517620487`*^9, 3.821290164659862*^9}},
 CellTags->{
  "Exercises", 
   "Immediate and \
Delayed"},ExpressionUUID->"34ddc1bb-2d79-441f-89e9-351ba2616c06"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"Here is the function definition for ", 
        StyleBox["f", "Input"], "."}], "Text"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", "x_", "]"}], ":=", 
         RowBox[{
           RowBox[{"3", " ", 
             SuperscriptBox["x", "2"]}], "-", 
           RowBox[{"2", " ", "x"}]}]}]], "Input"], 
     Cell[
      TextData[{"Here is the definition for the derivative of ", 
        StyleBox["f", "Input"], ", using a delayed assignment."}], "Text"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"fprime", "[", "x_", "]"}], ":=", 
         RowBox[{"D", "[", 
           RowBox[{
             RowBox[{"f", "[", "x", "]"}], ",", "x"}], "]"}]}]], "Input"], 
     Cell[
      TextData[{"The definition for ", 
        StyleBox["fprime", "Input"], 
        " seems to work, at least for symbolic arguments ."}], "Text", 
      CellChangeTimes -> {{3.8213693069725122`*^9, 3.821369333641891*^9}, {
       3.8213693901050653`*^9, 3.821369433302445*^9}}], 
     Cell[
      BoxData[
       RowBox[{"fprime", "[", "z", "]"}]], "Input"], 
     Cell["But it fails for numeric arguments.", "Text"], 
     Cell[
      BoxData[
       RowBox[{"fprime", "[", "1", "]"}]], "Input"], 
     Cell[
      TextData[{
       "This definition fails because the delayed assignment causes the \
argument ", 
        StyleBox["1", "Input"], 
        " to be substituted into the right-hand side of the definition of ", 
        StyleBox["fprime", "Input"], 
        ",  before any evaluation takes place. That leaves ", 
        Cell[
         BoxData[
          StyleBox[
           RowBox[{"D", "[", 
             RowBox[{
               RowBox[{"f", "[", "1", "]"}], ",", "1"}], "]"}], "Input"]]], 
        " and the Wolfram Language cannot evaluate this derivative since \
there is no variable to take the derivative with respect to."}], "Text", 
      CellChangeTimes -> {{3.8213694519465523`*^9, 3.821369482231275*^9}, {
       3.82137296135122*^9, 3.821372968613179*^9}}], 
     Cell[
     "A definition that bypasses this problem uses an immediate assignment.", 
      "Text"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"fprime", "[", "x_", "]"}], "=", 
         RowBox[{"D", "[", 
           RowBox[{
             RowBox[{"f", "[", "x", "]"}], ",", "x"}], "]"}]}]], "Input"], 
     Cell[
      TextData[{
       "Note though, that this last solution is not ideal in that it will \
fail if ", 
        StyleBox["x", "Input"], 
        " has a value from a previous computation. The optimal solution is to \
localize the variable ", 
        StyleBox["x", "Input"], " using ", 
        StyleBox[
         ButtonBox[
         "Module", BaseStyle -> "Link", ButtonData -> "paclet:ref/Module"], 
         FontWeight -> "Bold"], 
        ". Here is one possible solution creating a new function ", 
        StyleBox["fn", "Input"], " in the module for the derivative."}], 
      "Text", CellChangeTimes -> {{3.473496908341136*^9, 
       3.473496978334248*^9}, {3.821369506362355*^9, 3.821369518581439*^9}}], 
     
     Cell[
      BoxData[
       RowBox[{"Clear", "[", "fprime", "]"}]], "Input", 
      CellChangeTimes -> {{3.473497087872657*^9, 3.4734970969519873`*^9}}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"fprime", "[", "x_", "]"}], ":=", " ", 
         RowBox[{"Module", "[", 
           RowBox[{
             RowBox[{"{", 
               RowBox[{"fn", ",", "var"}], "}"}], ",", "\[IndentingNewLine]", 
             
             RowBox[{
               RowBox[{
                 RowBox[{"fn", "[", "var_", "]"}], "=", " ", 
                 RowBox[{"D", "[", 
                   RowBox[{
                    RowBox[{"f", "[", "var", "]"}], ",", "var"}], "]"}]}], 
               ";", "\[IndentingNewLine]", 
               RowBox[{"fn", "[", "x", "]"}]}]}], "]"}]}]], "Input"], 
     Cell[
     "Some examples showing the definition works.", "Text", 
      CellChangeTimes -> {{3.473496996944683*^9, 3.473497011613359*^9}, {
       3.821373012773817*^9, 3.821373013029077*^9}}], 
     Cell[
      BoxData[
       RowBox[{"fprime", "[", "r", "]"}]], "Input", 
      CellChangeTimes -> {{3.4734965602621193`*^9, 3.473496564525704*^9}}], 
     Cell[
      BoxData[
       RowBox[{"fprime", "[", "1", "]"}]], "Input", 
      CellChangeTimes -> {{3.4734965718307877`*^9, 3.473496583060951*^9}}], 
     Cell[
      BoxData[
       RowBox[{"fprime", "[", 
         RowBox[{"3", " ", "+", 
           RowBox[{"4.1", "I"}]}], "]"}]], "Input", 
      CellChangeTimes -> {{3.4734967688507423`*^9, 3.473496783665718*^9}}]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"d3ac7f87-ccf1-43ac-89ca-3d07037a9a75"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Localizing Variables"
}], "Subsection",
 CellChangeTimes->{3.821204185592259*^9},
 CellTags->{
  "Exercises", 
   "Localizing \
Variables"},ExpressionUUID->"9b130e83-0c0f-46ed-9174-0d5360ba827d"],

Cell[CellGroupData[{

Cell["\<\
Identify the two global variables in this definition. Change this definition \
so that those two variables are localized using Module:\
\>", "Item",
 CellChangeTimes->{{3.821290177172571*^9, 3.8212901791147757`*^9}, {
  3.821292853226225*^9, 3.821292854900629*^9}},
 CellTags->{
  "Exercises", 
   "Localizing \
Variables"},ExpressionUUID->"0b2648f3-ec73-4ad7-a39a-2283d4e900a4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"p_", ",", "q_"}], "]"}], ":=", 
  RowBox[{"(", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"temp", "=", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"p", "+", 
         RowBox[{"q", " ", "x"}]}], "\[Equal]", "0"}], ",", "x"}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"x", "/.", "temp"}]}], "\[IndentingNewLine]", ")"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Localizing \
Variables"},ExpressionUUID->"6fd6ceca-d187-49ed-b66f-a553b592db5d"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      TextData[{"The two global variables in this definition are ", 
        StyleBox["x", "MR"], " and ", 
        StyleBox["temp", "MR"], 
        ".  The names of named patterns in a rule or definition are \
automatically localized, so the names ", 
        StyleBox["p", "MR"], " and ", 
        StyleBox["q", "MR"], 
        " in the function arguments are automatically local to this \
definition of ", 
        StyleBox["f", "MR"], "."}], "Text"], All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"8fc92c47-0fba-496f-860d-45720b49a992"],

Cell[TextData[{
 "The two global variables in this definition are ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"e6545607-09e3-49b5-92d7-e81ebcca0439"],
 " and ",
 Cell[BoxData[
 "temp"], "Input",ExpressionUUID->"5313e692-ff24-4ce2-9bff-b84b3f8c9337"],
 ". The names of named patterns in a rule or definition are automatically \
localized, so the names ",
 Cell[BoxData[
 "p"], "Input",ExpressionUUID->"36383369-ce50-4049-aa07-42f284a64dbf"],
 " and ",
 Cell[BoxData[
 "q"], "Input",ExpressionUUID->"7349b264-26b8-4998-b806-7facc65b4bf0"],
 " in the function arguments are automatically local to this definition of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"6961b050-0b74-4861-9cb1-fdefa6fc7c1a"],
 "."
}], "Text",
 CellChangeTimes->{{3.821293746520954*^9, 3.821293791229457*^9}, {
  3.821374791504677*^9, 
  3.821374806239134*^9}},ExpressionUUID->"a470d10e-7f36-4043-abfe-\
f2e18f7551d8"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     BoxData[
      RowBox[{
        RowBox[{"f", "[", 
          RowBox[{"p_", ",", "q_"}], "]"}], ":=", 
        RowBox[{"Module", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{"temp", ",", "x"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
              RowBox[{"temp", "=", 
                RowBox[{"Solve", "[", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"p", "+", 
                    RowBox[{"q", " ", "x"}]}], "\[Equal]", "0"}], ",", "x"}], 
                  "]"}]}], ";", "\[IndentingNewLine]", 
              RowBox[{"x", "/.", "temp"}]}]}], "]"}]}]], "Input"], 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"d314e686-7d6d-41a6-aa17-93292b23e38f"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Using Patterns and Rules in Graphics"
}], "Subsection",
 CellChangeTimes->{3.821204188112966*^9},
 CellTags->{
  "Exercises", 
   "Using Patterns"},ExpressionUUID->"3f008206-30e2-4877-afd2-ca33d9e89ee4"],

Cell[CellGroupData[{

Cell[TextData[{
 "Evaluate the following input to construct and display a ",
 StyleBox[ButtonBox["Graphics",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Graphics"],
  FontWeight->"Bold"],
 " expression. The argument of the ",
 StyleBox[ButtonBox["Line",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Line"],
  FontWeight->"Bold"],
 " primitive in the Graphics expression is a list of pairs of real numbers. \
Each pair of numbers specifies a coordinate in two dimensions:"
}], "Item",
 CellChangeTimes->{{3.821290184041541*^9, 3.8212902078756523`*^9}, {
  3.821292866299199*^9, 3.821292867018037*^9}},
 CellTags->{
  "Exercises", 
   "Using Patterns"},ExpressionUUID->"594e4489-ba47-48bf-8f22-383f7bf82a56"],

Cell[BoxData[
 RowBox[{"gr", "=", 
  RowBox[{"Graphics", "[", 
   RowBox[{
    RowBox[{"Line", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.0", ",", "0.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.0", ",", "1.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2.0", ",", "0.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"3.0", ",", "2.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"4.0", ",", "0.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5.0", ",", "2.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"6.0", ",", "1.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"7.0", ",", "3.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"8.0", ",", "0.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"9.0", ",", "2.0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"10.0", ",", "0.0"}], "}"}]}], "}"}], "]"}], ",", 
    RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Using Patterns"},ExpressionUUID->"0ebc10cc-9824-4969-8310-3c3b2826eb68"]
}, Open  ]],

Cell[TextData[{
 "Apply a rule to this Graphics expression to replace all pairs of real \
numbers ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"p_Real", ",", "q_Real"}], "}"}]], "Input",ExpressionUUID->
  "221599c9-9bc8-4240-babd-a762c16ab45b"],
 " with ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"q", ",", "p"}], "}"}]], "Input",ExpressionUUID->
  "241907ff-4751-402b-9949-3c74640a2f75"],
 " so that the coordinates in each pair are reversed. Display the result. \
This replacement corresponds to exchanging the vertical and horizontal \
dimensions or, equivalently, to reflecting the image across a diagonal."
}], "Item",
 CellChangeTimes->{{3.821290214212607*^9, 3.8212902543093243`*^9}},
 CellTags->{
  "Exercises", 
   "Using Patterns"},ExpressionUUID->"d2b3f4e5-ff0f-49ce-a299-b9b5a43e1a03"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      TextData[{"The rule to apply is ", 
        StyleBox["{p_Real,q_Real}\[Rule]{q,p}", "MR"], "."}], "Text"], All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"57cc4b29-1b3f-47a8-939b-30a05166519e"],

Cell[TextData[{
 "The rule to apply is ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_Real", ",", "q_Real"}], "}"}], "\[RightArrow]", 
   RowBox[{"{", 
    RowBox[{"q", ",", "p"}], "}"}]}]], "Input",ExpressionUUID->
  "33441e40-0a75-4079-b9dc-2a8e86eab860"],
 "."
}], "Text",
 CellChangeTimes->{{3.821293802995914*^9, 
  3.821293852626329*^9}},ExpressionUUID->"d5362b93-d21c-4bad-bd99-\
828723ab167e"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"gr", "=", 
            RowBox[{"Graphics", "[", 
              RowBox[{
                RowBox[{"Line", "[", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.0", ",", "0.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1.0", ",", "1.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2.0", ",", "0.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3.0", ",", "2.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"4.0", ",", "0.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"5.0", ",", "2.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"6.0", ",", "1.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"7.0", ",", "3.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"8.0", ",", "0.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"9.0", ",", "2.0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"10.0", ",", "0.0"}], "}"}]}], "}"}], "]"}], ",", 
                
                RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]}]], "Input"], 
        Cell[
         BoxData[
          GraphicsBox[
           
           LineBox[{{0., 0.}, {1., 1.}, {2., 0.}, {3., 2.}, {4., 0.}, {5., 
            2.}, {6., 1.}, {7., 3.}, {8., 0.}, {9., 2.}, {10., 0.}}], Axes -> 
           True]], "Output"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"gr", "/.", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"p_Real", ",", "q_Real"}], "}"}], "\[Rule]", 
              RowBox[{"{", 
                RowBox[{"q", ",", "p"}], "}"}]}]}]], "Input"], 
        Cell[
         BoxData[
          GraphicsBox[
           
           LineBox[{{0., 0.}, {1., 1.}, {0., 2.}, {2., 3.}, {0., 4.}, {2., 
            5.}, {1., 6.}, {3., 7.}, {0., 8.}, {2., 9.}, {0., 10.}}], Axes -> 
           True]], "Output"]}, Open]]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"e23c0784-6785-49ff-94ed-02b1214ac97a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Pattern Matching"
}], "Subsection",
 CellChangeTimes->{3.821204190622241*^9},
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"ec7b3270-427a-4c25-b600-1227260e5b01"],

Cell[TextData[{
 "Define a function ",
 Cell[BoxData[
  RowBox[{"abs", "[", "x", "]"}]], "Input",ExpressionUUID->
  "f63537d8-446d-4e7c-9e0c-0cb87eee1cb8"],
 " that returns ",
 Cell[BoxData[
 "x"], "Output",ExpressionUUID->"386e1bd4-7ebd-446f-9b92-30fba0913d7d"],
 " whenever ",
 Cell[BoxData[
 "x"], "Output",ExpressionUUID->"1d7e50fd-8f13-402f-aace-70b2fa6c7b99"],
 " is a positive number, ",
 Cell[BoxData[
  RowBox[{"\[Minus]", "x"}]], "Output",
  GeneratedCell->False,
  CellAutoOverwrite->False,ExpressionUUID->
  "e6b647f9-3d60-4ff1-bb9e-771ef40eff7e"],
 " whenever ",
 Cell[BoxData[
 "x"], "Output",ExpressionUUID->"b5da03df-c941-4a3f-b65f-23cfd2d6f27c"],
 " is a negative number, and returns ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{
     SuperscriptBox["a", "2"], "+", 
     SuperscriptBox["b", "2"]}]], TraditionalForm]],ExpressionUUID->
  "6bf2fd6c-d821-405b-a116-1581c5bc4748"],
 " whenever ",
 Cell[BoxData[
 "x"], "Output",ExpressionUUID->"67ba36af-5a91-4c8d-b09f-3998fc184d9c"],
 " is a complex number of the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"a", "+", 
    RowBox[{"b", "\[InvisibleSpace]", "\[ImaginaryI]"}]}], TraditionalForm]],
  ExpressionUUID->"bc130001-54ae-41ac-9eaa-5ae24ff8aa07"],
 " (",
 Cell[BoxData[
  FormBox["a", TraditionalForm]],ExpressionUUID->
  "20075514-a4de-402d-b166-d8af1d0b68d5"],
 " and ",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "4a79b752-04d6-42bf-8d01-de01950d11f1"],
 " real)."
}], "Item",
 CellChangeTimes->{{3.82129026331742*^9, 3.821290427772126*^9}, {
  3.821292882018216*^9, 3.821292930895781*^9}, {3.821374848582717*^9, 
  3.821374863414793*^9}},
 CellTags->{
  "Exercises", 
   "Pattern Matching"},ExpressionUUID->"2ec3664f-797b-4955-9a31-ab12b072cf59"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"One approach might use nested ", 
         Cell[
          BoxData[
           ButtonBox[
           "If", BaseStyle -> "Link", ButtonData -> "paclet:ref/If"]], 
          "InlineFormula"], 
         " structures. These can often be hard to read and debug, so try \
instead to create a separate definition for each clause in the statement of \
the problem."}], "Text"], 
      Cell[
       TextData[{"Consider using the predicate functions ", 
         Cell[
          BoxData[
           ButtonBox[
           "NonNegative", BaseStyle -> "Link", ButtonData -> 
            "paclet:ref/NonNegative"]], "InlineFormula"], ", ", 
         Cell[
          BoxData[
           ButtonBox[
           "Negative", BaseStyle -> "Link", ButtonData -> 
            "paclet:ref/Negative"]], "InlineFormula"], ", ", 
         Cell[
          BoxData[
           ButtonBox[
           "NonPositive", BaseStyle -> "Link", ButtonData -> 
            "paclet:ref/NonPositive"]], "InlineFormula"], ", ", 
         Cell[
          BoxData[
           ButtonBox[
           "Positive", BaseStyle -> "Link", ButtonData -> 
            "paclet:ref/Positive"]], "InlineFormula"], 
         " to create the appropriate patterns. You will also need to match \
the head ", 
         Cell[
          BoxData[
           ButtonBox[
           "Complex", BaseStyle -> "Link", ButtonData -> 
            "paclet:ref/Complex"]], "InlineFormula"], "."}], "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"b5071c18-85a4-449c-9475-36c3825d5f90"],

Cell["\<\
One approach might use nested If structures. These can often be hard to read \
and debug, so try instead to create a separate definition for each clause in \
the statement of the problem.\
\>", "Text",
 CellChangeTimes->{{3.8212938675857983`*^9, 
  3.821293869184154*^9}},ExpressionUUID->"b16fe1ab-303f-4bb7-a48d-\
1f61bd413631"],

Cell[TextData[{
 "Consider using the predicate functions ",
 StyleBox[ButtonBox["NonNegative",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NonNegative"],
  FontWeight->"Bold"],
 ", Negative, ",
 StyleBox[ButtonBox["NonPositive",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/NonPositive"],
  FontWeight->"Bold"],
 ", ",
 StyleBox[ButtonBox["Positive",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Positive"],
  FontWeight->"Bold"],
 " to create the appropriate patterns. You will also need to match the head \
",
 StyleBox[ButtonBox["Complex",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Complex"],
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.821293878083067*^9, 
  3.8212939181162367`*^9}},ExpressionUUID->"6a7d0070-1249-401a-8b2a-\
624e18421d28"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "Create one rule for numbers greater than or equal to zero, another rule \
for numbers less than zero, and a third rule for complex arguments.", "Text", 
      CellChangeTimes -> {3.821369668090914*^9}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"abs", "[", 
           RowBox[{"x_", "?", "NonNegative"}], "]"}], ":=", "x"}]], "Input"], 
     
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"abs", "[", 
           RowBox[{"x_", "?", "Negative"}], "]"}], ":=", 
         RowBox[{"-", "x"}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"abs", "[", "x_Complex", "]"}], ":=", 
         SqrtBox[
          RowBox[{
            SuperscriptBox[
             RowBox[{"Re", "[", "x", "]"}], "2"], "+", 
            SuperscriptBox[
             RowBox[{"Im", "[", "x", "]"}], "2"]}]]}]], "Input"], 
     Cell[
      TextData[{"Here is a simple check that ", 
        StyleBox["abs", "Input"], " works for various arguments."}], "Text"], 
     
     Cell[
      BoxData[
       RowBox[{"Map", "[", 
         RowBox[{"abs", ",", 
           RowBox[{"{", 
             RowBox[{"1.3", ",", 
               RowBox[{"-", "34"}], ",", "0", ",", 
               RowBox[{"3", "+", 
                 RowBox[{"4", "I"}]}]}], "}"}]}], "]"}]], "Input"], 
     Cell[
      TextData[{"Finally, note that ", 
        StyleBox["abs", "Input"], 
        " returns unevaluated for arguments that do not match any of these \
patterns."}], "Text"], 
     Cell[
      BoxData[
       RowBox[{"abs", "[", "a", "]"}]], "Input"]}, WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"ded36c7c-4613-43c7-990a-7da5d89e016a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Constructing an Expression"
}], "Subsection",
 CellChangeTimes->{3.821204193199091*^9},
 CellTags->{
  "Exercises", 
   "Constructing an \
Expression"},ExpressionUUID->"91180fe6-2863-4f4d-9c0a-d43f3ed5837d"],

Cell["\<\
One useful technique for testing and debugging Wolfram Language programs is \
to observe the results after inserting random numerical values for any \
symbolic variables in the program.\
\>", "Text",
 CellChangeTimes->{
  3.821210155571866*^9, {3.82129043476359*^9, 3.821290435034967*^9}},
 CellTags->{
  "Exercises", 
   "Constructing an \
Expression"},ExpressionUUID->"a6e656a7-4cad-41d7-ad51-007ff19cfbe5"],

Cell[CellGroupData[{

Cell[TextData[{
 "Using the following list of variables, construct a list of rules for \
replacing each variable in the list with a value generated using ",
 StyleBox[ButtonBox["RandomReal",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RandomReal"],
  FontWeight->"Bold"],
 ":"
}], "Item",
 CellChangeTimes->{{3.821290441525415*^9, 3.821290450839919*^9}},
 CellTags->{
  "Exercises", 
   "Constructing an \
Expression"},ExpressionUUID->"f6563560-511b-4ea4-af21-06638de7e457"],

Cell[BoxData[
 RowBox[{
  RowBox[{"vars", "=", 
   RowBox[{"{", 
    RowBox[{
    "xxy", ",", "xxz", ",", "xyy", ",", "yxx", ",", "yzz", ",", "yzy"}], 
    "}"}]}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Constructing an \
Expression"},ExpressionUUID->"03fced40-c126-4017-8505-a6841b413599"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
      "There are many ways to do this. The direct approach is to simply edit \
the list of variables to make it in to a list of rules.", "Text"], 
      Cell[
       BoxData[
        RowBox[{"{", 
          RowBox[{
            RowBox[{"xxy", "\[Rule]", 
              RowBox[{"RandomReal", "[", "]"}]}], ",", 
            RowBox[{"xxz", "\[Rule]", 
              RowBox[{"RandomReal", "[", "]"}]}], ",", 
            RowBox[{"xyy", "\[Rule]", 
              RowBox[{"RandomReal", "[", "]"}]}], ",", 
            RowBox[{"yxx", "\[Rule]", 
              RowBox[{"RandomReal", "[", "]"}]}], ",", 
            RowBox[{"yzz", "\[Rule]", 
              RowBox[{"RandomReal", "[", "]"}]}], ",", 
            RowBox[{"yzy", "\[Rule]", 
              RowBox[{"RandomReal", "[", "]"}]}]}], "}"}]], "Input"], 
      Cell[
      "This is prone to error and certainly does not scale well for large \
lists of variables. Try to think of another way to construct this result.", 
       "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"32282578-55b6-40cc-9901-157cf8077c68"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
     "One solution is to simply edit the list of variables to make it into a \
list of rules.", "Text", CellChangeTimes -> {3.821369792562134*^9}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"vars", "=", 
           RowBox[{"{", 
             
             RowBox[{"xxy", ",", "xxz", ",", "xyy", ",", "yxx", ",", "yzz", 
               ",", "yzy"}], "}"}]}], ";"}]], "Input", 
      CellTags -> {"Exercises", "Constructing an Expression"}], 
     Cell[
      BoxData[
       RowBox[{"{", 
         RowBox[{
           RowBox[{"xxy", "\[Rule]", 
             RowBox[{"RandomReal", "[", "]"}]}], ",", 
           RowBox[{"xxz", "\[Rule]", 
             RowBox[{"RandomReal", "[", "]"}]}], ",", 
           RowBox[{"xyy", "\[Rule]", 
             RowBox[{"RandomReal", "[", "]"}]}], ",", 
           RowBox[{"yxx", "\[Rule]", 
             RowBox[{"RandomReal", "[", "]"}]}], ",", 
           RowBox[{"yzz", "\[Rule]", 
             RowBox[{"RandomReal", "[", "]"}]}], ",", 
           RowBox[{"yzy", "\[Rule]", 
             RowBox[{"RandomReal", "[", "]"}]}]}], "}"}]], "Input"], 
     Cell["Here are several other solutions. ", "Text"], 
     Cell["First, a procedural approach:", "CodeText"], 
     Cell[
      BoxData[
       RowBox[{"Table", "[", 
         RowBox[{
           RowBox[{
             RowBox[{"vars", "[", 
               RowBox[{"[", "k", "]"}], "]"}], "\[Rule]", 
             RowBox[{"RandomReal", "[", "]"}]}], ",", 
           RowBox[{"{", 
             RowBox[{"k", ",", "1", ",", 
               RowBox[{"Length", "[", "vars", "]"}]}], "}"}]}], "]"}]], 
      "Input"], 
     Cell[
      TextData[{"A functional approach using ", 
        StyleBox[
         ButtonBox[
         "Map", BaseStyle -> "Link", ButtonData -> "paclet:ref/Map"], 
         FontWeight -> "Bold"], ":"}], "CodeText", 
      CellChangeTimes -> {
       3.8213698019267483`*^9, {3.821373106381341*^9, 
        3.8213731072531633`*^9}}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", "v_", "]"}], ":=", 
         RowBox[{"v", "\[Rule]", 
           RowBox[{"RandomReal", "[", "]"}]}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Map", "[", 
         RowBox[{"f", ",", "vars"}], "]"}]], "Input"], 
     Cell[
      TextData[{"Another functional approach, this time using ", 
        StyleBox[
         ButtonBox[
         "Thread", BaseStyle -> "Link", ButtonData -> "paclet:ref/Thread"], 
         FontWeight -> "Bold"], ":"}], "CodeText", 
      CellChangeTimes -> {
       3.821369810097103*^9, {3.821373109885131*^9, 3.821373111237136*^9}}], 
     Cell[
      BoxData[
       RowBox[{"Thread", "[", 
         RowBox[{"vars", "\[Rule]", 
           RowBox[{"RandomReal", "[", 
             RowBox[{"1", ",", 
               RowBox[{"{", 
                 RowBox[{"Length", "[", "vars", "]"}], "}"}]}], "]"}]}], 
         "]"}]], "Input"], 
     Cell[
      TextData[{"Using ", 
        StyleBox[
         ButtonBox[
         "Cases", BaseStyle -> "Link", ButtonData -> "paclet:ref/Cases"], 
         FontWeight -> "Bold"], ":"}], "CodeText", 
      CellChangeTimes -> {
       3.821369818725409*^9, {3.821444320741756*^9, 3.821444321644739*^9}}], 
     Cell[
      BoxData[
       RowBox[{"Cases", "[", 
         RowBox[{"vars", ",", 
           RowBox[{"x_", "\[RuleDelayed]", 
             RowBox[{"(", 
               RowBox[{"x", "\[Rule]", 
                 RowBox[{"RandomReal", "[", "]"}]}], ")"}]}]}], "]"}]], 
      "Input"]}, WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"45a8b1cf-d0e4-4c17-bd95-b10c592f465e"],

Cell[CellGroupData[{

Cell[TextData[{
 "Use your list of rules to find the one symbolic variable in the following \
expression that is not among the six variables included in the value of ",
 Cell[BoxData[
 "vars"], "Input",ExpressionUUID->"33a2ec4c-a838-4d80-93bd-99a29ad4d9c4"],
 ". After numerical values have been inserted for the listed variables, this \
expression will collapse to a simple expression in which the extra variable \
should be obvious:"
}], "Item",
 CellChangeTimes->{{3.821290457453466*^9, 3.8212904681244993`*^9}},
 CellTags->{
  "Exercises", 
   "Constructing an \
Expression"},ExpressionUUID->"9687d4c8-b9c1-468e-9c98-47a8a043a2a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expr", "=", 
   RowBox[{
    RowBox[{"-", 
     FractionBox[
      RowBox[{"11", "+", 
       RowBox[{"11", " ", "xxz"}], "+", 
       RowBox[{"7", " ", "xyy"}], "+", 
       RowBox[{"21", " ", "yzy"}]}], 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"5", " ", "xxy"}], "+", 
         RowBox[{"11", " ", "xxz"}], "+", 
         RowBox[{"11", " ", "yxx"}]}], ")"}], "2"]]}], "+", 
    FractionBox[
     RowBox[{
      RowBox[{"2", " ", "xxy"}], "+", 
      RowBox[{"10", " ", "xxz"}], "+", 
      RowBox[{"6", " ", "xyy"}], "+", 
      RowBox[{"9", " ", "yzy"}], "+", 
      RowBox[{"2", " ", "yzz"}]}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"3", "+", 
        RowBox[{"11", " ", "xxy"}], "+", 
        RowBox[{"5", " ", "xxz"}], "+", 
        RowBox[{"14", " ", "xyy"}], "+", 
        RowBox[{"5", " ", "yzy"}]}], ")"}], "2"]], "+", 
    FractionBox[
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"5", "+", 
        RowBox[{"10", " ", "xxy"}], "+", 
        RowBox[{"7", " ", "xxz"}], "+", 
        RowBox[{"11", " ", "xyy"}], "+", 
        RowBox[{"8", " ", "yxx"}], "+", 
        RowBox[{"4", " ", "yzz"}]}], ")"}], "2"], 
     RowBox[{
      RowBox[{"6", " ", "xxy"}], "+", 
      RowBox[{"9", " ", "xxz"}], "+", 
      RowBox[{"8", " ", "xyy"}], "+", 
      RowBox[{"2", " ", "yxx"}], "+", 
      RowBox[{"9", " ", "yzy"}]}]], "-", 
    FractionBox[
     RowBox[{"4", "+", 
      RowBox[{"2", " ", "xxy"}], "+", 
      RowBox[{"4", " ", "xxz"}], "+", 
      RowBox[{"10", " ", "xyy"}], "+", 
      RowBox[{"8", " ", "yxx"}], "+", 
      RowBox[{"5", " ", "yzy"}], "+", 
      RowBox[{"4", " ", "yzz"}]}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"3", " ", "xxy"}], "+", 
        RowBox[{"6", " ", "xxz"}], "+", 
        RowBox[{"4", " ", "yxx"}], "+", 
        RowBox[{"6", " ", "yzz"}]}], ")"}], "2"]], "+", 
    FractionBox[
     RowBox[{
      RowBox[{"11", " ", "xxy"}], "+", 
      RowBox[{"8", " ", "xxz"}], "+", 
      RowBox[{"5", " ", "xyy"}], "+", 
      RowBox[{"6", " ", "yxy"}], "+", "yzz"}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"8", " ", "xxy"}], "+", 
        RowBox[{"7", " ", "xxz"}], "+", 
        RowBox[{"11", " ", "yxx"}], "+", 
        RowBox[{"8", " ", "yzz"}]}], ")"}], "2"]], "+", 
    FractionBox[
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"4", " ", "xyy"}], "+", 
        RowBox[{"9", " ", "yxx"}], "+", 
        RowBox[{"3", " ", "yzy"}], "+", 
        RowBox[{"6", " ", "yzz"}]}], ")"}], "2"], 
     RowBox[{
      RowBox[{"3", " ", "xxz"}], "+", 
      RowBox[{"19", " ", "xyy"}], "+", 
      RowBox[{"15", " ", "yzz"}]}]]}]}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Constructing an \
Expression"},ExpressionUUID->"144c33ad-49d0-4f21-a6ef-52936fa3b38c"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      TextData[{"If your solution involves ", 
        StyleBox["vars", "MR"], " and ", 
        StyleBox["expr", "MR"], 
        ", be sure you have evaluated the inputs that define these \
variables."}], "Text"], All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"86c95a61-ef2a-4002-9cdc-863f8ecec6cf"],

Cell[TextData[{
 "If your solution involves ",
 Cell[BoxData[
 "vars"], "Input",ExpressionUUID->"b3a8727a-a40f-4855-9be6-ac4e36727864"],
 " and ",
 Cell[BoxData[
 "expr"], "Input",ExpressionUUID->"fe4cb468-6876-4583-a372-7e7dcb62db6e"],
 ", be sure you have evaluated the inputs that define these variables."
}], "Text",
 CellChangeTimes->{{3.821294180047201*^9, 
  3.8212941923495293`*^9}},ExpressionUUID->"da3b0524-9ac2-4cef-8330-\
dfc0759657b4"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{
       "Here is one possible solution. This solution assumes that the inputs \
to define ", 
        StyleBox["vars", "Input"], " and ", 
        StyleBox["expr", "Input"], " have already been evaluated."}], "Text"], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"vars", "=", 
           RowBox[{"{", 
             
             RowBox[{"xxy", ",", "xxz", ",", "xyy", ",", "yxx", ",", "yzz", 
               ",", "yzy"}], "}"}]}], ";"}]], "Input", 
      CellTags -> {"Exercises", "Constructing an Expression"}], 
     Cell[
      BoxData[
       RowBox[{"rules", "=", 
         RowBox[{"Thread", "[", 
           RowBox[{"vars", "\[Rule]", 
             RowBox[{"RandomReal", "[", 
               RowBox[{"1", ",", 
                 RowBox[{"{", 
                   RowBox[{"Length", "[", "vars", "]"}], "}"}]}], "]"}]}], 
           "]"}]}]], "Input"], 
     Cell[
      TextData[{"Substituting the values given in rules into the expression ", 
        Cell[
         BoxData["expr"], "Input"], 
        ", you see that the only symbol not in the original list ", 
        StyleBox["vars", "Input"], " is ", 
        Cell[
         BoxData["yxy"], "Input"], ":"}], "CodeText", 
      CellChangeTimes -> {{3.821369890158041*^9, 3.821369890663396*^9}, 
        3.821369943114169*^9, {3.821373149822054*^9, 3.821373198000163*^9}}], 
     
     Cell[
      BoxData[
       RowBox[{"expr", "/.", "rules"}]], "Input"]}, WindowTitle -> "Solution",
     WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"d0b50427-8992-42ac-ab80-fa601df684bb"],

Cell[TextData[{
 "Variation: Suppose you are assigned the task of getting all the symbols \
used in the expression ",
 Cell[BoxData[
 "expr"], "Input",ExpressionUUID->"87b26c82-d228-43d8-b647-2da0bac0384b"],
 " in the preceding expression. Use Cases with level specifications to \
accomplish the task. "
}], "Item",
 CellChangeTimes->{{3.821290475284985*^9, 3.821290498707999*^9}, {
  3.8212929652222023`*^9, 3.821292969547985*^9}},
 CellTags->{
  "Exercises", 
   "Constructing an \
Expression"},ExpressionUUID->"c0f1762e-3313-4cd7-a686-2dc7da806b86"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{
       "You will need to set the level high enough to search all levels. ", 
        StyleBox[
         ButtonBox[
         "Infinity", BaseStyle -> "Link", ButtonData -> 
          "paclet:ref/Infinity"], FontWeight -> "Bold"], 
        " does that nicely."}], "Text", 
      CellChangeTimes -> {3.8213699828002462`*^9}, 
      CellTags -> {"Exercises", "Constructing an Expression"}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Cases", "[", 
            RowBox[{"expr", ",", "_Symbol", ",", "Infinity"}], "]"}]], 
         "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            
            RowBox[{"xxy", ",", "xxz", ",", "yxx", ",", "xxz", ",", "xyy", 
              ",", "yzy", ",", "xxy", ",", "xxz", ",", "xyy", ",", "yzy", ",",
               "xxy", ",", "xxz", ",", "xyy", ",", "yzy", ",", "yzz", ",", 
              "xxy", ",", "xxz", ",", "xyy", ",", "yxx", ",", "yzy", ",", 
              "xxy", ",", "xxz", ",", "xyy", ",", "yxx", ",", "yzz", ",", 
              "xxy", ",", "xxz", ",", "xyy", ",", "yxx", ",", "yzy", ",", 
              "yzz", ",", "xxy", ",", "xxz", ",", "yxx", ",", "yzz", ",", 
              "xxy", ",", "xxz", ",", "xyy", ",", "yxy", ",", "yzz", ",", 
              "xxy", ",", "xxz", ",", "yxx", ",", "yzz", ",", "xyy", ",", 
              "yxx", ",", "yzy", ",", "yzz", ",", "xxz", ",", "xyy", ",", 
              "yzz"}], "}"}]], "Output"]}, Open]], 
     Cell[
     "Eliminate duplicates:", "CodeText", 
      CellChangeTimes -> {{3.82137323371667*^9, 3.821373234092659*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"Cases", "[", 
              RowBox[{"expr", ",", "_Symbol", ",", "Infinity"}], "]"}], 
            "]"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", 
            
            RowBox[{"xxy", ",", "xxz", ",", "yxx", ",", "xyy", ",", "yzy", 
              ",", "yzz", ",", "yxy"}], "}"}]], "Output"]}, Open]], 
     Cell[
      TextData[{"Here are all those symbols in ", 
        StyleBox["expr", "Input"], " that are not in the list ", 
        StyleBox["vars", "Input"], ":"}], "CodeText", 
      CellChangeTimes -> {{3.821373239228581*^9, 3.821373241251635*^9}}], 
     Cell[
      CellGroupData[{
        Cell[
         BoxData[
          RowBox[{"Complement", "[", 
            RowBox[{"%", ",", "vars"}], "]"}]], "Input"], 
        Cell[
         BoxData[
          RowBox[{"{", "yxy", "}"}]], "Output"]}, Open]]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"c42bc85d-91ee-42bd-aa95-3dffed66b99b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Delayed Rules"
}], "Subsection",
 CellChangeTimes->{3.821207784537382*^9},
 CellTags->{
  "Exercises", 
   "Delayed Rules"},ExpressionUUID->"19481bdc-c8b3-42d5-9f97-e51343b73872"],

Cell["\<\
Here is a definition for a factorial function using two \
assignments\[LongDash]one dealing with the base case, or stopping condition, \
and the other specifying the recursion.\
\>", "Text",
 CellChangeTimes->{{3.8212909739818697`*^9, 3.8212909745718307`*^9}},
 CellTags->{
  "Exercises", 
   "Delayed Rules"},ExpressionUUID->"db2c53c6-6e18-419c-bf70-b4c7d8c3cf74"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"fac", "[", "0", "]"}], "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fac", "[", "n_", "]"}], ":=", 
  RowBox[{"n", " ", 
   RowBox[{"fac", "[", 
    RowBox[{"n", "-", "1"}], "]"}]}]}]}], "Input",
 CellTags->{
  "Exercises", 
   "Delayed Rules"},ExpressionUUID->"bffeb595-42e3-4c28-9ab1-187f2f1a74f2"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"fac", "[", "m", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"m", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Delayed Rules"},ExpressionUUID->"0872a539-d24b-483f-b969-2d00548acbdb"],

Cell["\<\
Note that the first definition was given as an immediate assignment and the \
second definition was given as a delayed assignment.\
\>", "Text",
 CellTags->{
  "Exercises", 
   "Delayed Rules"},ExpressionUUID->"870df975-a0a6-4e7e-aed6-94dc1ae6944f"],

Cell[TextData[{
 "Create a set of substitution rules and apply them to an expression to \
compute 10!. You should consider repeated application of your rules (",
 StyleBox[ButtonBox["ReplaceRepeated",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ReplaceRepeated"],
  FontWeight->"Bold"],
 ", with shorthand notation ",
 Cell[BoxData["//."], "Input",ExpressionUUID->
  "eec9a51b-4584-4ed2-afcd-3a545d59713b"],
 ") as well as delayed rules (",
 StyleBox[ButtonBox["RuleDelayed",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/RuleDelayed"],
  FontWeight->"Bold"],
 ", with shorthand notation ",
 Cell[BoxData[":>"], "Input",ExpressionUUID->
  "d70eac7d-7645-4bad-8432-b1b82108be96"],
 ")."
}], "Item",
 CellChangeTimes->{{3.8212910305357037`*^9, 3.821291156141984*^9}},
 CellTags->{
  "Exercises", 
   "Delayed Rules"},ExpressionUUID->"96176dd0-cd3d-4b95-8b90-fdc9dfd391ac"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     BoxData[
      RowBox[{
        RowBox[{"fact", "[", "10", "]"}], "//.", 
        RowBox[{"{", 
          RowBox[{
            RowBox[{
              RowBox[{"fact", "[", "1", "]"}], "\[Rule]", "1"}], ",", 
            RowBox[{
              RowBox[{"fact", "[", "n_", "]"}], "\[RuleDelayed]", 
              RowBox[{"n", " ", 
                RowBox[{"fact", "[", 
                  RowBox[{"n", "-", "1"}], "]"}]}]}]}], "}"}]}]], "Input"], 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"e5fd0361-9fd0-44ba-ac1e-47a363ceeaae"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Formatting Numbers in a Table"
}], "Subsection",
 CellChangeTimes->{3.821207787259754*^9},
 CellTags->{
  "Exercises", 
   "Formatting \
Numbers"},ExpressionUUID->"40169de1-f67d-45dc-b4b1-36b3326e91c5"],

Cell[CellGroupData[{

Cell[TextData[{
 "Evaluate the following two inputs to solve a differential equation and \
display a table of results. The second column in the table is formatted using \
",
 StyleBox[ButtonBox["PaddedForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/PaddedForm"],
  FontWeight->"Bold"],
 ", so that each entry in that column has four digits to the right of the \
decimal point:"
}], "Item",
 CellChangeTimes->{{3.8212911662885027`*^9, 3.821291175634075*^9}, {
  3.821293001035877*^9, 3.821293001705146*^9}},
 CellTags->{
  "Exercises", 
   "Formatting \
Numbers"},ExpressionUUID->"b0160376-9bdc-4e6a-bb41-284a7aea2125"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"f", ",", "t"}], "]"}]], "Input",ExpressionUUID->"32140195-1e69-\
44b7-9652-843e49b074a4"],

Cell[BoxData[
 RowBox[{"sol", "=", 
  RowBox[{"NDSolve", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"f", "''"}], "[", "t", "]"}], "\[Equal]", 
       RowBox[{
        RowBox[{"2", 
         RowBox[{"f", "[", "t", "]"}]}], "-", "25"}]}], ",", 
      RowBox[{
       RowBox[{"f", "[", "0", "]"}], "\[Equal]", "1"}], ",", 
      RowBox[{
       RowBox[{"f", "[", "5", "]"}], "\[Equal]", "250"}]}], "}"}], ",", "f", 
    ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "5"}], "}"}]}], "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Formatting \
Numbers"},ExpressionUUID->"4377245d-bad9-434d-864a-e9361022a027"],

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"t", ",", 
      RowBox[{"PaddedForm", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"f", "[", "t", "]"}], "/.", 
         RowBox[{"sol", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"7", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0.0", ",", "5", ",", "0.5"}], "}"}]}], "]"}], 
  "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Formatting \
Numbers"},ExpressionUUID->"d2ea5300-89b1-432c-aa7d-9b9ae1dc7489"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Change the table so that the entries in the first column are formatted with \
one digit to the right of the decimal point. The resulting table should look \
like this:\
\>", "Item",
 CellChangeTimes->{{3.821293011514852*^9, 3.821293012211104*^9}},
 CellTags->{
  "Exercises", 
   "Formatting \
Numbers"},ExpressionUUID->"07924fcf-201a-4316-9819-b430fe6d4ae9"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      InterpretationBox["\<\" 0.0\"\>",
       0.,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"   1.0000\"\>",
       1.,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 0.5\"\>",
       0.5,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"   7.1394\"\>",
       7.139364644075419,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 1.0\"\>",
       1.,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"  10.4849\"\>",
       10.484853694263533`,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 1.5\"\>",
       1.5,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"  12.7801\"\>",
       12.78008125731648,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 2.0\"\>",
       2.,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"  15.2213\"\>",
       15.22128262914195,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 2.5\"\>",
       2.5,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"  19.0808\"\>",
       19.080772200534383`,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 3.0\"\>",
       3.,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"  26.3701\"\>",
       26.37005304300143,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 3.5\"\>",
       3.5,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"  40.8882\"\>",
       40.88817954909075,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 4.0\"\>",
       4.,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\"  70.2018\"\>",
       70.20176272683099,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 4.5\"\>",
       4.5,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\" 129.5886\"\>",
       129.58856457786374`,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]},
    {
     TagBox[
      InterpretationBox["\<\" 5.0\"\>",
       5.,
       AutoDelete->True],
      PaddedForm[#, {2, 1}]& ], 
     TagBox[
      InterpretationBox["\<\" 250.0000\"\>",
       250.00001770713203`,
       AutoDelete->True],
      PaddedForm[#, {7, 4}]& ]}
   },
   GridBoxAlignment->{
    "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
     "RowsIndexed" -> {}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.7]}, 
       Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}, "RowsIndexed" -> {}}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 ShowCellLabel->False,
 CellTags->{
  "Exercises", 
   "Formatting \
Numbers"},ExpressionUUID->"7a6cc502-0b88-4bcf-8c62-f8274f465680"]
}, Open  ]],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], 
     Cell[
      TextData[{"You can use ", 
        StyleBox["PaddedForm[t,{2,1}]", "MR"], " to display the number ", 
        StyleBox["t", "MR"], 
        " so that the display shows one digit to the right of the decimal \
point."}], "Text"], All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"7774a9f9-3123-4e70-b629-abe1b61bd2d6"],

Cell[TextData[{
 "You can use ",
 Cell[BoxData[
  RowBox[{"PaddedForm", "[", 
   RowBox[{"t", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1"}], "}"}]}], "]"}]], "Input",ExpressionUUID->
  "dd3ba108-5bc5-4a69-995b-730f1ea1671d"],
 " to display the number ",
 Cell[BoxData[
 "t"], "Input",ExpressionUUID->"ee719c3b-cf92-4741-8145-a99983f74fa6"],
 " so that the display shows one digit to the right of the decimal point."
}], "Text",
 CellChangeTimes->{{3.8212944169525347`*^9, 
  3.821294455054287*^9}},ExpressionUUID->"afe8a5ef-12d0-462c-82c3-\
bd55897199e2"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[
    Cell[
     BoxData[
      RowBox[{"TableForm", "[", 
        RowBox[{"Table", "[", 
          RowBox[{
            RowBox[{"{", 
              RowBox[{
                RowBox[{"PaddedForm", "[", 
                  RowBox[{"t", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], ",", 
                RowBox[{"PaddedForm", "[", 
                  RowBox[{
                    RowBox[{
                    RowBox[{"f", "[", "t", "]"}], "/.", 
                    RowBox[{"sol", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"7", ",", "4"}], "}"}]}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
              RowBox[{"t", ",", "0.0", ",", "5", ",", "0.5"}], "}"}]}], "]"}],
         "]"}]], "Input"], WindowTitle -> "Solution", 
    WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"8b515b28-bfe8-4e3a-ab2e-911b16440c18"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Programming Style"
}], "Subsection",
 CellChangeTimes->{3.821207790297365*^9},
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"9843cae5-6af4-441a-8a6d-f3f632f0c885"],

Cell[CellGroupData[{

Cell[TextData[{
 "Evaluate the following input to define ",
 Cell[BoxData[
 "data"], "Input",ExpressionUUID->"6f00ec44-2a22-448c-8e5b-5f5420f4774d"],
 " to be a list of pairs of elements:"
}], "Item",
 CellChangeTimes->{{3.821374993184909*^9, 3.821375000215981*^9}},
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"cc40dac5-659f-4858-a394-192dfe2944c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x1", ",", "y1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x2", ",", "y2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x3", ",", "y3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x4", ",", "y4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x5", ",", "y5"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"4377cf76-1c4a-4bba-8953-9247252d1e92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is a procedural program that reverses the elements in each pair. \
Evaluate this input to get the result. This program works by initializing a \
list in which all the elements are ",
 StyleBox[ButtonBox["Null",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Null"],
  FontWeight->"Bold"],
 " and then assigning each element in that list to be the reverse of the \
corresponding element from ",
 Cell[BoxData[
 "data"], "Input",ExpressionUUID->"68d5dda6-0be9-4ffe-b1e5-53eb50ee7a5c"],
 ":"
}], "Item",
 CellChangeTimes->{{3.8212911953225718`*^9, 3.8212912002358513`*^9}, {
  3.821375010351777*^9, 3.821375015314644*^9}},
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"51646c8d-c251-416a-a0a0-0e36d61e44a7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"result", "[", 
      RowBox[{"[", "k", "]"}], "]"}], "=", 
     RowBox[{"Reverse", "[", 
      RowBox[{"data", "[", 
       RowBox[{"[", "k", "]"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", 
      RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}], "\[IndentingNewLine]", "result"}], "Input",
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"64ea58a0-ffc5-48ec-8975-20a8b8287111"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is a functional program that gives the same result:", "Item",
 CellChangeTimes->{{3.821375019439694*^9, 3.821375019958024*^9}},
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"9b03966e-0e34-46c8-a63d-49c15e5482fd"],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Reverse", ",", "data"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"eee84689-cc4a-4e34-8d60-4751f551ef74"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is a program that uses a rule to get the same result:", "Item",
 CellChangeTimes->{{3.821375022062745*^9, 3.8213750223909597`*^9}},
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"4aef71b4-45c9-4967-966a-a543f616889f"],

Cell[BoxData[
 RowBox[{"data", "/.", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"q", ",", "p"}], "}"}]}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"1cc478c2-77a0-4d0d-a0c7-ab3a36d5ed53"]
}, Open  ]],

Cell[TextData[{
 "Modify these programs so that the result is a list of the first element in \
each pair. For ",
 Cell[BoxData[
 "data"], "Input",ExpressionUUID->"b0ef1152-8f9c-4ff3-9c13-d8cca4e41601"],
 ", the result from each program will be ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5"}], "}"}]], 
  "Output",ExpressionUUID->"f6f852b1-fa83-4498-a8d5-4cb61577987a"],
 "."
}], "Item",
 CellChangeTimes->{{3.821291209429484*^9, 3.821291278724597*^9}, {
  3.8213750291427298`*^9, 3.821375034309973*^9}},
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"ec7d54d7-f4fc-42e4-a3d5-8699d5ecb3d4"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The function ", 
         Cell[
          BoxData[
           ButtonBox[
           "First", BaseStyle -> "Link", ButtonData -> "paclet:ref/First"]], 
          "InlineFormula"], 
         " can be used to pick out the first element in a list."}], "Text"], 
      Cell[
       TextData[{
        "The procedural program and the functional program can be modified to \
give the desired result by simply replacing ", 
         Cell[
          BoxData[
           ButtonBox[
           "Reverse", BaseStyle -> "Link", ButtonData -> 
            "paclet:ref/Reverse"]], "InlineFormula"], " with ", 
         Cell[
          BoxData[
           ButtonBox[
           "First", BaseStyle -> "Link", ButtonData -> "paclet:ref/First"]], 
          "InlineFormula"], "."}], "Text"], 
      Cell[
       TextData[{"The rule ", 
         StyleBox["{p_,q_}\[Rule]p", "MR"], 
         " will replace a pair of elements with the first element from that \
pair."}], "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"a03bcb4c-5cf5-4790-91ea-223d7b49fce2"],

Cell[TextData[{
 "The function ",
 StyleBox[ButtonBox["First",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/First"],
  FontWeight->"Bold"],
 " can be used to pick out the first element in a list."
}], "Text",
 CellChangeTimes->{{3.821294469275248*^9, 
  3.8212944728817987`*^9}},ExpressionUUID->"f078bae3-8344-4d17-a69b-\
27846b791eff"],

Cell[TextData[{
 "The procedural program and the functional program can be modified to give \
the desired result by simply replacing ",
 StyleBox[ButtonBox["Reverse",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Reverse"],
  FontWeight->"Bold"],
 " with First."
}], "Text",
 CellChangeTimes->{{3.821294479546571*^9, 
  3.8212945002722073`*^9}},ExpressionUUID->"7c4758e4-76fe-4179-a7a1-\
d91768ad4efe"],

Cell[TextData[{
 "The rule ",
 Cell[BoxData[
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"p_", ",", "q_"}]}], "]"}], "\[RightArrow]", "p"}]], "Input",
  ExpressionUUID->"e2158a96-d222-4afc-a4af-ccf263e0663d"],
 " will replace a pair of elements with the first element from that pair."
}], "Text",
 CellChangeTimes->{{3.821294502629343*^9, 
  3.821294536301222*^9}},ExpressionUUID->"d8a25293-6ff9-440f-83af-\
0895e84aef2b"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[{
        RowBox[{
          RowBox[{"result", "=", 
            RowBox[{"Table", "[", 
              RowBox[{"Null", ",", 
                RowBox[{"{", 
                  RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
          ";"}], "\[IndentingNewLine]", 
        RowBox[{
          RowBox[{"Do", "[", "\[IndentingNewLine]", 
            RowBox[{
              RowBox[{
                RowBox[{"result", "[", 
                  RowBox[{"[", "k", "]"}], "]"}], "=", 
                RowBox[{"First", "[", 
                  RowBox[{"data", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"{", 
                RowBox[{"k", ",", "1", ",", 
                  RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], 
            "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
        "result"}], "Input"], 
     Cell[
      BoxData[
       RowBox[{"Map", "[", 
         RowBox[{"First", ",", "data"}], "]"}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"data", "/.", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", "p"}]}]], "Input"]},
     WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"b04609e9-7cf3-489e-a6a5-9745e717765d"],

Cell["\<\
Now modify these programs so that each program returns a list containing the \
sum of the elements in each pair.\
\>", "Item",
 CellTags->{
  "Exercises", 
   "Programming \
Style"},ExpressionUUID->"7fcc5eb0-2739-400d-9d20-b66306a086a7"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
      "Here are two procedural programs that return a list giving the sum of \
the elements in each pair.", "Text"], 
      Cell[
       BoxData[{
         RowBox[{
           RowBox[{"result", "=", 
             RowBox[{"Table", "[", 
               RowBox[{"Null", ",", 
                 RowBox[{"{", 
                   RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
           ";"}], "\[IndentingNewLine]", 
         RowBox[{
           RowBox[{"Do", "[", "\[IndentingNewLine]", 
             RowBox[{
               RowBox[{
                 RowBox[{"result", "[", 
                   RowBox[{"[", "k", "]"}], "]"}], "=", 
                 RowBox[{
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "1"}], "]"}], "]"}], "+", 
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "2"}], "]"}], "]"}]}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"{", 
                 RowBox[{"k", ",", "1", ",", 
                   RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], 
             "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
         RowBox[{"result", " "}]}], "Input"], 
      Cell[
       BoxData[
        RowBox[{"Table", "[", 
          RowBox[{
            RowBox[{
              RowBox[{"data", "[", 
                RowBox[{"[", 
                  RowBox[{"k", ",", "1"}], "]"}], "]"}], "+", 
              RowBox[{"data", "[", 
                RowBox[{"[", 
                  RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ",", 
            RowBox[{"{", 
              RowBox[{"k", ",", 
                RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}]], 
       "Input"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"8c6fca63-ddd4-4dba-8d5c-f040d6a78521"],

Cell["\<\
Here are two procedural programs that return a list giving the sum of the \
elements in each pair.\
\>", "Text",ExpressionUUID->"2476e86b-8bbb-4c5a-9aff-0154df26f228"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"result", "[", 
      RowBox[{"[", "k", "]"}], "]"}], "=", 
     RowBox[{
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"k", ",", "1"}], "]"}], "]"}], "+", 
      RowBox[{"data", "[", 
       RowBox[{"[", 
        RowBox[{"k", ",", "2"}], "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"k", ",", "1", ",", 
      RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"result", " "}]}], "Input",ExpressionUUID->"385c20eb-7ba8-4faf-b354-\
7850699f3c09"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "1"}], "]"}], "]"}], "+", 
    RowBox[{"data", "[", 
     RowBox[{"[", 
      RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", 
     RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}]], "Input",Expressi\
onUUID->"7698bda7-f0d9-4a84-ae0c-ad2ed401b05a"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"data", "=", 
           RowBox[{"{", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"x1", ",", "y1"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"x2", ",", "y2"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"x3", ",", "y3"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"x4", ",", "y4"}], "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{"x5", ",", "y5"}], "}"}]}], "}"}]}], ";"}]], 
      "Input"], 
     Cell[
      CellGroupData[{
        Cell["Procedural", "Subsection"], 
        Cell[
         BoxData[{
           RowBox[{
             RowBox[{"result", "=", 
               RowBox[{"Table", "[", 
                 RowBox[{"Null", ",", 
                   RowBox[{"{", 
                    RowBox[{"Length", "[", "data", "]"}], "}"}]}], "]"}]}], 
             ";"}], "\[IndentingNewLine]", 
           RowBox[{
             RowBox[{"Do", "[", "\[IndentingNewLine]", 
               RowBox[{
                 RowBox[{
                   RowBox[{"result", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "=", 
                   RowBox[{
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "1"}], "]"}], "]"}], "+", 
                    RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "2"}], "]"}], "]"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                   RowBox[{"k", ",", "1", ",", 
                    RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], 
               "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
           "result"}], "Input"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell["Functional", "Subsection"], 
        Cell[
         BoxData[
          RowBox[{"Map", "[", 
            RowBox[{"Total", ",", "data"}], "]"}]], "Input"]}, Open]], 
     Cell[
      CellGroupData[{
        Cell["Rule-based", "Subsection"], 
        Cell[
         BoxData[
          RowBox[{"data", "/.", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"p_", ",", "q_"}], "}"}], "\[Rule]", 
              RowBox[{"p", "+", "q"}]}]}]], "Input"]}, Open]]}, WindowTitle -> 
    "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"b934cdda-0e4a-440d-b127-5fbdcbb72f25"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2.",
 
 CounterBox["Subsection"],
 " Debugging a Procedural Program"
}], "Subsection",
 CellChangeTimes->{3.821207793638476*^9},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"68c02068-781f-4796-b5d0-32ad353b6224"],

Cell[CellGroupData[{

Cell[TextData[{
 "Evaluate the following input to define a function ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"7bd46807-8e53-439d-90d4-dd0d28d7154d"],
 " that takes a matrix as an argument. This function is intended to return \
the row from that matrix for which the first element has the largest absolute \
value:"
}], "Item",
 CellChangeTimes->{{3.8212912900568666`*^9, 3.8212913051775618`*^9}},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"6109f7ee-3838-42e6-8192-e0fff37f3866"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "m_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "=", 
       RowBox[{"m", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Do", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{"m", "[", 
              RowBox[{"[", 
               RowBox[{"k", ",", "1"}], "]"}], "]"}], "]"}], ">", 
            RowBox[{"Abs", "[", 
             RowBox[{"result", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"result", "=", 
            RowBox[{"m", "[", 
             RowBox[{"[", "k", "]"}], "]"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"k", ",", "2", ",", 
           RowBox[{"Length", "[", "m", "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "result"}]}], 
     "}"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"5ce97029-cf27-4199-b454-61675ba58a19"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Evaluate the following input and note that this program does not do what it \
is intended to do. It returns the correct row from the matrix, but each \
element in that row is multiplied by Null, and that row is enclosed in an \
unwanted list:\
\>", "Item",
 CellChangeTimes->{{3.8212913147285833`*^9, 3.821291321922471*^9}},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"f1230aa3-bbfb-4372-865d-1502465ac378"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"(", GridBox[{
     {"1", "4", "7"},
     {"9", "1", "8"},
     {"4", "6", "1"},
     {"11", "5", "8"},
     {"6", "1", "1"}
    }], ")"}], "]"}]], "Input",
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"90fbb6c6-67ab-4e39-9355-67aec7937207"]
}, Open  ]],

Cell[TextData[{
 "Correct the two errors in this program so that the result for the example \
is ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"11", ",", "5", ",", "8"}], "}"}]], "Output",ExpressionUUID->
  "b4e2e57c-329d-40e5-a4b3-5371a7c6aec3"],
 "."
}], "Item",
 CellChangeTimes->{{3.8212913258557796`*^9, 3.821291340621191*^9}, {
  3.821294564090413*^9, 3.821294583258466*^9}},
 CellTags->{
  "Exercises", 
   "Debugging a \
Program"},ExpressionUUID->"9576c294-af8c-49a6-8d16-4d164f8fd83e"],

Cell[BoxData[
 ButtonBox["Hint",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> 
    RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
    ButtonBoxOptions -> {
     Background -> RGBColor[1., 0.592156862745098, 0.10196078431372549`]}},
  ButtonFunction:>(SelectionMove[
     ButtonNotebook[], All, ButtonCell]; SelectionMove[
     ButtonNotebook[], After, Cell]; NotebookWrite[
     ButtonNotebook[], {
      Cell[
       TextData[{"The body of the ", 
         Cell[
          BoxData[
           ButtonBox[
           "Module", BaseStyle -> "Link", ButtonData -> "paclet:ref/Module"]],
           "InlineFormula"], " (the second argument in the ", 
         Cell[
          BoxData[
           ButtonBox[
           "Module", BaseStyle -> "Link", ButtonData -> "paclet:ref/Module"]],
           "InlineFormula"], 
         " expression) should not be enclosed in curly braces."}], "Text"], 
      Cell[
      "Unnecessary curly braces are often included in this type of program by \
people who have experience programming in C.", "Text"], 
      Cell[
       TextData[{"The return value of ", 
         Cell[
          BoxData[
           ButtonBox[
           "Do", BaseStyle -> "Link", ButtonData -> "paclet:ref/Do"]], 
          "InlineFormula"], " is ", 
         Cell[
          BoxData[
           ButtonBox[
           "Null", BaseStyle -> "Link", ButtonData -> "paclet:ref/Null"]], 
          "InlineFormula"], 
         ". As defined, the return value of this program is the return value \
of the ", 
         Cell[
          BoxData[
           ButtonBox[
           "Do", BaseStyle -> "Link", ButtonData -> "paclet:ref/Do"]], 
          "InlineFormula"], " loop multiplied by ", 
         StyleBox["result", "MR"], "."}], "Text"]}, All]),
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"9e931667-cbee-4574-82cf-04a50e67cee8"],

Cell["\<\
The body of the Module (the second argument in the Module expression) should \
not be enclosed in curly braces.\
\>", "Text",
 CellChangeTimes->{{3.82129459135294*^9, 
  3.821294597626425*^9}},ExpressionUUID->"c824d4cb-bf6f-4057-9d7e-\
67f2319e87c1"],

Cell["\<\
Unnecessary curly braces are often included in this type of program by people \
who have experience programming in C.\
\>", "Text",ExpressionUUID->"13742a23-b113-4faa-81d8-a27b74eddac3"],

Cell[TextData[{
 "The return value of Do is Null. As defined, the return value of this \
program is the return value of the Do loop multiplied by ",
 Cell[BoxData[
 "result"], "Input",ExpressionUUID->"6f64cc27-4676-4247-8d37-9ce04ba601df"],
 "."
}], "Text",
 CellChangeTimes->{{3.821294604920225*^9, 
  3.8212946318120403`*^9}},ExpressionUUID->"3aea0d39-dc4c-4dc6-a5ab-\
d06df5be2183"],

Cell[BoxData[
 ButtonBox["Solution",
  BaseStyle->{
   FontFamily -> "Source Sans Pro", FontSize -> 14, FontColor -> GrayLevel[1],
     ButtonBoxOptions -> {
     Background -> 
      RGBColor[0.09019607843137255, 0.1607843137254902, 
        0.25882352941176473`]}},
  ButtonFunction:>CreateDocument[{
     Cell[
      TextData[{"Remove the curly braces around the body of the ", 
        StyleBox[
         ButtonBox[
         "Module", BaseStyle -> "Link", ButtonData -> "paclet:ref/Module"], 
         FontWeight -> "Bold"], " and put a semicolon after the ", 
        StyleBox[
         ButtonBox["Do", BaseStyle -> "Link", ButtonData -> "paclet:ref/Do"], 
         FontWeight -> "Bold"], " expression."}], "Text", 
      CellChangeTimes -> {{3.821370060192725*^9, 3.821370077676099*^9}}], 
     Cell[
      BoxData[
       RowBox[{
         RowBox[{"f", "[", "m_", "]"}], ":=", 
         RowBox[{"Module", "[", 
           RowBox[{
             RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{
               RowBox[{"result", "=", 
                 RowBox[{"m", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{"Do", "[", "\[IndentingNewLine]", 
                 RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{"m", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "1"}], "]"}], "]"}], "]"}], ">", 
                    RowBox[{"Abs", "[", 
                    RowBox[{"result", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"result", "=", 
                    RowBox[{"m", "[", 
                    RowBox[{"[", "k", "]"}], "]"}]}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{"k", ",", "2", ",", 
                    RowBox[{"Length", "[", "m", "]"}]}], "}"}]}], 
                 "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               "result"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"], 
     Cell[
      BoxData[
       RowBox[{"f", "[", 
         RowBox[{"(", 
           
           GridBox[{{"1", "4", "7"}, {"9", "1", "8"}, {"4", "6", "1"}, {
             "11", "5", "8"}, {"6", "1", "1"}}], ")"}], "]"}]], "Input"]}, 
    WindowTitle -> "Solution", WindowSize -> {800, 600}],
  Evaluator->Automatic,
  ImageSize->{65, 25},
  Method->"Preemptive"]], "Text",
 TextAlignment->Right,ExpressionUUID->"505655ae-1c0a-4d46-96c5-60554ee5775b"],

Cell["", "EndOfSlide",ExpressionUUID->"09c4ba5c-8569-41b8-a446-918ca3780f16"]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
Saveable->False,
ScreenStyleEnvironment->"SlideShow",
WindowSize->{1024, 768},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"Beginning Programming",
TaggingRules->{
 "WolframUNotebook" -> True, 
  "PresenterSettings" -> {"ShowNavigationBar" -> True}},
FontTracking->"Plain",
ButtonBoxOptions->{BaseStyle->None},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["WolframULogo", StyleDefinitions -> StyleData["Title"]], 
          CellMargins -> {{120, 0}, {0, 130}}, CellGroupingRules -> 
          "GraphicsGrouping", PageBreakWithin -> False, GeneratedCell -> True,
           CellAutoOverwrite -> True, ShowCellLabel -> False, 
          CellFrameMargins -> {{0, 0}, {0, 0}}, DefaultFormatType -> 
          DefaultOutputFormatType, LanguageCategory -> "NaturalLanguage", 
          FormatType -> StandardForm, ShowStringCharacters -> False, 
          FrontFaceColor -> GrayLevel[0], FrontFaceOpacity -> 1, 
          GraphicsColor -> GrayLevel[0], PointSize -> Absolute[3], Thickness -> 
          Medium, Opacity -> 1, DrawEdges -> False, StyleMenuListing -> None, 
          FontFamily -> "Arial", FontSize -> 10, FontWeight -> "Plain", 
          FontColor -> GrayLevel[0], FontOpacity -> 
          1, $CellContext`BackFaceColor -> 
          GrayLevel[0], $CellContext`StripStyleOnPaste -> 
          False, $CellContext`BackFaceOpacity -> 1], 
         Cell[
          StyleData[
          "WolframULogo", "SlideShow", StyleDefinitions -> 
           StyleData["WolframULogo"]], 
          CellFrameLabels -> {{None, None}, {None, None}}], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Working", StyleDefinitions -> 
           StyleData["WolframULogo", "SlideShow"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Title", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], CellMargins -> {{120, 0}, {0, 40}}, 
             FontFamily -> "Source Sans Pro", FontSize -> 81, FontWeight -> 
             "Regular", FontSlant -> "Plain", FontTracking -> -0.75, 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> 
             RGBColor[
              0.09019607843137255, 0.1607843137254902, 0.25882352941176473`]], 
            Cell[
             StyleData["Title", "SlideShow"], 
             CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> 
             "Source Sans Pro", FontSize -> 81, FontWeight -> "Regular", 
             FontSlant -> "Plain", FontTracking -> -0.75, 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> 
             RGBColor[
              0.09019607843137255, 0.1607843137254902, 0.25882352941176473`]], 
            Cell[
             StyleData[
             "Title", "Slideshow Working", StyleDefinitions -> 
              StyleData["Title", "SlideShow"]]], 
            Cell[
             StyleData[
             "Title", "Slideshow Presentation", StyleDefinitions -> 
              StyleData["Title", "Slideshow Working"]]], 
            Cell[
             StyleData[
             "Title", "Scrolling Presentation", StyleDefinitions -> 
              StyleData["Title", "Slideshow Working"]], 
             CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], CellMargins -> {{120, 0}, {0, 12}}, 
             FontFamily -> "Source Sans Pro", FontSize -> 40, FontWeight -> 
             "Regular", FontSlant -> "Plain", 
             FontVariations -> {"CapsType" -> "AllCaps"}, 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
            Cell[
             StyleData["Subtitle", "SlideShow"], 
             CellMargins -> {{120, 0}, {0, 12}}, FontFamily -> 
             "Source Sans Pro", FontSize -> 40, FontWeight -> "Regular", 
             FontSlant -> "Plain", 
             FontVariations -> {"CapsType" -> "AllCaps"}, 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
            Cell[
             StyleData[
             "Subtitle", "Slideshow Working", StyleDefinitions -> 
              StyleData["Subtitle", "SlideShow"]]], 
            Cell[
             StyleData[
             "Subtitle", "Slideshow Presentation", StyleDefinitions -> 
              StyleData["Subtitle", "Slideshow Working"]]], 
            Cell[
             StyleData[
             "Subtitle", "Scrolling Presentation", StyleDefinitions -> 
              StyleData["Subtitle", "Slideshow Working"]]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TitleGraphic"], CellMargins -> {{120, 0}, {0, 25}}, 
             CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> 
             False, GeneratedCell -> True, CellAutoOverwrite -> True, 
             ShowCellLabel -> False, DefaultFormatType -> 
             DefaultOutputFormatType, LanguageCategory -> "NaturalLanguage", 
             FormatType -> StandardForm, ShowStringCharacters -> False, 
             FrontFaceColor -> GrayLevel[0], FrontFaceOpacity -> 1, 
             GraphicsColor -> GrayLevel[0], PointSize -> Absolute[3], 
             Thickness -> Medium, Opacity -> 1, DrawEdges -> False, 
             StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 10, 
             FontWeight -> "Plain", FontColor -> GrayLevel[0], FontOpacity -> 
             1, $CellContext`BackFaceColor -> 
             GrayLevel[0], $CellContext`StripStyleOnPaste -> 
             False, $CellContext`BackFaceOpacity -> 1], 
            Cell[
             StyleData["TitleGraphic", "SlideShow"], 
             CellMargins -> {{120, 0}, {0, 25}}, CellGroupingRules -> 
             "GraphicsGrouping", PageBreakWithin -> False, GeneratedCell -> 
             True, CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, LanguageCategory -> 
             "NaturalLanguage", FormatType -> StandardForm, 
             ShowStringCharacters -> False, FrontFaceColor -> GrayLevel[0], 
             FrontFaceOpacity -> 1, GraphicsColor -> GrayLevel[0], PointSize -> 
             Absolute[3], Thickness -> Medium, Opacity -> 1, DrawEdges -> 
             False, StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 
             10, FontWeight -> "Plain", FontColor -> GrayLevel[0], 
             FontOpacity -> 1, $CellContext`BackFaceColor -> 
             GrayLevel[0], $CellContext`StripStyleOnPaste -> 
             False, $CellContext`BackFaceOpacity -> 1], 
            Cell[
             StyleData[
             "TitleGraphic", "Slideshow Working", StyleDefinitions -> 
              StyleData["TitelGraphic", "SlideShow"]]], 
            Cell[
             StyleData[
             "TitleGraphic", "Slideshow Presentation", StyleDefinitions -> 
              StyleData["WolframULogo", "Slideshow Working"]]], 
            Cell[
             StyleData[
             "TitleGraphic", "Scrolling Presentation", StyleDefinitions -> 
              StyleData["WolframULogo", "Slideshow Working"]], 
             CellFrameLabels -> {{None, None}, {None, None}}]}, Open]]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell["Section", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], CellFrame -> {{0, 0}, {0, 0}}, 
             ShowGroupOpener -> "Inline", CellMargins -> {{120, 0}, {0, 50}}, 
             FontFamily -> "Source Sans Pro", FontSize -> 70, FontWeight -> 
             "Regular", FontSlant -> "Plain", FontTracking -> -0.5, 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
            Cell[
             StyleData["Section", "SlideShow"], CellFrame -> {{0, 0}, {0, 0}},
              ShowGroupOpener -> "Inline", CellMargins -> {{120, 0}, {0, 50}},
              LineSpacing -> {1, 2}, FontFamily -> "Source Sans Pro", 
             FontSize -> 70, FontWeight -> "Regular", FontSlant -> "Plain", 
             FontTracking -> -0.5, 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
            Cell[
             StyleData[
             "Section", "Slideshow Working", StyleDefinitions -> 
              StyleData["Section", "SlideShow"]]], 
            Cell[
             StyleData[
             "Section", "Slideshow Presentation", StyleDefinitions -> 
              StyleData["Section", "SlideShow"]]], 
            Cell[
             StyleData[
             "Section", "Scrolling Presentation", StyleDefinitions -> 
              StyleData["Section", "SlideShow"]], 
             CellFrameLabels -> {{None, None}, {None, None}}]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], ShowGroupOpener -> "Inline", 
             CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> 
             "Source Sans Pro", FontSize -> 40, FontWeight -> "Regular", 
             FontSlant -> "Plain", 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> 
             RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
            Cell[
             StyleData["Subsection", "SlideShow"], ShowGroupOpener -> 
             "Inline", CellMargins -> {{120, 0}, {0, 40}}, 
             LineSpacing -> {1, 2}, FontFamily -> "Source Sans Pro", FontSize -> 
             40, FontWeight -> "Regular", FontSlant -> "Plain", 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> 
             RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
            Cell[
             StyleData[
             "Subsection", "Slideshow Working", StyleDefinitions -> 
              StyleData["Subsection", "SlideShow"]]], 
            Cell[
             StyleData[
             "Subsection", "Slideshow Presentation", StyleDefinitions -> 
              StyleData["Subsection", "Slideshow Working"]]], 
            Cell[
             StyleData[
             "Subsection", "Scrolling Presentation", StyleDefinitions -> 
              StyleData["Subsection", "Slideshow Working"]]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], ShowGroupOpener -> "Inline", 
             CellMargins -> {{120, 0}, {0, 40}}, FontFamily -> 
             "Source Sans Pro", FontSize -> 30, FontWeight -> "Regular", 
             FontSlant -> "Plain", 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
            Cell[
             StyleData["Subsubsection", "SlideShow"], ShowGroupOpener -> 
             "Inline", CellMargins -> {{120, 0}, {0, 40}}, 
             LineSpacing -> {1, 2}, FontFamily -> "Source Sans Pro", FontSize -> 
             30, FontWeight -> "Regular", FontSlant -> "Plain", 
             PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}, 
             FontColor -> RGBColor[1., 0.42745098039215684`, 0.]], 
            Cell[
             StyleData[
             "Subsubsection", "Slideshow Working", StyleDefinitions -> 
              StyleData["Subsubsection", "SlideShow"]]], 
            Cell[
             StyleData[
             "Subsubsection", "Slideshow Presentation", StyleDefinitions -> 
              StyleData["Subsubsection", "Slideshow Working"]]], 
            Cell[
             StyleData[
             "Subsubsection", "Scrolling Presentation", StyleDefinitions -> 
              StyleData["Subsubsection", "Slideshow Working"]]]}, Open]]}, 
        Open]]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
      "Styles for Body Content", "Section", 
       CellChangeTimes -> {{3.727532504641029*^9, 3.727532505736285*^9}}], 
      Cell[
       StyleData["EndOfSlide"], CellFrame -> {{False, False}, {False, True}}, 
       ShowCellBracket -> False, CellMargins -> {{120, 0}, {100, 15}}, 
       CellFrameColor -> GrayLevel[0.85]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Text"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
          "Text", MenuSortingValue -> 1400, MenuCommandKey :> "7", FontFamily -> 
          "Source Sans Pro", FontSize -> 15, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData["Text", "SlideShow"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
          "Text", MenuSortingValue -> 1400, MenuCommandKey :> "7", FontFamily -> 
          "Source Sans Pro", FontSize -> 22, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData[
          "Text", "Slideshow Working", StyleDefinitions -> 
           StyleData["Text", "SlideShow"]]], 
         Cell[
          StyleData[
          "Text", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Text", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Text", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Text", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["CodeText"], CellMargins -> {{120, 0}, {0, 15}}, 
          LineSpacing -> {1, 3}, TabSpacings -> {2.5}, FontFamily -> 
          "Source Sans Pro", FontSize -> 15, FontWeight -> "Regular", 
          FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData["CodeText", "SlideShow"], 
          CellMargins -> {{120, 0}, {0, 15}}, LineSpacing -> {1, 3}, 
          TabSpacings -> {2.5}, FontFamily -> "Source Sans Pro", FontSize -> 
          22, FontWeight -> "Regular", FontSlant -> "Plain", 
          PrivateFontOptions -> {"FontPostScriptName" -> "Automatic"}], 
         Cell[
          StyleData[
          "CodeText", "Slideshow Working", StyleDefinitions -> 
           StyleData["CodeText", "SlideShow"]]], 
         Cell[
          StyleData[
          "CodeText", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["CodeText", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "CodeText", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["CodeText", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Note"], 
          CellMargins -> {{
            0.15 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
             FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {10, 10}}, 
          CellOpen -> True, LineSpacing -> {1, 3}, CounterIncrements -> 
          "Note", MenuSortingValue -> 8, FontFamily -> "Source Sans Pro", 
          FontSize -> 12, FontSlant -> "Italic", Background -> 
          GrayLevel[0.85]], 
         Cell[
          StyleData["Note", "SlideShow"], 
          CellMargins -> {{
            0.15 FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}], 0.03 
             FrontEnd`AbsoluteCurrentValue[{WindowSize, 1}]}, {10, 10}}, 
          CellOpen -> False, 
          HyphenationOptions -> {"HyphenationCharacter" -> "-"}, 
          ParagraphSpacing -> {0, 6}, ParagraphIndent -> -10, 
          StyleMenuListing -> None, FontSize -> 18], 
         Cell[
          StyleData[
          "Note", "Slideshow Working", StyleDefinitions -> 
           StyleData["Note"]]], 
         Cell[
          StyleData[
          "Note", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Note", "SlideShow"]]], 
         Cell[
          StyleData[
          "Note", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Note", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Item"], CellDingbat -> 
          StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
            RGBColor[1., 0.42745098039215684`, 0.]], 
          CellMargins -> {{140, 0}, {0, 15}}], 
         Cell[
          StyleData["Item", "SlideShow"], CellMargins -> {{140, 0}, {0, 15}}, 
          CellFrameLabelMargins -> 10, FontSize -> 22], 
         Cell[
          StyleData[
          "Item", "Slideshow Working", StyleDefinitions -> 
           StyleData["Item", "SlideShow"]]], 
         Cell[
          StyleData[
          "Item", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Item", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Item", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Item", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ItemParagraph"], CellMargins -> {{140, 0}, {0, 15}}, 
          StyleKeyMapping -> {"Tab" -> "SubitemParagraph"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          DefaultNewCellStyle -> "Item", MenuSortingValue -> 1600, FontFamily -> 
          Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 14, 
          FontColor -> Dynamic[
            FrontEnd`CurrentValue[{StyleHints, "ColorSet", "Text1"}], 
            None], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ItemParagraph", "SlideShow"], ShowGroupOpener -> False, 
          CellMargins -> {{140, 0}, {0, 15}}, FontSize -> 22], 
         Cell[
          StyleData[
          "ItemParagraph", "Slideshow Working", StyleDefinitions -> 
           StyleData["ItemParagraph", "SlideShow"]]], 
         Cell[
          StyleData[
          "ItemParagraph", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["ItemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ItemParagraph", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["ItemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData["ItemParagraph", "Printout"], 
          CellMargins -> {{140, Inherited}, {Inherited, 0.5 Inherited}}]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Subitem"], CellDingbat -> 
          StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
            RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
          CellMargins -> {{160, 0}, {0, 15}}], 
         Cell[
          StyleData["Subitem", "SlideShow"], 
          CellMargins -> {{160, 0}, {0, 15}}, CellFrameLabelMargins -> 10, 
          FontSize -> 22], 
         Cell[
          StyleData[
          "Subitem", "Slideshow Working", StyleDefinitions -> 
           StyleData["Subitem", "SlideShow"]]], 
         Cell[
          StyleData[
          "Subitem", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Subitem", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Subitem", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Subitem", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SubitemParagraph"], CellMargins -> {{160, 0}, {0, 15}}, 
          StyleKeyMapping -> {
           "Tab" -> "SubsubitemParagraph", "Backspace" -> 
            "ItemParagraph", $CellContext`KeyEvent[
             "Tab", $CellContext`Modifiers -> {$CellContext`Shift}] -> 
            "ItemParagraph"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15100}, 
          CellFrameLabelMargins -> 4, DefaultNewCellStyle -> "Subitem", 
          MenuSortingValue -> 1610, FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 13.5,
           FontColor -> Dynamic[
            
            CurrentValue[{
             StyleHints, "ColorSet", 
              "Text1"}]], $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["SubitemParagraph", "SlideShow"], 
          CellMargins -> {{160, 0}, {0, 15}}, FontSize -> 22], 
         Cell[
          StyleData[
          "SubitemParagraph", "Slideshow Working", StyleDefinitions -> 
           StyleData["SubitemParagraph", "SlideShow"]]], 
         Cell[
          StyleData[
          "SubitemParagraph", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["SubitemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "SubitemParagraph", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["SubitemParagraph", "Slideshow Working"]]], 
         Cell[
          StyleData["SubitemParagraph", "Printout"], 
          CellMargins -> {{160, Inherited}, {Inherited, 0.1 Inherited}}]}, 
        Open]], 
      Cell[
       StyleData["Subsubitem"], CellMargins -> {{180, 0}, {0, 15}}], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["ItemNumbered"], CellDingbat -> Cell[
            TextData[{
              CounterBox["ItemNumbered"], "."}], FontWeight -> "Bold"], 
          CellMargins -> {{145, 0}, {0, 15}}, 
          StyleKeyMapping -> {"Tab" -> "SubitemNumbered"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          CellFrameLabelMargins -> 4, CounterIncrements -> "ItemNumbered", 
          CounterAssignments -> {{"SubitemNumbered", 0}, {
            "SubsubitemNumbered", 0}}, MenuSortingValue -> 1630, FontFamily -> 
          "Source Sans Pro", FontSize -> 
          15, $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["ItemNumbered", "SlideShow"], 
          CellMargins -> {{145, 0}, {0, 15}}, CellFrameLabelMargins -> 6, 
          FontSize -> 22], 
         Cell[
          StyleData[
          "ItemNumbered", "Slideshow Working", StyleDefinitions -> 
           StyleData["ItemNumbered", "SlideShow"]]], 
         Cell[
          StyleData[
          "ItemNumbered", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["ItemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ItemNumbered", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["ItemNumbered", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["SubitemNumbered"], CellDingbat -> Cell[
            TextData[{
              CounterBox["ItemNumbered"], ".", 
              CounterBox["SubitemNumbered"], "."}], FontWeight -> "Bold"], 
          CellMargins -> {{180, 0}, {0, 15}}, 
          StyleKeyMapping -> {
           "Tab" -> "SubsubitemNumbered", "Backspace" -> 
            "ItemNumbered", $CellContext`KeyEvent[
             "Tab", $CellContext`Modifiers -> {$CellContext`Shift}] -> 
            "ItemNumbered"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15100}, 
          CellFrameLabelMargins -> 4, DefaultNewCellStyle -> "Item", 
          CounterIncrements -> "SubitemNumbered", 
          CounterAssignments -> {{"SubsubitemNumbered", 0}}, MenuSortingValue -> 
          1640, FontFamily -> Dynamic[
            CurrentValue[{StyleHints, "FontSet", "Text1"}]], FontSize -> 
          13.5, $CellContext`ReturnCreatesNewCell -> True], 
         Cell[
          StyleData["SubitemNumbered", "SlideShow"], 
          CellMargins -> {{180, 0}, {0, 15}}, CellFrameLabelMargins -> 6, 
          CellChangeTimes -> {{3.772393378081081*^9, 3.772393382879437*^9}}, 
          FontFamily -> "Source Sans Pro", FontSize -> 22], 
         Cell[
          StyleData[
          "SubitemNumbered", "Slideshow Working", StyleDefinitions -> 
           StyleData["SubitemNumbered", "SlideShow"]]], 
         Cell[
          StyleData[
          "SubitemNumbered", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["SubitemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "SubitemNumbered", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["SubitemNumbered", "Slideshow Working"]]], 
         Cell[
          StyleData["SubitemNumbered", "Printout"], 
          CellMargins -> {{180, Inherited}, {Inherited, Inherited}}]}, Open]], 
      Cell[
       StyleData["Graphics"], CellMargins -> {{120, Inherited}, {15, 15}}, 
       CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False, 
       GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
       False, DefaultFormatType -> DefaultOutputFormatType, ContextMenu -> 
       FEPrivate`FrontEndResource["ContextMenus", "Graphics"], 
       AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, 
       LanguageCategory -> "NaturalLanguage", FormatType -> StandardForm, 
       ShowStringCharacters -> False, NumberMarks -> False, CounterIncrements -> 
       "Graphics", ImageMargins -> {{43, Inherited}, {Inherited, 0}}, 
       Arrowheads -> 0.04, Dashing -> None, CapForm -> "Square", 
       JoinForm -> {"Miter", 3.25}, LineColor -> GrayLevel[0], LineOpacity -> 
       1, EdgeColor -> GrayLevel[0], EdgeOpacity -> 1, EdgeThickness -> 
       Medium, EdgeDashing -> None, EdgeCapForm -> "Square", 
       EdgeJoinForm -> {"Miter", 3.25}, FrontFaceColor -> GrayLevel[0], 
       FrontFaceOpacity -> 1, GraphicsColor -> GrayLevel[0], PointSize -> 
       Absolute[3], Thickness -> Medium, Opacity -> 1, DrawEdges -> False, 
       StyleMenuListing -> None, FontFamily -> "Arial", FontSize -> 10, 
       FontWeight -> "Plain", FontColor -> GrayLevel[0], FontOpacity -> 
       1, $CellContext`BackFaceColor -> 
       GrayLevel[0], $CellContext`StripStyleOnPaste -> 
       False, $CellContext`BackFaceOpacity -> 1], 
      Cell[
       StyleData["Hyperlink"], FontColor -> 
       RGBColor[0.269993, 0.308507, 0.6]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["KeyEvent"], CellFrame -> {{1, 1}, {1, 1}}, 
          CellFrameMargins -> {{2, 2}, {2, 2}}, CellFrameColor -> 
          GrayLevel[0.8], FontFamily -> "Source Sans Pro", FontColor -> 
          GrayLevel[0.360784], Background -> GrayLevel[0.964706]], 
         Cell[
          StyleData["KeyEvent", "SlideShow"]], 
         Cell[
          StyleData[
          "KeyEvent", "Slideshow Working", StyleDefinitions -> 
           StyleData["KeyEvent", "SlideShow"]]], 
         Cell[
          StyleData[
          "KeyEvent", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["KeyEvent", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "KeyEvent", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["KeyEvent", "Slideshow Working"]]]}, Open]]}, Open]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Input and Output Cells", "Section"], 
      Cell[
       StyleData["WolframAlphaShort"], CellMargins -> {{120, 0}, {0, 15}}, 
       MenuSortingValue -> 10000], 
      Cell[
       StyleData["WolframAlphaLong"], CellMargins -> {{117, 0}, {0, 15}}, 
       MenuSortingValue -> 10000], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Input"], CellMargins -> {{120, 10}, {5, 20}}, 
          StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
          FontSize -> 13], 
         Cell[
          StyleData["Input", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 20}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Input", "Slideshow Working", StyleDefinitions -> 
           StyleData["Input", "SlideShow"]]], 
         Cell[
          StyleData[
          "Input", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Input", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Program"], CellMargins -> {{120, 10}, {5, 20}}, 
          MenuSortingValue -> 10000, FontSize -> 16], 
         Cell[
          StyleData["Program", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 20}}, FontSize -> 20], 
         Cell[
          StyleData[
          "Program", "Slideshow Working", StyleDefinitions -> 
           StyleData["Program", "SlideShow"]]], 
         Cell[
          StyleData[
          "Program", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Program", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Program", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Program", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "ExperimentalInput", StyleDefinitions -> StyleData["Input"]], 
          CellFrame -> True, CellMargins -> {{120, 10}, {5, 20}}, 
          StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
          CellFrameColor -> 
          RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               InterpretationBox[
                Cell[
                 BoxData[
                  RotationBox[
                  "Experimental", BoxRotation -> 1.5707963267948966`]], 
                 "Text", LineColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 FrontFaceColor -> 
                 RGBColor[
                  1., 0.592156862745098, 
                   0.10196078431372549`], $CellContext`BackFaceColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 GraphicsColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`], 
                 FontSize -> 10, FontColor -> 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`]], 
                TextCell[
                 Rotate["Experimental", 90 Degree], "Text", 10, 
                 RGBColor[1., 0.592156862745098, 0.10196078431372549`]]]]], 
             None}, {None, None}}, FontSize -> 13], 
         Cell[
          StyleData["ExperimentalInput", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 20}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "ExperimentalInput", "Slideshow Working", StyleDefinitions -> 
           StyleData["Input", "SlideShow"]]], 
         Cell[
          StyleData[
          "ExperimentalInput", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "ExperimentalInput", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Input", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["InputOnly"], CellMargins -> {{120, 10}, {5, 10}}, 
          FontSize -> 13], 
         Cell[
          StyleData["InputOnly", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 10}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}], 
         Cell[
          StyleData[
          "InputOnly", "Slideshow Working", StyleDefinitions -> 
           StyleData["InputOnly", "SlideShow"]]], 
         Cell[
          StyleData[
          "InputOnly", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["InputOnly", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "InputOnly", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["InputOnly", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Code"], CellMargins -> {{120, 10}, {5, 10}}], 
         Cell[
          StyleData["Code", "SlideShow"], CellMargins -> {{120, 10}, {5, 10}},
           LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Code", "Slideshow Working", StyleDefinitions -> 
           StyleData["Code", "SlideShow"]]], 
         Cell[
          StyleData[
          "Code", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Code", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Code", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Code", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Output"], CellMargins -> {{120, 10}, {5, 10}}, FontSize -> 
          13], 
         Cell[
          StyleData["Output", "SlideShow"], 
          CellMargins -> {{120, 10}, {5, 10}}, 
          LinebreakAdjustments -> {1, 2., 12., 1., 1.}, FontSize -> 20], 
         Cell[
          StyleData[
          "Output", "Slideshow Working", StyleDefinitions -> 
           StyleData["Output", "SlideShow"]]], 
         Cell[
          StyleData[
          "Output", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["Output", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "Output", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["Output", "Slideshow Working"]]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["Separator"], CellFrame -> {{False, False}, {1.5, False}},
           CellMargins -> {{120, 0}, {0, 0}}, CellFrameColor -> 
          GrayLevel[0.8], MenuSortingValue -> 10000], 
         Cell[
          StyleData[
          "SlideShowNavigationBar", "Slideshow Presentation", 
           StyleDefinitions -> StyleData["SlideShowNavigationBar"]], 
          MenuSortingValue -> 10000, Background -> None]}, Open]]}, Open]]}, 
  Visible -> False, FrontEndVersion -> 
  "12.2 for Mac OS X x86 (64-bit) (December 12, 2020)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"551ffd53-a006-4f12-89e8-1ac686b4a02c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[615, 23, 136, 2, 5, "SlideShowNavigationBar",ExpressionUUID->"f655b11a-8e79-4531-a47c-518fd5684ba0",
   CellTags->"SlideShowHeader"],
  Cell[17197, 313, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"5e1b7bef-b164-4a48-99aa-6bd141aae90a",
   CellTags->"SlideShowHeader"],
  Cell[18801, 358, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"8a9d8598-8309-414d-af67-d27cc434210a",
   CellTags->"SlideShowHeader"],
  Cell[20081, 395, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9cec99c9-eaff-499a-a56d-d01580d0c736",
   CellTags->"SlideShowHeader"],
  Cell[23726, 514, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"1bdcd0a8-6bfe-42eb-84f7-a69fe91681f5",
   CellTags->"SlideShowHeader"],
  Cell[28901, 670, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"2575d893-5755-440c-90aa-37e71f39d38e",
   CellTags->"SlideShowHeader"],
  Cell[33086, 800, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9ce53682-4176-4050-9628-719b6bd6da17",
   CellTags->"SlideShowHeader"],
  Cell[36159, 896, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9dc5aab8-890f-4c9f-aa16-a2e46cecaf98",
   CellTags->"SlideShowHeader"],
  Cell[37620, 939, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"95b4fa32-e4a3-43b7-8a66-863a0ea92fe7",
   CellTags->"SlideShowHeader"],
  Cell[41940, 1064, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"de6f74d7-7579-4404-9828-76bdebac0632",
   CellTags->"SlideShowHeader"],
  Cell[49956, 1287, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"719583de-4f5e-454e-b5e5-7880a749034b",
   CellTags->"SlideShowHeader"],
  Cell[53309, 1410, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"74757f48-3053-4a6d-aab8-18ebbeafba40",
   CellTags->"SlideShowHeader"],
  Cell[56856, 1525, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"509be803-9a38-4a21-9e3b-1305c5768d79",
   CellTags->"SlideShowHeader"],
  Cell[60825, 1653, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"28da5543-6600-41b0-ac87-178009490de1",
   CellTags->"SlideShowHeader"],
  Cell[67208, 1861, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"159aa23e-4beb-40ff-8b26-b38d67b9cab4",
   CellTags->"SlideShowHeader"],
  Cell[68857, 1917, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"09667d6f-2474-4be0-a2aa-665244744e7f",
   CellTags->"SlideShowHeader"],
  Cell[71735, 2003, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"cc695b10-5885-4d72-9fd6-d5ea573ec45d",
   CellTags->"SlideShowHeader"],
  Cell[77048, 2165, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"01f524f3-db14-4236-b760-53465f589ca3",
   CellTags->"SlideShowHeader"],
  Cell[86158, 2443, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"cb226865-4947-410b-add2-4f55d984f482",
   CellTags->"SlideShowHeader"],
  Cell[96293, 2715, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"bce6d04e-bda2-4c2f-9aa6-dc871bf95290",
   CellTags->"SlideShowHeader"],
  Cell[106242, 3033, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"34e49375-e900-4629-b4fd-2640e88cd294",
   CellTags->"SlideShowHeader"],
  Cell[111429, 3196, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"c7e1e7ce-db45-40d9-aded-efbcb36f69cd",
   CellTags->"SlideShowHeader"],
  Cell[118956, 3428, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"5839ccb4-5145-42ba-bd72-fc04ab9a1974",
   CellTags->"SlideShowHeader"],
  Cell[120106, 3468, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"503f19e9-c6d0-4e34-a21c-98328ac6804b",
   CellTags->"SlideShowHeader"],
  Cell[122580, 3544, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"a8ad3d41-6bd5-412c-93d7-bb333acd8f47",
   CellTags->"SlideShowHeader"],
  Cell[130313, 3786, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b5bcc2aa-c5b4-4036-ae5b-2347c8d7148e",
   CellTags->"SlideShowHeader"],
  Cell[150511, 4287, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"bb9ca9cf-0260-442d-8bda-4ab6df532941",
   CellTags->"SlideShowHeader"],
  Cell[155425, 4441, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"f9480773-d1ac-4592-be0b-20256affe867",
   CellTags->"SlideShowHeader"],
  Cell[161087, 4623, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"bfb5a63f-6dc9-427f-b7cb-7868b6cd0105",
   CellTags->"SlideShowHeader"],
  Cell[166763, 4813, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"a70f0acb-165c-4d59-86d9-0f1423b0ca1f",
   CellTags->"SlideShowHeader"],
  Cell[174670, 5053, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"47c635df-5d13-4e51-b9b7-4005d28ee7ee",
   CellTags->"SlideShowHeader"],
  Cell[192322, 5564, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"5e53628d-ade3-4373-82db-4684c2ceff51",
   CellTags->"SlideShowHeader"]},
 "Overview"->{
  Cell[18094, 337, 163, 2, 35, "Item",ExpressionUUID->"fba3bd14-6e4b-4dd5-b529-c707fe1cd3a9",
   CellTags->"Overview"],
  Cell[18260, 341, 158, 2, 35, "Item",ExpressionUUID->"64b6eb60-99e8-4418-add4-6827421181a9",
   CellTags->"Overview"],
  Cell[18421, 345, 158, 2, 35, "Item",ExpressionUUID->"aba4b964-005b-4f07-9fbb-223e6b31668d",
   CellTags->"Overview"],
  Cell[18582, 349, 158, 2, 35, "Item",ExpressionUUID->"65fba048-9f15-4bdc-bcb0-cf4559a72102",
   CellTags->"Overview"]},
 "Assignments and Definitions"->{
  Cell[19302, 371, 215, 4, 35, "Item",ExpressionUUID->"a3b8cb25-8b5d-4528-bf7c-371641113c47",
   CellTags->"Assignments and Definitions"],
  Cell[19520, 377, 219, 4, 35, "Item",ExpressionUUID->"38cd6d1e-ff96-40ab-bf86-dc93a1989bfc",
   CellTags->"Assignments and Definitions"],
  Cell[19742, 383, 210, 4, 35, "Item",ExpressionUUID->"3d46425c-ead9-4726-b471-184cbc36abf1",
   CellTags->"Assignments and Definitions"],
  Cell[20508, 408, 212, 6, 35, "Text",ExpressionUUID->"871d0776-be13-4300-b11f-750362dc6649",
   CellTags->"Assignments and Definitions"],
  Cell[20723, 416, 610, 17, 35, "CodeText",ExpressionUUID->"d58dd31b-f72b-46cb-9748-3eeceee47c26",
   CellTags->"Assignments and Definitions"],
  Cell[21336, 435, 151, 4, 42, "Input",ExpressionUUID->"e5f4e12a-bce6-42a1-be6e-3ffefc7a3a06",
   CellTags->"Assignments and Definitions"],
  Cell[21490, 441, 668, 17, 35, "CodeText",ExpressionUUID->"b562e99e-fc2d-4aa2-89a9-f7fa3cfc49ac",
   CellTags->"Assignments and Definitions"],
  Cell[22161, 460, 223, 7, 42, "Input",ExpressionUUID->"84c18bc6-01b8-4dfd-aee2-94b27418ff5b",
   CellTags->"Assignments and Definitions"],
  Cell[22387, 469, 360, 8, 58, "CodeText",ExpressionUUID->"06139443-e0b2-4459-b83e-a327b3278c0e",
   CellTags->"Assignments and Definitions"],
  Cell[22750, 479, 127, 3, 42, "Input",ExpressionUUID->"7c70cf30-2167-426a-b46d-404479a5f67a",
   CellTags->"Assignments and Definitions"],
  Cell[22880, 484, 491, 13, 35, "CodeText",ExpressionUUID->"4dad9ab9-2f1a-4d99-aae9-7218bf7eeac8",
   CellTags->"Assignments and Definitions"],
  Cell[23374, 499, 223, 7, 42, "Input",ExpressionUUID->"cccc8aa2-ca0d-4590-8f6c-3ba5e1c70009",
   CellTags->"Assignments and Definitions"],
  Cell[24220, 527, 259, 11, 35, "Text",ExpressionUUID->"655c1944-f9aa-4382-9adb-740b4464f8a1",
   CellTags->"Assignments and Definitions"],
  Cell[24482, 540, 476, 13, 35, "Item",ExpressionUUID->"00c388a7-3139-4b25-b88c-1ddd05ce8c56",
   CellTags->"Assignments and Definitions"],
  Cell[24961, 555, 480, 12, 35, "Item",ExpressionUUID->"f0f816e6-13c9-4f31-8ff9-e125699c408c",
   CellTags->"Assignments and Definitions"],
  Cell[25444, 569, 425, 9, 35, "CodeText",ExpressionUUID->"79c78257-1a06-4b8e-be0d-cea170f38e66",
   CellTags->"Assignments and Definitions"],
  Cell[25872, 580, 187, 5, 42, "Input",ExpressionUUID->"913c7b01-187c-455b-8da4-d0a5dd0772dc",
   CellTags->"Assignments and Definitions"],
  Cell[26062, 587, 188, 5, 42, "Input",ExpressionUUID->"ec68d03e-ba10-4cf0-9416-d1190b6e3325",
   CellTags->"Assignments and Definitions"],
  Cell[26253, 594, 608, 14, 35, "Text",ExpressionUUID->"8243e31b-3734-4d12-ac9d-29be891cf2c9",
   CellTags->"Assignments and Definitions"],
  Cell[26864, 610, 683, 14, 81, "Text",ExpressionUUID->"f05e34ef-fca6-4b9c-abeb-8daf2aabdced",
   CellTags->"Assignments and Definitions"],
  Cell[27550, 626, 349, 7, 35, "CodeText",ExpressionUUID->"d3102f20-3e5e-42b3-af1c-ba4df049f630",
   CellTags->"Assignments and Definitions"],
  Cell[27902, 635, 211, 6, 42, "Input",ExpressionUUID->"5ecf312c-d5d9-44a7-b9be-7e80cf396e73",
   CellTags->"Assignments and Definitions"],
  Cell[28116, 643, 211, 6, 42, "Input",ExpressionUUID->"d205fb66-bfdb-40d4-9ab0-64b9a08d7120",
   CellTags->"Assignments and Definitions"],
  Cell[28330, 651, 228, 4, 35, "CodeText",ExpressionUUID->"b8c4e1e4-0959-440c-9bdb-475d1297fc3d",
   CellTags->"Assignments and Definitions"],
  Cell[28561, 657, 211, 5, 42, "Input",ExpressionUUID->"d1969b1c-fc26-496a-a2d5-c3c51d4cac72",
   CellTags->"Assignments and Definitions"],
  Cell[29390, 683, 317, 7, 58, "Text",ExpressionUUID->"2b7a1451-09a5-4501-a5a2-055f26ace25c",
   CellTags->"Assignments and Definitions"],
  Cell[29710, 692, 315, 7, 58, "Text",ExpressionUUID->"6b1bc352-3ab9-4056-8d5e-2c24b3613870",
   CellTags->"Assignments and Definitions"],
  Cell[30028, 701, 297, 7, 58, "Text",ExpressionUUID->"1ce27c77-be1f-416a-9f5a-a6e2e1d3fedc",
   CellTags->"Assignments and Definitions"],
  Cell[30328, 710, 652, 14, 58, "CodeText",ExpressionUUID->"665bff5b-977c-442b-800f-a4f71ac0f26b",
   CellTags->"Assignments and Definitions"],
  Cell[30983, 726, 323, 10, 45, "Input",ExpressionUUID->"7e681d16-1f8a-4cdf-be44-46551bd9c2f8",
   CellTags->"Assignments and Definitions"],
  Cell[31309, 738, 243, 4, 35, "CodeText",ExpressionUUID->"92ca9513-6b09-4322-b634-c3d662405250",
   CellTags->"Assignments and Definitions"],
  Cell[31555, 744, 325, 10, 45, "Input",ExpressionUUID->"f07c1035-b103-4e1c-9557-acae4efeed02",
   CellTags->"Assignments and Definitions"],
  Cell[31883, 756, 157, 4, 42, "Input",ExpressionUUID->"520451c9-ae2c-4e16-8f6c-967237ab1040",
   CellTags->"Assignments and Definitions"],
  Cell[32043, 762, 184, 5, 42, "Input",ExpressionUUID->"d2fa5e6c-b76f-401f-8550-48558f0a6677",
   CellTags->"Assignments and Definitions"],
  Cell[33546, 813, 243, 4, 35, "Text",ExpressionUUID->"1fb5faf3-4ded-418e-9a08-8fcab7dd19af",
   CellTags->"Assignments and Definitions"],
  Cell[33792, 819, 277, 8, 42, "Input",ExpressionUUID->"4f0c932f-9ccb-41fc-b48a-1d0b8984e64f",
   CellTags->"Assignments and Definitions"],
  Cell[34072, 829, 267, 6, 35, "CodeText",ExpressionUUID->"11cc1172-7f68-4d77-b58a-f1d5d58465bb",
   CellTags->"Assignments and Definitions"],
  Cell[34342, 837, 156, 4, 42, "Input",ExpressionUUID->"b09f3710-5d57-4fd9-9186-7afe73dc1e84",
   CellTags->"Assignments and Definitions"],
  Cell[34501, 843, 854, 25, 58, "Text",ExpressionUUID->"04df8c0e-61e9-41f8-9cca-1ff799b345e3",
   CellTags->"Assignments and Definitions"],
  Cell[35358, 870, 672, 18, 35, "Text",ExpressionUUID->"59767219-1860-494b-addd-b90f83ca97c7",
   CellTags->"Assignments and Definitions"]},
 "Procedural Programming"->{
  Cell[36655, 909, 209, 4, 35, "Item",ExpressionUUID->"35524aff-91ed-4103-870e-b135c52bc1ec",
   CellTags->"Procedural Programming"],
  Cell[36867, 915, 198, 4, 35, "Item",ExpressionUUID->"bf695b03-61c4-42a0-ba9d-3c3023d97d72",
   CellTags->"Procedural Programming"],
  Cell[37068, 921, 253, 5, 35, "Item",ExpressionUUID->"13597ebb-75fc-436a-966c-ef5dbab5f4f7",
   CellTags->"Procedural Programming"],
  Cell[37324, 928, 247, 5, 35, "Item",ExpressionUUID->"6dffacae-7a4c-4673-890b-ecee8344b7a8",
   CellTags->"Procedural Programming"],
  Cell[38060, 952, 332, 7, 58, "Text",ExpressionUUID->"3dd925a6-df4f-406c-8e9d-1b3a7e561e85",
   CellTags->"Procedural Programming"],
  Cell[38395, 961, 347, 8, 35, "Text",ExpressionUUID->"3471edad-2ac2-4015-a28a-412bf2c0e896",
   CellTags->"Procedural Programming"],
  Cell[38745, 971, 316, 8, 35, "CodeText",ExpressionUUID->"db1d86bc-ca73-4b3e-b840-4c2c34c3e5cb",
   CellTags->"Procedural Programming"],
  Cell[39064, 981, 928, 23, 94, "Input",ExpressionUUID->"d7630bb1-b000-4323-ab8a-b5b53802b2b5",
   CellTags->"Procedural Programming"],
  Cell[39995, 1006, 499, 10, 81, "Text",ExpressionUUID->"4cc430cb-899d-4396-ac9f-b7278b23165e",
   CellTags->"Procedural Programming"],
  Cell[40660, 1022, 467, 12, 35, "CodeText",ExpressionUUID->"a33387e4-495a-4e23-9d49-c655e34892a1",
   CellTags->"Procedural Programming"],
  Cell[41130, 1036, 526, 14, 106, "Input",ExpressionUUID->"a405f9ae-e269-4a7c-a689-41b13ae9836c",
   CellTags->"Procedural Programming"],
  Cell[41659, 1052, 151, 4, 42, "Input",ExpressionUUID->"5e152cac-48f1-43cf-99b5-9b571678d2b4",
   CellTags->"Procedural Programming"],
  Cell[42087, 1070, 201, 4, 139, "Section",ExpressionUUID->"a77c00f2-233b-4ea5-963b-7da798d8f60c",
   CellTags->"Procedural Programming"],
  Cell[42291, 1076, 824, 25, 58, "Text",ExpressionUUID->"2e0c3e6f-7f48-4ea5-8ff8-7b5383e1c762",
   CellTags->"Procedural Programming"],
  Cell[47336, 1202, 751, 21, 35, "CodeText",ExpressionUUID->"4b990410-ec6e-41ef-847c-70001c036d50",
   CellTags->"Procedural Programming"],
  Cell[48090, 1225, 219, 6, 42, "Input",ExpressionUUID->"557e5431-3091-4406-a355-06d95b099390",
   CellTags->"Procedural Programming"],
  Cell[48312, 1233, 257, 8, 42, "Input",ExpressionUUID->"85b62202-6006-4c89-b5bd-249dcbbedf56",
   CellTags->"Procedural Programming"],
  Cell[48572, 1243, 240, 4, 35, "CodeText",ExpressionUUID->"8446be08-a568-4c8a-8d0f-11c10cefed8e",
   CellTags->"Procedural Programming"],
  Cell[48815, 1249, 249, 7, 42, "Input",ExpressionUUID->"b1ef4ae9-1782-4da4-a34c-8f287aa929b7",
   CellTags->"Procedural Programming"],
  Cell[49067, 1258, 161, 4, 42, "Input",ExpressionUUID->"263b6844-6a8b-40a5-ad0c-0aa72c988ae4",
   CellTags->"Procedural Programming"],
  Cell[50103, 1293, 244, 5, 230, "Section",ExpressionUUID->"b714ac71-f0aa-4265-a64b-47f43bc2c5ff",
   CellTags->"Procedural Programming"],
  Cell[50350, 1300, 189, 5, 35, "Text",ExpressionUUID->"9acb43cb-fced-4b2d-915d-2bb9cfa91b02",
   CellTags->"Procedural Programming"],
  Cell[50542, 1307, 305, 9, 35, "Item",ExpressionUUID->"9b950539-1b8c-46df-8511-dfd38fc819fc",
   CellTags->"Procedural Programming"],
  Cell[50850, 1318, 462, 14, 35, "Item",ExpressionUUID->"6990a760-7c38-476d-b59d-63ae2cce81f9",
   CellTags->"Procedural Programming"],
  Cell[51337, 1336, 187, 4, 35, "Item",ExpressionUUID->"215cbba3-f7ae-4f8d-aa92-463605261ff2",
   CellTags->"Procedural Programming"],
  Cell[51527, 1342, 744, 27, 33, "Subitem",ExpressionUUID->"7f123810-295d-4e25-ab3f-6f85bd0661b4",
   CellTags->"Procedural Programming"],
  Cell[52308, 1374, 236, 4, 35, "Item",ExpressionUUID->"53c2c620-2175-4082-831b-819bc1627a8b",
   CellTags->"Procedural Programming"],
  Cell[52547, 1380, 620, 21, 33, "Subitem",ExpressionUUID->"ed30b51b-cc81-47c7-a4b9-202efc679ff5",
   CellTags->"Procedural Programming"],
  Cell[53456, 1416, 209, 4, 139, "Section",ExpressionUUID->"d920c804-7970-465c-8263-5971e870eb78",
   CellTags->"Procedural Programming"],
  Cell[53668, 1422, 567, 14, 58, "Text",ExpressionUUID->"be187282-15b6-477f-92de-2b8ddbea902d",
   CellTags->"Procedural Programming"],
  Cell[54238, 1438, 496, 15, 106, "Input",ExpressionUUID->"acbf57e2-6e06-4ea0-9791-fd3be54f4f30",
   CellTags->"Procedural Programming"],
  Cell[54737, 1455, 308, 7, 35, "CodeText",ExpressionUUID->"064520ab-4ec8-489c-abba-ebda0b9e3aae",
   CellTags->"Procedural Programming"],
  Cell[55048, 1464, 556, 16, 127, "Input",ExpressionUUID->"8401f89c-1baa-461f-8f0e-e216d92ce8de",
   CellTags->"Procedural Programming"],
  Cell[55607, 1482, 432, 11, 35, "CodeText",ExpressionUUID->"61c69596-3ed2-4a72-b978-0015f257276e",
   CellTags->"Procedural Programming"],
  Cell[56042, 1495, 152, 4, 42, "Input",ExpressionUUID->"bef51c61-c875-4eb0-9538-709955025a8e",
   CellTags->"Procedural Programming"],
  Cell[56197, 1501, 333, 9, 35, "CodeText",ExpressionUUID->"f3fdf67e-fc73-4fb4-bc94-b55b12299a97",
   CellTags->"Procedural Programming"],
  Cell[56533, 1512, 193, 5, 42, "Input",ExpressionUUID->"4025be61-e7cb-4a98-bea9-27f2046017aa",
   CellTags->"Procedural Programming"],
  Cell[57003, 1531, 207, 4, 230, "Section",ExpressionUUID->"d3d02f9a-cc94-47a6-abd4-08c9663fe78b",
   CellTags->"Procedural Programming"],
  Cell[57213, 1537, 200, 6, 35, "Text",ExpressionUUID->"643d550a-daf6-4d19-a3ef-c022f2b4eeff",
   CellTags->"Procedural Programming"],
  Cell[57416, 1545, 399, 9, 35, "CodeText",ExpressionUUID->"ec405718-e817-4071-add7-0068ea614494",
   CellTags->"Procedural Programming"],
  Cell[57818, 1556, 556, 16, 127, "Input",ExpressionUUID->"7c5ffe38-c62e-43c6-af95-f70739e6a18b",
   CellTags->"Procedural Programming"],
  Cell[58377, 1574, 404, 9, 35, "CodeText",ExpressionUUID->"41a7f6b2-c6e2-432e-9ac2-e04ef7b46258",
   CellTags->"Procedural Programming"],
  Cell[58784, 1585, 817, 22, 148, "Input",ExpressionUUID->"805ca13e-bd01-4c6b-8a2e-c026b1bfefde",
   CellTags->"Procedural Programming"],
  Cell[59604, 1609, 288, 7, 35, "CodeText",ExpressionUUID->"8ff12398-f559-4127-9b56-9191cf0fd1d3",
   CellTags->"Procedural Programming"],
  Cell[59895, 1618, 152, 4, 42, "Input",ExpressionUUID->"4e40b9d5-e73d-4bc0-9873-cd8bfe251091",
   CellTags->"Procedural Programming"],
  Cell[60050, 1624, 151, 4, 42, "Input",ExpressionUUID->"495faa3a-cb9d-4380-853b-5ed6f065ceef",
   CellTags->"Procedural Programming"],
  Cell[60204, 1630, 333, 9, 35, "CodeText",ExpressionUUID->"f4af14ff-dc9c-4961-8a90-3477cddf1334",
   CellTags->"Procedural Programming"],
  Cell[60540, 1641, 155, 4, 42, "Input",ExpressionUUID->"03e32f93-1a5f-4114-a6da-2da31b9ed891",
   CellTags->"Procedural Programming"],
  Cell[60972, 1659, 197, 4, 139, "Section",ExpressionUUID->"9f291494-483c-458b-bb8a-ed9d273b7340",
   CellTags->"Procedural Programming"],
  Cell[61172, 1665, 400, 10, 58, "Text",ExpressionUUID->"9462c3d6-b050-4a20-8ee9-b28eeef50142",
   CellTags->"Procedural Programming"],
  Cell[61575, 1677, 759, 19, 58, "CodeText",ExpressionUUID->"9834d53c-6211-4e77-9ee7-e925c8468fc1",
   CellTags->"Procedural Programming"],
  Cell[62337, 1698, 556, 16, 127, "Input",ExpressionUUID->"cb9c051a-24d3-4270-b32b-40734f793682",
   CellTags->"Procedural Programming"],
  Cell[62896, 1716, 478, 12, 58, "Text",ExpressionUUID->"781fa167-39d9-49a2-8076-ee6760cbfb8f",
   CellTags->"Procedural Programming"],
  Cell[63678, 1740, 413, 10, 35, "CodeText",ExpressionUUID->"11f5275b-e21d-45c6-b4d8-a31412bf78e7",
   CellTags->"Procedural Programming"],
  Cell[64094, 1752, 629, 18, 127, "Input",ExpressionUUID->"aa29308c-be68-4e2a-88cd-717302a5ca32",
   CellTags->"Procedural Programming"],
  Cell[64726, 1772, 465, 12, 35, "CodeText",ExpressionUUID->"b3e7d0ab-7f6b-4cfc-b3a0-be063aecba11",
   CellTags->"Procedural Programming"],
  Cell[65194, 1786, 152, 4, 42, "Input",ExpressionUUID->"7ef0f8e8-3938-4612-aba1-bfe01b6f6ba1",
   CellTags->"Procedural Programming"],
  Cell[65349, 1792, 151, 4, 42, "Input",ExpressionUUID->"bd134429-de2d-4ac2-9471-61710b9ead4e",
   CellTags->"Procedural Programming"],
  Cell[65503, 1798, 129, 3, 42, "Input",ExpressionUUID->"03d0bb4a-21da-4916-806b-cd4a8e1c8481",
   CellTags->"Procedural Programming"],
  Cell[65635, 1803, 238, 8, 35, "Text",ExpressionUUID->"e9ee2afb-4c18-4b78-898a-1d578ef44d2f",
   CellTags->"Procedural Programming"],
  Cell[65876, 1813, 257, 6, 35, "Text",ExpressionUUID->"f8e55fc6-c2f2-4a60-823f-ad5879b8814f",
   CellTags->"Procedural Programming"],
  Cell[66136, 1821, 417, 12, 35, "CodeText",ExpressionUUID->"a9e40c3d-66db-45fc-94c3-3923b9fcfd24",
   CellTags->"Procedural Programming"],
  Cell[66556, 1835, 183, 5, 42, "Input",ExpressionUUID->"bd43b0aa-9b9e-4d5f-b64d-9850d31d7702",
   CellTags->"Procedural Programming"]},
 "Functional Programming"->{
  Cell[67355, 1867, 216, 4, 230, "Section",ExpressionUUID->"b2a75dfd-09af-418a-a699-f6441b3b61d6",
   CellTags->"Functional Programming"],
  Cell[67574, 1873, 228, 4, 35, "Item",ExpressionUUID->"7cc06320-eb4e-4743-99fd-3b48ef361ef8",
   CellTags->"Functional Programming"],
  Cell[67805, 1879, 561, 20, 35, "Item",ExpressionUUID->"d307fbf5-e11c-4573-8a8b-e3bf733c3256",
   CellTags->"Functional Programming"],
  Cell[68369, 1901, 223, 4, 35, "Item",ExpressionUUID->"ca241773-425c-4927-92a8-719c26c00e3e",
   CellTags->"Functional Programming"],
  Cell[68595, 1907, 213, 4, 35, "Item",ExpressionUUID->"f7a7452e-05dd-4908-832a-4521c2e05196",
   CellTags->"Functional Programming"],
  Cell[69004, 1923, 204, 4, 139, "Section",ExpressionUUID->"6635e80c-ca43-4211-9199-28f623f0749c",
   CellTags->"Functional Programming"],
  Cell[69211, 1929, 305, 7, 58, "Text",ExpressionUUID->"2aec1187-1d4c-4d87-85e5-2fa2f113b5c0",
   CellTags->"Functional Programming"],
  Cell[69519, 1938, 232, 4, 35, "CodeText",ExpressionUUID->"cc5c70d1-5b15-40cc-a566-e733b5b9e4f7",
   CellTags->"Functional Programming"],
  Cell[69754, 1944, 842, 23, 94, "Input",ExpressionUUID->"eac4ddee-b3aa-47da-8202-1e40690e09d8",
   CellTags->"Functional Programming"],
  Cell[70599, 1969, 244, 5, 35, "CodeText",ExpressionUUID->"cba8c846-f485-4dc7-a8b3-8130b2a8c97a",
   CellTags->"Functional Programming"],
  Cell[70846, 1976, 759, 19, 52, "Input",ExpressionUUID->"364e1a89-5526-491f-be17-57ab13b8f33d",
   CellTags->"Functional Programming"],
  Cell[71882, 2009, 208, 4, 139, "Section",ExpressionUUID->"b2c8542a-df56-4574-9336-a5e0741e0d51",
   CellTags->"Functional Programming"],
  Cell[72093, 2015, 191, 5, 35, "Text",ExpressionUUID->"93ac0623-cea2-4408-a5b1-b1b9a705739d",
   CellTags->"Functional Programming"],
  Cell[72287, 2022, 419, 9, 58, "Text",ExpressionUUID->"719f9769-f1fe-4620-be16-f72f2751c1d2",
   CellTags->"Functional Programming"],
  Cell[72709, 2033, 297, 7, 35, "CodeText",ExpressionUUID->"fd4836db-ee7a-422a-97e5-89aff993f9f9",
   CellTags->"Functional Programming"],
  Cell[73009, 2042, 274, 9, 59, "Input",ExpressionUUID->"3b4de242-87b2-4857-9672-e3d07760b538",
   CellTags->"Functional Programming"],
  Cell[73286, 2053, 158, 4, 42, "Input",ExpressionUUID->"dd809758-b554-4e9f-a198-9e7200e62258",
   CellTags->"Functional Programming"],
  Cell[73447, 2059, 220, 4, 35, "CodeText",ExpressionUUID->"7b4b3594-62e9-44d3-b36b-6d86c987c9f7",
   CellTags->"Functional Programming"],
  Cell[73670, 2065, 190, 5, 42, "Input",ExpressionUUID->"f3bc0de2-4a49-4d87-947f-e46e0976ae7c",
   CellTags->"Functional Programming"],
  Cell[73863, 2072, 241, 4, 35, "CodeText",ExpressionUUID->"bd7038bb-44eb-4da1-b140-ca664b7549d2",
   CellTags->"Functional Programming"],
  Cell[74107, 2078, 223, 6, 42, "Input",ExpressionUUID->"205d9f0f-c6f1-45b8-8683-894510cdd872",
   CellTags->"Functional Programming"],
  Cell[74333, 2086, 303, 5, 35, "Text",ExpressionUUID->"fc99a6be-82ce-4ae6-a414-b8ddd8e52e67",
   CellTags->"Functional Programming"],
  Cell[74639, 2093, 426, 9, 35, "CodeText",ExpressionUUID->"8d5716aa-bd5f-4e2c-9980-a4774499329b",
   CellTags->"Functional Programming"],
  Cell[75068, 2104, 210, 6, 42, "Input",ExpressionUUID->"e3df103a-afd5-4bce-b58d-49ffb89bbcc5",
   CellTags->"Functional Programming"],
  Cell[75281, 2112, 321, 8, 35, "CodeText",ExpressionUUID->"8eb7808a-e0c8-4a50-ac0a-53ff951dfa19",
   CellTags->"Functional Programming"],
  Cell[75605, 2122, 194, 5, 42, "Input",ExpressionUUID->"04cf384d-463a-42d9-b161-e3819652b23e",
   CellTags->"Functional Programming"],
  Cell[75802, 2129, 254, 6, 35, "CodeText",ExpressionUUID->"d54c3222-7521-492d-bd28-a26cff703e58",
   CellTags->"Functional Programming"],
  Cell[76059, 2137, 265, 6, 42, "Input",ExpressionUUID->"a5ace270-2dc1-4f16-bcd3-6dd448f6549c",
   CellTags->"Functional Programming"],
  Cell[76327, 2145, 591, 12, 81, "Text",ExpressionUUID->"eb2332a7-37d3-43fd-b0f4-7a13dd0b869f",
   CellTags->"Functional Programming"],
  Cell[77195, 2171, 161, 4, 139, "Section",ExpressionUUID->"7ce816e5-7bb2-46a0-a39d-5bd0a9cc7c31",
   CellTags->"Functional Programming"],
  Cell[77359, 2177, 389, 8, 58, "Text",ExpressionUUID->"cc3eb8db-db6d-410f-af28-b42e332dd909",
   CellTags->"Functional Programming"],
  Cell[77751, 2187, 305, 7, 35, "CodeText",ExpressionUUID->"bdff6e3f-d4e5-4386-8251-0274d70ce178",
   CellTags->"Functional Programming"],
  Cell[78059, 2196, 307, 9, 42, "Input",ExpressionUUID->"155efb98-8c74-4fd2-bed7-f5bf0568ab65",
   CellTags->"Functional Programming"],
  Cell[78369, 2207, 604, 16, 35, "CodeText",ExpressionUUID->"4d530a51-33dd-4991-8e48-d693b622773d",
   CellTags->"Functional Programming"],
  Cell[78976, 2225, 240, 7, 42, "Input",ExpressionUUID->"f4a2f119-4907-4217-8163-bf2a71eb9419",
   CellTags->"Functional Programming"],
  Cell[79219, 2234, 210, 6, 42, "Input",ExpressionUUID->"ba71da35-2343-4106-bd3e-4ee3054cc1a0",
   CellTags->"Functional Programming"],
  Cell[79432, 2242, 311, 7, 35, "Text",ExpressionUUID->"89acda73-2bd5-453c-a69f-c2bbb0af9183",
   CellTags->"Functional Programming"],
  Cell[79746, 2251, 426, 12, 35, "CodeText",ExpressionUUID->"5732ee63-0163-4dbd-985d-d23c3ce32c94",
   CellTags->"Functional Programming"],
  Cell[80175, 2265, 321, 10, 45, "Input",ExpressionUUID->"b3d502d5-7b02-468e-be27-b1f4eb388f4d",
   CellTags->"Functional Programming"],
  Cell[80499, 2277, 389, 10, 35, "CodeText",ExpressionUUID->"e70d8116-771a-41b7-a520-24de80ada014",
   CellTags->"Functional Programming"],
  Cell[80891, 2289, 331, 10, 42, "Input",ExpressionUUID->"b4b3dd29-a4e1-4814-be3e-7cbec403ddef",
   CellTags->"Functional Programming"],
  Cell[84394, 2385, 421, 12, 35, "CodeText",ExpressionUUID->"a6e83c03-9c7b-40f1-96d5-ddb457a77cbe",
   CellTags->"Functional Programming"],
  Cell[84818, 2399, 400, 10, 42, "Input",ExpressionUUID->"5e8c270f-c97f-46a4-9dbb-b15a6b9c9532",
   CellTags->"Functional Programming"],
  Cell[85221, 2411, 295, 7, 35, "Text",ExpressionUUID->"2ad06a17-bdf6-419c-afe9-f306b5627c80",
   CellTags->"Functional Programming"],
  Cell[85519, 2420, 384, 10, 35, "CodeText",ExpressionUUID->"0beb6a30-6c62-49bb-8f2b-1bdef4f4f284",
   CellTags->"Functional Programming"],
  Cell[85906, 2432, 122, 3, 42, "Input",ExpressionUUID->"c03cab70-c6bf-45db-89ad-856c2ced291a",
   CellTags->"Functional Programming"],
  Cell[86305, 2449, 201, 4, 139, "Section",ExpressionUUID->"09bd646f-84af-4c2f-bf2e-255ab097ff2d",
   CellTags->"Functional Programming"],
  Cell[86509, 2455, 445, 15, 58, "Text",ExpressionUUID->"f0f3b97c-a1d4-4eba-b6cc-eb368df10193",
   CellTags->"Functional Programming"],
  Cell[86957, 2472, 272, 7, 35, "Text",ExpressionUUID->"b0e12a86-6978-4df6-83cb-fc76754d0b1d",
   CellTags->"Functional Programming"],
  Cell[94907, 2667, 500, 13, 35, "CodeText",ExpressionUUID->"c6bb0d2c-733e-4186-a2dd-8c9ccc5f395f",
   CellTags->"Functional Programming"],
  Cell[95410, 2682, 239, 7, 42, "Input",ExpressionUUID->"26f8494c-db9a-45db-8f1b-9123fdaa7708",
   CellTags->"Functional Programming"],
  Cell[95652, 2691, 247, 7, 42, "Input",ExpressionUUID->"a093aac0-bb35-4f19-9808-a7241e048dc9",
   CellTags->"Functional Programming"],
  Cell[95902, 2700, 261, 7, 42, "Input",ExpressionUUID->"7a06008a-325a-454c-802a-246e055efce7",
   CellTags->"Functional Programming"],
  Cell[96440, 2721, 202, 4, 139, "Section",ExpressionUUID->"415f6552-f66e-4bc8-8ab4-c5da6fb88dab",
   CellTags->"Functional Programming"],
  Cell[96645, 2727, 521, 15, 58, "Text",ExpressionUUID->"cffb7a70-e24f-4a1e-b6f0-5e15e923418a",
   CellTags->"Functional Programming"],
  Cell[97642, 2760, 720, 22, 58, "Text",ExpressionUUID->"1ed3051d-52d8-440f-9a56-005f9d533f0a",
   CellTags->"Functional Programming"],
  Cell[98365, 2784, 772, 20, 58, "CodeText",ExpressionUUID->"9288b92c-dc9b-4b98-a82a-8ea7a191ced5",
   CellTags->"Functional Programming"],
  Cell[99140, 2806, 212, 6, 42, "Input",ExpressionUUID->"efeb8009-598d-4fb1-98df-2ba6eae7f355",
   CellTags->"Functional Programming"],
  Cell[99355, 2814, 214, 6, 42, "Input",ExpressionUUID->"936eeb55-fb05-459d-92a7-e72e692fa44b",
   CellTags->"Functional Programming"],
  Cell[101902, 2890, 334, 7, 35, "CodeText",ExpressionUUID->"ae125166-eb59-436b-ac13-4af3cc7b15dd",
   CellTags->"Functional Programming"],
  Cell[102239, 2899, 384, 13, 42, "Input",ExpressionUUID->"35c0dec6-ae24-4f80-bdd3-ba259a78f7c1",
   CellTags->"Functional Programming"],
  Cell[102626, 2914, 503, 15, 35, "CodeText",ExpressionUUID->"8f03cb0b-a5b1-40e0-a3c0-571fc944e9b1",
   CellTags->"Functional Programming"],
  Cell[103132, 2931, 160, 4, 42, "Input",ExpressionUUID->"7a62ae9a-e955-470b-bf70-b7ef272a696c",
   CellTags->"Functional Programming"],
  Cell[103295, 2937, 160, 4, 42, "Input",ExpressionUUID->"c611d3b4-2d6e-4a10-bac1-ddf3d12338c8",
   CellTags->"Functional Programming"],
  Cell[103458, 2943, 156, 4, 42, "Input",ExpressionUUID->"f88d7ff3-2494-41a3-a168-4df8337eceb4",
   CellTags->"Functional Programming"],
  Cell[103617, 2949, 413, 10, 35, "CodeText",ExpressionUUID->"2987e792-8904-409d-b329-fd27936da544",
   CellTags->"Functional Programming"],
  Cell[104033, 2961, 158, 4, 42, "Input",ExpressionUUID->"9804b3e3-8819-45b7-b54f-d8f4b63642db",
   CellTags->"Functional Programming"],
  Cell[104596, 2978, 265, 6, 35, "CodeText",ExpressionUUID->"e656a132-1a6e-4792-a79a-b9b172deadcf",
   CellTags->"Functional Programming"],
  Cell[104864, 2986, 431, 12, 45, "Input",ExpressionUUID->"f053727a-5d78-47b8-a97f-efbd74fb63c8",
   CellTags->"Functional Programming"],
  Cell[105298, 3000, 274, 5, 35, "CodeText",ExpressionUUID->"f889f32f-dc26-4d9b-81e1-16dacbaa2be0",
   CellTags->"Functional Programming"],
  Cell[105575, 3007, 177, 5, 42, "Input",ExpressionUUID->"0d328326-549a-46d9-a18b-c08b09a02011",
   CellTags->"Functional Programming"],
  Cell[105755, 3014, 211, 6, 35, "Text",ExpressionUUID->"86837990-0f03-4211-86a4-722f6e5262f5",
   CellTags->"Functional Programming"],
  Cell[106389, 3039, 163, 4, 139, "Section",ExpressionUUID->"83515889-61b3-41b2-8ecd-166eedbb9328",
   CellTags->"Functional Programming"],
  Cell[106555, 3045, 253, 6, 35, "Text",ExpressionUUID->"9bd9b0be-dcdd-4df7-ae48-0ae43296ff4f",
   CellTags->"Functional Programming"],
  Cell[106811, 3053, 557, 16, 35, "Text",ExpressionUUID->"2a5f977b-d67f-41e5-8ca4-2c4b4cf7e4ba",
   CellTags->"Functional Programming"],
  Cell[107683, 3079, 284, 5, 35, "CodeText",ExpressionUUID->"6202b33e-a577-4511-8f14-77a64dcc3557",
   CellTags->"Functional Programming"],
  Cell[107970, 3086, 265, 8, 42, "Input",ExpressionUUID->"51610350-972c-4773-87b2-7f16e5a69f6c",
   CellTags->"Functional Programming"],
  Cell[108238, 3096, 883, 23, 58, "CodeText",ExpressionUUID->"5601029a-457c-49be-ad4e-b9b754d98902",
   CellTags->"Functional Programming"],
  Cell[109124, 3121, 264, 8, 42, "Input",ExpressionUUID->"66f03453-4656-46f4-a2e0-831c2457dc57",
   CellTags->"Functional Programming"],
  Cell[109391, 3131, 411, 12, 35, "CodeText",ExpressionUUID->"f8d86d5a-5e5f-4aec-bb9d-194cfdb2519d",
   CellTags->"Functional Programming"],
  Cell[109805, 3145, 323, 9, 42, "Input",ExpressionUUID->"30de7607-a676-4bf1-8eff-fda6c686dbbe",
   CellTags->"Functional Programming"],
  Cell[111576, 3202, 202, 4, 139, "Section",ExpressionUUID->"b8775166-7320-4e66-b47d-cc7ed6c6ff06",
   CellTags->"Functional Programming"],
  Cell[111781, 3208, 304, 7, 58, "Text",ExpressionUUID->"175d3f28-67bb-4099-81d4-8a548b07c961",
   CellTags->"Functional Programming"],
  Cell[112088, 3217, 291, 7, 35, "CodeText",ExpressionUUID->"45258354-ae4e-4025-a5b8-4e5760794fe0",
   CellTags->"Functional Programming"],
  Cell[112382, 3226, 485, 15, 64, "Input",ExpressionUUID->"fa3e60ee-a11f-48e2-88cf-6f0e72a0f4d1",
   CellTags->"Functional Programming"],
  Cell[112870, 3243, 325, 6, 35, "CodeText",ExpressionUUID->"d6e55f2b-d110-4823-b180-491cd7ba9b5d",
   CellTags->"Functional Programming"],
  Cell[113198, 3251, 601, 19, 127, "Input",ExpressionUUID->"5514ea4d-a32b-4e2e-bcb3-9fc54663d3f9",
   CellTags->"Functional Programming"],
  Cell[113802, 3272, 625, 16, 35, "Text",ExpressionUUID->"b687df86-1077-4cd3-8a4c-5ea0b35afc93",
   CellTags->"Functional Programming"],
  Cell[114430, 3290, 247, 5, 35, "CodeText",ExpressionUUID->"305f09a2-36ac-429c-a7bd-a6a9af258a46",
   CellTags->"Functional Programming"],
  Cell[114680, 3297, 180, 5, 42, "Input",ExpressionUUID->"3f8c53b4-f2b7-4da3-aa44-85bf447eb20f",
   CellTags->"Functional Programming"],
  Cell[118302, 3402, 185, 5, 42, "Input",ExpressionUUID->"d4c68418-303d-42d9-b219-f44124b619f0",
   CellTags->"Functional Programming"]},
 "Programming with Rules"->{
  Cell[119103, 3434, 214, 4, 230, "Section",ExpressionUUID->"59a9c990-09fb-46bd-ad83-672086f41476",
   CellTags->"Programming with Rules"],
  Cell[119320, 3440, 336, 10, 35, "Item",ExpressionUUID->"632b5dcc-2777-4013-aeac-96789539f738",
   CellTags->"Programming with Rules"],
  Cell[119659, 3452, 194, 4, 35, "Item",ExpressionUUID->"06cae940-5f75-4e4d-b749-3c6f9729e71d",
   CellTags->"Programming with Rules"],
  Cell[119856, 3458, 201, 4, 35, "Item",ExpressionUUID->"6c615900-9c9d-4ffa-9ec3-acaa43262052",
   CellTags->"Programming with Rules"],
  Cell[122727, 3550, 201, 4, 139, "Section",ExpressionUUID->"490ba985-5235-4467-95b0-44d50930ec9d",
   CellTags->"Programming with Rules"],
  Cell[122931, 3556, 273, 6, 58, "Text",ExpressionUUID->"67ba1dcc-80e4-460d-a089-8a06eaa2be13",
   CellTags->"Programming with Rules"],
  Cell[123207, 3564, 146, 4, 42, "Input",ExpressionUUID->"fc58ac1a-39d5-4532-b541-f932dc478a85",
   CellTags->"Programming with Rules"],
  Cell[123356, 3570, 187, 6, 42, "Input",ExpressionUUID->"ae68c13e-2922-4c14-9ddf-19d8302526e1",
   CellTags->"Programming with Rules"],
  Cell[123546, 3578, 295, 7, 58, "Text",ExpressionUUID->"3a480a4c-63a3-434d-a899-ae9e70528a2b",
   CellTags->"Programming with Rules"],
  Cell[123844, 3587, 575, 14, 35, "Text",ExpressionUUID->"66d8c6a0-21f6-479c-986e-87abdaf0867f",
   CellTags->"Programming with Rules"],
  Cell[124422, 3603, 597, 16, 35, "CodeText",ExpressionUUID->"68e412fb-531a-4844-a405-020afdff2d85",
   CellTags->"Programming with Rules"],
  Cell[125022, 3621, 155, 4, 42, "Input",ExpressionUUID->"b11aa85d-a778-4368-8fef-cae93135416a",
   CellTags->"Programming with Rules"],
  Cell[125180, 3627, 282, 9, 42, "Input",ExpressionUUID->"de7289a5-7d88-4fb6-aa8c-cf28a24a6c02",
   CellTags->"Programming with Rules"],
  Cell[125827, 3647, 347, 9, 35, "CodeText",ExpressionUUID->"98c22267-e3da-4171-86b1-6a0eb9901e22",
   CellTags->"Programming with Rules"],
  Cell[126177, 3658, 242, 8, 42, "Input",ExpressionUUID->"db535cb1-0cf5-4e68-b517-52b551794b46",
   CellTags->"Programming with Rules"],
  Cell[126715, 3674, 409, 10, 35, "CodeText",ExpressionUUID->"cc9860bb-da2c-4606-b2a9-3fa66683e0de",
   CellTags->"Programming with Rules"],
  Cell[127127, 3686, 141, 4, 42, "Input",ExpressionUUID->"141f1d46-9b16-4e7c-b5e8-bda8bb4831b3",
   CellTags->"Programming with Rules"],
  Cell[127271, 3692, 531, 13, 58, "CodeText",ExpressionUUID->"878fba70-c952-4b68-b0e4-658f6818816a",
   CellTags->"Programming with Rules"],
  Cell[127805, 3707, 401, 12, 64, "Input",ExpressionUUID->"e3177ded-389f-4d8a-a604-6a7958004821",
   CellTags->"Programming with Rules"],
  Cell[128209, 3721, 736, 21, 35, "CodeText",ExpressionUUID->"0e7f5909-e5d4-4699-95f2-3ec10262d058",
   CellTags->"Programming with Rules"],
  Cell[128948, 3744, 271, 8, 42, "Input",ExpressionUUID->"2fa3e0f0-d896-41d1-bf77-90052bb32225",
   CellTags->"Programming with Rules"],
  Cell[129222, 3754, 228, 4, 35, "CodeText",ExpressionUUID->"0752ae16-06c9-4d01-954b-304517b71966",
   CellTags->"Programming with Rules"],
  Cell[129453, 3760, 257, 6, 42, "Input",ExpressionUUID->"bf378aa6-ca0c-4b4d-af2c-538e7ee794dd",
   CellTags->"Programming with Rules"],
  Cell[129713, 3768, 352, 7, 58, "Text",ExpressionUUID->"dccb691d-3d90-4905-a42d-802b843a4b6c",
   CellTags->"Programming with Rules"],
  Cell[130460, 3792, 168, 4, 139, "Section",ExpressionUUID->"bfb6a770-bed7-4958-82ee-408ed8ab4199",
   CellTags->"Programming with Rules"],
  Cell[130631, 3798, 333, 9, 58, "Text",ExpressionUUID->"dcb9265f-39bd-4cb0-bd16-6d30369c583e",
   CellTags->"Programming with Rules"],
  Cell[130967, 3809, 574, 16, 35, "CodeText",ExpressionUUID->"63541948-165a-4f6d-9c1d-5765639db488",
   CellTags->"Programming with Rules"],
  Cell[131544, 3827, 221, 7, 57, "Input",ExpressionUUID->"35a9961f-94c7-42ec-846b-1dddeca7a8e6",
   CellTags->"Programming with Rules"],
  Cell[141362, 4003, 455, 12, 58, "Text",ExpressionUUID->"ecbb3e0d-a052-4b2e-bc7c-870783c3bc7d",
   CellTags->"Programming with Rules"],
  Cell[144247, 4086, 145, 4, 42, "Input",ExpressionUUID->"92eac2f4-3677-4831-9b5a-6cd4713e702e",
   CellTags->"Programming with Rules"],
  Cell[144395, 4092, 333, 11, 35, "CodeText",ExpressionUUID->"ca539f3d-f49b-48f6-b460-950348661801",
   CellTags->"Programming with Rules"],
  Cell[144731, 4105, 378, 11, 42, "Input",ExpressionUUID->"b6ae9217-6af7-40f5-be59-84fe622f317d",
   CellTags->"Programming with Rules"],
  Cell[145112, 4118, 520, 13, 35, "Text",ExpressionUUID->"89ecd1cf-ee33-4081-889f-5f8750e8a9cd",
   CellTags->"Programming with Rules"],
  Cell[145635, 4133, 358, 9, 35, "CodeText",ExpressionUUID->"1d35a17e-3679-400e-bb93-323a364be89d",
   CellTags->"Programming with Rules"],
  Cell[145996, 4144, 384, 12, 42, "Input",ExpressionUUID->"05cd5756-78c9-4263-ac81-19b8d5431e13",
   CellTags->"Programming with Rules"],
  Cell[146383, 4158, 487, 12, 35, "Text",ExpressionUUID->"e9ca7e75-10fb-4692-9825-3c387d532e27",
   CellTags->"Programming with Rules"],
  Cell[146873, 4172, 588, 14, 35, "CodeText",ExpressionUUID->"657618b7-b6a8-494a-bbb6-5bb6f713e124",
   CellTags->"Programming with Rules"],
  Cell[147464, 4188, 441, 13, 42, "Input",ExpressionUUID->"f5ca6f48-9fdc-4a15-af1d-365dca3a80f9",
   CellTags->"Programming with Rules"],
  Cell[148490, 4220, 409, 12, 42, "Input",ExpressionUUID->"1371229e-c8bb-48e1-ad31-5e77861d3d1e",
   CellTags->"Programming with Rules"],
  Cell[148902, 4234, 418, 11, 35, "CodeText",ExpressionUUID->"7c7c3440-e106-40da-be8e-205fec85344e",
   CellTags->"Programming with Rules"],
  Cell[149323, 4247, 429, 13, 42, "Input",ExpressionUUID->"abac0362-d946-45d0-aa19-0d54fb0a7e8d",
   CellTags->"Programming with Rules"],
  Cell[149896, 4267, 485, 12, 35, "Text",ExpressionUUID->"b5c7deec-1c34-4e84-8ba1-2f4fbb204fd3",
   CellTags->"Programming with Rules"],
  Cell[150658, 4293, 208, 4, 139, "Section",ExpressionUUID->"0df18db9-a116-4828-a3a4-a04e8ada43b0",
   CellTags->"Programming with Rules"],
  Cell[150869, 4299, 286, 7, 58, "Text",ExpressionUUID->"7bcbb960-4500-4bea-89a8-529ace0d3394",
   CellTags->"Programming with Rules"],
  Cell[151158, 4308, 225, 4, 35, "CodeText",ExpressionUUID->"051640d9-042f-45ca-97df-b2309ed76f85",
   CellTags->"Programming with Rules"],
  Cell[152166, 4336, 370, 8, 35, "CodeText",ExpressionUUID->"895b2fac-1545-4780-ae15-c17f37e4f334",
   CellTags->"Programming with Rules"],
  Cell[152655, 4349, 671, 20, 106, "Input",ExpressionUUID->"6ac2be08-e69a-4db3-afec-780cdb6e6e80",
   CellTags->"Programming with Rules"],
  Cell[153329, 4371, 416, 10, 35, "Text",ExpressionUUID->"958c5595-ba5f-48e1-a97c-f8bd344eca29",
   CellTags->"Programming with Rules"],
  Cell[153748, 4383, 427, 11, 35, "CodeText",ExpressionUUID->"a559ea55-90cb-4c35-aec9-4dec9ab10096",
   CellTags->"Programming with Rules"],
  Cell[154178, 4396, 152, 4, 42, "Input",ExpressionUUID->"c241664b-d869-4b5b-ba9e-1ffa161d826e",
   CellTags->"Programming with Rules"],
  Cell[154333, 4402, 260, 6, 35, "CodeText",ExpressionUUID->"fd72ece0-4230-414f-93ec-b97b9ee89700",
   CellTags->"Programming with Rules"],
  Cell[154596, 4410, 153, 4, 42, "Input",ExpressionUUID->"ceec7212-d90b-4724-8fce-b7df6f4d5a83",
   CellTags->"Programming with Rules"],
  Cell[154854, 4419, 316, 9, 35, "CodeText",ExpressionUUID->"f2b6f127-5a2c-4cd2-900d-378714cf7eff",
   CellTags->"Programming with Rules"],
  Cell[155173, 4430, 122, 3, 42, "Input",ExpressionUUID->"d1762d31-d0cc-403d-b249-0cf285022a93",
   CellTags->"Programming with Rules"],
  Cell[155572, 4447, 197, 4, 139, "Section",ExpressionUUID->"8a76b50f-61b7-43d9-96f2-df80d28b09f4",
   CellTags->"Programming with Rules"],
  Cell[155772, 4453, 440, 9, 58, "Text",ExpressionUUID->"ec0f5ef7-cf9b-4644-b32c-afd75c1b8e0e",
   CellTags->"Programming with Rules"],
  Cell[156215, 4464, 667, 18, 58, "CodeText",ExpressionUUID->"53d65715-0d85-4711-bad7-c04a90e81156",
   CellTags->"Programming with Rules"],
  Cell[156885, 4484, 314, 10, 42, "Input",ExpressionUUID->"b6f9aa2f-2fa5-422c-a54b-c3ae4277f879",
   CellTags->"Programming with Rules"],
  Cell[157202, 4496, 234, 4, 35, "CodeText",ExpressionUUID->"1595b17b-e83d-4fc7-a069-65add5e5b93f",
   CellTags->"Programming with Rules"],
  Cell[157439, 4502, 329, 10, 42, "Input",ExpressionUUID->"d66f81cb-9dfb-4d9f-a909-9ae3a79d5e19",
   CellTags->"Programming with Rules"],
  Cell[157771, 4514, 411, 9, 35, "CodeText",ExpressionUUID->"309de650-303e-4993-8298-b870f8b16197",
   CellTags->"Programming with Rules"],
  Cell[158185, 4525, 335, 10, 42, "Input",ExpressionUUID->"d0c6b299-e7da-4c5a-ba07-d3674114d3a8",
   CellTags->"Programming with Rules"],
  Cell[158523, 4537, 240, 4, 35, "CodeText",ExpressionUUID->"2c60e2aa-ecc0-4e8a-84ac-5b0c3fadf234",
   CellTags->"Programming with Rules"],
  Cell[158766, 4543, 353, 11, 42, "Input",ExpressionUUID->"fb4dd8f2-d921-4e84-b4b9-27c7d1fcbd6d",
   CellTags->"Programming with Rules"],
  Cell[159122, 4556, 340, 8, 35, "CodeText",ExpressionUUID->"de7787c0-9c27-4d16-b838-62dd51bd5ea5",
   CellTags->"Programming with Rules"],
  Cell[159465, 4566, 447, 15, 42, "Input",ExpressionUUID->"447ec80c-72e5-4498-9518-b129f196fd5e",
   CellTags->"Programming with Rules"],
  Cell[159915, 4583, 241, 4, 35, "CodeText",ExpressionUUID->"b853fb4c-4ada-4a03-8174-3cb8d7cf8117",
   CellTags->"Programming with Rules"],
  Cell[160159, 4589, 507, 17, 42, "Input",ExpressionUUID->"eb088aa1-bda1-4c4e-a7cb-99cc301fb210",
   CellTags->"Programming with Rules"],
  Cell[160669, 4608, 288, 7, 58, "Text",ExpressionUUID->"a8c178f8-a8a4-410e-8ad1-a9499b4bbafa",
   CellTags->"Programming with Rules"],
  Cell[161234, 4629, 206, 4, 139, "Section",ExpressionUUID->"f8ff6ba4-3246-4b9e-a8ab-c7c589f2ccbb",
   CellTags->"Programming with Rules"],
  Cell[161443, 4635, 223, 6, 35, "Text",ExpressionUUID->"f8661456-395f-44df-bf5c-8ca12f632661",
   CellTags->"Programming with Rules"],
  Cell[161669, 4643, 407, 10, 35, "CodeText",ExpressionUUID->"0626e466-0916-463f-9f62-80b7600eaa67",
   CellTags->"Programming with Rules"],
  Cell[162079, 4655, 250, 8, 42, "Input",ExpressionUUID->"d1736030-bf35-4eaa-a40e-a2f1b53551bc",
   CellTags->"Programming with Rules"],
  Cell[162332, 4665, 151, 4, 42, "Input",ExpressionUUID->"542219c8-d7e7-4270-a6b3-c7a7081301d7",
   CellTags->"Programming with Rules"],
  Cell[162486, 4671, 169, 5, 42, "Input",ExpressionUUID->"e94feb51-2ac0-494a-92f8-63b2744310d8",
   CellTags->"Programming with Rules"],
  Cell[162658, 4678, 569, 14, 58, "CodeText",ExpressionUUID->"6c6655d2-d26f-46db-b8bc-9f7cb678205f",
   CellTags->"Programming with Rules"],
  Cell[163230, 4694, 291, 10, 42, "Input",ExpressionUUID->"277128dd-170a-40ca-81b5-12c18d5f9154",
   CellTags->"Programming with Rules"],
  Cell[163524, 4706, 545, 15, 35, "CodeText",ExpressionUUID->"dbad5e08-d60b-4879-a740-e0de625428c1",
   CellTags->"Programming with Rules"],
  Cell[164072, 4723, 288, 9, 42, "Input",ExpressionUUID->"fb27dc96-1bbe-4f62-bae9-2775d8a1fb9f",
   CellTags->"Programming with Rules"],
  Cell[164588, 4741, 294, 9, 42, "Input",ExpressionUUID->"aa758d93-add9-4661-8dc5-118677e78594",
   CellTags->"Programming with Rules"],
  Cell[166452, 4800, 181, 5, 42, "Input",ExpressionUUID->"24c05f7c-18ee-422e-beac-6e467efe8337",
   CellTags->"Programming with Rules"]},
 "Comparing Programming Styles"->{
  Cell[166910, 4819, 150, 3, 230, "Section",ExpressionUUID->"8e4129fd-1225-42ec-bf5d-2eacbfe7cbeb",
   CellTags->"Comparing Programming Styles"],
  Cell[167063, 4824, 371, 8, 58, "Text",ExpressionUUID->"79e0c76f-96d8-4c54-84fc-b657ce54fa9c",
   CellTags->"Comparing Programming Styles"],
  Cell[167437, 4834, 468, 9, 81, "Text",ExpressionUUID->"44bd361c-aea1-458a-8ca1-ca244fa89bf6",
   CellTags->"Comparing Programming Styles"],
  Cell[167908, 4845, 526, 11, 58, "Text",ExpressionUUID->"43a94ef7-b81d-4647-bd45-3d3305699ba3",
   CellTags->"Comparing Programming Styles"],
  Cell[168437, 4858, 226, 4, 35, "CodeText",ExpressionUUID->"d24f45c0-08d6-499f-bbc9-8f0f11891646",
   CellTags->"Comparing Programming Styles"],
  Cell[168666, 4864, 785, 25, 42, "Input",ExpressionUUID->"19045409-6080-4a30-afaf-369eb0b0cbdf",
   CellTags->"Comparing Programming Styles"],
  Cell[169476, 4893, 316, 6, 91, "Subsection",ExpressionUUID->"830953a9-7327-4eae-afa9-dcbbd899659a",
   CellTags->"Comparing Programming Styles"],
  Cell[169795, 4901, 950, 22, 81, "CodeText",ExpressionUUID->"63f33f37-ddb7-4624-99cc-79ce151863b1",
   CellTags->"Comparing Programming Styles"],
  Cell[170748, 4925, 856, 27, 106, "Input",ExpressionUUID->"682d710d-9987-4d5e-89ed-bc28d86dc6ef",
   CellTags->"Comparing Programming Styles"],
  Cell[171607, 4954, 283, 5, 35, "CodeText",ExpressionUUID->"4c0e1f96-2f66-4b89-bc29-a2dfeca19171",
   CellTags->"Comparing Programming Styles"],
  Cell[171893, 4961, 471, 15, 42, "Input",ExpressionUUID->"a4741f95-8144-4154-9970-e54918bd020c",
   CellTags->"Comparing Programming Styles"],
  Cell[172401, 4981, 269, 5, 91, "Subsection",ExpressionUUID->"6d5fbda0-2edf-4439-a198-0d5f730db73a",
   CellTags->"Comparing Programming Styles"],
  Cell[172919, 4996, 190, 5, 42, "Input",ExpressionUUID->"002361e1-b8cb-4f10-998d-44865a753b23",
   CellTags->"Comparing Programming Styles"],
  Cell[173112, 5003, 249, 4, 35, "CodeText",ExpressionUUID->"fe9754c1-11b3-48b8-a170-e372a83e63c1",
   CellTags->"Comparing Programming Styles"],
  Cell[173364, 5009, 201, 5, 42, "Input",ExpressionUUID->"a2008383-2155-46f3-8163-67201cfca085",
   CellTags->"Comparing Programming Styles"],
  Cell[173602, 5019, 263, 5, 91, "Subsection",ExpressionUUID->"273502fe-5882-47b6-a221-23de6d7ab887",
   CellTags->"Comparing Programming Styles"],
  Cell[173868, 5026, 396, 8, 58, "CodeText",ExpressionUUID->"0cedea23-6a7f-41f5-b953-d8a35696a515",
   CellTags->"Comparing Programming Styles"],
  Cell[174267, 5036, 261, 8, 42, "Input",ExpressionUUID->"d4c94941-4c44-4715-9885-21daec03101c",
   CellTags->"Comparing Programming Styles"]},
 "Application"->{
  Cell[174817, 5059, 132, 2, 230, "Section",ExpressionUUID->"042f08fe-d773-4f29-a251-0e3d77ba5824",
   CellTags->"Application"],
  Cell[174952, 5063, 454, 9, 58, "Text",ExpressionUUID->"e4e25f06-685a-4a67-9b5c-34f272a76282",
   CellTags->"Application"],
  Cell[175409, 5074, 291, 6, 35, "CodeText",ExpressionUUID->"228a94a4-b9cc-4db0-aba1-026a927709ee",
   CellTags->"Application"],
  Cell[175703, 5082, 1119, 28, 106, "Input",ExpressionUUID->"e96f73f7-2237-4062-b28b-e8cceb1870ff",
   CellTags->"Application"],
  Cell[176825, 5112, 647, 15, 58, "Text",ExpressionUUID->"f465a2df-8626-4e7b-ae6c-207627bab95d",
   CellTags->"Application"],
  Cell[177475, 5129, 454, 10, 35, "CodeText",ExpressionUUID->"3851da23-9c78-4410-a674-c489c14c461b",
   CellTags->"Application"],
  Cell[177932, 5141, 310, 9, 64, "Input",ExpressionUUID->"f58f9ba2-95ca-4124-9a19-56fb9c7f08fd",
   CellTags->"Application"],
  Cell[178245, 5152, 227, 3, 35, "CodeText",ExpressionUUID->"07e688f7-3a96-44f5-bbe3-cba191e026e7",
   CellTags->"Application"],
  Cell[178475, 5157, 198, 5, 42, "Input",ExpressionUUID->"199c6e5b-cd91-4157-b77a-277a26c8330b",
   CellTags->"Application"],
  Cell[178676, 5164, 211, 3, 35, "CodeText",ExpressionUUID->"62095aab-bb3d-412d-bb51-c8493a0b62bd",
   CellTags->"Application"],
  Cell[178890, 5169, 231, 6, 42, "Input",ExpressionUUID->"cb702703-2caa-41d5-987a-2a598e5164a0",
   CellTags->"Application"],
  Cell[179124, 5177, 217, 3, 35, "CodeText",ExpressionUUID->"14ec4499-6409-4ef0-b1fa-6f96e523508c",
   CellTags->"Application"],
  Cell[179344, 5182, 345, 10, 42, "Input",ExpressionUUID->"8b9f76b7-4bb7-4f46-9e4f-7de442ff5e5a",
   CellTags->"Application"],
  Cell[179692, 5194, 635, 16, 58, "CodeText",ExpressionUUID->"3b7dad43-79ae-45a4-a53d-316e91f3dd66",
   CellTags->"Application"],
  Cell[180330, 5212, 557, 16, 42, "Input",ExpressionUUID->"314c13c9-2339-4d61-9ac7-4eef354784cb",
   CellTags->"Application"],
  Cell[180890, 5230, 267, 4, 35, "CodeText",ExpressionUUID->"06cebb52-deaf-44e4-81ea-72f841e2ffe5",
   CellTags->"Application"],
  Cell[181160, 5236, 146, 3, 42, "Input",ExpressionUUID->"b882e361-41b4-4c6f-93b0-c5815734c67d",
   CellTags->"Application"],
  Cell[181309, 5241, 228, 3, 35, "CodeText",ExpressionUUID->"e4a0447a-e47d-4c10-8e37-caca6990ecfe",
   CellTags->"Application"],
  Cell[181540, 5246, 241, 6, 42, "Input",ExpressionUUID->"b583e775-ee5c-42c2-a318-70c84d8cec8e",
   CellTags->"Application"],
  Cell[181784, 5254, 357, 7, 35, "Text",ExpressionUUID->"5d52ce8f-d23a-4ad5-b1ee-c6f8995c1e20",
   CellTags->"Application"],
  Cell[182144, 5263, 314, 5, 35, "CodeText",ExpressionUUID->"d711653d-c42a-4f2b-a8a4-f2e5e064a207",
   CellTags->"Application"],
  Cell[182461, 5270, 183, 4, 42, "Input",ExpressionUUID->"4d4adabe-4d79-4fa7-b09b-4f66b684289b",
   CellTags->"Application"],
  Cell[182647, 5276, 381, 9, 35, "CodeText",ExpressionUUID->"1706281a-f213-4448-8013-0c052957eed9",
   CellTags->"Application"],
  Cell[183031, 5287, 1058, 29, 106, "Input",ExpressionUUID->"54b2a6e1-f0ba-4d93-973b-e40d720534b1",
   CellTags->"Application"],
  Cell[184092, 5318, 181, 4, 42, "Input",ExpressionUUID->"cdbcd614-e209-4b03-a62a-99a01b94a37f",
   CellTags->"Application"],
  Cell[184276, 5324, 647, 15, 58, "CodeText",ExpressionUUID->"75de2900-4d8f-4475-b72c-f522039f2cbd",
   CellTags->"Application"],
  Cell[184926, 5341, 1083, 30, 106, "Input",ExpressionUUID->"74f74f58-1e33-4b66-a398-8731ffe473ad",
   CellTags->"Application"],
  Cell[186012, 5373, 1121, 28, 106, "Input",ExpressionUUID->"db600a9d-c92c-46f4-9483-d54c04eff7d3",
   CellTags->"Application"],
  Cell[187136, 5403, 218, 6, 42, "Input",ExpressionUUID->"e36f64a1-bee2-4481-a3c2-29f28d6ea29d",
   CellTags->"Application"],
  Cell[187379, 5413, 185, 3, 91, "Subsection",ExpressionUUID->"0226a4df-ad47-4c43-88f6-c0fe64db061e",
   CellTags->"Application"],
  Cell[187567, 5418, 210, 5, 35, "Text",ExpressionUUID->"47eeb2ca-e622-46e8-917b-4d48a0cce058",
   CellTags->"Application"],
  Cell[187780, 5425, 296, 8, 42, "Input",ExpressionUUID->"961f3408-9b6e-472b-9754-102bddd72db1",
   CellTags->"Application"],
  Cell[188079, 5435, 472, 14, 44, "Input",ExpressionUUID->"05b905d7-6c07-4dab-9722-6e0a743c9671",
   CellTags->"Application"],
  Cell[188554, 5451, 319, 7, 35, "CodeText",ExpressionUUID->"dfcc516f-e0d5-4da4-be82-063a5413b38e",
   CellTags->"Application"],
  Cell[188876, 5460, 267, 7, 42, "Input",ExpressionUUID->"5c9f6d90-ffa0-48d3-8166-76dc1e8d4e19",
   CellTags->"Application"],
  Cell[189146, 5469, 321, 7, 35, "CodeText",ExpressionUUID->"3857b798-eafe-4c45-8dd9-7185b93b8111",
   CellTags->"Application"],
  Cell[189470, 5478, 1214, 34, 127, "Input",ExpressionUUID->"9e2dfb0d-cb02-49bc-b6b1-1b08e821dca9",
   CellTags->"Application"],
  Cell[190687, 5514, 1161, 29, 148, "Input",ExpressionUUID->"b06e5b0a-f8df-4b6c-a815-366e8fe93a12",
   CellTags->"Application"],
  Cell[191851, 5545, 300, 8, 42, "Input",ExpressionUUID->"64696c65-9892-48bb-aaf6-16bfa0e317a6",
   CellTags->"Application"],
  Cell[192154, 5555, 107, 2, 136, "EndOfSlide",ExpressionUUID->"d582d137-3ca8-46ed-a6e6-bc97d4c1f699",
   CellTags->"Application"]},
 "Exercises"->{
  Cell[192983, 5588, 854, 25, 37, "Item",ExpressionUUID->"ce390ce8-c1cf-43e0-a5b9-5fa36910b207",
   CellTags->{"Exercises", "Creating Definitions"}],
  Cell[195528, 5658, 868, 27, 35, "Item",ExpressionUUID->"a9707219-295e-4c27-8adb-87ec9d01305d",
   CellTags->{"Exercises", "Creating Definitions"}],
  Cell[197545, 5719, 347, 10, 44, "Item",ExpressionUUID->"94ddddca-41d8-4e6e-86b8-148c5b11d320",
   CellTags->{"Exercises", "Creating Definitions"}],
  Cell[198839, 5761, 279, 10, 55, "Subsection",ExpressionUUID->"e980c3bd-6a22-493d-9dca-a7b37bdffbeb",
   CellTags->{"Exercises", "Table I"}],
  Cell[199121, 5773, 635, 15, 81, "Text",ExpressionUUID->"2c8b1d5c-d860-4b69-98cd-0ab160f8bf6a",
   CellTags->{"Exercises", "Table I"}],
  Cell[199781, 5792, 227, 4, 35, "Item",ExpressionUUID->"3e6b4c71-9afd-48cd-86e6-704b4466725f",
   CellTags->{"Exercises", "Table I"}],
  Cell[200011, 5798, 341, 10, 42, "Input",ExpressionUUID->"4816a02d-97d7-4c45-9f9f-207e54bf9023",
   CellTags->{"Exercises", "Table I"}],
  Cell[200367, 5811, 195, 5, 35, "Item",ExpressionUUID->"d68315c2-dbc9-4b2c-a4a9-b32054dd90d1",
   CellTags->{"Exercises", "Table I"}],
  Cell[201483, 5846, 232, 9, 55, "Subsection",ExpressionUUID->"03bbec60-54f3-4135-8e97-6e1815993105",
   CellTags->{"Exercises", "Table II"}],
  Cell[201718, 5857, 605, 15, 58, "Text",ExpressionUUID->"74596f60-51bb-4d73-83a3-5ec09bc8697f",
   CellTags->{"Exercises", "Table II"}],
  Cell[202348, 5876, 279, 5, 35, "Item",ExpressionUUID->"44a6a099-3229-4555-876e-1868c67d0440",
   CellTags->{"Exercises", "Table II"}],
  Cell[202630, 5883, 347, 11, 42, "Input",ExpressionUUID->"05c9de89-581a-4ce4-a37d-2e73117b7e8d",
   CellTags->{"Exercises", "Table II"}],
  Cell[202992, 5897, 227, 4, 35, "Text",ExpressionUUID->"ad536f5b-8379-4d0f-be32-0999d28e8621",
   CellTags->{"Exercises", "Table II"}],
  Cell[203222, 5903, 164, 4, 42, "Input",ExpressionUUID->"1f0f54cd-7282-46f9-a39f-5cccdb9b2598",
   CellTags->{"Exercises", "Table II"}],
  Cell[203389, 5909, 376, 11, 35, "Text",ExpressionUUID->"02328f14-7f5d-4458-831f-3c0d6bcdfd80",
   CellTags->{"Exercises", "Table II"}],
  Cell[203768, 5922, 224, 6, 42, "Input",ExpressionUUID->"ee3002e6-0b09-436a-be46-d83e994a34cb",
   CellTags->{"Exercises", "Table II"}],
  Cell[203995, 5930, 196, 5, 35, "Item",ExpressionUUID->"129243ed-1a23-4c09-bd5f-9ac0769a8a9c",
   CellTags->{"Exercises", "Table II"}],
  Cell[211411, 6112, 251, 6, 35, "Item",ExpressionUUID->"006b9c96-5c97-4417-ab03-d180f33ccf20",
   CellTags->{"Exercises", "Table II"}],
  Cell[212983, 6160, 244, 10, 55, "Subsection",ExpressionUUID->"5b86380f-9aa1-46a7-86af-4b524ed10ab5",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[213230, 6172, 449, 13, 35, "Text",ExpressionUUID->"145ce818-821f-4e84-99c5-4a8043100056",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[213682, 6187, 269, 9, 42, "Input",ExpressionUUID->"7356623a-888c-46dd-98e9-3c0290a7a83e",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[213954, 6198, 440, 13, 35, "Text",ExpressionUUID->"b535a21d-fa58-4e0b-9b44-3c02c052c448",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[214397, 6213, 176, 5, 42, "Input",ExpressionUUID->"e6007f37-7590-4554-80de-2b199bdd5591",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[214576, 6220, 357, 10, 35, "Item",ExpressionUUID->"4b820ff8-b8af-4cfc-9368-49914f5e2527",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[216298, 6271, 356, 10, 35, "Item",ExpressionUUID->"3097ea22-881b-4058-81ce-d4585e1b0b0b",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[217711, 6315, 465, 15, 35, "Item",ExpressionUUID->"f17513d7-160f-499f-9068-a26c71931c9d",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[219054, 6358, 294, 8, 35, "Item",ExpressionUUID->"0078461a-f9a4-4efd-b299-7697ccaaa405",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[220283, 6396, 304, 8, 35, "Item",ExpressionUUID->"7b29ec43-57fa-4a4b-91ec-f12fab713b1b",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[222308, 6456, 252, 9, 55, "Subsection",ExpressionUUID->"57671e0e-a060-4a99-91ee-5e799fcd81a2",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[222563, 6467, 230, 6, 35, "Text",ExpressionUUID->"1684db82-e917-4660-912f-7a9b42f2b0aa",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[223249, 6489, 902, 23, 81, "Text",ExpressionUUID->"531e8823-9816-487c-a284-844f92d77e44",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[224154, 6514, 210, 6, 42, "Input",ExpressionUUID->"cde50281-e384-4ca2-b50c-2f90db5f4544",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[224367, 6522, 245, 7, 42, "Input",ExpressionUUID->"16a73742-f201-423e-8133-98dabaeb4c3b",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[224615, 6531, 581, 12, 81, "Text",ExpressionUUID->"359a0489-64f7-4b07-9549-093078a0f38a",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[225199, 6545, 233, 7, 42, "Input",ExpressionUUID->"51fdb579-e5a4-4943-9e31-872ca15024d1",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[225435, 6554, 400, 10, 35, "Text",ExpressionUUID->"0095e783-c8d8-4e04-98e8-37b45d63e19b",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[225838, 6566, 301, 10, 42, "Input",ExpressionUUID->"fa8c7099-c166-4d81-933d-d302cd04d5e2",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[226142, 6578, 197, 5, 35, "Item",ExpressionUUID->"df653f71-6e12-4a3f-bd15-978b4801c7b1",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[231427, 6723, 372, 9, 35, "Item",ExpressionUUID->"936179e1-def4-471f-bbfd-2802c4895933",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[233145, 6774, 398, 8, 56, "Item",ExpressionUUID->"a2d72b1b-2c43-4057-b917-4a756151aec1",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[235558, 6843, 264, 10, 55, "Subsection",ExpressionUUID->"099fa7d2-dc8c-42af-be25-7351835124f5",
   CellTags->{"Exercises", "Immediate and Delayed"}],
  Cell[235825, 6855, 364, 11, 35, "Text",ExpressionUUID->"af744ca4-1183-4f5d-bb24-1c2776a27661",
   CellTags->{"Exercises", "Immediate and Delayed"}],
  Cell[236192, 6868, 291, 10, 42, "Input",ExpressionUUID->"0be4a84f-b110-4194-8a02-7e40ff478a47",
   CellTags->{"Exercises", "Immediate and Delayed"}],
  Cell[236486, 6880, 688, 18, 56, "Item",ExpressionUUID->"34ddc1bb-2d79-441f-89e9-351ba2616c06",
   CellTags->{"Exercises", "Immediate and Delayed"}],
  Cell[242343, 7036, 250, 10, 55, "Subsection",ExpressionUUID->"9b130e83-0c0f-46ed-9174-0d5360ba827d",
   CellTags->{"Exercises", "Localizing Variables"}],
  Cell[242618, 7050, 389, 9, 35, "Item",ExpressionUUID->"0b2648f3-ec73-4ad7-a39a-2283d4e900a4",
   CellTags->{"Exercises", "Localizing Variables"}],
  Cell[243010, 7061, 552, 17, 106, "Input",ExpressionUUID->"6fd6ceca-d187-49ed-b66f-a553b592db5d",
   CellTags->{"Exercises", "Localizing Variables"}],
  Cell[246794, 7168, 258, 9, 55, "Subsection",ExpressionUUID->"3f008206-30e2-4877-afd2-ca33d9e89ee4",
   CellTags->{"Exercises", "Using Patterns"}],
  Cell[247077, 7181, 711, 18, 56, "Item",ExpressionUUID->"594e4489-ba47-48bf-8f22-383f7bf82a56",
   CellTags->{"Exercises", "Using Patterns"}],
  Cell[247791, 7201, 1100, 32, 85, "Input",ExpressionUUID->"0ebc10cc-9824-4969-8310-3c3b2826eb68",
   CellTags->{"Exercises", "Using Patterns"}],
  Cell[248906, 7236, 799, 19, 77, "Item",ExpressionUUID->"d2b3f4e5-ff0f-49ce-a299-b9b5a43e1a03",
   CellTags->{"Exercises", "Using Patterns"}],
  Cell[253687, 7367, 240, 9, 55, "Subsection",ExpressionUUID->"ec7b3270-427a-4c25-b600-1227260e5b01",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[253930, 7378, 1756, 52, 59, "Item",ExpressionUUID->"2ec3664f-797b-4955-9a31-ab12b072cf59",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[261030, 7589, 262, 10, 55, "Subsection",ExpressionUUID->"91180fe6-2863-4f4d-9c0a-d43f3ed5837d",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[261295, 7601, 419, 10, 58, "Text",ExpressionUUID->"a6e656a7-4cad-41d7-ad51-007ff19cfbe5",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[261739, 7615, 477, 13, 56, "Item",ExpressionUUID->"f6563560-511b-4ea4-af21-06638de7e457",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[262219, 7630, 301, 10, 42, "Input",ExpressionUUID->"03fced40-c126-4017-8505-a6841b413599",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[268196, 7793, 635, 13, 77, "Item",ExpressionUUID->"9687d4c8-b9c1-468e-9c98-47a8a043a2a1",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[268834, 7808, 2916, 88, 114, "Input",ExpressionUUID->"144c33ad-49d0-4f21-a6ef-52936fa3b38c",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[275051, 7988, 552, 13, 56, "Item",ExpressionUUID->"c0f1762e-3313-4cd7-a686-2dc7da806b86",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[278747, 8084, 234, 9, 55, "Subsection",ExpressionUUID->"19481bdc-c8b3-42d5-9f97-e51343b73872",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[278984, 8095, 375, 8, 58, "Text",ExpressionUUID->"db2c53c6-6e18-419c-bf70-b4c7d8c3cf74",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[279362, 8105, 366, 11, 64, "Input",ExpressionUUID->"bffeb595-42e3-4c28-9ab1-187f2f1a74f2",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[279731, 8118, 267, 8, 42, "Input",ExpressionUUID->"0872a539-d24b-483f-b969-2d00548acbdb",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[280001, 8128, 259, 6, 35, "Text",ExpressionUUID->"870df975-a0a6-4e7e-aed6-94dc1ae6944f",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[280263, 8136, 874, 23, 56, "Item",ExpressionUUID->"96176dd0-cd3d-4b95-8b90-fdc9dfd391ac",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[282153, 8192, 257, 10, 55, "Subsection",ExpressionUUID->"40169de1-f67d-45dc-b4b1-36b3326e91c5",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[282435, 8206, 624, 16, 56, "Item",ExpressionUUID->"b0160376-9bdc-4e6a-bb41-284a7aea2125",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[283203, 8229, 674, 22, 42, "Input",ExpressionUUID->"4377245d-bad9-434d-864a-e9361022a027",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[283880, 8253, 620, 20, 42, "Input",ExpressionUUID->"d2ea5300-89b1-432c-aa7d-9b9ae1dc7489",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[284537, 8278, 369, 9, 56, "Item",ExpressionUUID->"07924fcf-201a-4316-9819-b430fe6d4ae9",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[284909, 8289, 3612, 140, 199, "Output",ExpressionUUID->"7a6cc502-0b88-4bcf-8c62-f8274f465680",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[291368, 8511, 244, 10, 55, "Subsection",ExpressionUUID->"9843cae5-6af4-441a-8a6d-f3f632f0c885",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[291637, 8525, 377, 10, 35, "Item",ExpressionUUID->"cc40dac5-659f-4858-a394-192dfe2944c6",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[292017, 8537, 535, 18, 42, "Input",ExpressionUUID->"4377cf76-1c4a-4bba-8953-9247252d1e92",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[292589, 8560, 753, 19, 77, "Item",ExpressionUUID->"51646c8d-c251-416a-a0a0-0e36d61e44a7",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[293345, 8581, 808, 24, 148, "Input",ExpressionUUID->"64ea58a0-ffc5-48ec-8975-20a8b8287111",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294190, 8610, 249, 5, 35, "Item",ExpressionUUID->"9b03966e-0e34-46c8-a63d-49c15e5482fd",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294442, 8617, 199, 6, 42, "Input",ExpressionUUID->"eee84689-cc4a-4e34-8d60-4751f551ef74",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294678, 8628, 253, 5, 35, "Item",ExpressionUUID->"4aef71b4-45c9-4967-966a-a543f616889f",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294934, 8635, 293, 10, 42, "Input",ExpressionUUID->"1cc478c2-77a0-4d0d-a0c7-ab3a36d5ed53",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[295242, 8648, 662, 17, 56, "Item",ExpressionUUID->"ec7d54d7-f4fc-42e4-a3d5-8699d5ecb3d4",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[300457, 8798, 247, 7, 35, "Item",ExpressionUUID->"7fcc5eb0-2739-400d-9d20-b66306a086a7",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[307511, 9000, 259, 10, 55, "Subsection",ExpressionUUID->"68c02068-781f-4796-b5d0-32ad353b6224",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[307795, 9014, 517, 12, 56, "Item",ExpressionUUID->"6109f7ee-3838-42e6-8192-e0fff37f3866",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[308315, 9028, 1325, 37, 211, "Input",ExpressionUUID->"5ce97029-cf27-4199-b454-61675ba58a19",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[309677, 9070, 447, 10, 56, "Item",ExpressionUUID->"f1230aa3-bbfb-4372-865d-1502465ac378",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[310127, 9082, 313, 12, 107, "Input",ExpressionUUID->"90fbb6c6-67ab-4e39-9355-67aec7937207",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[310455, 9097, 493, 14, 35, "Item",ExpressionUUID->"9576c294-af8c-49a6-8d16-4d164f8fd83e",
   CellTags->{"Exercises", "Debugging a Program"}]},
 "Creating Definitions"->{
  Cell[192983, 5588, 854, 25, 37, "Item",ExpressionUUID->"ce390ce8-c1cf-43e0-a5b9-5fa36910b207",
   CellTags->{"Exercises", "Creating Definitions"}],
  Cell[195528, 5658, 868, 27, 35, "Item",ExpressionUUID->"a9707219-295e-4c27-8adb-87ec9d01305d",
   CellTags->{"Exercises", "Creating Definitions"}],
  Cell[197545, 5719, 347, 10, 44, "Item",ExpressionUUID->"94ddddca-41d8-4e6e-86b8-148c5b11d320",
   CellTags->{"Exercises", "Creating Definitions"}]},
 "Table I"->{
  Cell[198839, 5761, 279, 10, 55, "Subsection",ExpressionUUID->"e980c3bd-6a22-493d-9dca-a7b37bdffbeb",
   CellTags->{"Exercises", "Table I"}],
  Cell[199121, 5773, 635, 15, 81, "Text",ExpressionUUID->"2c8b1d5c-d860-4b69-98cd-0ab160f8bf6a",
   CellTags->{"Exercises", "Table I"}],
  Cell[199781, 5792, 227, 4, 35, "Item",ExpressionUUID->"3e6b4c71-9afd-48cd-86e6-704b4466725f",
   CellTags->{"Exercises", "Table I"}],
  Cell[200011, 5798, 341, 10, 42, "Input",ExpressionUUID->"4816a02d-97d7-4c45-9f9f-207e54bf9023",
   CellTags->{"Exercises", "Table I"}],
  Cell[200367, 5811, 195, 5, 35, "Item",ExpressionUUID->"d68315c2-dbc9-4b2c-a4a9-b32054dd90d1",
   CellTags->{"Exercises", "Table I"}]},
 "Table II"->{
  Cell[201483, 5846, 232, 9, 55, "Subsection",ExpressionUUID->"03bbec60-54f3-4135-8e97-6e1815993105",
   CellTags->{"Exercises", "Table II"}],
  Cell[201718, 5857, 605, 15, 58, "Text",ExpressionUUID->"74596f60-51bb-4d73-83a3-5ec09bc8697f",
   CellTags->{"Exercises", "Table II"}],
  Cell[202348, 5876, 279, 5, 35, "Item",ExpressionUUID->"44a6a099-3229-4555-876e-1868c67d0440",
   CellTags->{"Exercises", "Table II"}],
  Cell[202630, 5883, 347, 11, 42, "Input",ExpressionUUID->"05c9de89-581a-4ce4-a37d-2e73117b7e8d",
   CellTags->{"Exercises", "Table II"}],
  Cell[202992, 5897, 227, 4, 35, "Text",ExpressionUUID->"ad536f5b-8379-4d0f-be32-0999d28e8621",
   CellTags->{"Exercises", "Table II"}],
  Cell[203222, 5903, 164, 4, 42, "Input",ExpressionUUID->"1f0f54cd-7282-46f9-a39f-5cccdb9b2598",
   CellTags->{"Exercises", "Table II"}],
  Cell[203389, 5909, 376, 11, 35, "Text",ExpressionUUID->"02328f14-7f5d-4458-831f-3c0d6bcdfd80",
   CellTags->{"Exercises", "Table II"}],
  Cell[203768, 5922, 224, 6, 42, "Input",ExpressionUUID->"ee3002e6-0b09-436a-be46-d83e994a34cb",
   CellTags->{"Exercises", "Table II"}],
  Cell[203995, 5930, 196, 5, 35, "Item",ExpressionUUID->"129243ed-1a23-4c09-bd5f-9ac0769a8a9c",
   CellTags->{"Exercises", "Table II"}],
  Cell[211411, 6112, 251, 6, 35, "Item",ExpressionUUID->"006b9c96-5c97-4417-ab03-d180f33ccf20",
   CellTags->{"Exercises", "Table II"}]},
 "Matrix Operations"->{
  Cell[212983, 6160, 244, 10, 55, "Subsection",ExpressionUUID->"5b86380f-9aa1-46a7-86af-4b524ed10ab5",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[213230, 6172, 449, 13, 35, "Text",ExpressionUUID->"145ce818-821f-4e84-99c5-4a8043100056",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[213682, 6187, 269, 9, 42, "Input",ExpressionUUID->"7356623a-888c-46dd-98e9-3c0290a7a83e",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[213954, 6198, 440, 13, 35, "Text",ExpressionUUID->"b535a21d-fa58-4e0b-9b44-3c02c052c448",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[214397, 6213, 176, 5, 42, "Input",ExpressionUUID->"e6007f37-7590-4554-80de-2b199bdd5591",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[214576, 6220, 357, 10, 35, "Item",ExpressionUUID->"4b820ff8-b8af-4cfc-9368-49914f5e2527",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[216298, 6271, 356, 10, 35, "Item",ExpressionUUID->"3097ea22-881b-4058-81ce-d4585e1b0b0b",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[217711, 6315, 465, 15, 35, "Item",ExpressionUUID->"f17513d7-160f-499f-9068-a26c71931c9d",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[219054, 6358, 294, 8, 35, "Item",ExpressionUUID->"0078461a-f9a4-4efd-b299-7697ccaaa405",
   CellTags->{"Exercises", "Matrix Operations"}],
  Cell[220283, 6396, 304, 8, 35, "Item",ExpressionUUID->"7b29ec43-57fa-4a4b-91ec-f12fab713b1b",
   CellTags->{"Exercises", "Matrix Operations"}]},
 "Picking Parts"->{
  Cell[222308, 6456, 252, 9, 55, "Subsection",ExpressionUUID->"57671e0e-a060-4a99-91ee-5e799fcd81a2",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[222563, 6467, 230, 6, 35, "Text",ExpressionUUID->"1684db82-e917-4660-912f-7a9b42f2b0aa",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[223249, 6489, 902, 23, 81, "Text",ExpressionUUID->"531e8823-9816-487c-a284-844f92d77e44",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[224154, 6514, 210, 6, 42, "Input",ExpressionUUID->"cde50281-e384-4ca2-b50c-2f90db5f4544",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[224367, 6522, 245, 7, 42, "Input",ExpressionUUID->"16a73742-f201-423e-8133-98dabaeb4c3b",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[224615, 6531, 581, 12, 81, "Text",ExpressionUUID->"359a0489-64f7-4b07-9549-093078a0f38a",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[225199, 6545, 233, 7, 42, "Input",ExpressionUUID->"51fdb579-e5a4-4943-9e31-872ca15024d1",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[225435, 6554, 400, 10, 35, "Text",ExpressionUUID->"0095e783-c8d8-4e04-98e8-37b45d63e19b",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[225838, 6566, 301, 10, 42, "Input",ExpressionUUID->"fa8c7099-c166-4d81-933d-d302cd04d5e2",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[226142, 6578, 197, 5, 35, "Item",ExpressionUUID->"df653f71-6e12-4a3f-bd15-978b4801c7b1",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[231427, 6723, 372, 9, 35, "Item",ExpressionUUID->"936179e1-def4-471f-bbfd-2802c4895933",
   CellTags->{"Exercises", "Picking Parts"}],
  Cell[233145, 6774, 398, 8, 56, "Item",ExpressionUUID->"a2d72b1b-2c43-4057-b917-4a756151aec1",
   CellTags->{"Exercises", "Picking Parts"}]},
 "Immediate and Delayed"->{
  Cell[235558, 6843, 264, 10, 55, "Subsection",ExpressionUUID->"099fa7d2-dc8c-42af-be25-7351835124f5",
   CellTags->{"Exercises", "Immediate and Delayed"}],
  Cell[235825, 6855, 364, 11, 35, "Text",ExpressionUUID->"af744ca4-1183-4f5d-bb24-1c2776a27661",
   CellTags->{"Exercises", "Immediate and Delayed"}],
  Cell[236192, 6868, 291, 10, 42, "Input",ExpressionUUID->"0be4a84f-b110-4194-8a02-7e40ff478a47",
   CellTags->{"Exercises", "Immediate and Delayed"}],
  Cell[236486, 6880, 688, 18, 56, "Item",ExpressionUUID->"34ddc1bb-2d79-441f-89e9-351ba2616c06",
   CellTags->{"Exercises", "Immediate and Delayed"}]},
 "Localizing Variables"->{
  Cell[242343, 7036, 250, 10, 55, "Subsection",ExpressionUUID->"9b130e83-0c0f-46ed-9174-0d5360ba827d",
   CellTags->{"Exercises", "Localizing Variables"}],
  Cell[242618, 7050, 389, 9, 35, "Item",ExpressionUUID->"0b2648f3-ec73-4ad7-a39a-2283d4e900a4",
   CellTags->{"Exercises", "Localizing Variables"}],
  Cell[243010, 7061, 552, 17, 106, "Input",ExpressionUUID->"6fd6ceca-d187-49ed-b66f-a553b592db5d",
   CellTags->{"Exercises", "Localizing Variables"}]},
 "Using Patterns"->{
  Cell[246794, 7168, 258, 9, 55, "Subsection",ExpressionUUID->"3f008206-30e2-4877-afd2-ca33d9e89ee4",
   CellTags->{"Exercises", "Using Patterns"}],
  Cell[247077, 7181, 711, 18, 56, "Item",ExpressionUUID->"594e4489-ba47-48bf-8f22-383f7bf82a56",
   CellTags->{"Exercises", "Using Patterns"}],
  Cell[247791, 7201, 1100, 32, 85, "Input",ExpressionUUID->"0ebc10cc-9824-4969-8310-3c3b2826eb68",
   CellTags->{"Exercises", "Using Patterns"}],
  Cell[248906, 7236, 799, 19, 77, "Item",ExpressionUUID->"d2b3f4e5-ff0f-49ce-a299-b9b5a43e1a03",
   CellTags->{"Exercises", "Using Patterns"}]},
 "Pattern Matching"->{
  Cell[253687, 7367, 240, 9, 55, "Subsection",ExpressionUUID->"ec7b3270-427a-4c25-b600-1227260e5b01",
   CellTags->{"Exercises", "Pattern Matching"}],
  Cell[253930, 7378, 1756, 52, 59, "Item",ExpressionUUID->"2ec3664f-797b-4955-9a31-ab12b072cf59",
   CellTags->{"Exercises", "Pattern Matching"}]},
 "Constructing an Expression"->{
  Cell[261030, 7589, 262, 10, 55, "Subsection",ExpressionUUID->"91180fe6-2863-4f4d-9c0a-d43f3ed5837d",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[261295, 7601, 419, 10, 58, "Text",ExpressionUUID->"a6e656a7-4cad-41d7-ad51-007ff19cfbe5",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[261739, 7615, 477, 13, 56, "Item",ExpressionUUID->"f6563560-511b-4ea4-af21-06638de7e457",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[262219, 7630, 301, 10, 42, "Input",ExpressionUUID->"03fced40-c126-4017-8505-a6841b413599",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[268196, 7793, 635, 13, 77, "Item",ExpressionUUID->"9687d4c8-b9c1-468e-9c98-47a8a043a2a1",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[268834, 7808, 2916, 88, 114, "Input",ExpressionUUID->"144c33ad-49d0-4f21-a6ef-52936fa3b38c",
   CellTags->{"Exercises", "Constructing an Expression"}],
  Cell[275051, 7988, 552, 13, 56, "Item",ExpressionUUID->"c0f1762e-3313-4cd7-a686-2dc7da806b86",
   CellTags->{"Exercises", "Constructing an Expression"}]},
 "Delayed Rules"->{
  Cell[278747, 8084, 234, 9, 55, "Subsection",ExpressionUUID->"19481bdc-c8b3-42d5-9f97-e51343b73872",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[278984, 8095, 375, 8, 58, "Text",ExpressionUUID->"db2c53c6-6e18-419c-bf70-b4c7d8c3cf74",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[279362, 8105, 366, 11, 64, "Input",ExpressionUUID->"bffeb595-42e3-4c28-9ab1-187f2f1a74f2",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[279731, 8118, 267, 8, 42, "Input",ExpressionUUID->"0872a539-d24b-483f-b969-2d00548acbdb",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[280001, 8128, 259, 6, 35, "Text",ExpressionUUID->"870df975-a0a6-4e7e-aed6-94dc1ae6944f",
   CellTags->{"Exercises", "Delayed Rules"}],
  Cell[280263, 8136, 874, 23, 56, "Item",ExpressionUUID->"96176dd0-cd3d-4b95-8b90-fdc9dfd391ac",
   CellTags->{"Exercises", "Delayed Rules"}]},
 "Formatting Numbers"->{
  Cell[282153, 8192, 257, 10, 55, "Subsection",ExpressionUUID->"40169de1-f67d-45dc-b4b1-36b3326e91c5",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[282435, 8206, 624, 16, 56, "Item",ExpressionUUID->"b0160376-9bdc-4e6a-bb41-284a7aea2125",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[283203, 8229, 674, 22, 42, "Input",ExpressionUUID->"4377245d-bad9-434d-864a-e9361022a027",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[283880, 8253, 620, 20, 42, "Input",ExpressionUUID->"d2ea5300-89b1-432c-aa7d-9b9ae1dc7489",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[284537, 8278, 369, 9, 56, "Item",ExpressionUUID->"07924fcf-201a-4316-9819-b430fe6d4ae9",
   CellTags->{"Exercises", "Formatting Numbers"}],
  Cell[284909, 8289, 3612, 140, 199, "Output",ExpressionUUID->"7a6cc502-0b88-4bcf-8c62-f8274f465680",
   CellTags->{"Exercises", "Formatting Numbers"}]},
 "Programming Style"->{
  Cell[291368, 8511, 244, 10, 55, "Subsection",ExpressionUUID->"9843cae5-6af4-441a-8a6d-f3f632f0c885",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[291637, 8525, 377, 10, 35, "Item",ExpressionUUID->"cc40dac5-659f-4858-a394-192dfe2944c6",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[292017, 8537, 535, 18, 42, "Input",ExpressionUUID->"4377cf76-1c4a-4bba-8953-9247252d1e92",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[292589, 8560, 753, 19, 77, "Item",ExpressionUUID->"51646c8d-c251-416a-a0a0-0e36d61e44a7",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[293345, 8581, 808, 24, 148, "Input",ExpressionUUID->"64ea58a0-ffc5-48ec-8975-20a8b8287111",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294190, 8610, 249, 5, 35, "Item",ExpressionUUID->"9b03966e-0e34-46c8-a63d-49c15e5482fd",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294442, 8617, 199, 6, 42, "Input",ExpressionUUID->"eee84689-cc4a-4e34-8d60-4751f551ef74",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294678, 8628, 253, 5, 35, "Item",ExpressionUUID->"4aef71b4-45c9-4967-966a-a543f616889f",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[294934, 8635, 293, 10, 42, "Input",ExpressionUUID->"1cc478c2-77a0-4d0d-a0c7-ab3a36d5ed53",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[295242, 8648, 662, 17, 56, "Item",ExpressionUUID->"ec7d54d7-f4fc-42e4-a3d5-8699d5ecb3d4",
   CellTags->{"Exercises", "Programming Style"}],
  Cell[300457, 8798, 247, 7, 35, "Item",ExpressionUUID->"7fcc5eb0-2739-400d-9d20-b66306a086a7",
   CellTags->{"Exercises", "Programming Style"}]},
 "Debugging a Program"->{
  Cell[307511, 9000, 259, 10, 55, "Subsection",ExpressionUUID->"68c02068-781f-4796-b5d0-32ad353b6224",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[307795, 9014, 517, 12, 56, "Item",ExpressionUUID->"6109f7ee-3838-42e6-8192-e0fff37f3866",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[308315, 9028, 1325, 37, 211, "Input",ExpressionUUID->"5ce97029-cf27-4199-b454-61675ba58a19",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[309677, 9070, 447, 10, 56, "Item",ExpressionUUID->"f1230aa3-bbfb-4372-865d-1502465ac378",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[310127, 9082, 313, 12, 107, "Input",ExpressionUUID->"90fbb6c6-67ab-4e39-9355-67aec7937207",
   CellTags->{"Exercises", "Debugging a Program"}],
  Cell[310455, 9097, 493, 14, 35, "Item",ExpressionUUID->"9576c294-af8c-49a6-8d16-4d164f8fd83e",
   CellTags->{"Exercises", "Debugging a Program"}]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 351598, 10022},
 {"Overview", 356254, 10087},
 {"Assignments and Definitions", 356769, 10096},
 {"Procedural Programming", 362427, 10177},
 {"Functional Programming", 371092, 10304},
 {"Programming with Rules", 383642, 10487},
 {"Comparing Programming Styles", 394886, 10650},
 {"Application", 397515, 10687},
 {"Exercises", 402646, 10768},
 {"Creating Definitions", 415730, 10947},
 {"Table I", 416195, 10954},
 {"Table II", 416901, 10965},
 {"Matrix Operations", 418308, 10986},
 {"Picking Parts", 419803, 11007},
 {"Immediate and Delayed", 421550, 11032},
 {"Localizing Variables", 422189, 11041},
 {"Using Patterns", 422668, 11048},
 {"Pattern Matching", 423275, 11057},
 {"Constructing an Expression", 423607, 11062},
 {"Delayed Rules", 424730, 11077},
 {"Formatting Numbers", 425618, 11090},
 {"Programming Style", 426543, 11103},
 {"Debugging a Program", 428194, 11126}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[615, 23, 136, 2, 5, "SlideShowNavigationBar",ExpressionUUID->"f655b11a-8e79-4531-a47c-518fd5684ba0",
 CellTags->"SlideShowHeader"],
Cell[754, 27, 15061, 253, 142, "Title",ExpressionUUID->"af2101fb-ac2f-4eb4-ae84-19f6446a92fd"],
Cell[15818, 282, 526, 8, 143, "Title",ExpressionUUID->"cf585ad3-2aab-46ae-b106-b9c289ee08bb"],
Cell[16347, 292, 512, 8, 63, "Subtitle",ExpressionUUID->"c7d3aa6a-4fbc-4b4b-b37c-03bc9861a341"],
Cell[16862, 302, 298, 6, 152, "Text",ExpressionUUID->"f4cb14ee-09c2-4894-a7de-9825406e3c86"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17197, 313, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"5e1b7bef-b164-4a48-99aa-6bd141aae90a",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[17344, 319, 401, 6, 139, "Section",ExpressionUUID->"84dc8a8f-439c-4a50-a8af-5aefc862d9fd"],
Cell[CellGroupData[{
Cell[17770, 329, 321, 6, 91, "Subsection",ExpressionUUID->"aef7d318-77a4-44a0-a551-29a58a156a94"],
Cell[18094, 337, 163, 2, 35, "Item",ExpressionUUID->"fba3bd14-6e4b-4dd5-b529-c707fe1cd3a9",
 CellTags->"Overview"],
Cell[18260, 341, 158, 2, 35, "Item",ExpressionUUID->"64b6eb60-99e8-4418-add4-6827421181a9",
 CellTags->"Overview"],
Cell[18421, 345, 158, 2, 35, "Item",ExpressionUUID->"aba4b964-005b-4f07-9fbb-223e6b31668d",
 CellTags->"Overview"],
Cell[18582, 349, 158, 2, 35, "Item",ExpressionUUID->"65fba048-9f15-4bdc-bcb0-cf4559a72102",
 CellTags->"Overview"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[18801, 358, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"8a9d8598-8309-414d-af67-d27cc434210a",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[18948, 364, 351, 5, 230, "Section",ExpressionUUID->"f70853e2-e4b1-41a3-8150-41ae03bffad5"],
Cell[19302, 371, 215, 4, 35, "Item",ExpressionUUID->"a3b8cb25-8b5d-4528-bf7c-371641113c47",
 CellTags->"Assignments and Definitions"],
Cell[19520, 377, 219, 4, 35, "Item",ExpressionUUID->"38cd6d1e-ff96-40ab-bf86-dc93a1989bfc",
 CellTags->"Assignments and Definitions"],
Cell[19742, 383, 210, 4, 35, "Item",ExpressionUUID->"3d46425c-ead9-4726-b471-184cbc36abf1",
 CellTags->"Assignments and Definitions"],
Cell[19955, 389, 77, 0, 136, "EndOfSlide",ExpressionUUID->"59e34f4d-6167-4ef2-9b13-a2701efa05ff"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20081, 395, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9cec99c9-eaff-499a-a56d-d01580d0c736",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[20228, 401, 277, 5, 139, "Section",ExpressionUUID->"6115eafa-fad5-409d-9f16-a5016f3658fb"],
Cell[20508, 408, 212, 6, 35, "Text",ExpressionUUID->"871d0776-be13-4300-b11f-750362dc6649",
 CellTags->"Assignments and Definitions"],
Cell[20723, 416, 610, 17, 35, "CodeText",ExpressionUUID->"d58dd31b-f72b-46cb-9748-3eeceee47c26",
 CellTags->"Assignments and Definitions"],
Cell[21336, 435, 151, 4, 42, "Input",ExpressionUUID->"e5f4e12a-bce6-42a1-be6e-3ffefc7a3a06",
 CellTags->"Assignments and Definitions"],
Cell[21490, 441, 668, 17, 35, "CodeText",ExpressionUUID->"b562e99e-fc2d-4aa2-89a9-f7fa3cfc49ac",
 CellTags->"Assignments and Definitions"],
Cell[22161, 460, 223, 7, 42, "Input",ExpressionUUID->"84c18bc6-01b8-4dfd-aee2-94b27418ff5b",
 CellTags->"Assignments and Definitions"],
Cell[22387, 469, 360, 8, 58, "CodeText",ExpressionUUID->"06139443-e0b2-4459-b83e-a327b3278c0e",
 CellTags->"Assignments and Definitions"],
Cell[22750, 479, 127, 3, 42, "Input",ExpressionUUID->"7c70cf30-2167-426a-b46d-404479a5f67a",
 CellTags->"Assignments and Definitions"],
Cell[22880, 484, 491, 13, 35, "CodeText",ExpressionUUID->"4dad9ab9-2f1a-4d99-aae9-7218bf7eeac8",
 CellTags->"Assignments and Definitions"],
Cell[23374, 499, 223, 7, 42, "Input",ExpressionUUID->"cccc8aa2-ca0d-4590-8f6c-3ba5e1c70009",
 CellTags->"Assignments and Definitions"],
Cell[23600, 508, 77, 0, 136, "EndOfSlide",ExpressionUUID->"1003262d-dc8d-40ee-babe-4f03a9bf65e6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23726, 514, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"1bdcd0a8-6bfe-42eb-84f7-a69fe91681f5",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[23873, 520, 344, 5, 230, "Section",ExpressionUUID->"d0add2b5-20ea-4b5e-af51-0d5efdd35665"],
Cell[24220, 527, 259, 11, 35, "Text",ExpressionUUID->"655c1944-f9aa-4382-9adb-740b4464f8a1",
 CellTags->"Assignments and Definitions"],
Cell[24482, 540, 476, 13, 35, "Item",ExpressionUUID->"00c388a7-3139-4b25-b88c-1ddd05ce8c56",
 CellTags->"Assignments and Definitions"],
Cell[24961, 555, 480, 12, 35, "Item",ExpressionUUID->"f0f816e6-13c9-4f31-8ff9-e125699c408c",
 CellTags->"Assignments and Definitions"],
Cell[25444, 569, 425, 9, 35, "CodeText",ExpressionUUID->"79c78257-1a06-4b8e-be0d-cea170f38e66",
 CellTags->"Assignments and Definitions"],
Cell[25872, 580, 187, 5, 42, "Input",ExpressionUUID->"913c7b01-187c-455b-8da4-d0a5dd0772dc",
 CellTags->"Assignments and Definitions"],
Cell[26062, 587, 188, 5, 42, "Input",ExpressionUUID->"ec68d03e-ba10-4cf0-9416-d1190b6e3325",
 CellTags->"Assignments and Definitions"],
Cell[26253, 594, 608, 14, 35, "Text",ExpressionUUID->"8243e31b-3734-4d12-ac9d-29be891cf2c9",
 CellTags->"Assignments and Definitions"],
Cell[26864, 610, 683, 14, 81, "Text",ExpressionUUID->"f05e34ef-fca6-4b9c-abeb-8daf2aabdced",
 CellTags->"Assignments and Definitions"],
Cell[27550, 626, 349, 7, 35, "CodeText",ExpressionUUID->"d3102f20-3e5e-42b3-af1c-ba4df049f630",
 CellTags->"Assignments and Definitions"],
Cell[27902, 635, 211, 6, 42, "Input",ExpressionUUID->"5ecf312c-d5d9-44a7-b9be-7e80cf396e73",
 CellTags->"Assignments and Definitions"],
Cell[28116, 643, 211, 6, 42, "Input",ExpressionUUID->"d205fb66-bfdb-40d4-9ab0-64b9a08d7120",
 CellTags->"Assignments and Definitions"],
Cell[28330, 651, 228, 4, 35, "CodeText",ExpressionUUID->"b8c4e1e4-0959-440c-9bdb-475d1297fc3d",
 CellTags->"Assignments and Definitions"],
Cell[28561, 657, 211, 5, 42, "Input",ExpressionUUID->"d1969b1c-fc26-496a-a2d5-c3c51d4cac72",
 CellTags->"Assignments and Definitions"],
Cell[28775, 664, 77, 0, 136, "EndOfSlide",ExpressionUUID->"2ddaa8ae-0e42-4833-ab5a-b3b31a690a91"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28901, 670, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"2575d893-5755-440c-90aa-37e71f39d38e",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[29048, 676, 339, 5, 139, "Section",ExpressionUUID->"b2885ae9-d7d0-49db-aced-12e7003afcf0"],
Cell[29390, 683, 317, 7, 58, "Text",ExpressionUUID->"2b7a1451-09a5-4501-a5a2-055f26ace25c",
 CellTags->"Assignments and Definitions"],
Cell[29710, 692, 315, 7, 58, "Text",ExpressionUUID->"6b1bc352-3ab9-4056-8d5e-2c24b3613870",
 CellTags->"Assignments and Definitions"],
Cell[30028, 701, 297, 7, 58, "Text",ExpressionUUID->"1ce27c77-be1f-416a-9f5a-a6e2e1d3fedc",
 CellTags->"Assignments and Definitions"],
Cell[30328, 710, 652, 14, 58, "CodeText",ExpressionUUID->"665bff5b-977c-442b-800f-a4f71ac0f26b",
 CellTags->"Assignments and Definitions"],
Cell[30983, 726, 323, 10, 45, "Input",ExpressionUUID->"7e681d16-1f8a-4cdf-be44-46551bd9c2f8",
 CellTags->"Assignments and Definitions"],
Cell[31309, 738, 243, 4, 35, "CodeText",ExpressionUUID->"92ca9513-6b09-4322-b634-c3d662405250",
 CellTags->"Assignments and Definitions"],
Cell[31555, 744, 325, 10, 45, "Input",ExpressionUUID->"f07c1035-b103-4e1c-9557-acae4efeed02",
 CellTags->"Assignments and Definitions"],
Cell[31883, 756, 157, 4, 42, "Input",ExpressionUUID->"520451c9-ae2c-4e16-8f6c-967237ab1040",
 CellTags->"Assignments and Definitions"],
Cell[32043, 762, 184, 5, 42, "Input",ExpressionUUID->"d2fa5e6c-b76f-401f-8550-48558f0a6677",
 CellTags->"Assignments and Definitions"],
Cell[32230, 769, 409, 10, 58, "Text",ExpressionUUID->"f36206b1-2d90-4c3c-a4b0-d2eeaea94993"],
Cell[32642, 781, 315, 11, 35, "Text",ExpressionUUID->"2e70a502-392b-441e-b272-efe5e6963cf5"],
Cell[32960, 794, 77, 0, 136, "EndOfSlide",ExpressionUUID->"1f7b03f2-8e26-4776-a9a7-7d95faf2d870"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[33086, 800, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9ce53682-4176-4050-9628-719b6bd6da17",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[33233, 806, 310, 5, 139, "Section",ExpressionUUID->"8f8b528c-eba5-4234-9046-c2fdf84b5cdc"],
Cell[33546, 813, 243, 4, 35, "Text",ExpressionUUID->"1fb5faf3-4ded-418e-9a08-8fcab7dd19af",
 CellTags->"Assignments and Definitions"],
Cell[33792, 819, 277, 8, 42, "Input",ExpressionUUID->"4f0c932f-9ccb-41fc-b48a-1d0b8984e64f",
 CellTags->"Assignments and Definitions"],
Cell[34072, 829, 267, 6, 35, "CodeText",ExpressionUUID->"11cc1172-7f68-4d77-b58a-f1d5d58465bb",
 CellTags->"Assignments and Definitions"],
Cell[34342, 837, 156, 4, 42, "Input",ExpressionUUID->"b09f3710-5d57-4fd9-9186-7afe73dc1e84",
 CellTags->"Assignments and Definitions"],
Cell[34501, 843, 854, 25, 58, "Text",ExpressionUUID->"04df8c0e-61e9-41f8-9cca-1ff799b345e3",
 CellTags->"Assignments and Definitions"],
Cell[35358, 870, 672, 18, 35, "Text",ExpressionUUID->"59767219-1860-494b-addd-b90f83ca97c7",
 CellTags->"Assignments and Definitions"],
Cell[36033, 890, 77, 0, 136, "EndOfSlide",ExpressionUUID->"3d31f496-4693-4e26-86ba-f7a9605f3f44"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36159, 896, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"9dc5aab8-890f-4c9f-aa16-a2e46cecaf98",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[36306, 902, 346, 5, 230, "Section",ExpressionUUID->"6be1dc90-28bc-47ce-a2ed-62cbf3b43357"],
Cell[36655, 909, 209, 4, 35, "Item",ExpressionUUID->"35524aff-91ed-4103-870e-b135c52bc1ec",
 CellTags->"Procedural Programming"],
Cell[36867, 915, 198, 4, 35, "Item",ExpressionUUID->"bf695b03-61c4-42a0-ba9d-3c3023d97d72",
 CellTags->"Procedural Programming"],
Cell[37068, 921, 253, 5, 35, "Item",ExpressionUUID->"13597ebb-75fc-436a-966c-ef5dbab5f4f7",
 CellTags->"Procedural Programming"],
Cell[37324, 928, 247, 5, 35, "Item",ExpressionUUID->"6dffacae-7a4c-4673-890b-ecee8344b7a8",
 CellTags->"Procedural Programming"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37620, 939, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"95b4fa32-e4a3-43b7-8a66-863a0ea92fe7",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[37767, 945, 290, 5, 139, "Section",ExpressionUUID->"bbeeb9a6-8e88-4a5b-934d-f4c7d92b63f6"],
Cell[38060, 952, 332, 7, 58, "Text",ExpressionUUID->"3dd925a6-df4f-406c-8e9d-1b3a7e561e85",
 CellTags->"Procedural Programming"],
Cell[38395, 961, 347, 8, 35, "Text",ExpressionUUID->"3471edad-2ac2-4015-a28a-412bf2c0e896",
 CellTags->"Procedural Programming"],
Cell[38745, 971, 316, 8, 35, "CodeText",ExpressionUUID->"db1d86bc-ca73-4b3e-b840-4c2c34c3e5cb",
 CellTags->"Procedural Programming"],
Cell[39064, 981, 928, 23, 94, "Input",ExpressionUUID->"d7630bb1-b000-4323-ab8a-b5b53802b2b5",
 CellTags->"Procedural Programming"],
Cell[39995, 1006, 499, 10, 81, "Text",ExpressionUUID->"4cc430cb-899d-4396-ac9f-b7278b23165e",
 CellTags->"Procedural Programming"],
Cell[40497, 1018, 160, 2, 64, "Program",ExpressionUUID->"75462f57-bcd9-4aa6-8ac5-77db04fda88b"],
Cell[40660, 1022, 467, 12, 35, "CodeText",ExpressionUUID->"a33387e4-495a-4e23-9d49-c655e34892a1",
 CellTags->"Procedural Programming"],
Cell[41130, 1036, 526, 14, 106, "Input",ExpressionUUID->"a405f9ae-e269-4a7c-a689-41b13ae9836c",
 CellTags->"Procedural Programming"],
Cell[41659, 1052, 151, 4, 42, "Input",ExpressionUUID->"5e152cac-48f1-43cf-99b5-9b571678d2b4",
 CellTags->"Procedural Programming"],
Cell[41813, 1058, 78, 0, 136, "EndOfSlide",ExpressionUUID->"93fc370a-8ad2-4f6c-9e0f-f4736b26c2c4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41940, 1064, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"de6f74d7-7579-4404-9828-76bdebac0632",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[42087, 1070, 201, 4, 139, "Section",ExpressionUUID->"a77c00f2-233b-4ea5-963b-7da798d8f60c",
 CellTags->"Procedural Programming"],
Cell[42291, 1076, 824, 25, 58, "Text",ExpressionUUID->"2e0c3e6f-7f48-4ea5-8ff8-7b5383e1c762",
 CellTags->"Procedural Programming"],
Cell[43118, 1103, 4215, 97, 136, "Text",ExpressionUUID->"7d3f2cc4-16da-49d3-8a32-e5ea2db6edd1"],
Cell[47336, 1202, 751, 21, 35, "CodeText",ExpressionUUID->"4b990410-ec6e-41ef-847c-70001c036d50",
 CellTags->"Procedural Programming"],
Cell[48090, 1225, 219, 6, 42, "Input",ExpressionUUID->"557e5431-3091-4406-a355-06d95b099390",
 CellTags->"Procedural Programming"],
Cell[48312, 1233, 257, 8, 42, "Input",ExpressionUUID->"85b62202-6006-4c89-b5bd-249dcbbedf56",
 CellTags->"Procedural Programming"],
Cell[48572, 1243, 240, 4, 35, "CodeText",ExpressionUUID->"8446be08-a568-4c8a-8d0f-11c10cefed8e",
 CellTags->"Procedural Programming"],
Cell[48815, 1249, 249, 7, 42, "Input",ExpressionUUID->"b1ef4ae9-1782-4da4-a34c-8f287aa929b7",
 CellTags->"Procedural Programming"],
Cell[49067, 1258, 161, 4, 42, "Input",ExpressionUUID->"263b6844-6a8b-40a5-ad0c-0aa72c988ae4",
 CellTags->"Procedural Programming"],
Cell[49231, 1264, 595, 15, 58, "Text",ExpressionUUID->"0d6ea1d1-1415-4d5a-b36c-3b72199e8628"],
Cell[49829, 1281, 78, 0, 136, "EndOfSlide",ExpressionUUID->"7a0657ec-5b28-4255-9b65-292dabefc121"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[49956, 1287, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"719583de-4f5e-454e-b5e5-7880a749034b",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[50103, 1293, 244, 5, 230, "Section",ExpressionUUID->"b714ac71-f0aa-4265-a64b-47f43bc2c5ff",
 CellTags->"Procedural Programming"],
Cell[50350, 1300, 189, 5, 35, "Text",ExpressionUUID->"9acb43cb-fced-4b2d-915d-2bb9cfa91b02",
 CellTags->"Procedural Programming"],
Cell[50542, 1307, 305, 9, 35, "Item",ExpressionUUID->"9b950539-1b8c-46df-8511-dfd38fc819fc",
 CellTags->"Procedural Programming"],
Cell[50850, 1318, 462, 14, 35, "Item",ExpressionUUID->"6990a760-7c38-476d-b59d-63ae2cce81f9",
 CellTags->"Procedural Programming"],
Cell[CellGroupData[{
Cell[51337, 1336, 187, 4, 35, "Item",ExpressionUUID->"215cbba3-f7ae-4f8d-aa92-463605261ff2",
 CellTags->"Procedural Programming"],
Cell[51527, 1342, 744, 27, 33, "Subitem",ExpressionUUID->"7f123810-295d-4e25-ab3f-6f85bd0661b4",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[CellGroupData[{
Cell[52308, 1374, 236, 4, 35, "Item",ExpressionUUID->"53c2c620-2175-4082-831b-819bc1627a8b",
 CellTags->"Procedural Programming"],
Cell[52547, 1380, 620, 21, 33, "Subitem",ExpressionUUID->"ed30b51b-cc81-47c7-a4b9-202efc679ff5",
 CellTags->"Procedural Programming"]
}, Open  ]],
Cell[53182, 1404, 78, 0, 136, "EndOfSlide",ExpressionUUID->"881bd8cd-ef2e-437a-8093-411a1b9e8f94"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53309, 1410, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"74757f48-3053-4a6d-aab8-18ebbeafba40",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[53456, 1416, 209, 4, 139, "Section",ExpressionUUID->"d920c804-7970-465c-8263-5971e870eb78",
 CellTags->"Procedural Programming"],
Cell[53668, 1422, 567, 14, 58, "Text",ExpressionUUID->"be187282-15b6-477f-92de-2b8ddbea902d",
 CellTags->"Procedural Programming"],
Cell[54238, 1438, 496, 15, 106, "Input",ExpressionUUID->"acbf57e2-6e06-4ea0-9791-fd3be54f4f30",
 CellTags->"Procedural Programming"],
Cell[54737, 1455, 308, 7, 35, "CodeText",ExpressionUUID->"064520ab-4ec8-489c-abba-ebda0b9e3aae",
 CellTags->"Procedural Programming"],
Cell[55048, 1464, 556, 16, 127, "Input",ExpressionUUID->"8401f89c-1baa-461f-8f0e-e216d92ce8de",
 CellTags->"Procedural Programming"],
Cell[55607, 1482, 432, 11, 35, "CodeText",ExpressionUUID->"61c69596-3ed2-4a72-b978-0015f257276e",
 CellTags->"Procedural Programming"],
Cell[56042, 1495, 152, 4, 42, "Input",ExpressionUUID->"bef51c61-c875-4eb0-9538-709955025a8e",
 CellTags->"Procedural Programming"],
Cell[56197, 1501, 333, 9, 35, "CodeText",ExpressionUUID->"f3fdf67e-fc73-4fb4-bc94-b55b12299a97",
 CellTags->"Procedural Programming"],
Cell[56533, 1512, 193, 5, 42, "Input",ExpressionUUID->"4025be61-e7cb-4a98-bea9-27f2046017aa",
 CellTags->"Procedural Programming"],
Cell[56729, 1519, 78, 0, 136, "EndOfSlide",ExpressionUUID->"367ebe85-4fce-41ae-9d6c-0f16c15c9143"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[56856, 1525, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"509be803-9a38-4a21-9e3b-1305c5768d79",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[57003, 1531, 207, 4, 230, "Section",ExpressionUUID->"d3d02f9a-cc94-47a6-abd4-08c9663fe78b",
 CellTags->"Procedural Programming"],
Cell[57213, 1537, 200, 6, 35, "Text",ExpressionUUID->"643d550a-daf6-4d19-a3ef-c022f2b4eeff",
 CellTags->"Procedural Programming"],
Cell[57416, 1545, 399, 9, 35, "CodeText",ExpressionUUID->"ec405718-e817-4071-add7-0068ea614494",
 CellTags->"Procedural Programming"],
Cell[57818, 1556, 556, 16, 127, "Input",ExpressionUUID->"7c5ffe38-c62e-43c6-af95-f70739e6a18b",
 CellTags->"Procedural Programming"],
Cell[58377, 1574, 404, 9, 35, "CodeText",ExpressionUUID->"41a7f6b2-c6e2-432e-9ac2-e04ef7b46258",
 CellTags->"Procedural Programming"],
Cell[58784, 1585, 817, 22, 148, "Input",ExpressionUUID->"805ca13e-bd01-4c6b-8a2e-c026b1bfefde",
 CellTags->"Procedural Programming"],
Cell[59604, 1609, 288, 7, 35, "CodeText",ExpressionUUID->"8ff12398-f559-4127-9b56-9191cf0fd1d3",
 CellTags->"Procedural Programming"],
Cell[59895, 1618, 152, 4, 42, "Input",ExpressionUUID->"4e40b9d5-e73d-4bc0-9873-cd8bfe251091",
 CellTags->"Procedural Programming"],
Cell[60050, 1624, 151, 4, 42, "Input",ExpressionUUID->"495faa3a-cb9d-4380-853b-5ed6f065ceef",
 CellTags->"Procedural Programming"],
Cell[60204, 1630, 333, 9, 35, "CodeText",ExpressionUUID->"f4af14ff-dc9c-4961-8a90-3477cddf1334",
 CellTags->"Procedural Programming"],
Cell[60540, 1641, 155, 4, 42, "Input",ExpressionUUID->"03e32f93-1a5f-4114-a6da-2da31b9ed891",
 CellTags->"Procedural Programming"],
Cell[60698, 1647, 78, 0, 136, "EndOfSlide",ExpressionUUID->"7271b0e0-8846-4542-a711-1bda82585d76"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60825, 1653, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"28da5543-6600-41b0-ac87-178009490de1",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[60972, 1659, 197, 4, 139, "Section",ExpressionUUID->"9f291494-483c-458b-bb8a-ed9d273b7340",
 CellTags->"Procedural Programming"],
Cell[61172, 1665, 400, 10, 58, "Text",ExpressionUUID->"9462c3d6-b050-4a20-8ee9-b28eeef50142",
 CellTags->"Procedural Programming"],
Cell[61575, 1677, 759, 19, 58, "CodeText",ExpressionUUID->"9834d53c-6211-4e77-9ee7-e925c8468fc1",
 CellTags->"Procedural Programming"],
Cell[62337, 1698, 556, 16, 127, "Input",ExpressionUUID->"cb9c051a-24d3-4270-b32b-40734f793682",
 CellTags->"Procedural Programming"],
Cell[62896, 1716, 478, 12, 58, "Text",ExpressionUUID->"781fa167-39d9-49a2-8076-ee6760cbfb8f",
 CellTags->"Procedural Programming"],
Cell[63377, 1730, 298, 8, 72, "Text",ExpressionUUID->"2f41bc11-5c4f-445a-84f6-9aa970fbf5bd"],
Cell[63678, 1740, 413, 10, 35, "CodeText",ExpressionUUID->"11f5275b-e21d-45c6-b4d8-a31412bf78e7",
 CellTags->"Procedural Programming"],
Cell[64094, 1752, 629, 18, 127, "Input",ExpressionUUID->"aa29308c-be68-4e2a-88cd-717302a5ca32",
 CellTags->"Procedural Programming"],
Cell[64726, 1772, 465, 12, 35, "CodeText",ExpressionUUID->"b3e7d0ab-7f6b-4cfc-b3a0-be063aecba11",
 CellTags->"Procedural Programming"],
Cell[65194, 1786, 152, 4, 42, "Input",ExpressionUUID->"7ef0f8e8-3938-4612-aba1-bfe01b6f6ba1",
 CellTags->"Procedural Programming"],
Cell[65349, 1792, 151, 4, 42, "Input",ExpressionUUID->"bd134429-de2d-4ac2-9471-61710b9ead4e",
 CellTags->"Procedural Programming"],
Cell[65503, 1798, 129, 3, 42, "Input",ExpressionUUID->"03d0bb4a-21da-4916-806b-cd4a8e1c8481",
 CellTags->"Procedural Programming"],
Cell[65635, 1803, 238, 8, 35, "Text",ExpressionUUID->"e9ee2afb-4c18-4b78-898a-1d578ef44d2f",
 CellTags->"Procedural Programming"],
Cell[65876, 1813, 257, 6, 35, "Text",ExpressionUUID->"f8e55fc6-c2f2-4a60-823f-ad5879b8814f",
 CellTags->"Procedural Programming"],
Cell[66136, 1821, 417, 12, 35, "CodeText",ExpressionUUID->"a9e40c3d-66db-45fc-94c3-3923b9fcfd24",
 CellTags->"Procedural Programming"],
Cell[66556, 1835, 183, 5, 42, "Input",ExpressionUUID->"bd43b0aa-9b9e-4d5f-b64d-9850d31d7702",
 CellTags->"Procedural Programming"],
Cell[66742, 1842, 336, 11, 35, "Text",ExpressionUUID->"cd2d941f-bf66-4ca9-ac44-ba5623df58c1"],
Cell[67081, 1855, 78, 0, 136, "EndOfSlide",ExpressionUUID->"cdcfae88-4902-4a04-8b3d-b7b303e2289c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[67208, 1861, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"159aa23e-4beb-40ff-8b26-b38d67b9cab4",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[67355, 1867, 216, 4, 230, "Section",ExpressionUUID->"b2a75dfd-09af-418a-a699-f6441b3b61d6",
 CellTags->"Functional Programming"],
Cell[67574, 1873, 228, 4, 35, "Item",ExpressionUUID->"7cc06320-eb4e-4743-99fd-3b48ef361ef8",
 CellTags->"Functional Programming"],
Cell[67805, 1879, 561, 20, 35, "Item",ExpressionUUID->"d307fbf5-e11c-4573-8a8b-e3bf733c3256",
 CellTags->"Functional Programming"],
Cell[68369, 1901, 223, 4, 35, "Item",ExpressionUUID->"ca241773-425c-4927-92a8-719c26c00e3e",
 CellTags->"Functional Programming"],
Cell[68595, 1907, 213, 4, 35, "Item",ExpressionUUID->"f7a7452e-05dd-4908-832a-4521c2e05196",
 CellTags->"Functional Programming"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[68857, 1917, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"09667d6f-2474-4be0-a2aa-665244744e7f",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[69004, 1923, 204, 4, 139, "Section",ExpressionUUID->"6635e80c-ca43-4211-9199-28f623f0749c",
 CellTags->"Functional Programming"],
Cell[69211, 1929, 305, 7, 58, "Text",ExpressionUUID->"2aec1187-1d4c-4d87-85e5-2fa2f113b5c0",
 CellTags->"Functional Programming"],
Cell[69519, 1938, 232, 4, 35, "CodeText",ExpressionUUID->"cc5c70d1-5b15-40cc-a566-e733b5b9e4f7",
 CellTags->"Functional Programming"],
Cell[69754, 1944, 842, 23, 94, "Input",ExpressionUUID->"eac4ddee-b3aa-47da-8202-1e40690e09d8",
 CellTags->"Functional Programming"],
Cell[70599, 1969, 244, 5, 35, "CodeText",ExpressionUUID->"cba8c846-f485-4dc7-a8b3-8130b2a8c97a",
 CellTags->"Functional Programming"],
Cell[70846, 1976, 759, 19, 52, "Input",ExpressionUUID->"364e1a89-5526-491f-be17-57ab13b8f33d",
 CellTags->"Functional Programming"],
Cell[71608, 1997, 78, 0, 136, "EndOfSlide",ExpressionUUID->"639419ea-8639-43b6-a403-f1d705f91bbc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[71735, 2003, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"cc695b10-5885-4d72-9fd6-d5ea573ec45d",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[71882, 2009, 208, 4, 139, "Section",ExpressionUUID->"b2c8542a-df56-4574-9336-a5e0741e0d51",
 CellTags->"Functional Programming"],
Cell[72093, 2015, 191, 5, 35, "Text",ExpressionUUID->"93ac0623-cea2-4408-a5b1-b1b9a705739d",
 CellTags->"Functional Programming"],
Cell[72287, 2022, 419, 9, 58, "Text",ExpressionUUID->"719f9769-f1fe-4620-be16-f72f2751c1d2",
 CellTags->"Functional Programming"],
Cell[72709, 2033, 297, 7, 35, "CodeText",ExpressionUUID->"fd4836db-ee7a-422a-97e5-89aff993f9f9",
 CellTags->"Functional Programming"],
Cell[73009, 2042, 274, 9, 59, "Input",ExpressionUUID->"3b4de242-87b2-4857-9672-e3d07760b538",
 CellTags->"Functional Programming"],
Cell[73286, 2053, 158, 4, 42, "Input",ExpressionUUID->"dd809758-b554-4e9f-a198-9e7200e62258",
 CellTags->"Functional Programming"],
Cell[73447, 2059, 220, 4, 35, "CodeText",ExpressionUUID->"7b4b3594-62e9-44d3-b36b-6d86c987c9f7",
 CellTags->"Functional Programming"],
Cell[73670, 2065, 190, 5, 42, "Input",ExpressionUUID->"f3bc0de2-4a49-4d87-947f-e46e0976ae7c",
 CellTags->"Functional Programming"],
Cell[73863, 2072, 241, 4, 35, "CodeText",ExpressionUUID->"bd7038bb-44eb-4da1-b140-ca664b7549d2",
 CellTags->"Functional Programming"],
Cell[74107, 2078, 223, 6, 42, "Input",ExpressionUUID->"205d9f0f-c6f1-45b8-8683-894510cdd872",
 CellTags->"Functional Programming"],
Cell[74333, 2086, 303, 5, 35, "Text",ExpressionUUID->"fc99a6be-82ce-4ae6-a414-b8ddd8e52e67",
 CellTags->"Functional Programming"],
Cell[74639, 2093, 426, 9, 35, "CodeText",ExpressionUUID->"8d5716aa-bd5f-4e2c-9980-a4774499329b",
 CellTags->"Functional Programming"],
Cell[75068, 2104, 210, 6, 42, "Input",ExpressionUUID->"e3df103a-afd5-4bce-b58d-49ffb89bbcc5",
 CellTags->"Functional Programming"],
Cell[75281, 2112, 321, 8, 35, "CodeText",ExpressionUUID->"8eb7808a-e0c8-4a50-ac0a-53ff951dfa19",
 CellTags->"Functional Programming"],
Cell[75605, 2122, 194, 5, 42, "Input",ExpressionUUID->"04cf384d-463a-42d9-b161-e3819652b23e",
 CellTags->"Functional Programming"],
Cell[75802, 2129, 254, 6, 35, "CodeText",ExpressionUUID->"d54c3222-7521-492d-bd28-a26cff703e58",
 CellTags->"Functional Programming"],
Cell[76059, 2137, 265, 6, 42, "Input",ExpressionUUID->"a5ace270-2dc1-4f16-bcd3-6dd448f6549c",
 CellTags->"Functional Programming"],
Cell[76327, 2145, 591, 12, 81, "Text",ExpressionUUID->"eb2332a7-37d3-43fd-b0f4-7a13dd0b869f",
 CellTags->"Functional Programming"],
Cell[76921, 2159, 78, 0, 136, "EndOfSlide",ExpressionUUID->"8c865de7-ac15-477f-9e29-28797ed8dcfe"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[77048, 2165, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"01f524f3-db14-4236-b760-53465f589ca3",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[77195, 2171, 161, 4, 139, "Section",ExpressionUUID->"7ce816e5-7bb2-46a0-a39d-5bd0a9cc7c31",
 CellTags->"Functional Programming"],
Cell[77359, 2177, 389, 8, 58, "Text",ExpressionUUID->"cc3eb8db-db6d-410f-af28-b42e332dd909",
 CellTags->"Functional Programming"],
Cell[77751, 2187, 305, 7, 35, "CodeText",ExpressionUUID->"bdff6e3f-d4e5-4386-8251-0274d70ce178",
 CellTags->"Functional Programming"],
Cell[78059, 2196, 307, 9, 42, "Input",ExpressionUUID->"155efb98-8c74-4fd2-bed7-f5bf0568ab65",
 CellTags->"Functional Programming"],
Cell[78369, 2207, 604, 16, 35, "CodeText",ExpressionUUID->"4d530a51-33dd-4991-8e48-d693b622773d",
 CellTags->"Functional Programming"],
Cell[78976, 2225, 240, 7, 42, "Input",ExpressionUUID->"f4a2f119-4907-4217-8163-bf2a71eb9419",
 CellTags->"Functional Programming"],
Cell[79219, 2234, 210, 6, 42, "Input",ExpressionUUID->"ba71da35-2343-4106-bd3e-4ee3054cc1a0",
 CellTags->"Functional Programming"],
Cell[79432, 2242, 311, 7, 35, "Text",ExpressionUUID->"89acda73-2bd5-453c-a69f-c2bbb0af9183",
 CellTags->"Functional Programming"],
Cell[79746, 2251, 426, 12, 35, "CodeText",ExpressionUUID->"5732ee63-0163-4dbd-985d-d23c3ce32c94",
 CellTags->"Functional Programming"],
Cell[80175, 2265, 321, 10, 45, "Input",ExpressionUUID->"b3d502d5-7b02-468e-be27-b1f4eb388f4d",
 CellTags->"Functional Programming"],
Cell[80499, 2277, 389, 10, 35, "CodeText",ExpressionUUID->"e70d8116-771a-41b7-a520-24de80ada014",
 CellTags->"Functional Programming"],
Cell[80891, 2289, 331, 10, 42, "Input",ExpressionUUID->"b4b3dd29-a4e1-4814-be3e-7cbec403ddef",
 CellTags->"Functional Programming"],
Cell[81225, 2301, 3166, 82, 42, "Text",ExpressionUUID->"4d54a6aa-b7dd-4eba-841f-5d8c37268b0f"],
Cell[84394, 2385, 421, 12, 35, "CodeText",ExpressionUUID->"a6e83c03-9c7b-40f1-96d5-ddb457a77cbe",
 CellTags->"Functional Programming"],
Cell[84818, 2399, 400, 10, 42, "Input",ExpressionUUID->"5e8c270f-c97f-46a4-9dbb-b15a6b9c9532",
 CellTags->"Functional Programming"],
Cell[85221, 2411, 295, 7, 35, "Text",ExpressionUUID->"2ad06a17-bdf6-419c-afe9-f306b5627c80",
 CellTags->"Functional Programming"],
Cell[85519, 2420, 384, 10, 35, "CodeText",ExpressionUUID->"0beb6a30-6c62-49bb-8f2b-1bdef4f4f284",
 CellTags->"Functional Programming"],
Cell[85906, 2432, 122, 3, 42, "Input",ExpressionUUID->"c03cab70-c6bf-45db-89ad-856c2ced291a",
 CellTags->"Functional Programming"],
Cell[86031, 2437, 78, 0, 136, "EndOfSlide",ExpressionUUID->"46643aff-8c7c-4e6c-8ee5-93de74bf7532"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[86158, 2443, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"cb226865-4947-410b-add2-4f55d984f482",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[86305, 2449, 201, 4, 139, "Section",ExpressionUUID->"09bd646f-84af-4c2f-bf2e-255ab097ff2d",
 CellTags->"Functional Programming"],
Cell[86509, 2455, 445, 15, 58, "Text",ExpressionUUID->"f0f3b97c-a1d4-4eba-b6cc-eb368df10193",
 CellTags->"Functional Programming"],
Cell[86957, 2472, 272, 7, 35, "Text",ExpressionUUID->"b0e12a86-6978-4df6-83cb-fc76754d0b1d",
 CellTags->"Functional Programming"],
Cell[87232, 2481, 7672, 184, 336, "Text",ExpressionUUID->"ebb018c0-9ae6-4da2-9f9e-71a46a6976e7"],
Cell[94907, 2667, 500, 13, 35, "CodeText",ExpressionUUID->"c6bb0d2c-733e-4186-a2dd-8c9ccc5f395f",
 CellTags->"Functional Programming"],
Cell[95410, 2682, 239, 7, 42, "Input",ExpressionUUID->"26f8494c-db9a-45db-8f1b-9123fdaa7708",
 CellTags->"Functional Programming"],
Cell[95652, 2691, 247, 7, 42, "Input",ExpressionUUID->"a093aac0-bb35-4f19-9808-a7241e048dc9",
 CellTags->"Functional Programming"],
Cell[95902, 2700, 261, 7, 42, "Input",ExpressionUUID->"7a06008a-325a-454c-802a-246e055efce7",
 CellTags->"Functional Programming"],
Cell[96166, 2709, 78, 0, 136, "EndOfSlide",ExpressionUUID->"6f8ecca1-2fd7-4161-b049-ba84928c568c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[96293, 2715, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"bce6d04e-bda2-4c2f-9aa6-dc871bf95290",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[96440, 2721, 202, 4, 139, "Section",ExpressionUUID->"415f6552-f66e-4bc8-8ab4-c5da6fb88dab",
 CellTags->"Functional Programming"],
Cell[96645, 2727, 521, 15, 58, "Text",ExpressionUUID->"cffb7a70-e24f-4a1e-b6f0-5e15e923418a",
 CellTags->"Functional Programming"],
Cell[97169, 2744, 470, 14, 64, "Program",ExpressionUUID->"48c6cae4-ee0a-4673-bc15-54d89bd11111"],
Cell[97642, 2760, 720, 22, 58, "Text",ExpressionUUID->"1ed3051d-52d8-440f-9a56-005f9d533f0a",
 CellTags->"Functional Programming"],
Cell[98365, 2784, 772, 20, 58, "CodeText",ExpressionUUID->"9288b92c-dc9b-4b98-a82a-8ea7a191ced5",
 CellTags->"Functional Programming"],
Cell[99140, 2806, 212, 6, 42, "Input",ExpressionUUID->"efeb8009-598d-4fb1-98df-2ba6eae7f355",
 CellTags->"Functional Programming"],
Cell[99355, 2814, 214, 6, 42, "Input",ExpressionUUID->"936eeb55-fb05-459d-92a7-e72e692fa44b",
 CellTags->"Functional Programming"],
Cell[99572, 2822, 1763, 46, 42, "Text",ExpressionUUID->"3bf43bf5-13aa-4df5-bc6a-89c191e6d1d5"],
Cell[101338, 2870, 357, 11, 35, "CodeText",ExpressionUUID->"71eecc87-d4e5-4a42-971b-932813a8f641"],
Cell[101698, 2883, 201, 5, 42, "Input",ExpressionUUID->"e70fd795-ffb9-4ff7-a519-07bed80c17a7"],
Cell[101902, 2890, 334, 7, 35, "CodeText",ExpressionUUID->"ae125166-eb59-436b-ac13-4af3cc7b15dd",
 CellTags->"Functional Programming"],
Cell[102239, 2899, 384, 13, 42, "Input",ExpressionUUID->"35c0dec6-ae24-4f80-bdd3-ba259a78f7c1",
 CellTags->"Functional Programming"],
Cell[102626, 2914, 503, 15, 35, "CodeText",ExpressionUUID->"8f03cb0b-a5b1-40e0-a3c0-571fc944e9b1",
 CellTags->"Functional Programming"],
Cell[103132, 2931, 160, 4, 42, "Input",ExpressionUUID->"7a62ae9a-e955-470b-bf70-b7ef272a696c",
 CellTags->"Functional Programming"],
Cell[103295, 2937, 160, 4, 42, "Input",ExpressionUUID->"c611d3b4-2d6e-4a10-bac1-ddf3d12338c8",
 CellTags->"Functional Programming"],
Cell[103458, 2943, 156, 4, 42, "Input",ExpressionUUID->"f88d7ff3-2494-41a3-a168-4df8337eceb4",
 CellTags->"Functional Programming"],
Cell[103617, 2949, 413, 10, 35, "CodeText",ExpressionUUID->"2987e792-8904-409d-b329-fd27936da544",
 CellTags->"Functional Programming"],
Cell[104033, 2961, 158, 4, 42, "Input",ExpressionUUID->"9804b3e3-8819-45b7-b54f-d8f4b63642db",
 CellTags->"Functional Programming"],
Cell[104194, 2967, 257, 4, 35, "CodeText",ExpressionUUID->"395d8de6-9626-49ef-a6a3-f79af6ebc0f3"],
Cell[104454, 2973, 139, 3, 42, "Input",ExpressionUUID->"d9102f75-f3ee-4587-a20c-cff92f9a1479"],
Cell[104596, 2978, 265, 6, 35, "CodeText",ExpressionUUID->"e656a132-1a6e-4792-a79a-b9b172deadcf",
 CellTags->"Functional Programming"],
Cell[104864, 2986, 431, 12, 45, "Input",ExpressionUUID->"f053727a-5d78-47b8-a97f-efbd74fb63c8",
 CellTags->"Functional Programming"],
Cell[105298, 3000, 274, 5, 35, "CodeText",ExpressionUUID->"f889f32f-dc26-4d9b-81e1-16dacbaa2be0",
 CellTags->"Functional Programming"],
Cell[105575, 3007, 177, 5, 42, "Input",ExpressionUUID->"0d328326-549a-46d9-a18b-c08b09a02011",
 CellTags->"Functional Programming"],
Cell[105755, 3014, 211, 6, 35, "Text",ExpressionUUID->"86837990-0f03-4211-86a4-722f6e5262f5",
 CellTags->"Functional Programming"],
Cell[105969, 3022, 143, 3, 42, "Input",ExpressionUUID->"54710cc0-ff76-4842-a7af-c3d39616cf93"],
Cell[106115, 3027, 78, 0, 136, "EndOfSlide",ExpressionUUID->"9a7db5be-6256-402c-b0af-575d44c2acec"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[106242, 3033, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"34e49375-e900-4629-b4fd-2640e88cd294",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[106389, 3039, 163, 4, 139, "Section",ExpressionUUID->"83515889-61b3-41b2-8ecd-166eedbb9328",
 CellTags->"Functional Programming"],
Cell[106555, 3045, 253, 6, 35, "Text",ExpressionUUID->"9bd9b0be-dcdd-4df7-ae48-0ae43296ff4f",
 CellTags->"Functional Programming"],
Cell[106811, 3053, 557, 16, 35, "Text",ExpressionUUID->"2a5f977b-d67f-41e5-8ca4-2c4b4cf7e4ba",
 CellTags->"Functional Programming"],
Cell[107371, 3071, 309, 6, 58, "Text",ExpressionUUID->"c76d3422-871d-4e5e-8c88-ebdb9760cc25"],
Cell[107683, 3079, 284, 5, 35, "CodeText",ExpressionUUID->"6202b33e-a577-4511-8f14-77a64dcc3557",
 CellTags->"Functional Programming"],
Cell[107970, 3086, 265, 8, 42, "Input",ExpressionUUID->"51610350-972c-4773-87b2-7f16e5a69f6c",
 CellTags->"Functional Programming"],
Cell[108238, 3096, 883, 23, 58, "CodeText",ExpressionUUID->"5601029a-457c-49be-ad4e-b9b754d98902",
 CellTags->"Functional Programming"],
Cell[109124, 3121, 264, 8, 42, "Input",ExpressionUUID->"66f03453-4656-46f4-a2e0-831c2457dc57",
 CellTags->"Functional Programming"],
Cell[109391, 3131, 411, 12, 35, "CodeText",ExpressionUUID->"f8d86d5a-5e5f-4aec-bb9d-194cfdb2519d",
 CellTags->"Functional Programming"],
Cell[109805, 3145, 323, 9, 42, "Input",ExpressionUUID->"30de7607-a676-4bf1-8eff-fda6c686dbbe",
 CellTags->"Functional Programming"],
Cell[110131, 3156, 296, 6, 58, "CodeText",ExpressionUUID->"cf434fc7-fe6e-46be-8db5-6f20a093e6be"],
Cell[110430, 3164, 175, 4, 42, "Input",ExpressionUUID->"a7d2ce34-15d2-4bd7-ba8e-dc3f600e6ade"],
Cell[110608, 3170, 540, 13, 35, "CodeText",ExpressionUUID->"55caa19a-7a43-4db7-bc00-a186279ba680"],
Cell[111151, 3185, 148, 3, 42, "Input",ExpressionUUID->"1bebd262-2d8e-48be-8572-5743c751cd3e"],
Cell[111302, 3190, 78, 0, 136, "EndOfSlide",ExpressionUUID->"07b2120b-b488-4e5e-97db-cce6d854846f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[111429, 3196, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"c7e1e7ce-db45-40d9-aded-efbcb36f69cd",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[111576, 3202, 202, 4, 139, "Section",ExpressionUUID->"b8775166-7320-4e66-b47d-cc7ed6c6ff06",
 CellTags->"Functional Programming"],
Cell[111781, 3208, 304, 7, 58, "Text",ExpressionUUID->"175d3f28-67bb-4099-81d4-8a548b07c961",
 CellTags->"Functional Programming"],
Cell[112088, 3217, 291, 7, 35, "CodeText",ExpressionUUID->"45258354-ae4e-4025-a5b8-4e5760794fe0",
 CellTags->"Functional Programming"],
Cell[112382, 3226, 485, 15, 64, "Input",ExpressionUUID->"fa3e60ee-a11f-48e2-88cf-6f0e72a0f4d1",
 CellTags->"Functional Programming"],
Cell[112870, 3243, 325, 6, 35, "CodeText",ExpressionUUID->"d6e55f2b-d110-4823-b180-491cd7ba9b5d",
 CellTags->"Functional Programming"],
Cell[113198, 3251, 601, 19, 127, "Input",ExpressionUUID->"5514ea4d-a32b-4e2e-bcb3-9fc54663d3f9",
 CellTags->"Functional Programming"],
Cell[113802, 3272, 625, 16, 35, "Text",ExpressionUUID->"b687df86-1077-4cd3-8a4c-5ea0b35afc93",
 CellTags->"Functional Programming"],
Cell[114430, 3290, 247, 5, 35, "CodeText",ExpressionUUID->"305f09a2-36ac-429c-a7bd-a6a9af258a46",
 CellTags->"Functional Programming"],
Cell[114680, 3297, 180, 5, 42, "Input",ExpressionUUID->"3f8c53b4-f2b7-4da3-aa44-85bf447eb20f",
 CellTags->"Functional Programming"],
Cell[114863, 3304, 2357, 62, 42, "Text",ExpressionUUID->"489033ce-f7dd-4ca1-a4a3-724c1cee1cfe"],
Cell[117223, 3368, 373, 10, 35, "Text",ExpressionUUID->"16f79ade-5e1d-48a4-aa5c-bce249114b06"],
Cell[117599, 3380, 138, 2, 42, "Input",ExpressionUUID->"48374f1a-e02c-496c-ac1f-3b25038ccfea"],
Cell[117740, 3384, 395, 11, 42, "Input",ExpressionUUID->"5a562a26-09c1-41f6-81b2-acb3760ba445"],
Cell[118138, 3397, 161, 3, 42, "Input",ExpressionUUID->"ca9077ae-d7dc-4089-bd6e-e96d5f1d32bf"],
Cell[118302, 3402, 185, 5, 42, "Input",ExpressionUUID->"d4c68418-303d-42d9-b219-f44124b619f0",
 CellTags->"Functional Programming"],
Cell[118490, 3409, 336, 11, 35, "Text",ExpressionUUID->"ced11aa1-398d-4142-b3af-96a4d1c1b451"],
Cell[118829, 3422, 78, 0, 136, "EndOfSlide",ExpressionUUID->"23739937-4218-4aab-b1c7-6cb841ca6cd5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[118956, 3428, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"5839ccb4-5145-42ba-bd72-fc04ab9a1974",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[119103, 3434, 214, 4, 230, "Section",ExpressionUUID->"59a9c990-09fb-46bd-ad83-672086f41476",
 CellTags->"Programming with Rules"],
Cell[119320, 3440, 336, 10, 35, "Item",ExpressionUUID->"632b5dcc-2777-4013-aeac-96789539f738",
 CellTags->"Programming with Rules"],
Cell[119659, 3452, 194, 4, 35, "Item",ExpressionUUID->"06cae940-5f75-4e4d-b749-3c6f9729e71d",
 CellTags->"Programming with Rules"],
Cell[119856, 3458, 201, 4, 35, "Item",ExpressionUUID->"6c615900-9c9d-4ffa-9ec3-acaa43262052",
 CellTags->"Programming with Rules"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[120106, 3468, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"503f19e9-c6d0-4e34-a21c-98328ac6804b",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[120253, 3474, 167, 3, 139, "Section",ExpressionUUID->"dc571107-7959-453c-ad55-da4a2546a3b1"],
Cell[120423, 3479, 1092, 27, 106, "Input",ExpressionUUID->"8f0efd5f-940e-44ec-abd4-4bd4b49f6b45"],
Cell[121518, 3508, 481, 13, 35, "CodeText",ExpressionUUID->"48341ba2-f5fa-4bd6-b7fd-2ebce841f8c1"],
Cell[122002, 3523, 186, 4, 42, "Input",ExpressionUUID->"a24e89be-08e9-4e85-a97a-47bb40ff5d4e"],
Cell[122191, 3529, 259, 7, 35, "Text",ExpressionUUID->"ecc4fd7f-c7dc-4876-b181-4380a19ea406"],
Cell[122453, 3538, 78, 0, 136, "EndOfSlide",ExpressionUUID->"2b173621-6bec-445a-99c0-b94f8879e149"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[122580, 3544, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"a8ad3d41-6bd5-412c-93d7-bb333acd8f47",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[122727, 3550, 201, 4, 139, "Section",ExpressionUUID->"490ba985-5235-4467-95b0-44d50930ec9d",
 CellTags->"Programming with Rules"],
Cell[122931, 3556, 273, 6, 58, "Text",ExpressionUUID->"67ba1dcc-80e4-460d-a089-8a06eaa2be13",
 CellTags->"Programming with Rules"],
Cell[123207, 3564, 146, 4, 42, "Input",ExpressionUUID->"fc58ac1a-39d5-4532-b541-f932dc478a85",
 CellTags->"Programming with Rules"],
Cell[123356, 3570, 187, 6, 42, "Input",ExpressionUUID->"ae68c13e-2922-4c14-9ddf-19d8302526e1",
 CellTags->"Programming with Rules"],
Cell[123546, 3578, 295, 7, 58, "Text",ExpressionUUID->"3a480a4c-63a3-434d-a899-ae9e70528a2b",
 CellTags->"Programming with Rules"],
Cell[123844, 3587, 575, 14, 35, "Text",ExpressionUUID->"66d8c6a0-21f6-479c-986e-87abdaf0867f",
 CellTags->"Programming with Rules"],
Cell[124422, 3603, 597, 16, 35, "CodeText",ExpressionUUID->"68e412fb-531a-4844-a405-020afdff2d85",
 CellTags->"Programming with Rules"],
Cell[125022, 3621, 155, 4, 42, "Input",ExpressionUUID->"b11aa85d-a778-4368-8fef-cae93135416a",
 CellTags->"Programming with Rules"],
Cell[125180, 3627, 282, 9, 42, "Input",ExpressionUUID->"de7289a5-7d88-4fb6-aa8c-cf28a24a6c02",
 CellTags->"Programming with Rules"],
Cell[125465, 3638, 176, 3, 35, "Text",ExpressionUUID->"62176fd9-e69f-415e-acf7-536a7df9a95c"],
Cell[125644, 3643, 180, 2, 64, "Program",ExpressionUUID->"bc5c755f-b092-409a-9858-9cacd862ccd4"],
Cell[125827, 3647, 347, 9, 35, "CodeText",ExpressionUUID->"98c22267-e3da-4171-86b1-6a0eb9901e22",
 CellTags->"Programming with Rules"],
Cell[126177, 3658, 242, 8, 42, "Input",ExpressionUUID->"db535cb1-0cf5-4e68-b517-52b551794b46",
 CellTags->"Programming with Rules"],
Cell[126422, 3668, 118, 0, 35, "Text",ExpressionUUID->"42c60559-a206-429b-9c80-9acac4a47ba3"],
Cell[126543, 3670, 169, 2, 64, "Program",ExpressionUUID->"9b060d2e-2385-4e24-8cfa-b4a93719763e"],
Cell[126715, 3674, 409, 10, 35, "CodeText",ExpressionUUID->"cc9860bb-da2c-4606-b2a9-3fa66683e0de",
 CellTags->"Programming with Rules"],
Cell[127127, 3686, 141, 4, 42, "Input",ExpressionUUID->"141f1d46-9b16-4e7c-b5e8-bda8bb4831b3",
 CellTags->"Programming with Rules"],
Cell[127271, 3692, 531, 13, 58, "CodeText",ExpressionUUID->"878fba70-c952-4b68-b0e4-658f6818816a",
 CellTags->"Programming with Rules"],
Cell[127805, 3707, 401, 12, 64, "Input",ExpressionUUID->"e3177ded-389f-4d8a-a604-6a7958004821",
 CellTags->"Programming with Rules"],
Cell[128209, 3721, 736, 21, 35, "CodeText",ExpressionUUID->"0e7f5909-e5d4-4699-95f2-3ec10262d058",
 CellTags->"Programming with Rules"],
Cell[128948, 3744, 271, 8, 42, "Input",ExpressionUUID->"2fa3e0f0-d896-41d1-bf77-90052bb32225",
 CellTags->"Programming with Rules"],
Cell[129222, 3754, 228, 4, 35, "CodeText",ExpressionUUID->"0752ae16-06c9-4d01-954b-304517b71966",
 CellTags->"Programming with Rules"],
Cell[129453, 3760, 257, 6, 42, "Input",ExpressionUUID->"bf378aa6-ca0c-4b4d-af2c-538e7ee794dd",
 CellTags->"Programming with Rules"],
Cell[129713, 3768, 352, 7, 58, "Text",ExpressionUUID->"dccb691d-3d90-4905-a42d-802b843a4b6c",
 CellTags->"Programming with Rules"],
Cell[130068, 3777, 115, 1, 42, "Input",ExpressionUUID->"e4bcce5f-c201-4a1c-8e36-74976d012ed4"],
Cell[130186, 3780, 78, 0, 136, "EndOfSlide",ExpressionUUID->"bfc5856f-6581-4044-9bd7-9840e7e70f8b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[130313, 3786, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"b5bcc2aa-c5b4-4036-ae5b-2347c8d7148e",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[130460, 3792, 168, 4, 139, "Section",ExpressionUUID->"bfb6a770-bed7-4958-82ee-408ed8ab4199",
 CellTags->"Programming with Rules"],
Cell[130631, 3798, 333, 9, 58, "Text",ExpressionUUID->"dcb9265f-39bd-4cb0-bd16-6d30369c583e",
 CellTags->"Programming with Rules"],
Cell[130967, 3809, 574, 16, 35, "CodeText",ExpressionUUID->"63541948-165a-4f6d-9c1d-5765639db488",
 CellTags->"Programming with Rules"],
Cell[131544, 3827, 221, 7, 57, "Input",ExpressionUUID->"35a9961f-94c7-42ec-846b-1dddeca7a8e6",
 CellTags->"Programming with Rules"],
Cell[131768, 3836, 109, 1, 42, "Input",ExpressionUUID->"cf089253-a2a5-4e1b-a246-674249a66d10"],
Cell[131880, 3839, 9479, 162, 113, "Input",ExpressionUUID->"cffbad4a-451c-46a0-81a5-a9b60fc8061b"],
Cell[141362, 4003, 455, 12, 58, "Text",ExpressionUUID->"ecbb3e0d-a052-4b2e-bc7c-870783c3bc7d",
 CellTags->"Programming with Rules"],
Cell[141820, 4017, 2424, 67, 140, "Text",ExpressionUUID->"18df57fe-64d2-4b3a-ad69-1e44a3c0ceed"],
Cell[144247, 4086, 145, 4, 42, "Input",ExpressionUUID->"92eac2f4-3677-4831-9b5a-6cd4713e702e",
 CellTags->"Programming with Rules"],
Cell[144395, 4092, 333, 11, 35, "CodeText",ExpressionUUID->"ca539f3d-f49b-48f6-b460-950348661801",
 CellTags->"Programming with Rules"],
Cell[144731, 4105, 378, 11, 42, "Input",ExpressionUUID->"b6ae9217-6af7-40f5-be59-84fe622f317d",
 CellTags->"Programming with Rules"],
Cell[145112, 4118, 520, 13, 35, "Text",ExpressionUUID->"89ecd1cf-ee33-4081-889f-5f8750e8a9cd",
 CellTags->"Programming with Rules"],
Cell[145635, 4133, 358, 9, 35, "CodeText",ExpressionUUID->"1d35a17e-3679-400e-bb93-323a364be89d",
 CellTags->"Programming with Rules"],
Cell[145996, 4144, 384, 12, 42, "Input",ExpressionUUID->"05cd5756-78c9-4263-ac81-19b8d5431e13",
 CellTags->"Programming with Rules"],
Cell[146383, 4158, 487, 12, 35, "Text",ExpressionUUID->"e9ca7e75-10fb-4692-9825-3c387d532e27",
 CellTags->"Programming with Rules"],
Cell[146873, 4172, 588, 14, 35, "CodeText",ExpressionUUID->"657618b7-b6a8-494a-bbb6-5bb6f713e124",
 CellTags->"Programming with Rules"],
Cell[147464, 4188, 441, 13, 42, "Input",ExpressionUUID->"f5ca6f48-9fdc-4a15-af1d-365dca3a80f9",
 CellTags->"Programming with Rules"],
Cell[147908, 4203, 355, 8, 35, "Text",ExpressionUUID->"0f1a9897-0615-412c-a27e-dbede855a043"],
Cell[148266, 4213, 221, 5, 35, "CodeText",ExpressionUUID->"82b3d585-ffba-4c1c-a07e-993d6827e6c7"],
Cell[148490, 4220, 409, 12, 42, "Input",ExpressionUUID->"1371229e-c8bb-48e1-ad31-5e77861d3d1e",
 CellTags->"Programming with Rules"],
Cell[148902, 4234, 418, 11, 35, "CodeText",ExpressionUUID->"7c7c3440-e106-40da-be8e-205fec85344e",
 CellTags->"Programming with Rules"],
Cell[149323, 4247, 429, 13, 42, "Input",ExpressionUUID->"abac0362-d946-45d0-aa19-0d54fb0a7e8d",
 CellTags->"Programming with Rules"],
Cell[149755, 4262, 138, 3, 42, "Input",ExpressionUUID->"cb08ea36-d2b9-401a-9ee5-1c66aa620a24"],
Cell[149896, 4267, 485, 12, 35, "Text",ExpressionUUID->"b5c7deec-1c34-4e84-8ba1-2f4fbb204fd3",
 CellTags->"Programming with Rules"],
Cell[150384, 4281, 78, 0, 136, "EndOfSlide",ExpressionUUID->"e5c2c41e-c599-4c36-b5c6-f52d0e1bbb46"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[150511, 4287, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"bb9ca9cf-0260-442d-8bda-4ab6df532941",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[150658, 4293, 208, 4, 139, "Section",ExpressionUUID->"0df18db9-a116-4828-a3a4-a04e8ada43b0",
 CellTags->"Programming with Rules"],
Cell[150869, 4299, 286, 7, 58, "Text",ExpressionUUID->"7bcbb960-4500-4bea-89a8-529ace0d3394",
 CellTags->"Programming with Rules"],
Cell[151158, 4308, 225, 4, 35, "CodeText",ExpressionUUID->"051640d9-042f-45ca-97df-b2309ed76f85",
 CellTags->"Programming with Rules"],
Cell[151386, 4314, 777, 20, 148, "Input",ExpressionUUID->"09bfd7b7-c2be-4faa-b075-698f6972f495"],
Cell[152166, 4336, 370, 8, 35, "CodeText",ExpressionUUID->"895b2fac-1545-4780-ae15-c17f37e4f334",
 CellTags->"Programming with Rules"],
Cell[152539, 4346, 113, 1, 42, "Input",ExpressionUUID->"1f23e68f-19ee-4c4b-be90-2c6accd22931"],
Cell[152655, 4349, 671, 20, 106, "Input",ExpressionUUID->"6ac2be08-e69a-4db3-afec-780cdb6e6e80",
 CellTags->"Programming with Rules"],
Cell[153329, 4371, 416, 10, 35, "Text",ExpressionUUID->"958c5595-ba5f-48e1-a97c-f8bd344eca29",
 CellTags->"Programming with Rules"],
Cell[153748, 4383, 427, 11, 35, "CodeText",ExpressionUUID->"a559ea55-90cb-4c35-aec9-4dec9ab10096",
 CellTags->"Programming with Rules"],
Cell[154178, 4396, 152, 4, 42, "Input",ExpressionUUID->"c241664b-d869-4b5b-ba9e-1ffa161d826e",
 CellTags->"Programming with Rules"],
Cell[154333, 4402, 260, 6, 35, "CodeText",ExpressionUUID->"fd72ece0-4230-414f-93ec-b97b9ee89700",
 CellTags->"Programming with Rules"],
Cell[154596, 4410, 153, 4, 42, "Input",ExpressionUUID->"ceec7212-d90b-4724-8fce-b7df6f4d5a83",
 CellTags->"Programming with Rules"],
Cell[154752, 4416, 99, 1, 42, "Input",ExpressionUUID->"9b77c9a0-2d62-462c-9a39-d1e87bff9e02"],
Cell[154854, 4419, 316, 9, 35, "CodeText",ExpressionUUID->"f2b6f127-5a2c-4cd2-900d-378714cf7eff",
 CellTags->"Programming with Rules"],
Cell[155173, 4430, 122, 3, 42, "Input",ExpressionUUID->"d1762d31-d0cc-403d-b249-0cf285022a93",
 CellTags->"Programming with Rules"],
Cell[155298, 4435, 78, 0, 136, "EndOfSlide",ExpressionUUID->"d3fc5ab1-329d-4e35-82c7-ef3890adcc9a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[155425, 4441, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"f9480773-d1ac-4592-be0b-20256affe867",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[155572, 4447, 197, 4, 139, "Section",ExpressionUUID->"8a76b50f-61b7-43d9-96f2-df80d28b09f4",
 CellTags->"Programming with Rules"],
Cell[155772, 4453, 440, 9, 58, "Text",ExpressionUUID->"ec0f5ef7-cf9b-4644-b32c-afd75c1b8e0e",
 CellTags->"Programming with Rules"],
Cell[156215, 4464, 667, 18, 58, "CodeText",ExpressionUUID->"53d65715-0d85-4711-bad7-c04a90e81156",
 CellTags->"Programming with Rules"],
Cell[156885, 4484, 314, 10, 42, "Input",ExpressionUUID->"b6f9aa2f-2fa5-422c-a54b-c3ae4277f879",
 CellTags->"Programming with Rules"],
Cell[157202, 4496, 234, 4, 35, "CodeText",ExpressionUUID->"1595b17b-e83d-4fc7-a069-65add5e5b93f",
 CellTags->"Programming with Rules"],
Cell[157439, 4502, 329, 10, 42, "Input",ExpressionUUID->"d66f81cb-9dfb-4d9f-a909-9ae3a79d5e19",
 CellTags->"Programming with Rules"],
Cell[157771, 4514, 411, 9, 35, "CodeText",ExpressionUUID->"309de650-303e-4993-8298-b870f8b16197",
 CellTags->"Programming with Rules"],
Cell[158185, 4525, 335, 10, 42, "Input",ExpressionUUID->"d0c6b299-e7da-4c5a-ba07-d3674114d3a8",
 CellTags->"Programming with Rules"],
Cell[158523, 4537, 240, 4, 35, "CodeText",ExpressionUUID->"2c60e2aa-ecc0-4e8a-84ac-5b0c3fadf234",
 CellTags->"Programming with Rules"],
Cell[158766, 4543, 353, 11, 42, "Input",ExpressionUUID->"fb4dd8f2-d921-4e84-b4b9-27c7d1fcbd6d",
 CellTags->"Programming with Rules"],
Cell[159122, 4556, 340, 8, 35, "CodeText",ExpressionUUID->"de7787c0-9c27-4d16-b838-62dd51bd5ea5",
 CellTags->"Programming with Rules"],
Cell[159465, 4566, 447, 15, 42, "Input",ExpressionUUID->"447ec80c-72e5-4498-9518-b129f196fd5e",
 CellTags->"Programming with Rules"],
Cell[159915, 4583, 241, 4, 35, "CodeText",ExpressionUUID->"b853fb4c-4ada-4a03-8174-3cb8d7cf8117",
 CellTags->"Programming with Rules"],
Cell[160159, 4589, 507, 17, 42, "Input",ExpressionUUID->"eb088aa1-bda1-4c4e-a7cb-99cc301fb210",
 CellTags->"Programming with Rules"],
Cell[160669, 4608, 288, 7, 58, "Text",ExpressionUUID->"a8c178f8-a8a4-410e-8ad1-a9499b4bbafa",
 CellTags->"Programming with Rules"],
Cell[160960, 4617, 78, 0, 136, "EndOfSlide",ExpressionUUID->"99ee2833-dedd-4d57-a4fe-8eab90a62ca1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[161087, 4623, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"bfb5a63f-6dc9-427f-b7cb-7868b6cd0105",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[161234, 4629, 206, 4, 139, "Section",ExpressionUUID->"f8ff6ba4-3246-4b9e-a8ab-c7c589f2ccbb",
 CellTags->"Programming with Rules"],
Cell[161443, 4635, 223, 6, 35, "Text",ExpressionUUID->"f8661456-395f-44df-bf5c-8ca12f632661",
 CellTags->"Programming with Rules"],
Cell[161669, 4643, 407, 10, 35, "CodeText",ExpressionUUID->"0626e466-0916-463f-9f62-80b7600eaa67",
 CellTags->"Programming with Rules"],
Cell[162079, 4655, 250, 8, 42, "Input",ExpressionUUID->"d1736030-bf35-4eaa-a40e-a2f1b53551bc",
 CellTags->"Programming with Rules"],
Cell[162332, 4665, 151, 4, 42, "Input",ExpressionUUID->"542219c8-d7e7-4270-a6b3-c7a7081301d7",
 CellTags->"Programming with Rules"],
Cell[162486, 4671, 169, 5, 42, "Input",ExpressionUUID->"e94feb51-2ac0-494a-92f8-63b2744310d8",
 CellTags->"Programming with Rules"],
Cell[162658, 4678, 569, 14, 58, "CodeText",ExpressionUUID->"6c6655d2-d26f-46db-b8bc-9f7cb678205f",
 CellTags->"Programming with Rules"],
Cell[163230, 4694, 291, 10, 42, "Input",ExpressionUUID->"277128dd-170a-40ca-81b5-12c18d5f9154",
 CellTags->"Programming with Rules"],
Cell[163524, 4706, 545, 15, 35, "CodeText",ExpressionUUID->"dbad5e08-d60b-4879-a740-e0de625428c1",
 CellTags->"Programming with Rules"],
Cell[164072, 4723, 288, 9, 42, "Input",ExpressionUUID->"fb27dc96-1bbe-4f62-bae9-2775d8a1fb9f",
 CellTags->"Programming with Rules"],
Cell[164363, 4734, 222, 5, 35, "CodeText",ExpressionUUID->"3f297640-b437-43b3-bb60-e3ec66512560"],
Cell[164588, 4741, 294, 9, 42, "Input",ExpressionUUID->"aa758d93-add9-4661-8dc5-118677e78594",
 CellTags->"Programming with Rules"],
Cell[164885, 4752, 372, 8, 58, "CodeText",ExpressionUUID->"8cfb681e-185a-4b14-bbb6-d7e944f46929"],
Cell[165260, 4762, 246, 6, 42, "Input",ExpressionUUID->"9ad2ae52-50db-4462-bed3-121bf143418d"],
Cell[165509, 4770, 249, 6, 42, "Input",ExpressionUUID->"ad2c39f7-8003-4e59-88d1-bebe7f4b0bd2"],
Cell[165761, 4778, 363, 9, 35, "CodeText",ExpressionUUID->"9d4c649e-117b-42dd-b26f-347015f4418f"],
Cell[166127, 4789, 322, 9, 42, "Input",ExpressionUUID->"4f5ba16c-74db-48fe-9ba8-90836757ec55"],
Cell[166452, 4800, 181, 5, 42, "Input",ExpressionUUID->"24c05f7c-18ee-422e-beac-6e467efe8337",
 CellTags->"Programming with Rules"],
Cell[166636, 4807, 78, 0, 136, "EndOfSlide",ExpressionUUID->"3c5e287a-a9c0-40b8-983d-4e9fed5396f6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[166763, 4813, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"a70f0acb-165c-4d59-86d9-0f1423b0ca1f",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[166910, 4819, 150, 3, 230, "Section",ExpressionUUID->"8e4129fd-1225-42ec-bf5d-2eacbfe7cbeb",
 CellTags->"Comparing Programming Styles"],
Cell[167063, 4824, 371, 8, 58, "Text",ExpressionUUID->"79e0c76f-96d8-4c54-84fc-b657ce54fa9c",
 CellTags->"Comparing Programming Styles"],
Cell[167437, 4834, 468, 9, 81, "Text",ExpressionUUID->"44bd361c-aea1-458a-8ca1-ca244fa89bf6",
 CellTags->"Comparing Programming Styles"],
Cell[167908, 4845, 526, 11, 58, "Text",ExpressionUUID->"43a94ef7-b81d-4647-bd45-3d3305699ba3",
 CellTags->"Comparing Programming Styles"],
Cell[168437, 4858, 226, 4, 35, "CodeText",ExpressionUUID->"d24f45c0-08d6-499f-bbc9-8f0f11891646",
 CellTags->"Comparing Programming Styles"],
Cell[168666, 4864, 785, 25, 42, "Input",ExpressionUUID->"19045409-6080-4a30-afaf-369eb0b0cbdf",
 CellTags->"Comparing Programming Styles"],
Cell[CellGroupData[{
Cell[169476, 4893, 316, 6, 91, "Subsection",ExpressionUUID->"830953a9-7327-4eae-afa9-dcbbd899659a",
 CellTags->"Comparing Programming Styles"],
Cell[169795, 4901, 950, 22, 81, "CodeText",ExpressionUUID->"63f33f37-ddb7-4624-99cc-79ce151863b1",
 CellTags->"Comparing Programming Styles"],
Cell[170748, 4925, 856, 27, 106, "Input",ExpressionUUID->"682d710d-9987-4d5e-89ed-bc28d86dc6ef",
 CellTags->"Comparing Programming Styles"],
Cell[171607, 4954, 283, 5, 35, "CodeText",ExpressionUUID->"4c0e1f96-2f66-4b89-bc29-a2dfeca19171",
 CellTags->"Comparing Programming Styles"],
Cell[171893, 4961, 471, 15, 42, "Input",ExpressionUUID->"a4741f95-8144-4154-9970-e54918bd020c",
 CellTags->"Comparing Programming Styles"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172401, 4981, 269, 5, 91, "Subsection",ExpressionUUID->"6d5fbda0-2edf-4439-a198-0d5f730db73a",
 CellTags->"Comparing Programming Styles"],
Cell[172673, 4988, 243, 6, 35, "CodeText",ExpressionUUID->"d9129160-4d2d-400f-b761-12282674bafc"],
Cell[172919, 4996, 190, 5, 42, "Input",ExpressionUUID->"002361e1-b8cb-4f10-998d-44865a753b23",
 CellTags->"Comparing Programming Styles"],
Cell[173112, 5003, 249, 4, 35, "CodeText",ExpressionUUID->"fe9754c1-11b3-48b8-a170-e372a83e63c1",
 CellTags->"Comparing Programming Styles"],
Cell[173364, 5009, 201, 5, 42, "Input",ExpressionUUID->"a2008383-2155-46f3-8163-67201cfca085",
 CellTags->"Comparing Programming Styles"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173602, 5019, 263, 5, 91, "Subsection",ExpressionUUID->"273502fe-5882-47b6-a221-23de6d7ab887",
 CellTags->"Comparing Programming Styles"],
Cell[173868, 5026, 396, 8, 58, "CodeText",ExpressionUUID->"0cedea23-6a7f-41f5-b953-d8a35696a515",
 CellTags->"Comparing Programming Styles"],
Cell[174267, 5036, 261, 8, 42, "Input",ExpressionUUID->"d4c94941-4c44-4715-9885-21daec03101c",
 CellTags->"Comparing Programming Styles"],
Cell[174531, 5046, 78, 0, 136, "EndOfSlide",ExpressionUUID->"3f340c99-be90-415d-8152-61de5fc78c5a"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[174670, 5053, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"47c635df-5d13-4e51-b9b7-4005d28ee7ee",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[174817, 5059, 132, 2, 230, "Section",ExpressionUUID->"042f08fe-d773-4f29-a251-0e3d77ba5824",
 CellTags->"Application"],
Cell[174952, 5063, 454, 9, 58, "Text",ExpressionUUID->"e4e25f06-685a-4a67-9b5c-34f272a76282",
 CellTags->"Application"],
Cell[175409, 5074, 291, 6, 35, "CodeText",ExpressionUUID->"228a94a4-b9cc-4db0-aba1-026a927709ee",
 CellTags->"Application"],
Cell[175703, 5082, 1119, 28, 106, "Input",ExpressionUUID->"e96f73f7-2237-4062-b28b-e8cceb1870ff",
 CellTags->"Application"],
Cell[176825, 5112, 647, 15, 58, "Text",ExpressionUUID->"f465a2df-8626-4e7b-ae6c-207627bab95d",
 CellTags->"Application"],
Cell[177475, 5129, 454, 10, 35, "CodeText",ExpressionUUID->"3851da23-9c78-4410-a674-c489c14c461b",
 CellTags->"Application"],
Cell[177932, 5141, 310, 9, 64, "Input",ExpressionUUID->"f58f9ba2-95ca-4124-9a19-56fb9c7f08fd",
 CellTags->"Application"],
Cell[178245, 5152, 227, 3, 35, "CodeText",ExpressionUUID->"07e688f7-3a96-44f5-bbe3-cba191e026e7",
 CellTags->"Application"],
Cell[178475, 5157, 198, 5, 42, "Input",ExpressionUUID->"199c6e5b-cd91-4157-b77a-277a26c8330b",
 CellTags->"Application"],
Cell[178676, 5164, 211, 3, 35, "CodeText",ExpressionUUID->"62095aab-bb3d-412d-bb51-c8493a0b62bd",
 CellTags->"Application"],
Cell[178890, 5169, 231, 6, 42, "Input",ExpressionUUID->"cb702703-2caa-41d5-987a-2a598e5164a0",
 CellTags->"Application"],
Cell[179124, 5177, 217, 3, 35, "CodeText",ExpressionUUID->"14ec4499-6409-4ef0-b1fa-6f96e523508c",
 CellTags->"Application"],
Cell[179344, 5182, 345, 10, 42, "Input",ExpressionUUID->"8b9f76b7-4bb7-4f46-9e4f-7de442ff5e5a",
 CellTags->"Application"],
Cell[179692, 5194, 635, 16, 58, "CodeText",ExpressionUUID->"3b7dad43-79ae-45a4-a53d-316e91f3dd66",
 CellTags->"Application"],
Cell[180330, 5212, 557, 16, 42, "Input",ExpressionUUID->"314c13c9-2339-4d61-9ac7-4eef354784cb",
 CellTags->"Application"],
Cell[180890, 5230, 267, 4, 35, "CodeText",ExpressionUUID->"06cebb52-deaf-44e4-81ea-72f841e2ffe5",
 CellTags->"Application"],
Cell[181160, 5236, 146, 3, 42, "Input",ExpressionUUID->"b882e361-41b4-4c6f-93b0-c5815734c67d",
 CellTags->"Application"],
Cell[181309, 5241, 228, 3, 35, "CodeText",ExpressionUUID->"e4a0447a-e47d-4c10-8e37-caca6990ecfe",
 CellTags->"Application"],
Cell[181540, 5246, 241, 6, 42, "Input",ExpressionUUID->"b583e775-ee5c-42c2-a318-70c84d8cec8e",
 CellTags->"Application"],
Cell[181784, 5254, 357, 7, 35, "Text",ExpressionUUID->"5d52ce8f-d23a-4ad5-b1ee-c6f8995c1e20",
 CellTags->"Application"],
Cell[182144, 5263, 314, 5, 35, "CodeText",ExpressionUUID->"d711653d-c42a-4f2b-a8a4-f2e5e064a207",
 CellTags->"Application"],
Cell[182461, 5270, 183, 4, 42, "Input",ExpressionUUID->"4d4adabe-4d79-4fa7-b09b-4f66b684289b",
 CellTags->"Application"],
Cell[182647, 5276, 381, 9, 35, "CodeText",ExpressionUUID->"1706281a-f213-4448-8013-0c052957eed9",
 CellTags->"Application"],
Cell[183031, 5287, 1058, 29, 106, "Input",ExpressionUUID->"54b2a6e1-f0ba-4d93-973b-e40d720534b1",
 CellTags->"Application"],
Cell[184092, 5318, 181, 4, 42, "Input",ExpressionUUID->"cdbcd614-e209-4b03-a62a-99a01b94a37f",
 CellTags->"Application"],
Cell[184276, 5324, 647, 15, 58, "CodeText",ExpressionUUID->"75de2900-4d8f-4475-b72c-f522039f2cbd",
 CellTags->"Application"],
Cell[184926, 5341, 1083, 30, 106, "Input",ExpressionUUID->"74f74f58-1e33-4b66-a398-8731ffe473ad",
 CellTags->"Application"],
Cell[186012, 5373, 1121, 28, 106, "Input",ExpressionUUID->"db600a9d-c92c-46f4-9483-d54c04eff7d3",
 CellTags->"Application"],
Cell[187136, 5403, 218, 6, 42, "Input",ExpressionUUID->"e36f64a1-bee2-4481-a3c2-29f28d6ea29d",
 CellTags->"Application"],
Cell[CellGroupData[{
Cell[187379, 5413, 185, 3, 91, "Subsection",ExpressionUUID->"0226a4df-ad47-4c43-88f6-c0fe64db061e",
 CellTags->"Application"],
Cell[187567, 5418, 210, 5, 35, "Text",ExpressionUUID->"47eeb2ca-e622-46e8-917b-4d48a0cce058",
 CellTags->"Application"],
Cell[187780, 5425, 296, 8, 42, "Input",ExpressionUUID->"961f3408-9b6e-472b-9754-102bddd72db1",
 CellTags->"Application"],
Cell[188079, 5435, 472, 14, 44, "Input",ExpressionUUID->"05b905d7-6c07-4dab-9722-6e0a743c9671",
 CellTags->"Application"],
Cell[188554, 5451, 319, 7, 35, "CodeText",ExpressionUUID->"dfcc516f-e0d5-4da4-be82-063a5413b38e",
 CellTags->"Application"],
Cell[188876, 5460, 267, 7, 42, "Input",ExpressionUUID->"5c9f6d90-ffa0-48d3-8166-76dc1e8d4e19",
 CellTags->"Application"],
Cell[189146, 5469, 321, 7, 35, "CodeText",ExpressionUUID->"3857b798-eafe-4c45-8dd9-7185b93b8111",
 CellTags->"Application"],
Cell[189470, 5478, 1214, 34, 127, "Input",ExpressionUUID->"9e2dfb0d-cb02-49bc-b6b1-1b08e821dca9",
 CellTags->"Application"],
Cell[190687, 5514, 1161, 29, 148, "Input",ExpressionUUID->"b06e5b0a-f8df-4b6c-a815-366e8fe93a12",
 CellTags->"Application"],
Cell[191851, 5545, 300, 8, 42, "Input",ExpressionUUID->"64696c65-9892-48bb-aaf6-16bfa0e317a6",
 CellTags->"Application"],
Cell[192154, 5555, 107, 2, 136, "EndOfSlide",ExpressionUUID->"d582d137-3ca8-46ed-a6e6-bc97d4c1f699",
 CellTags->"Application"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[192322, 5564, 122, 2, 1, "SlideShowNavigationBar",ExpressionUUID->"5e53628d-ade3-4373-82db-4684c2ceff51",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[192469, 5570, 179, 3, 139, "Section",ExpressionUUID->"1ff19fdb-e56c-4e61-a3aa-d084b9b4f3b7"],
Cell[CellGroupData[{
Cell[192673, 5577, 307, 9, 91, "Subsection",ExpressionUUID->"8c90f385-68d5-48aa-94fb-21c8483f91e4"],
Cell[192983, 5588, 854, 25, 37, "Item",ExpressionUUID->"ce390ce8-c1cf-43e0-a5b9-5fa36910b207",
 CellTags->{"Exercises", "Creating Definitions"}],
Cell[193840, 5615, 1685, 41, 42, "Text",ExpressionUUID->"7d45106b-10ba-41b3-b965-9a4b7206d266"],
Cell[195528, 5658, 868, 27, 35, "Item",ExpressionUUID->"a9707219-295e-4c27-8adb-87ec9d01305d",
 CellTags->{"Exercises", "Creating Definitions"}],
Cell[196399, 5687, 1143, 30, 53, "Text",ExpressionUUID->"fbe5cc23-8852-4797-a9f8-100965261633"],
Cell[197545, 5719, 347, 10, 44, "Item",ExpressionUUID->"94ddddca-41d8-4e6e-86b8-148c5b11d320",
 CellTags->{"Exercises", "Creating Definitions"}],
Cell[197895, 5731, 907, 25, 53, "Text",ExpressionUUID->"c24e0c62-86ba-4b05-aa05-8b7e4662e6c1"]
}, Closed]],
Cell[CellGroupData[{
Cell[198839, 5761, 279, 10, 55, "Subsection",ExpressionUUID->"e980c3bd-6a22-493d-9dca-a7b37bdffbeb",
 CellTags->{"Exercises", "Table I"}],
Cell[199121, 5773, 635, 15, 81, "Text",ExpressionUUID->"2c8b1d5c-d860-4b69-98cd-0ab160f8bf6a",
 CellTags->{"Exercises", "Table I"}],
Cell[CellGroupData[{
Cell[199781, 5792, 227, 4, 35, "Item",ExpressionUUID->"3e6b4c71-9afd-48cd-86e6-704b4466725f",
 CellTags->{"Exercises", "Table I"}],
Cell[200011, 5798, 341, 10, 42, "Input",ExpressionUUID->"4816a02d-97d7-4c45-9f9f-207e54bf9023",
 CellTags->{"Exercises", "Table I"}]
}, Open  ]],
Cell[200367, 5811, 195, 5, 35, "Item",ExpressionUUID->"d68315c2-dbc9-4b2c-a4a9-b32054dd90d1",
 CellTags->{"Exercises", "Table I"}],
Cell[200565, 5818, 881, 23, 42, "Text",ExpressionUUID->"2d3d1555-6e54-4882-bf72-e81c2185abd6"]
}, Closed]],
Cell[CellGroupData[{
Cell[201483, 5846, 232, 9, 55, "Subsection",ExpressionUUID->"03bbec60-54f3-4135-8e97-6e1815993105",
 CellTags->{"Exercises", "Table II"}],
Cell[201718, 5857, 605, 15, 58, "Text",ExpressionUUID->"74596f60-51bb-4d73-83a3-5ec09bc8697f",
 CellTags->{"Exercises", "Table II"}],
Cell[CellGroupData[{
Cell[202348, 5876, 279, 5, 35, "Item",ExpressionUUID->"44a6a099-3229-4555-876e-1868c67d0440",
 CellTags->{"Exercises", "Table II"}],
Cell[202630, 5883, 347, 11, 42, "Input",ExpressionUUID->"05c9de89-581a-4ce4-a37d-2e73117b7e8d",
 CellTags->{"Exercises", "Table II"}]
}, Open  ]],
Cell[202992, 5897, 227, 4, 35, "Text",ExpressionUUID->"ad536f5b-8379-4d0f-be32-0999d28e8621",
 CellTags->{"Exercises", "Table II"}],
Cell[203222, 5903, 164, 4, 42, "Input",ExpressionUUID->"1f0f54cd-7282-46f9-a39f-5cccdb9b2598",
 CellTags->{"Exercises", "Table II"}],
Cell[203389, 5909, 376, 11, 35, "Text",ExpressionUUID->"02328f14-7f5d-4458-831f-3c0d6bcdfd80",
 CellTags->{"Exercises", "Table II"}],
Cell[203768, 5922, 224, 6, 42, "Input",ExpressionUUID->"ee3002e6-0b09-436a-be46-d83e994a34cb",
 CellTags->{"Exercises", "Table II"}],
Cell[203995, 5930, 196, 5, 35, "Item",ExpressionUUID->"129243ed-1a23-4c09-bd5f-9ac0769a8a9c",
 CellTags->{"Exercises", "Table II"}],
Cell[204194, 5937, 7214, 173, 42, "Text",ExpressionUUID->"eb300490-3579-4f74-879d-68df141e7978"],
Cell[211411, 6112, 251, 6, 35, "Item",ExpressionUUID->"006b9c96-5c97-4417-ab03-d180f33ccf20",
 CellTags->{"Exercises", "Table II"}],
Cell[211665, 6120, 1281, 35, 42, "Text",ExpressionUUID->"8e80f023-8602-46f9-bafc-f5b55c08f2c8"]
}, Closed]],
Cell[CellGroupData[{
Cell[212983, 6160, 244, 10, 55, "Subsection",ExpressionUUID->"5b86380f-9aa1-46a7-86af-4b524ed10ab5",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[213230, 6172, 449, 13, 35, "Text",ExpressionUUID->"145ce818-821f-4e84-99c5-4a8043100056",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[213682, 6187, 269, 9, 42, "Input",ExpressionUUID->"7356623a-888c-46dd-98e9-3c0290a7a83e",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[213954, 6198, 440, 13, 35, "Text",ExpressionUUID->"b535a21d-fa58-4e0b-9b44-3c02c052c448",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[214397, 6213, 176, 5, 42, "Input",ExpressionUUID->"e6007f37-7590-4554-80de-2b199bdd5591",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[214576, 6220, 357, 10, 35, "Item",ExpressionUUID->"4b820ff8-b8af-4cfc-9368-49914f5e2527",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[214936, 6232, 1359, 37, 42, "Text",ExpressionUUID->"1ca7fbb6-4d98-485c-8d9f-375c536f9bed"],
Cell[216298, 6271, 356, 10, 35, "Item",ExpressionUUID->"3097ea22-881b-4058-81ce-d4585e1b0b0b",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[216657, 6283, 1051, 30, 42, "Text",ExpressionUUID->"ccf8a8f8-5643-4c98-b639-9a9b977f965a"],
Cell[217711, 6315, 465, 15, 35, "Item",ExpressionUUID->"f17513d7-160f-499f-9068-a26c71931c9d",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[218179, 6332, 872, 24, 42, "Text",ExpressionUUID->"52b90617-52d0-4adc-a307-b11506accf55"],
Cell[219054, 6358, 294, 8, 35, "Item",ExpressionUUID->"0078461a-f9a4-4efd-b299-7697ccaaa405",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[219351, 6368, 929, 26, 42, "Text",ExpressionUUID->"ab39d013-e205-4488-81dd-64f017b46ba0"],
Cell[220283, 6396, 304, 8, 35, "Item",ExpressionUUID->"7b29ec43-57fa-4a4b-91ec-f12fab713b1b",
 CellTags->{"Exercises", "Matrix Operations"}],
Cell[220590, 6406, 1681, 45, 42, "Text",ExpressionUUID->"ae2a403e-bb39-432b-87df-652c7cab0832"]
}, Closed]],
Cell[CellGroupData[{
Cell[222308, 6456, 252, 9, 55, "Subsection",ExpressionUUID->"57671e0e-a060-4a99-91ee-5e799fcd81a2",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[222563, 6467, 230, 6, 35, "Text",ExpressionUUID->"1684db82-e917-4660-912f-7a9b42f2b0aa",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[222796, 6475, 450, 12, 85, "Input",ExpressionUUID->"f99a0882-c092-4498-ae95-1cf90892b503"],
Cell[223249, 6489, 902, 23, 81, "Text",ExpressionUUID->"531e8823-9816-487c-a284-844f92d77e44",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[224154, 6514, 210, 6, 42, "Input",ExpressionUUID->"cde50281-e384-4ca2-b50c-2f90db5f4544",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[224367, 6522, 245, 7, 42, "Input",ExpressionUUID->"16a73742-f201-423e-8133-98dabaeb4c3b",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[224615, 6531, 581, 12, 81, "Text",ExpressionUUID->"359a0489-64f7-4b07-9549-093078a0f38a",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[225199, 6545, 233, 7, 42, "Input",ExpressionUUID->"51fdb579-e5a4-4943-9e31-872ca15024d1",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[225435, 6554, 400, 10, 35, "Text",ExpressionUUID->"0095e783-c8d8-4e04-98e8-37b45d63e19b",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[225838, 6566, 301, 10, 42, "Input",ExpressionUUID->"fa8c7099-c166-4d81-933d-d302cd04d5e2",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[226142, 6578, 197, 5, 35, "Item",ExpressionUUID->"df653f71-6e12-4a3f-bd15-978b4801c7b1",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[226342, 6585, 856, 21, 42, "Text",ExpressionUUID->"0d2f0e8a-e8be-4a54-88ef-916496e84676"],
Cell[227201, 6608, 296, 10, 35, "Text",ExpressionUUID->"b79d3c50-3ef3-4859-9c64-3504d4123049"],
Cell[227500, 6620, 3924, 101, 42, "Text",ExpressionUUID->"f4a7536a-ec79-42e3-a16f-ca29b16d915f"],
Cell[231427, 6723, 372, 9, 35, "Item",ExpressionUUID->"936179e1-def4-471f-bbfd-2802c4895933",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[231802, 6734, 1340, 38, 42, "Text",ExpressionUUID->"f7f7689d-3820-4990-be90-af88bc9a9860"],
Cell[233145, 6774, 398, 8, 56, "Item",ExpressionUUID->"a2d72b1b-2c43-4057-b917-4a756151aec1",
 CellTags->{"Exercises", "Picking Parts"}],
Cell[233546, 6784, 1975, 54, 42, "Text",ExpressionUUID->"80b8f57a-05a5-4837-9195-5065b70f976b"]
}, Closed]],
Cell[CellGroupData[{
Cell[235558, 6843, 264, 10, 55, "Subsection",ExpressionUUID->"099fa7d2-dc8c-42af-be25-7351835124f5",
 CellTags->{"Exercises", "Immediate and Delayed"}],
Cell[235825, 6855, 364, 11, 35, "Text",ExpressionUUID->"af744ca4-1183-4f5d-bb24-1c2776a27661",
 CellTags->{"Exercises", "Immediate and Delayed"}],
Cell[236192, 6868, 291, 10, 42, "Input",ExpressionUUID->"0be4a84f-b110-4194-8a02-7e40ff478a47",
 CellTags->{"Exercises", "Immediate and Delayed"}],
Cell[236486, 6880, 688, 18, 56, "Item",ExpressionUUID->"34ddc1bb-2d79-441f-89e9-351ba2616c06",
 CellTags->{"Exercises", "Immediate and Delayed"}],
Cell[237177, 6900, 5129, 131, 42, "Text",ExpressionUUID->"d3ac7f87-ccf1-43ac-89ca-3d07037a9a75"]
}, Closed]],
Cell[CellGroupData[{
Cell[242343, 7036, 250, 10, 55, "Subsection",ExpressionUUID->"9b130e83-0c0f-46ed-9174-0d5360ba827d",
 CellTags->{"Exercises", "Localizing Variables"}],
Cell[CellGroupData[{
Cell[242618, 7050, 389, 9, 35, "Item",ExpressionUUID->"0b2648f3-ec73-4ad7-a39a-2283d4e900a4",
 CellTags->{"Exercises", "Localizing Variables"}],
Cell[243010, 7061, 552, 17, 106, "Input",ExpressionUUID->"6fd6ceca-d187-49ed-b66f-a553b592db5d",
 CellTags->{"Exercises", "Localizing Variables"}]
}, Open  ]],
Cell[243577, 7081, 1091, 25, 42, "Text",ExpressionUUID->"8fc92c47-0fba-496f-860d-45720b49a992"],
Cell[244671, 7108, 899, 22, 58, "Text",ExpressionUUID->"a470d10e-7f36-4043-abfe-f2e18f7551d8"],
Cell[245573, 7132, 1184, 31, 42, "Text",ExpressionUUID->"d314e686-7d6d-41a6-aa17-93292b23e38f"]
}, Closed]],
Cell[CellGroupData[{
Cell[246794, 7168, 258, 9, 55, "Subsection",ExpressionUUID->"3f008206-30e2-4877-afd2-ca33d9e89ee4",
 CellTags->{"Exercises", "Using Patterns"}],
Cell[CellGroupData[{
Cell[247077, 7181, 711, 18, 56, "Item",ExpressionUUID->"594e4489-ba47-48bf-8f22-383f7bf82a56",
 CellTags->{"Exercises", "Using Patterns"}],
Cell[247791, 7201, 1100, 32, 85, "Input",ExpressionUUID->"0ebc10cc-9824-4969-8310-3c3b2826eb68",
 CellTags->{"Exercises", "Using Patterns"}]
}, Open  ]],
Cell[248906, 7236, 799, 19, 77, "Item",ExpressionUUID->"d2b3f4e5-ff0f-49ce-a299-b9b5a43e1a03",
 CellTags->{"Exercises", "Using Patterns"}],
Cell[249708, 7257, 749, 17, 42, "Text",ExpressionUUID->"57cc4b29-1b3f-47a8-939b-30a05166519e"],
Cell[250460, 7276, 415, 13, 35, "Text",ExpressionUUID->"d5362b93-d21c-4bad-bd99-828723ab167e"],
Cell[250878, 7291, 2772, 71, 42, "Text",ExpressionUUID->"e23c0784-6785-49ff-94ed-02b1214ac97a"]
}, Closed]],
Cell[CellGroupData[{
Cell[253687, 7367, 240, 9, 55, "Subsection",ExpressionUUID->"ec7b3270-427a-4c25-b600-1227260e5b01",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[253930, 7378, 1756, 52, 59, "Item",ExpressionUUID->"2ec3664f-797b-4955-9a31-ab12b072cf59",
 CellTags->{"Exercises", "Pattern Matching"}],
Cell[255689, 7432, 2089, 53, 42, "Text",ExpressionUUID->"b5071c18-85a4-449c-9475-36c3825d5f90"],
Cell[257781, 7487, 339, 7, 58, "Text",ExpressionUUID->"b16fe1ab-303f-4bb7-a48d-1f61bd413631"],
Cell[258123, 7496, 775, 26, 58, "Text",ExpressionUUID->"6a7d0070-1249-401a-8b2a-624e18421d28"],
Cell[258901, 7524, 2092, 60, 42, "Text",ExpressionUUID->"ded36c7c-4613-43c7-990a-7da5d89e016a"]
}, Closed]],
Cell[CellGroupData[{
Cell[261030, 7589, 262, 10, 55, "Subsection",ExpressionUUID->"91180fe6-2863-4f4d-9c0a-d43f3ed5837d",
 CellTags->{"Exercises", "Constructing an Expression"}],
Cell[261295, 7601, 419, 10, 58, "Text",ExpressionUUID->"a6e656a7-4cad-41d7-ad51-007ff19cfbe5",
 CellTags->{"Exercises", "Constructing an Expression"}],
Cell[CellGroupData[{
Cell[261739, 7615, 477, 13, 56, "Item",ExpressionUUID->"f6563560-511b-4ea4-af21-06638de7e457",
 CellTags->{"Exercises", "Constructing an Expression"}],
Cell[262219, 7630, 301, 10, 42, "Input",ExpressionUUID->"03fced40-c126-4017-8505-a6841b413599",
 CellTags->{"Exercises", "Constructing an Expression"}]
}, Open  ]],
Cell[262535, 7643, 1621, 37, 42, "Text",ExpressionUUID->"32282578-55b6-40cc-9901-157cf8077c68"],
Cell[264159, 7682, 4012, 107, 42, "Text",ExpressionUUID->"45a8b1cf-d0e4-4c17-bd95-b10c592f465e"],
Cell[CellGroupData[{
Cell[268196, 7793, 635, 13, 77, "Item",ExpressionUUID->"9687d4c8-b9c1-468e-9c98-47a8a043a2a1",
 CellTags->{"Exercises", "Constructing an Expression"}],
Cell[268834, 7808, 2916, 88, 114, "Input",ExpressionUUID->"144c33ad-49d0-4f21-a6ef-52936fa3b38c",
 CellTags->{"Exercises", "Constructing an Expression"}]
}, Open  ]],
Cell[271765, 7899, 851, 20, 42, "Text",ExpressionUUID->"86c95a61-ef2a-4002-9cdc-863f8ecec6cf"],
Cell[272619, 7921, 448, 11, 35, "Text",ExpressionUUID->"da3b0524-9ac2-4cef-8330-dfc0759657b4"],
Cell[273070, 7934, 1978, 52, 42, "Text",ExpressionUUID->"d0b50427-8992-42ac-ab80-fa601df684bb"],
Cell[275051, 7988, 552, 13, 56, "Item",ExpressionUUID->"c0f1762e-3313-4cd7-a686-2dc7da806b86",
 CellTags->{"Exercises", "Constructing an Expression"}],
Cell[275606, 8003, 3104, 76, 42, "Text",ExpressionUUID->"c42bc85d-91ee-42bd-aa95-3dffed66b99b"]
}, Closed]],
Cell[CellGroupData[{
Cell[278747, 8084, 234, 9, 55, "Subsection",ExpressionUUID->"19481bdc-c8b3-42d5-9f97-e51343b73872",
 CellTags->{"Exercises", "Delayed Rules"}],
Cell[278984, 8095, 375, 8, 58, "Text",ExpressionUUID->"db2c53c6-6e18-419c-bf70-b4c7d8c3cf74",
 CellTags->{"Exercises", "Delayed Rules"}],
Cell[279362, 8105, 366, 11, 64, "Input",ExpressionUUID->"bffeb595-42e3-4c28-9ab1-187f2f1a74f2",
 CellTags->{"Exercises", "Delayed Rules"}],
Cell[279731, 8118, 267, 8, 42, "Input",ExpressionUUID->"0872a539-d24b-483f-b969-2d00548acbdb",
 CellTags->{"Exercises", "Delayed Rules"}],
Cell[280001, 8128, 259, 6, 35, "Text",ExpressionUUID->"870df975-a0a6-4e7e-aed6-94dc1ae6944f",
 CellTags->{"Exercises", "Delayed Rules"}],
Cell[280263, 8136, 874, 23, 56, "Item",ExpressionUUID->"96176dd0-cd3d-4b95-8b90-fdc9dfd391ac",
 CellTags->{"Exercises", "Delayed Rules"}],
Cell[281140, 8161, 976, 26, 42, "Text",ExpressionUUID->"e5fd0361-9fd0-44ba-ac1e-47a363ceeaae"]
}, Closed]],
Cell[CellGroupData[{
Cell[282153, 8192, 257, 10, 55, "Subsection",ExpressionUUID->"40169de1-f67d-45dc-b4b1-36b3326e91c5",
 CellTags->{"Exercises", "Formatting Numbers"}],
Cell[CellGroupData[{
Cell[282435, 8206, 624, 16, 56, "Item",ExpressionUUID->"b0160376-9bdc-4e6a-bb41-284a7aea2125",
 CellTags->{"Exercises", "Formatting Numbers"}],
Cell[283062, 8224, 138, 3, 42, "Input",ExpressionUUID->"32140195-1e69-44b7-9652-843e49b074a4"],
Cell[283203, 8229, 674, 22, 42, "Input",ExpressionUUID->"4377245d-bad9-434d-864a-e9361022a027",
 CellTags->{"Exercises", "Formatting Numbers"}],
Cell[283880, 8253, 620, 20, 42, "Input",ExpressionUUID->"d2ea5300-89b1-432c-aa7d-9b9ae1dc7489",
 CellTags->{"Exercises", "Formatting Numbers"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[284537, 8278, 369, 9, 56, "Item",ExpressionUUID->"07924fcf-201a-4316-9819-b430fe6d4ae9",
 CellTags->{"Exercises", "Formatting Numbers"}],
Cell[284909, 8289, 3612, 140, 199, "Output",ExpressionUUID->"7a6cc502-0b88-4bcf-8c62-f8274f465680",
 CellTags->{"Exercises", "Formatting Numbers"}]
}, Open  ]],
Cell[288536, 8432, 870, 20, 42, "Text",ExpressionUUID->"7774a9f9-3123-4e70-b629-abe1b61bd2d6"],
Cell[289409, 8454, 562, 15, 35, "Text",ExpressionUUID->"afe8a5ef-12d0-462c-82c3-bd55897199e2"],
Cell[289974, 8471, 1357, 35, 42, "Text",ExpressionUUID->"8b515b28-bfe8-4e3a-ab2e-911b16440c18"]
}, Closed]],
Cell[CellGroupData[{
Cell[291368, 8511, 244, 10, 55, "Subsection",ExpressionUUID->"9843cae5-6af4-441a-8a6d-f3f632f0c885",
 CellTags->{"Exercises", "Programming Style"}],
Cell[CellGroupData[{
Cell[291637, 8525, 377, 10, 35, "Item",ExpressionUUID->"cc40dac5-659f-4858-a394-192dfe2944c6",
 CellTags->{"Exercises", "Programming Style"}],
Cell[292017, 8537, 535, 18, 42, "Input",ExpressionUUID->"4377cf76-1c4a-4bba-8953-9247252d1e92",
 CellTags->{"Exercises", "Programming Style"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[292589, 8560, 753, 19, 77, "Item",ExpressionUUID->"51646c8d-c251-416a-a0a0-0e36d61e44a7",
 CellTags->{"Exercises", "Programming Style"}],
Cell[293345, 8581, 808, 24, 148, "Input",ExpressionUUID->"64ea58a0-ffc5-48ec-8975-20a8b8287111",
 CellTags->{"Exercises", "Programming Style"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[294190, 8610, 249, 5, 35, "Item",ExpressionUUID->"9b03966e-0e34-46c8-a63d-49c15e5482fd",
 CellTags->{"Exercises", "Programming Style"}],
Cell[294442, 8617, 199, 6, 42, "Input",ExpressionUUID->"eee84689-cc4a-4e34-8d60-4751f551ef74",
 CellTags->{"Exercises", "Programming Style"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[294678, 8628, 253, 5, 35, "Item",ExpressionUUID->"4aef71b4-45c9-4967-966a-a543f616889f",
 CellTags->{"Exercises", "Programming Style"}],
Cell[294934, 8635, 293, 10, 42, "Input",ExpressionUUID->"1cc478c2-77a0-4d0d-a0c7-ab3a36d5ed53",
 CellTags->{"Exercises", "Programming Style"}]
}, Open  ]],
Cell[295242, 8648, 662, 17, 56, "Item",ExpressionUUID->"ec7d54d7-f4fc-42e4-a3d5-8699d5ecb3d4",
 CellTags->{"Exercises", "Programming Style"}],
Cell[295907, 8667, 1616, 41, 42, "Text",ExpressionUUID->"a03bcb4c-5cf5-4790-91ea-223d7b49fce2"],
Cell[297526, 8710, 338, 10, 35, "Text",ExpressionUUID->"f078bae3-8344-4d17-a69b-27846b791eff"],
Cell[297867, 8722, 403, 11, 35, "Text",ExpressionUUID->"7c4758e4-76fe-4179-a7a1-d91768ad4efe"],
Cell[298273, 8735, 432, 12, 35, "Text",ExpressionUUID->"d8a25293-6ff9-440f-83af-0895e84aef2b"],
Cell[298708, 8749, 1746, 47, 42, "Text",ExpressionUUID->"b04609e9-7cf3-489e-a6a5-9745e717765d"],
Cell[300457, 8798, 247, 7, 35, "Item",ExpressionUUID->"7fcc5eb0-2739-400d-9d20-b66306a086a7",
 CellTags->{"Exercises", "Programming Style"}],
Cell[300707, 8807, 2400, 60, 42, "Text",ExpressionUUID->"8c6fca63-ddd4-4dba-8d5c-f040d6a78521"],
Cell[303110, 8869, 177, 3, 35, "Text",ExpressionUUID->"2476e86b-8bbb-4c5a-9aff-0154df26f228"],
Cell[303290, 8874, 881, 26, 146, "Input",ExpressionUUID->"385c20eb-7ba8-4faf-b354-7850699f3c09"],
Cell[304174, 8902, 422, 13, 41, "Input",ExpressionUUID->"7698bda7-f0d9-4a84-ae0c-ad2ed401b05a"],
Cell[304599, 8917, 2875, 78, 42, "Text",ExpressionUUID->"b934cdda-0e4a-440d-b127-5fbdcbb72f25"]
}, Closed]],
Cell[CellGroupData[{
Cell[307511, 9000, 259, 10, 55, "Subsection",ExpressionUUID->"68c02068-781f-4796-b5d0-32ad353b6224",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[CellGroupData[{
Cell[307795, 9014, 517, 12, 56, "Item",ExpressionUUID->"6109f7ee-3838-42e6-8192-e0fff37f3866",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[308315, 9028, 1325, 37, 211, "Input",ExpressionUUID->"5ce97029-cf27-4199-b454-61675ba58a19",
 CellTags->{"Exercises", "Debugging a Program"}]
}, Open  ]],
Cell[CellGroupData[{
Cell[309677, 9070, 447, 10, 56, "Item",ExpressionUUID->"f1230aa3-bbfb-4372-865d-1502465ac378",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[310127, 9082, 313, 12, 107, "Input",ExpressionUUID->"90fbb6c6-67ab-4e39-9355-67aec7937207",
 CellTags->{"Exercises", "Debugging a Program"}]
}, Open  ]],
Cell[310455, 9097, 493, 14, 35, "Item",ExpressionUUID->"9576c294-af8c-49a6-8d16-4d164f8fd83e",
 CellTags->{"Exercises", "Debugging a Program"}],
Cell[310951, 9113, 1968, 50, 42, "Text",ExpressionUUID->"9e931667-cbee-4574-82cf-04a50e67cee8"],
Cell[312922, 9165, 260, 6, 35, "Text",ExpressionUUID->"c824d4cb-bf6f-4057-9d7e-67f2319e87c1"],
Cell[313185, 9173, 196, 3, 35, "Text",ExpressionUUID->"13742a23-b113-4faa-81d8-a27b74eddac3"],
Cell[313384, 9178, 385, 9, 35, "Text",ExpressionUUID->"3aea0d39-dc4c-4dc6-a5ab-d06df5be2183"],
Cell[313772, 9189, 2713, 64, 42, "Text",ExpressionUUID->"505655ae-1c0a-4d46-96c5-60554ee5775b"],
Cell[316488, 9255, 77, 0, 136, "EndOfSlide",ExpressionUUID->"09c4ba5c-8569-41b8-a446-918ca3780f16"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)

